var DeepFramework =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 229);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * The main AWS namespace
 */
var AWS = { util: __webpack_require__(2) };

/**
 * @api private
 * @!macro [new] nobrowser
 *   @note This feature is not supported in the browser environment of the SDK.
 */
var _hidden = {}; _hidden.toString(); // hack to parse macro

module.exports = AWS;

AWS.util.update(AWS, {

  /**
   * @constant
   */
  VERSION: '2.41.0',

  /**
   * @api private
   */
  Signers: {},

  /**
   * @api private
   */
  Protocol: {
    Json: __webpack_require__(61),
    Query: __webpack_require__(104),
    Rest: __webpack_require__(45),
    RestJson: __webpack_require__(105),
    RestXml: __webpack_require__(106)
  },

  /**
   * @api private
   */
  XML: {
    Builder: __webpack_require__(216),
    Parser: null // conditionally set based on environment
  },

  /**
   * @api private
   */
  JSON: {
    Builder: __webpack_require__(59),
    Parser: __webpack_require__(60)
  },

  /**
   * @api private
   */
  Model: {
    Api: __webpack_require__(99),
    Operation: __webpack_require__(101),
    Shape: __webpack_require__(32),
    Paginator: __webpack_require__(102),
    ResourceWaiter: __webpack_require__(103)
  },

  util: __webpack_require__(2),

  /**
   * @api private
   */
  apiLoader: function() { throw new Error('No API loader set'); }
});

__webpack_require__(25);
__webpack_require__(190);

__webpack_require__(96);
__webpack_require__(97);
__webpack_require__(193);
__webpack_require__(194);
__webpack_require__(191);
__webpack_require__(192);

__webpack_require__(98);
__webpack_require__(107);
__webpack_require__(195);
__webpack_require__(201);
__webpack_require__(203);
__webpack_require__(202);
__webpack_require__(208);
__webpack_require__(197);

/**
 * @readonly
 * @return [AWS.SequentialExecutor] a collection of global event listeners that
 *   are attached to every sent request.
 * @see AWS.Request AWS.Request for a list of events to listen for
 * @example Logging the time taken to send a request
 *   AWS.events.on('send', function startSend(resp) {
 *     resp.startTime = new Date().getTime();
 *   }).on('complete', function calculateTime(resp) {
 *     var time = (new Date().getTime() - resp.startTime) / 1000;
 *     console.log('Request took ' + time + ' seconds');
 *   });
 *
 *   new AWS.S3().listBuckets(); // prints 'Request took 0.285 seconds'
 */
AWS.events = new AWS.SequentialExecutor();


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * Created by AlexanderC on 5/22/15.
 *
 * Bootstrap file loaded by npm as main
 */



var _Interface = __webpack_require__(67);

var _Runtime = __webpack_require__(275);

var _Region = __webpack_require__(119);

var _Service = __webpack_require__(66);

var _Policy = __webpack_require__(47);

var _Factory = __webpack_require__(267);

var _ObjectStorage = __webpack_require__(280);

var _UniversalRequire = __webpack_require__(282);

var _ObjectVector = __webpack_require__(281);

var _MethodsProxy = __webpack_require__(279);

var _Exception = __webpack_require__(11);

var _MethodsNotImplementedException = __webpack_require__(120);

var _InvalidArgumentException = __webpack_require__(27);

var _DatabaseOperationException = __webpack_require__(276);

var _ResourceNotFoundException = __webpack_require__(277);

var _Sandbox = __webpack_require__(122);

var _Helper = __webpack_require__(121);

module.exports = {
  IS_DEV_SERVER: global.__DEEP_DEV_SERVER || false,
  Exception: {
    Exception: _Exception.Exception,
    InvalidArgumentException: _InvalidArgumentException.InvalidArgumentException,
    MethodsNotImplementedException: _MethodsNotImplementedException.MethodsNotImplementedException,
    DatabaseOperationException: _DatabaseOperationException.DatabaseOperationException,
    ResourceNotFoundException: _ResourceNotFoundException.ResourceNotFoundException
  },
  HTTP: {
    Helper: _Helper.Helper
  },
  Runtime: {
    Sandbox: _Sandbox.Sandbox
  },
  OOP: {
    Interface: _Interface.Interface
  },
  Generic: {
    ObjectStorage: _ObjectStorage.ObjectStorage,
    ObjectVector: _ObjectVector.ObjectVector,
    MethodsProxy: _MethodsProxy.MethodsProxy,
    UniversalRequire: _UniversalRequire.UniversalRequire
  },
  AWS: {
    Region: _Region.Region,
    Service: _Service.Service,
    IAM: {
      Factory: _Factory.Factory,
      Policy: _Policy.Policy
    },
    Lambda: {
      Runtime: _Runtime.Runtime
    }
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* eslint guard-for-in:0 */
var AWS;

/**
 * A set of utility methods for use with the AWS SDK.
 *
 * @!attribute abort
 *   Return this value from an iterator function {each} or {arrayEach}
 *   to break out of the iteration.
 *   @example Breaking out of an iterator function
 *     AWS.util.each({a: 1, b: 2, c: 3}, function(key, value) {
 *       if (key == 'b') return AWS.util.abort;
 *     });
 *   @see each
 *   @see arrayEach
 * @api private
 */
var util = {
  engine: function engine() {
    if (util.isBrowser() && typeof navigator !== 'undefined') {
      return navigator.userAgent;
    } else {
      var engine = process.platform + '/' + process.version;
      if (__webpack_require__.i({"AWS_SERVICES":"lambda,cognitoidentity,cognitosync,sqs","NODE_ENV":"production"}).AWS_EXECUTION_ENV) {
        engine += ' exec-env/' + __webpack_require__.i({"AWS_SERVICES":"lambda,cognitoidentity,cognitosync,sqs","NODE_ENV":"production"}).AWS_EXECUTION_ENV;
      }
      return engine;
    }
  },

  userAgent: function userAgent() {
    var name = util.isBrowser() ? 'js' : 'nodejs';
    var agent = 'aws-sdk-' + name + '/' + __webpack_require__(0).VERSION;
    if (name === 'nodejs') agent += ' ' + util.engine();
    return agent;
  },

  isBrowser: function isBrowser() { return process && process.browser; },
  isNode: function isNode() { return !util.isBrowser(); },
  uriEscape: function uriEscape(string) {
    var output = encodeURIComponent(string);
    output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);

    // AWS percent-encodes some extra non-standard characters in a URI
    output = output.replace(/[*]/g, function(ch) {
      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();
    });

    return output;
  },

  uriEscapePath: function uriEscapePath(string) {
    var parts = [];
    util.arrayEach(string.split('/'), function (part) {
      parts.push(util.uriEscape(part));
    });
    return parts.join('/');
  },

  urlParse: function urlParse(url) {
    return util.url.parse(url);
  },

  urlFormat: function urlFormat(url) {
    return util.url.format(url);
  },

  queryStringParse: function queryStringParse(qs) {
    return util.querystring.parse(qs);
  },

  queryParamsToString: function queryParamsToString(params) {
    var items = [];
    var escape = util.uriEscape;
    var sortedKeys = Object.keys(params).sort();

    util.arrayEach(sortedKeys, function(name) {
      var value = params[name];
      var ename = escape(name);
      var result = ename + '=';
      if (Array.isArray(value)) {
        var vals = [];
        util.arrayEach(value, function(item) { vals.push(escape(item)); });
        result = ename + '=' + vals.sort().join('&' + ename + '=');
      } else if (value !== undefined && value !== null) {
        result = ename + '=' + escape(value);
      }
      items.push(result);
    });

    return items.join('&');
  },

  readFileSync: function readFileSync(path) {
    if (util.isBrowser()) return null;
    return __webpack_require__(94).readFileSync(path, 'utf-8');
  },

  base64: {
    encode: function encode64(string) {
      if (typeof string === 'number') {
        throw util.error(new Error('Cannot base64 encode number ' + string));
      }
      if (string === null || typeof string === 'undefined') {
        return string;
      }
      var buf = (typeof util.Buffer.from === 'function' && util.Buffer.from !== Uint8Array.from) ? util.Buffer.from(string) : new util.Buffer(string);
      return buf.toString('base64');
    },

    decode: function decode64(string) {
      if (typeof string === 'number') {
        throw util.error(new Error('Cannot base64 decode number ' + string));
      }
      if (string === null || typeof string === 'undefined') {
        return string;
      }
      return (typeof util.Buffer.from === 'function' && util.Buffer.from !== Uint8Array.from) ? util.Buffer.from(string, 'base64') : new util.Buffer(string, 'base64');
    }

  },

  buffer: {
    toStream: function toStream(buffer) {
      if (!util.Buffer.isBuffer(buffer)) buffer = new util.Buffer(buffer);

      var readable = new (util.stream.Readable)();
      var pos = 0;
      readable._read = function(size) {
        if (pos >= buffer.length) return readable.push(null);

        var end = pos + size;
        if (end > buffer.length) end = buffer.length;
        readable.push(buffer.slice(pos, end));
        pos = end;
      };

      return readable;
    },

    /**
     * Concatenates a list of Buffer objects.
     */
    concat: function(buffers) {
      var length = 0,
          offset = 0,
          buffer = null, i;

      for (i = 0; i < buffers.length; i++) {
        length += buffers[i].length;
      }

      buffer = new util.Buffer(length);

      for (i = 0; i < buffers.length; i++) {
        buffers[i].copy(buffer, offset);
        offset += buffers[i].length;
      }

      return buffer;
    }
  },

  string: {
    byteLength: function byteLength(string) {
      if (string === null || string === undefined) return 0;
      if (typeof string === 'string') string = new util.Buffer(string);

      if (typeof string.byteLength === 'number') {
        return string.byteLength;
      } else if (typeof string.length === 'number') {
        return string.length;
      } else if (typeof string.size === 'number') {
        return string.size;
      } else if (typeof string.path === 'string') {
        return __webpack_require__(94).lstatSync(string.path).size;
      } else {
        throw util.error(new Error('Cannot determine length of ' + string),
          { object: string });
      }
    },

    upperFirst: function upperFirst(string) {
      return string[0].toUpperCase() + string.substr(1);
    },

    lowerFirst: function lowerFirst(string) {
      return string[0].toLowerCase() + string.substr(1);
    }
  },

  ini: {
    parse: function string(ini) {
      var currentSection, map = {};
      util.arrayEach(ini.split(/\r?\n/), function(line) {
        line = line.split(/(^|\s)[;#]/)[0]; // remove comments
        var section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);
        if (section) {
          currentSection = section[1];
        } else if (currentSection) {
          var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
          if (item) {
            map[currentSection] = map[currentSection] || {};
            map[currentSection][item[1]] = item[2];
          }
        }
      });

      return map;
    }
  },

  fn: {
    noop: function() {},

    /**
     * Turn a synchronous function into as "async" function by making it call
     * a callback. The underlying function is called with all but the last argument,
     * which is treated as the callback. The callback is passed passed a first argument
     * of null on success to mimick standard node callbacks.
     */
    makeAsync: function makeAsync(fn, expectedArgs) {
      if (expectedArgs && expectedArgs <= fn.length) {
        return fn;
      }

      return function() {
        var args = Array.prototype.slice.call(arguments, 0);
        var callback = args.pop();
        var result = fn.apply(null, args);
        callback(result);
      };
    }
  },

  /**
   * Date and time utility functions.
   */
  date: {

    /**
     * @return [Date] the current JavaScript date object. Since all
     *   AWS services rely on this date object, you can override
     *   this function to provide a special time value to AWS service
     *   requests.
     */
    getDate: function getDate() {
      if (!AWS) AWS = __webpack_require__(0);
      if (AWS.config.systemClockOffset) { // use offset when non-zero
        return new Date(new Date().getTime() + AWS.config.systemClockOffset);
      } else {
        return new Date();
      }
    },

    /**
     * @return [String] the date in ISO-8601 format
     */
    iso8601: function iso8601(date) {
      if (date === undefined) { date = util.date.getDate(); }
      return date.toISOString().replace(/\.\d{3}Z$/, 'Z');
    },

    /**
     * @return [String] the date in RFC 822 format
     */
    rfc822: function rfc822(date) {
      if (date === undefined) { date = util.date.getDate(); }
      return date.toUTCString();
    },

    /**
     * @return [Integer] the UNIX timestamp value for the current time
     */
    unixTimestamp: function unixTimestamp(date) {
      if (date === undefined) { date = util.date.getDate(); }
      return date.getTime() / 1000;
    },

    /**
     * @param [String,number,Date] date
     * @return [Date]
     */
    from: function format(date) {
      if (typeof date === 'number') {
        return new Date(date * 1000); // unix timestamp
      } else {
        return new Date(date);
      }
    },

    /**
     * Given a Date or date-like value, this function formats the
     * date into a string of the requested value.
     * @param [String,number,Date] date
     * @param [String] formatter Valid formats are:
     #   * 'iso8601'
     #   * 'rfc822'
     #   * 'unixTimestamp'
     * @return [String]
     */
    format: function format(date, formatter) {
      if (!formatter) formatter = 'iso8601';
      return util.date[formatter](util.date.from(date));
    },

    parseTimestamp: function parseTimestamp(value) {
      if (typeof value === 'number') { // unix timestamp (number)
        return new Date(value * 1000);
      } else if (value.match(/^\d+$/)) { // unix timestamp
        return new Date(value * 1000);
      } else if (value.match(/^\d{4}/)) { // iso8601
        return new Date(value);
      } else if (value.match(/^\w{3},/)) { // rfc822
        return new Date(value);
      } else {
        throw util.error(
          new Error('unhandled timestamp format: ' + value),
          {code: 'TimestampParserError'});
      }
    }

  },

  crypto: {
    crc32Table: [
     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,
     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,
     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,
     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,
     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,
     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,
     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,
     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,
     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,
     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,
     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,
     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,
     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,
     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,
     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,
     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,
     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,
     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,
     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,
     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,
     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,
     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,
     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,
     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,
     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,
     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,
     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,
     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,
     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,
     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,
     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,
     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,
     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,
     0x2D02EF8D],

    crc32: function crc32(data) {
      var tbl = util.crypto.crc32Table;
      var crc = 0 ^ -1;

      if (typeof data === 'string') {
        data = new util.Buffer(data);
      }

      for (var i = 0; i < data.length; i++) {
        var code = data.readUInt8(i);
        crc = (crc >>> 8) ^ tbl[(crc ^ code) & 0xFF];
      }
      return (crc ^ -1) >>> 0;
    },

    hmac: function hmac(key, string, digest, fn) {
      if (!digest) digest = 'binary';
      if (digest === 'buffer') { digest = undefined; }
      if (!fn) fn = 'sha256';
      if (typeof string === 'string') string = new util.Buffer(string);
      return util.crypto.lib.createHmac(fn, key).update(string).digest(digest);
    },

    md5: function md5(data, digest, callback) {
      return util.crypto.hash('md5', data, digest, callback);
    },

    sha256: function sha256(data, digest, callback) {
      return util.crypto.hash('sha256', data, digest, callback);
    },

    hash: function(algorithm, data, digest, callback) {
      var hash = util.crypto.createHash(algorithm);
      if (!digest) { digest = 'binary'; }
      if (digest === 'buffer') { digest = undefined; }
      if (typeof data === 'string') data = new util.Buffer(data);
      var sliceFn = util.arraySliceFn(data);
      var isBuffer = util.Buffer.isBuffer(data);
      //Identifying objects with an ArrayBuffer as buffers
      if (util.isBrowser() && typeof ArrayBuffer !== 'undefined' && data && data.buffer instanceof ArrayBuffer) isBuffer = true;

      if (callback && typeof data === 'object' &&
          typeof data.on === 'function' && !isBuffer) {
        data.on('data', function(chunk) { hash.update(chunk); });
        data.on('error', function(err) { callback(err); });
        data.on('end', function() { callback(null, hash.digest(digest)); });
      } else if (callback && sliceFn && !isBuffer &&
                 typeof FileReader !== 'undefined') {
        // this might be a File/Blob
        var index = 0, size = 1024 * 512;
        var reader = new FileReader();
        reader.onerror = function() {
          callback(new Error('Failed to read data.'));
        };
        reader.onload = function() {
          var buf = new util.Buffer(new Uint8Array(reader.result));
          hash.update(buf);
          index += buf.length;
          reader._continueReading();
        };
        reader._continueReading = function() {
          if (index >= data.size) {
            callback(null, hash.digest(digest));
            return;
          }

          var back = index + size;
          if (back > data.size) back = data.size;
          reader.readAsArrayBuffer(sliceFn.call(data, index, back));
        };

        reader._continueReading();
      } else {
        if (util.isBrowser() && typeof data === 'object' && !isBuffer) {
          data = new util.Buffer(new Uint8Array(data));
        }
        var out = hash.update(data).digest(digest);
        if (callback) callback(null, out);
        return out;
      }
    },

    toHex: function toHex(data) {
      var out = [];
      for (var i = 0; i < data.length; i++) {
        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));
      }
      return out.join('');
    },

    createHash: function createHash(algorithm) {
      return util.crypto.lib.createHash(algorithm);
    }

  },

  /** @!ignore */

  /* Abort constant */
  abort: {},

  each: function each(object, iterFunction) {
    for (var key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        var ret = iterFunction.call(this, key, object[key]);
        if (ret === util.abort) break;
      }
    }
  },

  arrayEach: function arrayEach(array, iterFunction) {
    for (var idx in array) {
      if (Object.prototype.hasOwnProperty.call(array, idx)) {
        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
        if (ret === util.abort) break;
      }
    }
  },

  update: function update(obj1, obj2) {
    util.each(obj2, function iterator(key, item) {
      obj1[key] = item;
    });
    return obj1;
  },

  merge: function merge(obj1, obj2) {
    return util.update(util.copy(obj1), obj2);
  },

  copy: function copy(object) {
    if (object === null || object === undefined) return object;
    var dupe = {};
    // jshint forin:false
    for (var key in object) {
      dupe[key] = object[key];
    }
    return dupe;
  },

  isEmpty: function isEmpty(obj) {
    for (var prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        return false;
      }
    }
    return true;
  },

  arraySliceFn: function arraySliceFn(obj) {
    var fn = obj.slice || obj.webkitSlice || obj.mozSlice;
    return typeof fn === 'function' ? fn : null;
  },

  isType: function isType(obj, type) {
    // handle cross-"frame" objects
    if (typeof type === 'function') type = util.typeName(type);
    return Object.prototype.toString.call(obj) === '[object ' + type + ']';
  },

  typeName: function typeName(type) {
    if (Object.prototype.hasOwnProperty.call(type, 'name')) return type.name;
    var str = type.toString();
    var match = str.match(/^\s*function (.+)\(/);
    return match ? match[1] : str;
  },

  error: function error(err, options) {
    var originalError = null;
    if (typeof err.message === 'string' && err.message !== '') {
      if (typeof options === 'string' || (options && options.message)) {
        originalError = util.copy(err);
        originalError.message = err.message;
      }
    }
    err.message = err.message || null;

    if (typeof options === 'string') {
      err.message = options;
    } else if (typeof options === 'object' && options !== null) {
      util.update(err, options);
      if (options.message)
        err.message = options.message;
      if (options.code || options.name)
        err.code = options.code || options.name;
      if (options.stack)
        err.stack = options.stack;
    }

    if (typeof Object.defineProperty === 'function') {
      Object.defineProperty(err, 'name', {writable: true, enumerable: false});
      Object.defineProperty(err, 'message', {enumerable: true});
    }

    err.name = options && options.name || err.name || err.code || 'Error';
    err.time = new Date();

    if (originalError) err.originalError = originalError;

    return err;
  },

  /**
   * @api private
   */
  inherit: function inherit(klass, features) {
    var newObject = null;
    if (features === undefined) {
      features = klass;
      klass = Object;
      newObject = {};
    } else {
      var ctor = function ConstructorWrapper() {};
      ctor.prototype = klass.prototype;
      newObject = new ctor();
    }

    // constructor not supplied, create pass-through ctor
    if (features.constructor === Object) {
      features.constructor = function() {
        if (klass !== Object) {
          return klass.apply(this, arguments);
        }
      };
    }

    features.constructor.prototype = newObject;
    util.update(features.constructor.prototype, features);
    features.constructor.__super__ = klass;
    return features.constructor;
  },

  /**
   * @api private
   */
  mixin: function mixin() {
    var klass = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
      // jshint forin:false
      for (var prop in arguments[i].prototype) {
        var fn = arguments[i].prototype[prop];
        if (prop !== 'constructor') {
          klass.prototype[prop] = fn;
        }
      }
    }
    return klass;
  },

  /**
   * @api private
   */
  hideProperties: function hideProperties(obj, props) {
    if (typeof Object.defineProperty !== 'function') return;

    util.arrayEach(props, function (key) {
      Object.defineProperty(obj, key, {
        enumerable: false, writable: true, configurable: true });
    });
  },

  /**
   * @api private
   */
  property: function property(obj, name, value, enumerable, isValue) {
    var opts = {
      configurable: true,
      enumerable: enumerable !== undefined ? enumerable : true
    };
    if (typeof value === 'function' && !isValue) {
      opts.get = value;
    }
    else {
      opts.value = value; opts.writable = true;
    }

    Object.defineProperty(obj, name, opts);
  },

  /**
   * @api private
   */
  memoizedProperty: function memoizedProperty(obj, name, get, enumerable) {
    var cachedValue = null;

    // build enumerable attribute for each value with lazy accessor.
    util.property(obj, name, function() {
      if (cachedValue === null) {
        cachedValue = get();
      }
      return cachedValue;
    }, enumerable);
  },

  /**
   * TODO Remove in major version revision
   * This backfill populates response data without the
   * top-level payload name.
   *
   * @api private
   */
  hoistPayloadMember: function hoistPayloadMember(resp) {
    var req = resp.request;
    var operation = req.operation;
    var output = req.service.api.operations[operation].output;
    if (output.payload) {
      var payloadMember = output.members[output.payload];
      var responsePayload = resp.data[output.payload];
      if (payloadMember.type === 'structure') {
        util.each(responsePayload, function(key, value) {
          util.property(resp.data, key, value, false);
        });
      }
    }
  },

  /**
   * Compute SHA-256 checksums of streams
   *
   * @api private
   */
  computeSha256: function computeSha256(body, done) {
    if (util.isNode()) {
      var Stream = util.stream.Stream;
      var fs = __webpack_require__(94);
      if (body instanceof Stream) {
        if (typeof body.path === 'string') { // assume file object
          var settings = {};
          if (typeof body.start === 'number') {
            settings.start = body.start;
          }
          if (typeof body.end === 'number') {
            settings.end = body.end;
          }
          body = fs.createReadStream(body.path, settings);
        } else { // TODO support other stream types
          return done(new Error('Non-file stream objects are ' +
                                'not supported with SigV4'));
        }
      }
    }

    util.crypto.sha256(body, 'hex', function(err, sha) {
      if (err) done(err);
      else done(null, sha);
    });
  },

  /**
   * @api private
   */
  isClockSkewed: function isClockSkewed(serverTime) {
    if (serverTime) {
      util.property(AWS.config, 'isClockSkewed',
        Math.abs(new Date().getTime() - serverTime) >= 300000, false);
      return AWS.config.isClockSkewed;
    }
  },

  applyClockOffset: function applyClockOffset(serverTime) {
    if (serverTime)
      AWS.config.systemClockOffset = serverTime - new Date().getTime();
  },

  /**
   * @api private
   */
  extractRequestId: function extractRequestId(resp) {
    var requestId = resp.httpResponse.headers['x-amz-request-id'] ||
                     resp.httpResponse.headers['x-amzn-requestid'];

    if (!requestId && resp.data && resp.data.ResponseMetadata) {
      requestId = resp.data.ResponseMetadata.RequestId;
    }

    if (requestId) {
      resp.requestId = requestId;
    }

    if (resp.error) {
      resp.error.requestId = requestId;
    }
  },

  /**
   * @api private
   */
  addPromises: function addPromises(constructors, PromiseDependency) {
    if (PromiseDependency === undefined && AWS && AWS.config) {
      PromiseDependency = AWS.config.getPromisesDependency();
    }
    if (PromiseDependency === undefined && typeof Promise !== 'undefined') {
      PromiseDependency = Promise;
    }
    if (typeof PromiseDependency !== 'function') var deletePromises = true;
    if (!Array.isArray(constructors)) constructors = [constructors];

    for (var ind = 0; ind < constructors.length; ind++) {
      var constructor = constructors[ind];
      if (deletePromises) {
        if (constructor.deletePromisesFromClass) {
          constructor.deletePromisesFromClass();
        }
      } else if (constructor.addPromisesToClass) {
        constructor.addPromisesToClass(PromiseDependency);
      }
    }
  },

  /**
   * @api private
   */
  promisifyMethod: function promisifyMethod(methodName, PromiseDependency) {
    return function promise() {
      var self = this;
      return new PromiseDependency(function(resolve, reject) {
        self[methodName](function(err, data) {
          if (err) {
            reject(err);
          } else {
            resolve(data);
          }
        });
      });
    };
  },

  /**
   * @api private
   */
  isDualstackAvailable: function isDualstackAvailable(service) {
    if (!service) return false;
    var metadata = __webpack_require__(182);
    if (typeof service !== 'string') service = service.serviceIdentifier;
    if (typeof service !== 'string' || !metadata.hasOwnProperty(service)) return false;
    return !!metadata[service].dualstackAvailable;
  },

  /**
   * @api private
   */
  calculateRetryDelay: function calculateRetryDelay(retryCount, retryDelayOptions) {
    if (!retryDelayOptions) retryDelayOptions = {};
    var customBackoff = retryDelayOptions.customBackoff || null;
    if (typeof customBackoff === 'function') {
      return customBackoff(retryCount);
    }
    var base = typeof retryDelayOptions.base === 'number' ? retryDelayOptions.base : 100;
    var delay = Math.random() * (Math.pow(2, retryCount) * base);
    return delay;
  },

  /**
   * @api private
   */
  handleRequestWithRetries: function handleRequestWithRetries(httpRequest, options, cb) {
    if (!options) options = {};
    var http = AWS.HttpClient.getInstance();
    var httpOptions = options.httpOptions || {};
    var retryCount = 0;

    var errCallback = function(err) {
      var maxRetries = options.maxRetries || 0;
      if (err && err.code === 'TimeoutError') err.retryable = true;
      if (err && err.retryable && retryCount < maxRetries) {
        retryCount++;
        var delay = util.calculateRetryDelay(retryCount, options.retryDelayOptions);
        setTimeout(sendRequest, delay + (err.retryAfter || 0));
      } else {
        cb(err);
      }
    };

    var sendRequest = function() {
      var data = '';
      http.handleRequest(httpRequest, httpOptions, function(httpResponse) {
        httpResponse.on('data', function(chunk) { data += chunk.toString(); });
        httpResponse.on('end', function() {
          var statusCode = httpResponse.statusCode;
          if (statusCode < 300) {
            cb(null, data);
          } else {
            var retryAfter = parseInt(httpResponse.headers['retry-after'], 10) * 1000 || 0;
            var err = util.error(new Error(),
              { retryable: statusCode >= 500 || statusCode === 429 }
            );
            if (retryAfter && err.retryable) err.retryAfter = retryAfter;
            errCallback(err);
          }
        });
      }, errCallback);
    };

    process.nextTick(sendRequest);
  },

  /**
   * @api private
   */
  uuid: {
    v4: function uuidV4() {
      return __webpack_require__(515).v4();
    }
  }

};

module.exports = util;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 3 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Exception = undefined;

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when any exception occurs
 */
let Exception = exports.Exception = function (_Core$Exception$Excep) {
  _inherits(Exception, _Core$Exception$Excep);

  /**
   * @param {Array} args
   */
  function Exception() {
    var _ref;

    _classCallCheck(this, Exception);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = Exception.__proto__ || Object.getPrototypeOf(Exception)).call.apply(_ref, [this].concat(args)));
  }

  return Exception;
}(_deepCore2.default.Exception.Exception);

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, process) {// Load modules

var Crypto = __webpack_require__(19);
var Path = __webpack_require__(33);
var Util = __webpack_require__(16);
var Escape = __webpack_require__(376);


// Declare internals

var internals = {};


// Clone object or array

exports.clone = function (obj, seen) {

    if (typeof obj !== 'object' ||
        obj === null) {

        return obj;
    }

    seen = seen || { orig: [], copy: [] };

    var lookup = seen.orig.indexOf(obj);
    if (lookup !== -1) {
        return seen.copy[lookup];
    }

    var newObj;
    var cloneDeep = false;

    if (!Array.isArray(obj)) {
        if (Buffer.isBuffer(obj)) {
            newObj = new Buffer(obj);
        }
        else if (obj instanceof Date) {
            newObj = new Date(obj.getTime());
        }
        else if (obj instanceof RegExp) {
            newObj = new RegExp(obj);
        }
        else {
            var proto = Object.getPrototypeOf(obj);
            if (proto &&
                proto.isImmutable) {

                newObj = obj;
            }
            else {
                newObj = Object.create(proto);
                cloneDeep = true;
            }
        }
    }
    else {
        newObj = [];
        cloneDeep = true;
    }

    seen.orig.push(obj);
    seen.copy.push(newObj);

    if (cloneDeep) {
        var keys = Object.getOwnPropertyNames(obj);
        for (var i = 0, il = keys.length; i < il; ++i) {
            var key = keys[i];
            var descriptor = Object.getOwnPropertyDescriptor(obj, key);
            if (descriptor &&
                (descriptor.get ||
                 descriptor.set)) {

                Object.defineProperty(newObj, key, descriptor);
            }
            else {
                newObj[key] = exports.clone(obj[key], seen);
            }
        }
    }

    return newObj;
};


// Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied
/*eslint-disable */
exports.merge = function (target, source, isNullOverride /* = true */, isMergeArrays /* = true */) {
/*eslint-enable */
    exports.assert(target && typeof target === 'object', 'Invalid target value: must be an object');
    exports.assert(source === null || source === undefined || typeof source === 'object', 'Invalid source value: must be null, undefined, or an object');

    if (!source) {
        return target;
    }

    if (Array.isArray(source)) {
        exports.assert(Array.isArray(target), 'Cannot merge array onto an object');
        if (isMergeArrays === false) {                                                  // isMergeArrays defaults to true
            target.length = 0;                                                          // Must not change target assignment
        }

        for (var i = 0, il = source.length; i < il; ++i) {
            target.push(exports.clone(source[i]));
        }

        return target;
    }

    var keys = Object.keys(source);
    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var value = source[key];
        if (value &&
            typeof value === 'object') {

            if (!target[key] ||
                typeof target[key] !== 'object' ||
                (Array.isArray(target[key]) ^ Array.isArray(value)) ||
                value instanceof Date ||
                Buffer.isBuffer(value) ||
                value instanceof RegExp) {

                target[key] = exports.clone(value);
            }
            else {
                exports.merge(target[key], value, isNullOverride, isMergeArrays);
            }
        }
        else {
            if (value !== null &&
                value !== undefined) {                              // Explicit to preserve empty strings

                target[key] = value;
            }
            else if (isNullOverride !== false) {                    // Defaults to true
                target[key] = value;
            }
        }
    }

    return target;
};


// Apply options to a copy of the defaults

exports.applyToDefaults = function (defaults, options, isNullOverride) {

    exports.assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');
    exports.assert(!options || options === true || typeof options === 'object', 'Invalid options value: must be true, falsy or an object');

    if (!options) {                                                 // If no options, return null
        return null;
    }

    var copy = exports.clone(defaults);

    if (options === true) {                                         // If options is set to true, use defaults
        return copy;
    }

    return exports.merge(copy, options, isNullOverride === true, false);
};


// Clone an object except for the listed keys which are shallow copied

exports.cloneWithShallow = function (source, keys) {

    if (!source ||
        typeof source !== 'object') {

        return source;
    }

    var storage = internals.store(source, keys);    // Move shallow copy items to storage
    var copy = exports.clone(source);               // Deep copy the rest
    internals.restore(copy, source, storage);       // Shallow copy the stored items and restore
    return copy;
};


internals.store = function (source, keys) {

    var storage = {};
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        var value = exports.reach(source, key);
        if (value !== undefined) {
            storage[key] = value;
            internals.reachSet(source, key, undefined);
        }
    }

    return storage;
};


internals.restore = function (copy, source, storage) {

    var keys = Object.keys(storage);
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        internals.reachSet(copy, key, storage[key]);
        internals.reachSet(source, key, storage[key]);
    }
};


internals.reachSet = function (obj, key, value) {

    var path = key.split('.');
    var ref = obj;
    for (var i = 0, il = path.length; i < il; ++i) {
        var segment = path[i];
        if (i + 1 === il) {
            ref[segment] = value;
        }

        ref = ref[segment];
    }
};


// Apply options to defaults except for the listed keys which are shallow copied from option without merging

exports.applyToDefaultsWithShallow = function (defaults, options, keys) {

    exports.assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');
    exports.assert(!options || options === true || typeof options === 'object', 'Invalid options value: must be true, falsy or an object');
    exports.assert(keys && Array.isArray(keys), 'Invalid keys');

    if (!options) {                                                 // If no options, return null
        return null;
    }

    var copy = exports.cloneWithShallow(defaults, keys);

    if (options === true) {                                         // If options is set to true, use defaults
        return copy;
    }

    var storage = internals.store(options, keys);   // Move shallow copy items to storage
    exports.merge(copy, options, false, false);     // Deep copy the rest
    internals.restore(copy, options, storage);      // Shallow copy the stored items and restore
    return copy;
};


// Deep object or array comparison

exports.deepEqual = function (obj, ref, options, seen) {

    options = options || { prototype: true };

    var type = typeof obj;

    if (type !== typeof ref) {
        return false;
    }

    if (type !== 'object' ||
        obj === null ||
        ref === null) {

        if (obj === ref) {                                                      // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
            return obj !== 0 || 1 / obj === 1 / ref;        // -0 / +0
        }

        return obj !== obj && ref !== ref;                  // NaN
    }

    seen = seen || [];
    if (seen.indexOf(obj) !== -1) {
        return true;                            // If previous comparison failed, it would have stopped execution
    }

    seen.push(obj);

    if (Array.isArray(obj)) {
        if (!Array.isArray(ref)) {
            return false;
        }

        if (!options.part && obj.length !== ref.length) {
            return false;
        }

        for (var i = 0, il = obj.length; i < il; ++i) {
            if (options.part) {
                var found = false;
                for (var r = 0, rl = ref.length; r < rl; ++r) {
                    if (exports.deepEqual(obj[i], ref[r], options, seen)) {
                        found = true;
                        break;
                    }
                }

                return found;
            }

            if (!exports.deepEqual(obj[i], ref[i], options, seen)) {
                return false;
            }
        }

        return true;
    }

    if (Buffer.isBuffer(obj)) {
        if (!Buffer.isBuffer(ref)) {
            return false;
        }

        if (obj.length !== ref.length) {
            return false;
        }

        for (var j = 0, jl = obj.length; j < jl; ++j) {
            if (obj[j] !== ref[j]) {
                return false;
            }
        }

        return true;
    }

    if (obj instanceof Date) {
        return (ref instanceof Date && obj.getTime() === ref.getTime());
    }

    if (obj instanceof RegExp) {
        return (ref instanceof RegExp && obj.toString() === ref.toString());
    }

    if (options.prototype) {
        if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
            return false;
        }
    }

    var keys = Object.getOwnPropertyNames(obj);

    if (!options.part && keys.length !== Object.getOwnPropertyNames(ref).length) {
        return false;
    }

    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var descriptor = Object.getOwnPropertyDescriptor(obj, key);
        if (descriptor.get) {
            if (!exports.deepEqual(descriptor, Object.getOwnPropertyDescriptor(ref, key), options, seen)) {
                return false;
            }
        }
        else if (!exports.deepEqual(obj[key], ref[key], options, seen)) {
            return false;
        }
    }

    return true;
};


// Remove duplicate items from array

exports.unique = function (array, key) {

    var index = {};
    var result = [];

    for (var i = 0, il = array.length; i < il; ++i) {
        var id = (key ? array[i][key] : array[i]);
        if (index[id] !== true) {

            result.push(array[i]);
            index[id] = true;
        }
    }

    return result;
};


// Convert array into object

exports.mapToObject = function (array, key) {

    if (!array) {
        return null;
    }

    var obj = {};
    for (var i = 0, il = array.length; i < il; ++i) {
        if (key) {
            if (array[i][key]) {
                obj[array[i][key]] = true;
            }
        }
        else {
            obj[array[i]] = true;
        }
    }

    return obj;
};


// Find the common unique items in two arrays

exports.intersect = function (array1, array2, justFirst) {

    if (!array1 || !array2) {
        return [];
    }

    var common = [];
    var hash = (Array.isArray(array1) ? exports.mapToObject(array1) : array1);
    var found = {};
    for (var i = 0, il = array2.length; i < il; ++i) {
        if (hash[array2[i]] && !found[array2[i]]) {
            if (justFirst) {
                return array2[i];
            }

            common.push(array2[i]);
            found[array2[i]] = true;
        }
    }

    return (justFirst ? null : common);
};


// Test if the reference contains the values

exports.contain = function (ref, values, options) {

    /*
        string -> string(s)
        array -> item(s)
        object -> key(s)
        object -> object (key:value)
    */

    var valuePairs = null;
    if (typeof ref === 'object' &&
        typeof values === 'object' &&
        !Array.isArray(ref) &&
        !Array.isArray(values)) {

        valuePairs = values;
        values = Object.keys(values);
    }
    else {
        values = [].concat(values);
    }

    options = options || {};            // deep, once, only, part

    exports.assert(arguments.length >= 2, 'Insufficient arguments');
    exports.assert(typeof ref === 'string' || typeof ref === 'object', 'Reference must be string or an object');
    exports.assert(values.length, 'Values array cannot be empty');

    var compare, compareFlags;
    if (options.deep) {
        compare = exports.deepEqual;

        var hasOnly = options.hasOwnProperty('only'), hasPart = options.hasOwnProperty('part');

        compareFlags = {
            prototype: hasOnly ? options.only : hasPart ? !options.part : false,
            part: hasOnly ? !options.only : hasPart ? options.part : true
        };
    }
    else {
        compare = function (a, b) {

            return a === b;
        };
    }

    var misses = false;
    var matches = new Array(values.length);
    for (var i = 0, il = matches.length; i < il; ++i) {
        matches[i] = 0;
    }

    if (typeof ref === 'string') {
        var pattern = '(';
        for (i = 0, il = values.length; i < il; ++i) {
            var value = values[i];
            exports.assert(typeof value === 'string', 'Cannot compare string reference to non-string value');
            pattern += (i ? '|' : '') + exports.escapeRegex(value);
        }

        var regex = new RegExp(pattern + ')', 'g');
        var leftovers = ref.replace(regex, function ($0, $1) {

            var index = values.indexOf($1);
            ++matches[index];
            return '';          // Remove from string
        });

        misses = !!leftovers;
    }
    else if (Array.isArray(ref)) {
        for (i = 0, il = ref.length; i < il; ++i) {
            for (var j = 0, jl = values.length, matched = false; j < jl && matched === false; ++j) {
                matched = compare(values[j], ref[i], compareFlags) && j;
            }

            if (matched !== false) {
                ++matches[matched];
            }
            else {
                misses = true;
            }
        }
    }
    else {
        var keys = Object.keys(ref);
        for (i = 0, il = keys.length; i < il; ++i) {
            var key = keys[i];
            var pos = values.indexOf(key);
            if (pos !== -1) {
                if (valuePairs &&
                    !compare(valuePairs[key], ref[key], compareFlags)) {

                    return false;
                }

                ++matches[pos];
            }
            else {
                misses = true;
            }
        }
    }

    var result = false;
    for (i = 0, il = matches.length; i < il; ++i) {
        result = result || !!matches[i];
        if ((options.once && matches[i] > 1) ||
            (!options.part && !matches[i])) {

            return false;
        }
    }

    if (options.only &&
        misses) {

        return false;
    }

    return result;
};


// Flatten array

exports.flatten = function (array, target) {

    var result = target || [];

    for (var i = 0, il = array.length; i < il; ++i) {
        if (Array.isArray(array[i])) {
            exports.flatten(array[i], result);
        }
        else {
            result.push(array[i]);
        }
    }

    return result;
};


// Convert an object key chain string ('a.b.c') to reference (object[a][b][c])

exports.reach = function (obj, chain, options) {

    if (chain === false ||
        chain === null ||
        typeof chain === 'undefined') {

        return obj;
    }

    options = options || {};
    if (typeof options === 'string') {
        options = { separator: options };
    }

    var path = chain.split(options.separator || '.');
    var ref = obj;
    for (var i = 0, il = path.length; i < il; ++i) {
        var key = path[i];
        if (key[0] === '-' && Array.isArray(ref)) {
            key = key.slice(1, key.length);
            key = ref.length - key;
        }

        if (!ref ||
            !ref.hasOwnProperty(key) ||
            (typeof ref !== 'object' && options.functions === false)) {         // Only object and function can have properties

            exports.assert(!options.strict || i + 1 === il, 'Missing segment', key, 'in reach path ', chain);
            exports.assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
            ref = options.default;
            break;
        }

        ref = ref[key];
    }

    return ref;
};


exports.reachTemplate = function (obj, template, options) {

    return template.replace(/{([^}]+)}/g, function ($0, chain) {

        var value = exports.reach(obj, chain, options);
        return (value === undefined || value === null ? '' : value);
    });
};


exports.formatStack = function (stack) {

    var trace = [];
    for (var i = 0, il = stack.length; i < il; ++i) {
        var item = stack[i];
        trace.push([item.getFileName(), item.getLineNumber(), item.getColumnNumber(), item.getFunctionName(), item.isConstructor()]);
    }

    return trace;
};


exports.formatTrace = function (trace) {

    var display = [];

    for (var i = 0, il = trace.length; i < il; ++i) {
        var row = trace[i];
        display.push((row[4] ? 'new ' : '') + row[3] + ' (' + row[0] + ':' + row[1] + ':' + row[2] + ')');
    }

    return display;
};


exports.callStack = function (slice) {

    // http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi

    var v8 = Error.prepareStackTrace;
    Error.prepareStackTrace = function (err, stack) {

        return stack;
    };

    var capture = {};
    Error.captureStackTrace(capture, arguments.callee);     /*eslint no-caller:0 */
    var stack = capture.stack;

    Error.prepareStackTrace = v8;

    var trace = exports.formatStack(stack);

    if (slice) {
        return trace.slice(slice);
    }

    return trace;
};


exports.displayStack = function (slice) {

    var trace = exports.callStack(slice === undefined ? 1 : slice + 1);

    return exports.formatTrace(trace);
};


exports.abortThrow = false;


exports.abort = function (message, hideStack) {

    if ("production" === 'test' || exports.abortThrow === true) {
        throw new Error(message || 'Unknown error');
    }

    var stack = '';
    if (!hideStack) {
        stack = exports.displayStack(1).join('\n\t');
    }
    console.log('ABORT: ' + message + '\n\t' + stack);
    process.exit(1);
};


exports.assert = function (condition /*, msg1, msg2, msg3 */) {

    if (condition) {
        return;
    }

    if (arguments.length === 2 && arguments[1] instanceof Error) {
        throw arguments[1];
    }

    var msgs = [];
    for (var i = 1, il = arguments.length; i < il; ++i) {
        if (arguments[i] !== '') {
            msgs.push(arguments[i]);            // Avoids Array.slice arguments leak, allowing for V8 optimizations
        }
    }

    msgs = msgs.map(function (msg) {

        return typeof msg === 'string' ? msg : msg instanceof Error ? msg.message : exports.stringify(msg);
    });
    throw new Error(msgs.join(' ') || 'Unknown error');
};


exports.Timer = function () {

    this.ts = 0;
    this.reset();
};


exports.Timer.prototype.reset = function () {

    this.ts = Date.now();
};


exports.Timer.prototype.elapsed = function () {

    return Date.now() - this.ts;
};


exports.Bench = function () {

    this.ts = 0;
    this.reset();
};


exports.Bench.prototype.reset = function () {

    this.ts = exports.Bench.now();
};


exports.Bench.prototype.elapsed = function () {

    return exports.Bench.now() - this.ts;
};


exports.Bench.now = function () {

    var ts = process.hrtime();
    return (ts[0] * 1e3) + (ts[1] / 1e6);
};


// Escape string for Regex construction

exports.escapeRegex = function (string) {

    // Escape ^$.*+-?=!:|\/()[]{},
    return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
};


// Base64url (RFC 4648) encode

exports.base64urlEncode = function (value, encoding) {

    var buf = (Buffer.isBuffer(value) ? value : new Buffer(value, encoding || 'binary'));
    return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
};


// Base64url (RFC 4648) decode

exports.base64urlDecode = function (value, encoding) {

    if (value &&
        !/^[\w\-]*$/.test(value)) {

        return new Error('Invalid character');
    }

    try {
        var buf = new Buffer(value, 'base64');
        return (encoding === 'buffer' ? buf : buf.toString(encoding || 'binary'));
    }
    catch (err) {
        return err;
    }
};


// Escape attribute value for use in HTTP header

exports.escapeHeaderAttribute = function (attribute) {

    // Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \, "

    exports.assert(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');

    return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"');                             // Escape quotes and slash
};


exports.escapeHtml = function (string) {

    return Escape.escapeHtml(string);
};


exports.escapeJavaScript = function (string) {

    return Escape.escapeJavaScript(string);
};


exports.nextTick = function (callback) {

    return function () {

        var args = arguments;
        process.nextTick(function () {

            callback.apply(null, args);
        });
    };
};


exports.once = function (method) {

    if (method._hoekOnce) {
        return method;
    }

    var once = false;
    var wrapped = function () {

        if (!once) {
            once = true;
            method.apply(null, arguments);
        }
    };

    wrapped._hoekOnce = true;

    return wrapped;
};


exports.isAbsolutePath = function (path, platform) {

    if (!path) {
        return false;
    }

    if (Path.isAbsolute) {                      // node >= 0.11
        return Path.isAbsolute(path);
    }

    platform = platform || process.platform;

    // Unix

    if (platform !== 'win32') {
        return path[0] === '/';
    }

    // Windows

    return !!/^(?:[a-zA-Z]:[\\\/])|(?:[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/])/.test(path);        // C:\ or \\something\something
};


exports.isInteger = function (value) {

    return (typeof value === 'number' &&
            parseFloat(value) === parseInt(value, 10) &&
            !isNaN(value));
};


exports.ignore = function () { };


exports.inherits = Util.inherits;


exports.format = Util.format;


exports.transform = function (source, transform, options) {

    exports.assert(source === null || source === undefined || typeof source === 'object' || Array.isArray(source), 'Invalid source object: must be null, undefined, an object, or an array');

    if (Array.isArray(source)) {
        var results = [];
        for (var i = 0, il = source.length; i < il; ++i) {
            results.push(exports.transform(source[i], transform, options));
        }
        return results;
    }

    var result = {};
    var keys = Object.keys(transform);

    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var path = key.split('.');
        var sourcePath = transform[key];

        exports.assert(typeof sourcePath === 'string', 'All mappings must be "." delineated strings');

        var segment;
        var res = result;

        while (path.length > 1) {
            segment = path.shift();
            if (!res[segment]) {
                res[segment] = {};
            }
            res = res[segment];
        }
        segment = path.shift();
        res[segment] = exports.reach(source, sourcePath, options);
    }

    return result;
};


exports.uniqueFilename = function (path, extension) {

    if (extension) {
        extension = extension[0] !== '.' ? '.' + extension : extension;
    }
    else {
        extension = '';
    }

    path = Path.resolve(path);
    var name = [Date.now(), process.pid, Crypto.randomBytes(8).toString('hex')].join('-') + extension;
    return Path.join(path, name);
};


exports.stringify = function () {

    try {
        return JSON.stringify.apply(null, arguments);
    }
    catch (err) {
        return '[Cannot display object: ' + err.message + ']';
    }
};


exports.shallow = function (source) {

    var target = {};
    var keys = Object.keys(source);
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        target[key] = source[key];
    }

    return target;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer, __webpack_require__(6)))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssign = __webpack_require__(401),
    baseCreate = __webpack_require__(402);

/**
 * Creates an object that inherits from the `prototype` object. If a
 * `properties` object is given, its own enumerable string keyed properties
 * are assigned to the created object.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Object
 * @param {Object} prototype The object to inherit from.
 * @param {Object} [properties] The properties to assign to the object.
 * @returns {Object} Returns the new object.
 * @example
 *
 * function Shape() {
 *   this.x = 0;
 *   this.y = 0;
 * }
 *
 * function Circle() {
 *   Shape.call(this);
 * }
 *
 * Circle.prototype = _.create(Shape.prototype, {
 *   'constructor': Circle
 * });
 *
 * var circle = new Circle;
 * circle instanceof Circle;
 * // => true
 *
 * circle instanceof Shape;
 * // => true
 */
function create(prototype, properties) {
  var result = baseCreate(prototype);
  return properties == null ? result : baseAssign(result, properties);
}

module.exports = create;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Exception = undefined;

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when any exception occurs
 */
let Exception = exports.Exception = function (_Core$Exception$Excep) {
  _inherits(Exception, _Core$Exception$Excep);

  /**
   * @param {Array} args
   */
  function Exception() {
    var _ref;

    _classCallCheck(this, Exception);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = Exception.__proto__ || Object.getPrototypeOf(Exception)).call.apply(_ref, [this].concat(args)));
  }

  return Exception;
}(_deepCore2.default.Exception.Exception);

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(243)
var ieee754 = __webpack_require__(377)
var isArray = __webpack_require__(379)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Load modules

var Path = __webpack_require__(33);
var Hoek = __webpack_require__(5);
var Ref = __webpack_require__(39);
var Errors = __webpack_require__(12);
var Alternatives = null;                // Delay-loaded to prevent circular dependencies
var Cast = null;


// Declare internals

var internals = {};


internals.defaults = {
    abortEarly: true,
    convert: true,
    allowUnknown: false,
    skipFunctions: false,
    stripUnknown: false,
    language: {},
    presence: 'optional'
    // context: null
};


module.exports = internals.Any = function () {

    this.isJoi = true;
    this._type = 'any';
    this._settings = null;
    this._valids = new internals.Set();
    this._invalids = new internals.Set();
    this._tests = [];
    this._refs = [];
    this._flags = { /*
        presence: 'optional',                   // optional, required, forbidden, ignore
        allowOnly: false,
        allowUnknown: undefined,
        default: undefined,
        forbidden: false,
        encoding: undefined,
        insensitive: false,
        trim: false,
        case: undefined                         // upper, lower
    */ };

    this._description = null;
    this._unit = null;
    this._notes = [];
    this._tags = [];
    this._examples = [];
    this._meta = [];

    this._inner = {};                           // Hash of arrays of immutable objects
};


internals.Any.prototype.isImmutable = true;     // Prevents Hoek from deep cloning schema objects


internals.Any.prototype.clone = function () {

    var obj = Object.create(Object.getPrototypeOf(this));

    obj.isJoi = true;
    obj._type = this._type;
    obj._settings = internals.concatSettings(this._settings);
    obj._valids = Hoek.clone(this._valids);
    obj._invalids = Hoek.clone(this._invalids);
    obj._tests = this._tests.slice();
    obj._refs = this._refs.slice();
    obj._flags = Hoek.clone(this._flags);

    obj._description = this._description;
    obj._unit = this._unit;
    obj._notes = this._notes.slice();
    obj._tags = this._tags.slice();
    obj._examples = this._examples.slice();
    obj._meta = this._meta.slice();

    obj._inner = {};
    var inners = Object.keys(this._inner);
    for (var i = 0, il = inners.length; i < il; ++i) {
        var key = inners[i];
        obj._inner[key] = this._inner[key] ? this._inner[key].slice() : null;
    }

    return obj;
};


internals.Any.prototype.concat = function (schema) {

    Hoek.assert(schema && schema.isJoi, 'Invalid schema object');
    Hoek.assert(schema._type === 'any' || schema._type === this._type, 'Cannot merge with another type:', schema._type);

    var obj = this.clone();

    obj._settings = obj._settings ? internals.concatSettings(obj._settings, schema._settings) : schema._settings;
    obj._valids.merge(schema._valids, schema._invalids);
    obj._invalids.merge(schema._invalids, schema._valids);
    obj._tests = obj._tests.concat(schema._tests);
    obj._refs = obj._refs.concat(schema._refs);
    Hoek.merge(obj._flags, schema._flags);

    obj._description = schema._description || obj._description;
    obj._unit = schema._unit || obj._unit;
    obj._notes = obj._notes.concat(schema._notes);
    obj._tags = obj._tags.concat(schema._tags);
    obj._examples = obj._examples.concat(schema._examples);
    obj._meta = obj._meta.concat(schema._meta);

    var inners = Object.keys(schema._inner);
    for (var i = 0, il = inners.length; i < il; ++i) {
        var key = inners[i];
        if (schema._inner[key]) {
            obj._inner[key] = (obj._inner[key] ? obj._inner[key].concat(schema._inner[key]) : schema._inner[key].slice());
        }
    }

    return obj;
};


internals.Any.prototype._test = function (name, arg, func) {

    Hoek.assert(!this._flags.allowOnly, 'Cannot define rules when valid values specified');

    var obj = this.clone();
    obj._tests.push({ func: func, name: name, arg: arg });
    return obj;
};


internals.Any.prototype.options = function (options) {

    Hoek.assert(!options.context, 'Cannot override context');

    var obj = this.clone();
    obj._settings = internals.concatSettings(obj._settings, options);
    return obj;
};


internals.Any.prototype.strict = function () {

    var obj = this.clone();
    obj._settings = obj._settings || {};
    obj._settings.convert = false;
    return obj;
};


internals.Any.prototype.raw = function (isRaw) {

    var obj = this.clone();
    obj._settings = obj._settings || {};
    obj._settings.raw = isRaw === undefined ? true : isRaw;
    return obj;
};


internals.Any.prototype._allow = function () {

    var values = Hoek.flatten(Array.prototype.slice.call(arguments));
    for (var i = 0, il = values.length; i < il; ++i) {
        var value = values[i];
        this._invalids.remove(value);
        this._valids.add(value, this._refs);
    }
};


internals.Any.prototype.allow = function () {

    var obj = this.clone();
    obj._allow.apply(obj, arguments);
    return obj;
};


internals.Any.prototype.valid = internals.Any.prototype.equal = function () {

    Hoek.assert(!this._tests.length, 'Cannot set valid values when rules specified');

    var obj = this.allow.apply(this, arguments);
    obj._flags.allowOnly = true;
    return obj;
};


internals.Any.prototype.invalid = internals.Any.prototype.not = function (value) {

    var obj = this.clone();
    var values = Hoek.flatten(Array.prototype.slice.call(arguments));
    for (var i = 0, il = values.length; i < il; ++i) {
        var value = values[i];
        obj._valids.remove(value);
        obj._invalids.add(value, this._refs);
    }

    return obj;
};


internals.Any.prototype.required = internals.Any.prototype.exist = function () {

    var obj = this.clone();
    obj._flags.presence = 'required';
    return obj;
};


internals.Any.prototype.optional = function () {

    var obj = this.clone();
    obj._flags.presence = 'optional';
    return obj;
};


internals.Any.prototype.forbidden = function () {

    var obj = this.clone();
    obj._flags.presence = 'forbidden';
    return obj;
};


internals.Any.prototype.applyFunctionToChildren = function (children, fn, args, root) {

    children = [].concat(children);

    if (children.length !== 1 || children[0] !== '') {
        root = root ? (root + '.') : '';

        var extraChildren = (children[0] === '' ? children.slice(1) : children).map(function (child) {

            return root + child;
        });

        throw new Error('unknown key(s) ' + extraChildren.join(', '));
    }

    return this[fn].apply(this, args);
};


internals.Any.prototype.default = function (value) {

    var obj = this.clone();
    obj._flags.default = value;
    Ref.push(obj._refs, value);
    return obj;
};


internals.Any.prototype.when = function (ref, options) {

    Hoek.assert(options && typeof options === 'object', 'Invalid options');
    Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');

    Cast = Cast || __webpack_require__(38);
    var then = options.then ? this.concat(Cast.schema(options.then)) : this;
    var otherwise = options.otherwise ? this.concat(Cast.schema(options.otherwise)) : this;

    Alternatives = Alternatives || __webpack_require__(79);
    var obj = Alternatives.when(ref, { is: options.is, then: then, otherwise: otherwise });
    obj._flags.presence = 'ignore';
    return obj;
};


internals.Any.prototype.description = function (desc) {

    Hoek.assert(desc && typeof desc === 'string', 'Description must be a non-empty string');

    var obj = this.clone();
    obj._description = desc;
    return obj;
};


internals.Any.prototype.notes = function (notes) {

    Hoek.assert(notes && (typeof notes === 'string' || Array.isArray(notes)), 'Notes must be a non-empty string or array');

    var obj = this.clone();
    obj._notes = obj._notes.concat(notes);
    return obj;
};


internals.Any.prototype.tags = function (tags) {

    Hoek.assert(tags && (typeof tags === 'string' || Array.isArray(tags)), 'Tags must be a non-empty string or array');

    var obj = this.clone();
    obj._tags = obj._tags.concat(tags);
    return obj;
};

internals.Any.prototype.meta = function (meta) {

    Hoek.assert(meta !== undefined, 'Meta cannot be undefined');

    var obj = this.clone();
    obj._meta = obj._meta.concat(meta);
    return obj;
};


internals.Any.prototype.example = function (value) {

    Hoek.assert(arguments.length, 'Missing example');
    var result = this._validate(value, null, internals.defaults);
    Hoek.assert(!result.errors, 'Bad example:', result.errors && Errors.process(result.errors, value));

    var obj = this.clone();
    obj._examples = obj._examples.concat(value);
    return obj;
};


internals.Any.prototype.unit = function (name) {

    Hoek.assert(name && typeof name === 'string', 'Unit name must be a non-empty string');

    var obj = this.clone();
    obj._unit = name;
    return obj;
};


internals.Any.prototype._validate = function (value, state, options, reference) {

    var self = this;
    var originalValue = value;

    // Setup state and settings

    state = state || { key: '', path: '', parent: null, reference: reference };

    if (this._settings) {
        options = internals.concatSettings(options, this._settings);
    }

    var errors = [];
    var finish = function () {

        return {
            value: (value !== undefined) ?
                (options.raw ? originalValue : value) :
                (Ref.isRef(self._flags.default) ? self._flags.default(state.parent, options) : self._flags.default),
            errors: errors.length ? errors : null
        };
    };

    // Check presence requirements

    var presence = this._flags.presence || options.presence;
    if (presence === 'optional') {
        if (value === undefined) {
            return finish();
        }
    }
    else if (presence === 'required' &&
            value === undefined) {

        errors.push(Errors.create('any.required', null, state, options));
        return finish();
    }
    else if (presence === 'forbidden') {
        if (value === undefined) {
            return finish();
        }

        errors.push(Errors.create('any.unknown', null, state, options));
        return finish();
    }

    // Check allowed and denied values using the original value

    if (this._valids.has(value, state, options, this._flags.insensitive)) {
        return finish();
    }

    if (this._invalids.has(value, state, options, this._flags.insensitive)) {
        errors.push(Errors.create(value === '' ? 'any.empty' : 'any.invalid', null, state, options));
        if (options.abortEarly ||
            value === undefined) {          // No reason to keep validating missing value

            return finish();
        }
    }

    // Convert value and validate type

    if (this._base) {
        var base = this._base.call(this, value, state, options);
        if (base.errors) {
            value = base.value;
            errors = errors.concat(base.errors);
            return finish();                            // Base error always aborts early
        }

        if (base.value !== value) {
            value = base.value;

            // Check allowed and denied values using the converted value

            if (this._valids.has(value, state, options, this._flags.insensitive)) {
                return finish();
            }

            if (this._invalids.has(value, state, options, this._flags.insensitive)) {
                errors.push(Errors.create('any.invalid', null, state, options));
                if (options.abortEarly) {
                    return finish();
                }
            }
        }
    }

    // Required values did not match

    if (this._flags.allowOnly) {
        errors.push(Errors.create('any.allowOnly', { valids: this._valids.toString(false) }, state, options));
        if (options.abortEarly) {
            return finish();
        }
    }

    // Helper.validate tests

    for (var i = 0, il = this._tests.length; i < il; ++i) {
        var test = this._tests[i];
        var err = test.func.call(this, value, state, options);
        if (err) {
            errors.push(err);
            if (options.abortEarly) {
                return finish();
            }
        }
    }

    return finish();
};


internals.Any.prototype._validateWithOptions = function (value, options, callback) {

    var settings = internals.concatSettings(internals.defaults, options);
    var result = this._validate(value, null, settings);
    var errors = Errors.process(result.errors, value);

    if (callback) {
        return callback(errors, result.value);
    }

    return { error: errors, value: result.value };
};


internals.Any.prototype.validate = function (value, callback) {

    var result = this._validate(value, null, internals.defaults);
    var errors = Errors.process(result.errors, value);

    if (callback) {
        return callback(errors, result.value);
    }

    return { error: errors, value: result.value };
};


internals.Any.prototype.describe = function () {

    var description = {
        type: this._type
    };

    if (Object.keys(this._flags).length) {
        description.flags = this._flags;
    }

    if (this._description) {
        description.description = this._description;
    }

    if (this._notes.length) {
        description.notes = this._notes;
    }

    if (this._tags.length) {
        description.tags = this._tags;
    }

    if (this._meta.length) {
        description.meta = this._meta;
    }

    if (this._examples.length) {
        description.examples = this._examples;
    }

    if (this._unit) {
        description.unit = this._unit;
    }

    var valids = this._valids.values();
    if (valids.length) {
        description.valids = valids;
    }

    var invalids = this._invalids.values();
    if (invalids.length) {
        description.invalids = invalids;
    }

    description.rules = [];

    for (var i = 0, il = this._tests.length; i < il; ++i) {
        var validator = this._tests[i];
        var item = { name: validator.name };
        if (validator.arg !== void 0) {
            item.arg = validator.arg;
        }
        description.rules.push(item);
    }

    if (!description.rules.length) {
        delete description.rules;
    }

    var label = Hoek.reach(this._settings, 'language.label');
    if (label) {
        description.label = label;
    }

    return description;
};

internals.Any.prototype.label = function (name) {

    Hoek.assert(name && typeof name === 'string', 'Label name must be a non-empty string');

    var obj = this.clone();
    var options = { language: { label: name } };

    // If language.label is set, it should override this label
    obj._settings = internals.concatSettings(options, obj._settings);
    return obj;
};


// Set

internals.Set = function () {

    this._set = [];
};


internals.Set.prototype.add = function (value, refs) {

    Hoek.assert(value === null || value === undefined || value instanceof Date || Buffer.isBuffer(value) || Ref.isRef(value) || (typeof value !== 'function' && typeof value !== 'object'), 'Value cannot be an object or function');

    if (typeof value !== 'function' &&
        this.has(value, null, null, false)) {

        return;
    }

    Ref.push(refs, value);
    this._set.push(value);
};


internals.Set.prototype.merge = function (add, remove) {

    for (var i = 0, il = add._set.length; i < il; ++i) {
        this.add(add._set[i]);
    }

    for (i = 0, il = remove._set.length; i < il; ++i) {
        this.remove(remove._set[i]);
    }
};


internals.Set.prototype.remove = function (value) {

    this._set = this._set.filter(function (item) {

        return value !== item;
    });
};


internals.Set.prototype.has = function (value, state, options, insensitive) {

    for (var i = 0, il = this._set.length; i < il; ++i) {
        var item = this._set[i];

        if (Ref.isRef(item)) {
            item = item(state.reference || state.parent, options);
        }

        if (typeof value !== typeof item) {
            continue;
        }

        if (value === item ||
            (value instanceof Date && item instanceof Date && value.getTime() === item.getTime()) ||
            (insensitive && typeof value === 'string' && value.toLowerCase() === item.toLowerCase()) ||
            (Buffer.isBuffer(value) && Buffer.isBuffer(item) && value.length === item.length && value.toString('binary') === item.toString('binary'))) {

            return true;
        }
    }

    return false;
};


internals.Set.prototype.values = function () {

    return this._set.slice();
};


internals.Set.prototype.toString = function (includeUndefined) {

    var list = '';
    for (var i = 0, il = this._set.length; i < il; ++i) {
        var item = this._set[i];
        if (item !== undefined || includeUndefined) {
            list += (list ? ', ' : '') + internals.stringify(item);
        }
    }

    return list;
};


internals.stringify = function (value) {

    if (value === undefined) {
        return 'undefined';
    }

    if (value === null) {
        return 'null';
    }

    if (typeof value === 'string') {
        return value;
    }

    return value.toString();
};


internals.concatSettings = function (target, source) {

    // Used to avoid cloning context

    if (!target &&
        !source) {

        return null;
    }

    var obj = {};

    if (target) {
        var tKeys = Object.keys(target);
        for (var i = 0, il = tKeys.length; i < il; ++i) {
            var key = tKeys[i];
            obj[key] = target[key];
        }
    }

    if (source) {
        var sKeys = Object.keys(source);
        for (var j = 0, jl = sKeys.length; j < jl; ++j) {
            var key = sKeys[j];
            if (key !== 'language' ||
                !obj.hasOwnProperty(key)) {

                obj[key] = source[key];
            }
            else {
                obj[key] = Hoek.applyToDefaults(obj[key], source[key]);
            }
        }
    }

    return obj;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/25/15.
 */



/* eslint no-proto:0 */

/**
 * Fixes babel@6 issue: https://phabricator.babeljs.io/T3083
 * @param {*} errorClass
 * @returns {ExtendableClass}
 * @constructor
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function Extendable(errorClass) {

  /**
   * @constructor
   */
  function ExtendableClass() {
    errorClass.apply(this, arguments);
  }

  ExtendableClass.prototype = Object.create(errorClass.prototype);
  Object.setPrototypeOf ? Object.setPrototypeOf(ExtendableClass, errorClass) : ExtendableClass.__proto__ = errorClass;

  return ExtendableClass;
}

/**
 * Base exception
 */

let Exception = exports.Exception = function (_Extendable) {
  _inherits(Exception, _Extendable);

  _createClass(Exception, null, [{
    key: 'CODE_KEY',

    /**
     * @returns {String}
     */
    get: function get() {
      return '_deep_error_code_';
    }

    /**
     * @returns {Number}
     */

  }, {
    key: 'DEFAULT_CODE',
    get: function get() {
      return 400;
    }

    /**
     * @param {String} message
     * @param {Number} code
     */

  }]);

  function Exception(message) {
    let code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Exception.DEFAULT_CODE;

    _classCallCheck(this, Exception);

    var _this = _possibleConstructorReturn(this, (Exception.__proto__ || Object.getPrototypeOf(Exception)).call(this));

    if (Error.hasOwnProperty('captureStackTrace')) {
      Error.captureStackTrace(_this, _this.constructor);
    } else {
      Object.defineProperty(_this, 'stack', {
        value: new Error().stack
      });
    }

    Object.defineProperty(_this, 'message', {
      value: message
    });

    // It's used to map error codes to API Gateway http status codes
    _this._code = code;
    return _this;
  }

  /**
   * @returns {String}
   */


  _createClass(Exception, [{
    key: 'name',
    get: function get() {
      return this.constructor.name;
    }

    /**
     * @param {Number} code
     */

  }, {
    key: 'code',
    set: function set(code) {
      this._code = code;
    }

    /**
     * @returns {Number}
     */
    ,
    get: function get() {
      return this._code;
    }
  }]);

  return Exception;
}(Extendable(Error));

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Hoek = __webpack_require__(5);
var Language = __webpack_require__(386);


// Declare internals

var internals = {};


internals.Err = function (type, context, state, options) {

    this.type = type;
    this.context = context || {};
    this.context.key = state.key;
    this.path = state.path;
    this.options = options;
};


internals.Err.prototype.toString = function () {

    var self = this;

    var localized = this.options.language;
    this.context.key = localized.label || this.context.key || localized.root || Language.errors.root;

    var format = Hoek.reach(localized, this.type) || Hoek.reach(Language.errors, this.type);
    var hasKey = /\{\{\!?key\}\}/.test(format);
    format = (hasKey ? format : '{{!key}} ' + format);
    var message = format.replace(/\{\{(\!?)([^}]+)\}\}/g, function ($0, isSecure, name) {

        var value = Hoek.reach(self.context, name);
        var normalized = Array.isArray(value) ? value.join(', ') : value.toString();
        return (isSecure ? Hoek.escapeHtml(normalized) : normalized);
    });

    return message;
};


exports.create = function (type, context, state, options) {

    return new internals.Err(type, context, state, options);
};


exports.process = function (errors, object) {

    if (!errors || !errors.length) {
        return null;
    }

    var details = [];
    for (var i = 0, il = errors.length; i < il; ++i) {
        var item = errors[i];
        details.push({
            message: item.toString(),
            path: internals.getPath(item),
            type: item.type,
            context: item.context
        });
    }

    // Construct error

    var message = '';
    details.forEach(function (error) {

        message += (message ? '. ' : '') + error.message;
    });

    var error = new Error(message);
    error.name = 'ValidationError';
    error.details = details;
    error._object = object;
    error.annotate = internals.annotate;
    return error;
};


internals.getPath = function (item) {

    var recursePath = function (it) {

        var reachedItem = Hoek.reach(it, 'context.reason.0');
        if (reachedItem && reachedItem.context) {
            return recursePath(reachedItem);
        }

        return it.path;
    };

    return recursePath(item) || item.context.key;
};


internals.annotate = function () {

    var obj = Hoek.clone(this._object || {});

    var lookup = {};
    var el = this.details.length;
    for (var e = el - 1; e >= 0; --e) {        // Reverse order to process deepest child first
        var pos = el - e;
        var error = this.details[e];
        var path = error.path.split('.');
        var ref = obj;
        for (var i = 0, il = path.length; i < il && ref; ++i) {
            var seg = path[i];
            if (i + 1 < il) {
                ref = ref[seg];
            }
            else {
                var value = ref[seg];
                if (value !== undefined) {
                    delete ref[seg];
                    var label = seg + '_$key$_' + pos + '_$end$_';
                    ref[label] = value;
                    lookup[error.path] = label;
                }
                else if (lookup[error.path]) {
                    var replacement = lookup[error.path];
                    var appended = replacement.replace('_$end$_', ', ' + pos + '_$end$_');
                    ref[appended] = ref[replacement];
                    lookup[error.path] = appended;
                    delete ref[replacement];
                }
                else {
                    ref['_$miss$_' + seg + '|' + pos + '_$end$_'] = '__missing__';
                }
            }
        }
    }

    var annotated = JSON.stringify(obj, null, 2);

    annotated = annotated.replace(/_\$key\$_([, \d]+)_\$end\$_\"/g, function ($0, $1) {

        return '" \u001b[31m[' + $1 + ']\u001b[0m';
    });

    var message = annotated.replace(/\"_\$miss\$_([^\|]+)\|(\d+)_\$end\$_\"\: \"__missing__\"/g, function ($0, $1, $2) {

        return '\u001b[41m"' + $1 + '"\u001b[0m\u001b[31m [' + $2 + ']: -- missing --\u001b[0m';
    });

    message += '\n\u001b[31m';

    for (e = 0; e < el; ++e) {
        message += '\n[' + (e + 1) + '] ' + this.details[e].message;
    }

    message += '\u001b[0m';

    return message;
};



/***/ }),
/* 13 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),
/* 14 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

const AWS = __webpack_require__(186);

AWS.Lambda = __webpack_require__(188);
AWS.CognitoIdentity = __webpack_require__(95);
AWS.CognitoSync = __webpack_require__(187);
AWS.SQS = __webpack_require__(189);

module.exports = AWS;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = __webpack_require__.i({"AWS_SERVICES":"lambda,cognitoidentity,cognitosync,sqs","NODE_ENV":"production"}).NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(225);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(378);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(6)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(149);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/22/15.
 *
 * Bootstrap file loaded by npm as main
 */



var _Kernel = __webpack_require__(303);

module.exports = _Kernel.Kernel;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"randombytes\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
exports.createHash = exports.Hash = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"create-hash\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
exports.createHmac = exports.Hmac = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"create-hmac\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"browserify-sign/algos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))))
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"pbkdf2\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"browserify-cipher\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
;[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key]
})

var dh = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"diffie-hellman\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
;[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key]
})

var sign = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"browserify-sign\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
;[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key]
})

exports.createECDH = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"create-ecdh\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))

var publicEncrypt = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"public-encrypt\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))

;[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key]
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
})


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 1/20/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogDriverException = undefined;

var _Exception2 = __webpack_require__(319);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Base exception
 */
let LogDriverException = exports.LogDriverException = function (_Exception) {
  _inherits(LogDriverException, _Exception);

  /**
   * @param {Array} args
   */
  function LogDriverException() {
    var _ref;

    _classCallCheck(this, LogDriverException);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = LogDriverException.__proto__ || Object.getPrototypeOf(LogDriverException)).call.apply(_ref, [this].concat(args)));
  }

  return LogDriverException;
}(_Exception2.Exception);

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(385);

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(412),
    getValue = __webpack_require__(435);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.apiLoader = function(svc, version) {
  if (!AWS.apiLoader.services.hasOwnProperty(svc)) {
    throw new Error('InvalidService: Failed to load api for ' + svc);
  }
  return AWS.apiLoader.services[svc][version];
};

/**
 * This member of AWS.apiLoader is private, but changing it will necessitate a
 * change to ../scripts/services-table-generator.ts
 */
AWS.apiLoader.services = {};

module.exports = AWS.apiLoader;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var util = __webpack_require__(2);

// browser specific modules
util.crypto.lib = __webpack_require__(247);
util.Buffer = __webpack_require__(9).Buffer;
util.url = __webpack_require__(63);
util.querystring = __webpack_require__(62);

var AWS = __webpack_require__(0);

// Use default API loader function
__webpack_require__(23);

// Load the DOMParser XML parser
AWS.XML.Parser = __webpack_require__(215);

// Load the XHR HttpClient
__webpack_require__(196);

if (typeof process === 'undefined') {
  process = {
    browser: true
  };
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var Api = __webpack_require__(99);
var regionConfig = __webpack_require__(199);
var inherit = AWS.util.inherit;
var clientCount = 0;

/**
 * The service class representing an AWS service.
 *
 * @abstract
 *
 * @!attribute apiVersions
 *   @return [Array<String>] the list of API versions supported by this service.
 *   @readonly
 */
AWS.Service = inherit({
  /**
   * Create a new service object with a configuration object
   *
   * @param config [map] a map of configuration options
   */
  constructor: function Service(config) {
    if (!this.loadServiceClass) {
      throw AWS.util.error(new Error(),
        'Service must be constructed with `new\' operator');
    }
    var ServiceClass = this.loadServiceClass(config || {});
    if (ServiceClass) {
      var originalConfig = AWS.util.copy(config);
      var svc = new ServiceClass(config);
      Object.defineProperty(svc, '_originalConfig', {
        get: function() { return originalConfig; },
        enumerable: false,
        configurable: true
      });
      svc._clientId = ++clientCount;
      return svc;
    }
    this.initialize(config);
  },

  /**
   * @api private
   */
  initialize: function initialize(config) {
    var svcConfig = AWS.config[this.serviceIdentifier];

    this.config = new AWS.Config(AWS.config);
    if (svcConfig) this.config.update(svcConfig, true);
    if (config) this.config.update(config, true);

    this.validateService();
    if (!this.config.endpoint) regionConfig(this);

    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);
    this.setEndpoint(this.config.endpoint);
  },

  /**
   * @api private
   */
  validateService: function validateService() {
  },

  /**
   * @api private
   */
  loadServiceClass: function loadServiceClass(serviceConfig) {
    var config = serviceConfig;
    if (!AWS.util.isEmpty(this.api)) {
      return null;
    } else if (config.apiConfig) {
      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);
    } else if (!this.constructor.services) {
      return null;
    } else {
      config = new AWS.Config(AWS.config);
      config.update(serviceConfig, true);
      var version = config.apiVersions[this.constructor.serviceIdentifier];
      version = version || config.apiVersion;
      return this.getLatestServiceClass(version);
    }
  },

  /**
   * @api private
   */
  getLatestServiceClass: function getLatestServiceClass(version) {
    version = this.getLatestServiceVersion(version);
    if (this.constructor.services[version] === null) {
      AWS.Service.defineServiceApi(this.constructor, version);
    }

    return this.constructor.services[version];
  },

  /**
   * @api private
   */
  getLatestServiceVersion: function getLatestServiceVersion(version) {
    if (!this.constructor.services || this.constructor.services.length === 0) {
      throw new Error('No services defined on ' +
                      this.constructor.serviceIdentifier);
    }

    if (!version) {
      version = 'latest';
    } else if (AWS.util.isType(version, Date)) {
      version = AWS.util.date.iso8601(version).split('T')[0];
    }

    if (Object.hasOwnProperty(this.constructor.services, version)) {
      return version;
    }

    var keys = Object.keys(this.constructor.services).sort();
    var selectedVersion = null;
    for (var i = keys.length - 1; i >= 0; i--) {
      // versions that end in "*" are not available on disk and can be
      // skipped, so do not choose these as selectedVersions
      if (keys[i][keys[i].length - 1] !== '*') {
        selectedVersion = keys[i];
      }
      if (keys[i].substr(0, 10) <= version) {
        return selectedVersion;
      }
    }

    throw new Error('Could not find ' + this.constructor.serviceIdentifier +
                    ' API to satisfy version constraint `' + version + '\'');
  },

  /**
   * @api private
   */
  api: {},

  /**
   * @api private
   */
  defaultRetryCount: 3,

  /**
   * @api private
   */
  customizeRequests: function customizeRequests(callback) {
    if (!callback) {
      this.customRequestHandler = null;
    } else if (typeof callback === 'function') {
      this.customRequestHandler = callback;
    } else {
      throw new Error('Invalid callback type \'' + typeof callback + '\' provided in customizeRequests');
    }
  },

  /**
   * Calls an operation on a service with the given input parameters.
   *
   * @param operation [String] the name of the operation to call on the service.
   * @param params [map] a map of input options for the operation
   * @callback callback function(err, data)
   *   If a callback is supplied, it is called when a response is returned
   *   from the service.
   *   @param err [Error] the error object returned from the request.
   *     Set to `null` if the request is successful.
   *   @param data [Object] the de-serialized data returned from
   *     the request. Set to `null` if a request error occurs.
   */
  makeRequest: function makeRequest(operation, params, callback) {
    if (typeof params === 'function') {
      callback = params;
      params = null;
    }

    params = params || {};
    if (this.config.params) { // copy only toplevel bound params
      var rules = this.api.operations[operation];
      if (rules) {
        params = AWS.util.copy(params);
        AWS.util.each(this.config.params, function(key, value) {
          if (rules.input.members[key]) {
            if (params[key] === undefined || params[key] === null) {
              params[key] = value;
            }
          }
        });
      }
    }

    var request = new AWS.Request(this, operation, params);
    this.addAllRequestListeners(request);

    if (callback) request.send(callback);
    return request;
  },

  /**
   * Calls an operation on a service with the given input parameters, without
   * any authentication data. This method is useful for "public" API operations.
   *
   * @param operation [String] the name of the operation to call on the service.
   * @param params [map] a map of input options for the operation
   * @callback callback function(err, data)
   *   If a callback is supplied, it is called when a response is returned
   *   from the service.
   *   @param err [Error] the error object returned from the request.
   *     Set to `null` if the request is successful.
   *   @param data [Object] the de-serialized data returned from
   *     the request. Set to `null` if a request error occurs.
   */
  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {
    if (typeof params === 'function') {
      callback = params;
      params = {};
    }

    var request = this.makeRequest(operation, params).toUnauthenticated();
    return callback ? request.send(callback) : request;
  },

  /**
   * Waits for a given state
   *
   * @param state [String] the state on the service to wait for
   * @param params [map] a map of parameters to pass with each request
   * @option params $waiter [map] a map of configuration options for the waiter
   * @option params $waiter.delay [Number] The number of seconds to wait between
   *                                       requests
   * @option params $waiter.maxAttempts [Number] The maximum number of requests
   *                                             to send while waiting
   * @callback callback function(err, data)
   *   If a callback is supplied, it is called when a response is returned
   *   from the service.
   *   @param err [Error] the error object returned from the request.
   *     Set to `null` if the request is successful.
   *   @param data [Object] the de-serialized data returned from
   *     the request. Set to `null` if a request error occurs.
   */
  waitFor: function waitFor(state, params, callback) {
    var waiter = new AWS.ResourceWaiter(this, state);
    return waiter.wait(params, callback);
  },

  /**
   * @api private
   */
  addAllRequestListeners: function addAllRequestListeners(request) {
    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(),
                AWS.EventListeners.CorePost];
    for (var i = 0; i < list.length; i++) {
      if (list[i]) request.addListeners(list[i]);
    }

    // disable parameter validation
    if (!this.config.paramValidation) {
      request.removeListener('validate',
        AWS.EventListeners.Core.VALIDATE_PARAMETERS);
    }

    if (this.config.logger) { // add logging events
      request.addListeners(AWS.EventListeners.Logger);
    }

    this.setupRequestListeners(request);
    // call prototype's customRequestHandler
    if (typeof this.constructor.prototype.customRequestHandler === 'function') {
      this.constructor.prototype.customRequestHandler(request);
    }
    // call instance's customRequestHandler
    if (Object.prototype.hasOwnProperty.call(this, 'customRequestHandler') && typeof this.customRequestHandler === 'function') {
      this.customRequestHandler(request);
    }
  },

  /**
   * Override this method to setup any custom request listeners for each
   * new request to the service.
   *
   * @abstract
   */
  setupRequestListeners: function setupRequestListeners() {
  },

  /**
   * Gets the signer class for a given request
   * @api private
   */
  getSignerClass: function getSignerClass(request) {
    var version;
    // get operation authtype if present
    var operation = request ? request.service.api.operations[request.operation] : null;
    var authtype = operation ? operation.authtype : '';
    if (this.config.signatureVersion) {
      version = this.config.signatureVersion;
    } else if (authtype === 'v4' || authtype === 'v4-unsigned-body') {
      version = 'v4';
    } else {
      version = this.api.signatureVersion;
    }
    return AWS.Signers.RequestSigner.getVersion(version);
  },

  /**
   * @api private
   */
  serviceInterface: function serviceInterface() {
    switch (this.api.protocol) {
      case 'ec2': return AWS.EventListeners.Query;
      case 'query': return AWS.EventListeners.Query;
      case 'json': return AWS.EventListeners.Json;
      case 'rest-json': return AWS.EventListeners.RestJson;
      case 'rest-xml': return AWS.EventListeners.RestXml;
    }
    if (this.api.protocol) {
      throw new Error('Invalid service `protocol\' ' +
        this.api.protocol + ' in API config');
    }
  },

  /**
   * @api private
   */
  successfulResponse: function successfulResponse(resp) {
    return resp.httpResponse.statusCode < 300;
  },

  /**
   * How many times a failed request should be retried before giving up.
   * the defaultRetryCount can be overriden by service classes.
   *
   * @api private
   */
  numRetries: function numRetries() {
    if (this.config.maxRetries !== undefined) {
      return this.config.maxRetries;
    } else {
      return this.defaultRetryCount;
    }
  },

  /**
   * @api private
   */
  retryDelays: function retryDelays(retryCount) {
    return AWS.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions);
  },

  /**
   * @api private
   */
  retryableError: function retryableError(error) {
    if (this.networkingError(error)) return true;
    if (this.expiredCredentialsError(error)) return true;
    if (this.throttledError(error)) return true;
    if (error.statusCode >= 500) return true;
    return false;
  },

  /**
   * @api private
   */
  networkingError: function networkingError(error) {
    return error.code === 'NetworkingError';
  },

  /**
   * @api private
   */
  expiredCredentialsError: function expiredCredentialsError(error) {
    // TODO : this only handles *one* of the expired credential codes
    return (error.code === 'ExpiredTokenException');
  },

  /**
   * @api private
   */
  clockSkewError: function clockSkewError(error) {
    switch (error.code) {
      case 'RequestTimeTooSkewed':
      case 'RequestExpired':
      case 'InvalidSignatureException':
      case 'SignatureDoesNotMatch':
      case 'AuthFailure':
      case 'RequestInTheFuture':
        return true;
      default: return false;
    }
  },

  /**
   * @api private
   */
  throttledError: function throttledError(error) {
    // this logic varies between services
    switch (error.code) {
      case 'ProvisionedThroughputExceededException':
      case 'Throttling':
      case 'ThrottlingException':
      case 'RequestLimitExceeded':
      case 'RequestThrottled':
        return true;
      default:
        return false;
    }
  },

  /**
   * @api private
   */
  endpointFromTemplate: function endpointFromTemplate(endpoint) {
    if (typeof endpoint !== 'string') return endpoint;

    var e = endpoint;
    e = e.replace(/\{service\}/g, this.api.endpointPrefix);
    e = e.replace(/\{region\}/g, this.config.region);
    e = e.replace(/\{scheme\}/g, this.config.sslEnabled ? 'https' : 'http');
    return e;
  },

  /**
   * @api private
   */
  setEndpoint: function setEndpoint(endpoint) {
    this.endpoint = new AWS.Endpoint(endpoint, this.config);
  },

  /**
   * @api private
   */
  paginationConfig: function paginationConfig(operation, throwException) {
    var paginator = this.api.operations[operation].paginator;
    if (!paginator) {
      if (throwException) {
        var e = new Error();
        throw AWS.util.error(e, 'No pagination configuration for ' + operation);
      }
      return null;
    }

    return paginator;
  }
});

AWS.util.update(AWS.Service, {

  /**
   * Adds one method for each operation described in the api configuration
   *
   * @api private
   */
  defineMethods: function defineMethods(svc) {
    AWS.util.each(svc.prototype.api.operations, function iterator(method) {
      if (svc.prototype[method]) return;
      var operation = svc.prototype.api.operations[method];
      if (operation.authtype === 'none') {
        svc.prototype[method] = function (params, callback) {
          return this.makeUnauthenticatedRequest(method, params, callback);
        };
      } else {
        svc.prototype[method] = function (params, callback) {
          return this.makeRequest(method, params, callback);
        };
      }
    });
  },

  /**
   * Defines a new Service class using a service identifier and list of versions
   * including an optional set of features (functions) to apply to the class
   * prototype.
   *
   * @param serviceIdentifier [String] the identifier for the service
   * @param versions [Array<String>] a list of versions that work with this
   *   service
   * @param features [Object] an object to attach to the prototype
   * @return [Class<Service>] the service class defined by this function.
   */
  defineService: function defineService(serviceIdentifier, versions, features) {
    AWS.Service._serviceMap[serviceIdentifier] = true;
    if (!Array.isArray(versions)) {
      features = versions;
      versions = [];
    }

    var svc = inherit(AWS.Service, features || {});

    if (typeof serviceIdentifier === 'string') {
      AWS.Service.addVersions(svc, versions);

      var identifier = svc.serviceIdentifier || serviceIdentifier;
      svc.serviceIdentifier = identifier;
    } else { // defineService called with an API
      svc.prototype.api = serviceIdentifier;
      AWS.Service.defineMethods(svc);
    }

    return svc;
  },

  /**
   * @api private
   */
  addVersions: function addVersions(svc, versions) {
    if (!Array.isArray(versions)) versions = [versions];

    svc.services = svc.services || {};
    for (var i = 0; i < versions.length; i++) {
      if (svc.services[versions[i]] === undefined) {
        svc.services[versions[i]] = null;
      }
    }

    svc.apiVersions = Object.keys(svc.services).sort();
  },

  /**
   * @api private
   */
  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {
    var svc = inherit(superclass, {
      serviceIdentifier: superclass.serviceIdentifier
    });

    function setApi(api) {
      if (api.isApi) {
        svc.prototype.api = api;
      } else {
        svc.prototype.api = new Api(api);
      }
    }

    if (typeof version === 'string') {
      if (apiConfig) {
        setApi(apiConfig);
      } else {
        try {
          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));
        } catch (err) {
          throw AWS.util.error(err, {
            message: 'Could not find API configuration ' +
              superclass.serviceIdentifier + '-' + version
          });
        }
      }
      if (!Object.prototype.hasOwnProperty.call(superclass.services, version)) {
        superclass.apiVersions = superclass.apiVersions.concat(version).sort();
      }
      superclass.services[version] = svc;
    } else {
      setApi(version);
    }

    AWS.Service.defineMethods(svc);
    return svc;
  },

  /**
   * @api private
   */
  hasService: function(identifier) {
    return Object.prototype.hasOwnProperty.call(AWS.Service._serviceMap, identifier);
  },

  /**
   * @api private
   */
  _serviceMap: {}
});

module.exports = AWS.Service;


/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/25/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidArgumentException = undefined;

var _Exception2 = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when invalid argument provided
 */
let InvalidArgumentException = exports.InvalidArgumentException = function (_Exception) {
  _inherits(InvalidArgumentException, _Exception);

  /**
   * @param {*} argument
   * @param {String} meantType
   */
  function InvalidArgumentException(argument, meantType) {
    _classCallCheck(this, InvalidArgumentException);

    let argumentType = typeof argument;

    return _possibleConstructorReturn(this, (InvalidArgumentException.__proto__ || Object.getPrototypeOf(InvalidArgumentException)).call(this, `Invalid argument ${argument} of type ${argumentType} provided (meant ${meantType}).`, 400));
  }

  return InvalidArgumentException;
}(_Exception2.Exception);

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 3/7/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _Exception = __webpack_require__(36);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let AbstractDriver = exports.AbstractDriver = function (_Core$OOP$Interface) {
  _inherits(AbstractDriver, _Core$OOP$Interface);

  function AbstractDriver() {
    _classCallCheck(this, AbstractDriver);

    var _this = _possibleConstructorReturn(this, (AbstractDriver.__proto__ || Object.getPrototypeOf(AbstractDriver)).call(this, ['_load']));

    _this._onLoaded = () => {};
    _this._onFail = () => {};
    return _this;
  }

  /**
   * @param {AbstractDriver|*} mainDriver
   * @returns {AbstractDriver|FsDriver|HttpDriver|KernelDriver|ComplexDriver|*}
   */


  _createClass(AbstractDriver, [{
    key: 'inherit',
    value: function inherit(mainDriver) {
      this.onLoadedCb(mainDriver.onLoaded);
      this.onFailCb(mainDriver.onFail);

      return this;
    }

    /**
     * @param {*} args
     * @returns {AbstractDriver|FsDriver|HttpDriver|KernelDriver|ComplexDriver|*}
     *
     * @todo: Add Sandbox functionality?
     */

  }, {
    key: 'load',
    value: function load() {
      this._load.apply(this, arguments);

      return this;
    }

    /**
     * @param {String} rawConfig
     * @returns {AbstractDriver}
     */

  }, {
    key: 'loadedJson',
    value: function loadedJson(rawConfig) {
      let config = null;

      try {
        config = JSON.parse(rawConfig);
      } catch (error) {
        return this.fail(`Failed to parse config from ${this._endpoint}: ${error}`);
      }

      return this.loaded(config);
    }

    /**
     * @param {*} config
     * @returns {AbstractDriver}
     */

  }, {
    key: 'loaded',
    value: function loaded(config) {
      this._onLoaded(config);

      return this;
    }

    /**
     * @param {Error|*} error
     * @returns {AbstractDriver}
     */

  }, {
    key: 'fail',
    value: function fail(error) {
      this._onFail(typeof error === 'string' ? new _Exception.Exception(error) : error);

      return this;
    }

    /**
     * @returns {Function|*}
     */

  }, {
    key: 'onLoadedCb',


    /**
     * @param {Function} cb
     * @returns {AbstractDriver}
     */
    value: function onLoadedCb(cb) {
      this._onLoaded = cb;

      return this;
    }

    /**
     * @returns {Function|*}
     */

  }, {
    key: 'onFailCb',


    /**
     * @param {Function} cb
     * @returns {AbstractDriver}
     */
    value: function onFailCb(cb) {
      this._onFail = cb;

      return this;
    }
  }, {
    key: 'onLoaded',
    get: function get() {
      return this._onLoaded;
    }
  }, {
    key: 'onFail',
    get: function get() {
      return this._onFail;
    }
  }]);

  return AbstractDriver;
}(_deepCore2.default.OOP.Interface);

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
//! version : 2.18.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isUndefined(input) {
    return input === void 0;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null,
        rfc2822         : false,
        weekdayMismatch : false
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.
    this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
            '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    ss : '%d seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return isArray(this._months) ? this._months :
            this._months['standalone'];
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort :
            this._monthsShort['standalone'];
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    var date = new Date(y, m, d, h, M, s, ms);

    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    // the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return isArray(this._weekdays) ? this._weekdays :
            this._weekdays['standalone'];
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('k',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);
addRegexToken('kk', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            __webpack_require__(483)("./" + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;

// date and time from ref 2822 format
function configFromRFC2822(config) {
    var string, match, dayFormat,
        dateFormat, timeFormat, tzFormat;
    var timezones = {
        ' GMT': ' +0000',
        ' EDT': ' -0400',
        ' EST': ' -0500',
        ' CDT': ' -0500',
        ' CST': ' -0600',
        ' MDT': ' -0600',
        ' MST': ' -0700',
        ' PDT': ' -0700',
        ' PST': ' -0800'
    };
    var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
    var timezone, timezoneIndex;

    string = config._i
        .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
        .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
        .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
    match = basicRfcRegex.exec(string);

    if (match) {
        dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
        dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
        timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');

        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
        if (match[1]) { // day of week given
            var momentDate = new Date(match[2]);
            var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];

            if (match[1].substr(0,3) !== momentDay) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return;
            }
        }

        switch (match[5].length) {
            case 2: // military
                if (timezoneIndex === 0) {
                    timezone = ' +0000';
                } else {
                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                    timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
                        (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
                }
                break;
            case 4: // Zone
                timezone = timezones[match[5]];
                break;
            default: // UT or +/-9999
                timezone = timezones[' GMT'];
        }
        match[5] = timezone;
        config._i = match.splice(1).join('');
        tzFormat = ' ZZ';
        config._f = dayFormat + dateFormat + timeFormat + tzFormat;
        configFromStringAndFormat(config);
        getParsingFlags(config).rfc2822 = true;
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    configFromRFC2822(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    // Final attempt, use Input Fallback
    hooks.createFromInputFallback(config);
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// constant that refers to the RFC 2822 form
hooks.RFC_2822 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }
    if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (isUndefined(input)) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (isObject(input)) {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

function isDurationValid(m) {
    for (var key in m) {
        if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
        }
    }

    var unitHasDecimal = false;
    for (var i = 0; i < ordering.length; ++i) {
        if (m[ordering[i]]) {
            if (unitHasDecimal) {
                return false; // only allow non-integers for smallest unit
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                unitHasDecimal = true;
            }
        }
    }

    return true;
}

function isValid$1() {
    return this._isValid;
}

function createInvalid$1() {
    return createDuration(NaN);
}

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    this._isValid = isDurationValid(normalizedInput);

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString() {
    if (!this.isValid()) {
        return null;
    }
    var m = this.clone().utc();
    if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
    if (isFunction(Date.prototype.toISOString)) {
        // native implementation is ~50x faster, use it when we can
        return this.toDate().toISOString();
    }
    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$2 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    // TODO: Remove "ordinalParse" fallback in next major release.
    return isStrict ?
      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
      locale._dayOfMonthOrdinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$2;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    if (!this.isValid()) {
        return NaN;
    }
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    if (!this.isValid()) {
        return NaN;
    }
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + 's']() : NaN;
}

function makeGetter(name) {
    return function () {
        return this.isValid() ? this._data[name] : NaN;
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    ss: 44,         // a few seconds to seconds
    s : 45,         // seconds to minute
    m : 45,         // minutes to hour
    h : 22,         // hours to day
    d : 26,         // days to month
    M : 11          // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds <= thresholds.ss && ['s', seconds]  ||
            seconds < thresholds.s   && ['ss', seconds] ||
            minutes <= 1             && ['m']           ||
            minutes < thresholds.m   && ['mm', minutes] ||
            hours   <= 1             && ['h']           ||
            hours   < thresholds.h   && ['hh', hours]   ||
            days    <= 1             && ['d']           ||
            days    < thresholds.d   && ['dd', days]    ||
            months  <= 1             && ['M']           ||
            months  < thresholds.M   && ['MM', months]  ||
            years   <= 1             && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    if (threshold === 's') {
        thresholds.ss = limit - 1;
    }
    return true;
}

function humanize (withSuffix) {
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.isValid        = isValid$1;
proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.18.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)(module)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var assign = make_assign()
var create = make_create()
var trim = make_trim()
var Global = (typeof window !== 'undefined' ? window : global)

module.exports = {
	assign: assign,
	create: create,
	trim: trim,
	bind: bind,
	slice: slice,
	each: each,
	map: map,
	pluck: pluck,
	isList: isList,
	isFunction: isFunction,
	isObject: isObject,
	Global: Global,
}

function make_assign() {
	if (Object.assign) {
		return Object.assign
	} else {
		return function shimAssign(obj, props1, props2, etc) {
			for (var i = 1; i < arguments.length; i++) {
				each(Object(arguments[i]), function(val, key) {
					obj[key] = val
				})
			}			
			return obj
		}
	}
}

function make_create() {
	if (Object.create) {
		return function create(obj, assignProps1, assignProps2, etc) {
			var assignArgsList = slice(arguments, 1)
			return assign.apply(this, [Object.create(obj)].concat(assignArgsList))
		}
	} else {
		function F() {} // eslint-disable-line no-inner-declarations
		return function create(obj, assignProps1, assignProps2, etc) {
			var assignArgsList = slice(arguments, 1)
			F.prototype = obj
			return assign.apply(this, [new F()].concat(assignArgsList))
		}
	}
}

function make_trim() {
	if (String.prototype.trim) {
		return function trim(str) {
			return String.prototype.trim.call(str)
		}
	} else {
		return function trim(str) {
			return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '')
		}
	}
}

function bind(obj, fn) {
	return function() {
		return fn.apply(obj, Array.prototype.slice.call(arguments, 0))
	}
}

function slice(arr, index) {
	return Array.prototype.slice.call(arr, index || 0)
}

function each(obj, fn) {
	pluck(obj, function(key, val) {
		fn(key, val)
		return false
	})
}

function map(obj, fn) {
	var res = (isList(obj) ? [] : {})
	pluck(obj, function(v, k) {
		res[k] = fn(v, k)
		return false
	})
	return res
}

function pluck(obj, fn) {
	if (isList(obj)) {
		for (var i=0; i<obj.length; i++) {
			if (fn(obj[i], i)) {
				return obj[i]
			}
		}
	} else {
		for (var key in obj) {
			if (obj.hasOwnProperty(key)) {
				if (fn(obj[key], key)) {
					return obj[key]
				}
			}
		}
	}
}

function isList(val) {
	return (val != null && typeof val != 'function' && typeof val.length == 'number')
}

function isFunction(val) {
	return val && {}.toString.call(val) === '[object Function]'
}

function isObject(val) {
	return val && {}.toString.call(val) === '[object Object]'
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isEmpty, isFunction, isObject,
    hasProp = {}.hasOwnProperty;

  isObject = __webpack_require__(14);

  isFunction = __webpack_require__(58);

  isEmpty = __webpack_require__(477);

  XMLElement = null;

  XMLCData = null;

  XMLComment = null;

  XMLDeclaration = null;

  XMLDocType = null;

  XMLRaw = null;

  XMLText = null;

  module.exports = XMLNode = (function() {
    function XMLNode(parent) {
      this.parent = parent;
      this.options = this.parent.options;
      this.stringify = this.parent.stringify;
      if (XMLElement === null) {
        XMLElement = __webpack_require__(171);
        XMLCData = __webpack_require__(167);
        XMLComment = __webpack_require__(168);
        XMLDeclaration = __webpack_require__(169);
        XMLDocType = __webpack_require__(170);
        XMLRaw = __webpack_require__(525);
        XMLText = __webpack_require__(527);
      }
    }

    XMLNode.prototype.element = function(name, attributes, text) {
      var childNode, item, j, k, key, lastChild, len, len1, ref, val;
      lastChild = null;
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      if (name != null) {
        name = name.valueOf();
      }
      if (Array.isArray(name)) {
        for (j = 0, len = name.length; j < len; j++) {
          item = name[j];
          lastChild = this.element(item);
        }
      } else if (isFunction(name)) {
        lastChild = this.element(name.apply());
      } else if (isObject(name)) {
        for (key in name) {
          if (!hasProp.call(name, key)) continue;
          val = name[key];
          if (isFunction(val)) {
            val = val.apply();
          }
          if ((isObject(val)) && (isEmpty(val))) {
            val = null;
          }
          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);
          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
            for (k = 0, len1 = val.length; k < len1; k++) {
              item = val[k];
              childNode = {};
              childNode[key] = item;
              lastChild = this.element(childNode);
            }
          } else if (isObject(val)) {
            lastChild = this.element(key);
            lastChild.element(val);
          } else {
            lastChild = this.element(key, val);
          }
        }
      } else {
        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
          lastChild = this.text(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
          lastChild = this.cdata(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
          lastChild = this.comment(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
          lastChild = this.raw(text);
        } else {
          lastChild = this.node(name, attributes, text);
        }
      }
      if (lastChild == null) {
        throw new Error("Could not create any elements with: " + name);
      }
      return lastChild;
    };

    XMLNode.prototype.insertBefore = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.insertAfter = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.remove = function() {
      var i, ref;
      if (this.isRoot) {
        throw new Error("Cannot remove the root element");
      }
      i = this.parent.children.indexOf(this);
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;
      return this.parent;
    };

    XMLNode.prototype.node = function(name, attributes, text) {
      var child, ref;
      if (name != null) {
        name = name.valueOf();
      }
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      child = new XMLElement(this, name, attributes);
      if (text != null) {
        child.text(text);
      }
      this.children.push(child);
      return child;
    };

    XMLNode.prototype.text = function(value) {
      var child;
      child = new XMLText(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.raw = function(value) {
      var child;
      child = new XMLRaw(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.declaration = function(version, encoding, standalone) {
      var doc, xmldec;
      doc = this.document();
      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
      doc.xmldec = xmldec;
      return doc.root();
    };

    XMLNode.prototype.doctype = function(pubID, sysID) {
      var doc, doctype;
      doc = this.document();
      doctype = new XMLDocType(doc, pubID, sysID);
      doc.doctype = doctype;
      return doctype;
    };

    XMLNode.prototype.up = function() {
      if (this.isRoot) {
        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
      }
      return this.parent;
    };

    XMLNode.prototype.root = function() {
      var child;
      if (this.isRoot) {
        return this;
      }
      child = this.parent;
      while (!child.isRoot) {
        child = child.parent;
      }
      return child;
    };

    XMLNode.prototype.document = function() {
      return this.root().documentObject;
    };

    XMLNode.prototype.end = function(options) {
      return this.document().toString(options);
    };

    XMLNode.prototype.prev = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i < 1) {
        throw new Error("Already at the first node");
      }
      return this.parent.children[i - 1];
    };

    XMLNode.prototype.next = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i === -1 || i === this.parent.children.length - 1) {
        throw new Error("Already at the last node");
      }
      return this.parent.children[i + 1];
    };

    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {
      var clonedRoot;
      clonedRoot = xmlbuilder.root().clone();
      clonedRoot.parent = this;
      clonedRoot.isRoot = false;
      this.children.push(clonedRoot);
      return this;
    };

    XMLNode.prototype.ele = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.nod = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.doc = function() {
      return this.document();
    };

    XMLNode.prototype.dec = function(version, encoding, standalone) {
      return this.declaration(version, encoding, standalone);
    };

    XMLNode.prototype.dtd = function(pubID, sysID) {
      return this.doctype(pubID, sysID);
    };

    XMLNode.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.n = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.t = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLNode.prototype.u = function() {
      return this.up();
    };

    return XMLNode;

  })();

}).call(this);


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var Collection = __webpack_require__(100);

var util = __webpack_require__(2);

function property(obj, name, value) {
  if (value !== null && value !== undefined) {
    util.property.apply(this, arguments);
  }
}

function memoizedProperty(obj, name) {
  if (!obj.constructor.prototype[name]) {
    util.memoizedProperty.apply(this, arguments);
  }
}

function Shape(shape, options, memberName) {
  options = options || {};

  property(this, 'shape', shape.shape);
  property(this, 'api', options.api, false);
  property(this, 'type', shape.type);
  property(this, 'enum', shape.enum);
  property(this, 'min', shape.min);
  property(this, 'max', shape.max);
  property(this, 'pattern', shape.pattern);
  property(this, 'location', shape.location || this.location || 'body');
  property(this, 'name', this.name || shape.xmlName || shape.queryName ||
    shape.locationName || memberName);
  property(this, 'isStreaming', shape.streaming || this.isStreaming || false);
  property(this, 'isComposite', shape.isComposite || false);
  property(this, 'isShape', true, false);
  property(this, 'isQueryName', Boolean(shape.queryName), false);
  property(this, 'isLocationName', Boolean(shape.locationName), false);
  property(this, 'isIdempotent', shape.idempotencyToken === true);
  property(this, 'isJsonValue', shape.jsonvalue === true);

  if (options.documentation) {
    property(this, 'documentation', shape.documentation);
    property(this, 'documentationUrl', shape.documentationUrl);
  }

  if (shape.xmlAttribute) {
    property(this, 'isXmlAttribute', shape.xmlAttribute || false);
  }

  // type conversion and parsing
  property(this, 'defaultValue', null);
  this.toWireFormat = function(value) {
    if (value === null || value === undefined) return '';
    return value;
  };
  this.toType = function(value) { return value; };
}

/**
 * @api private
 */
Shape.normalizedTypes = {
  character: 'string',
  double: 'float',
  long: 'integer',
  short: 'integer',
  biginteger: 'integer',
  bigdecimal: 'float',
  blob: 'binary'
};

/**
 * @api private
 */
Shape.types = {
  'structure': StructureShape,
  'list': ListShape,
  'map': MapShape,
  'boolean': BooleanShape,
  'timestamp': TimestampShape,
  'float': FloatShape,
  'integer': IntegerShape,
  'string': StringShape,
  'base64': Base64Shape,
  'binary': BinaryShape
};

Shape.resolve = function resolve(shape, options) {
  if (shape.shape) {
    var refShape = options.api.shapes[shape.shape];
    if (!refShape) {
      throw new Error('Cannot find shape reference: ' + shape.shape);
    }

    return refShape;
  } else {
    return null;
  }
};

Shape.create = function create(shape, options, memberName) {
  if (shape.isShape) return shape;

  var refShape = Shape.resolve(shape, options);
  if (refShape) {
    var filteredKeys = Object.keys(shape);
    if (!options.documentation) {
      filteredKeys = filteredKeys.filter(function(name) {
        return !name.match(/documentation/);
      });
    }
    if (filteredKeys === ['shape']) { // no inline customizations
      return refShape;
    }

    // create an inline shape with extra members
    var InlineShape = function() {
      refShape.constructor.call(this, shape, options, memberName);
    };
    InlineShape.prototype = refShape;
    return new InlineShape();
  } else {
    // set type if not set
    if (!shape.type) {
      if (shape.members) shape.type = 'structure';
      else if (shape.member) shape.type = 'list';
      else if (shape.key) shape.type = 'map';
      else shape.type = 'string';
    }

    // normalize types
    var origType = shape.type;
    if (Shape.normalizedTypes[shape.type]) {
      shape.type = Shape.normalizedTypes[shape.type];
    }

    if (Shape.types[shape.type]) {
      return new Shape.types[shape.type](shape, options, memberName);
    } else {
      throw new Error('Unrecognized shape type: ' + origType);
    }
  }
};

function CompositeShape(shape) {
  Shape.apply(this, arguments);
  property(this, 'isComposite', true);

  if (shape.flattened) {
    property(this, 'flattened', shape.flattened || false);
  }
}

function StructureShape(shape, options) {
  var requiredMap = null, firstInit = !this.isShape;

  CompositeShape.apply(this, arguments);

  if (firstInit) {
    property(this, 'defaultValue', function() { return {}; });
    property(this, 'members', {});
    property(this, 'memberNames', []);
    property(this, 'required', []);
    property(this, 'isRequired', function() { return false; });
  }

  if (shape.members) {
    property(this, 'members', new Collection(shape.members, options, function(name, member) {
      return Shape.create(member, options, name);
    }));
    memoizedProperty(this, 'memberNames', function() {
      return shape.xmlOrder || Object.keys(shape.members);
    });
  }

  if (shape.required) {
    property(this, 'required', shape.required);
    property(this, 'isRequired', function(name) {
      if (!requiredMap) {
        requiredMap = {};
        for (var i = 0; i < shape.required.length; i++) {
          requiredMap[shape.required[i]] = true;
        }
      }

      return requiredMap[name];
    }, false, true);
  }

  property(this, 'resultWrapper', shape.resultWrapper || null);

  if (shape.payload) {
    property(this, 'payload', shape.payload);
  }

  if (typeof shape.xmlNamespace === 'string') {
    property(this, 'xmlNamespaceUri', shape.xmlNamespace);
  } else if (typeof shape.xmlNamespace === 'object') {
    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);
    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);
  }
}

function ListShape(shape, options) {
  var self = this, firstInit = !this.isShape;
  CompositeShape.apply(this, arguments);

  if (firstInit) {
    property(this, 'defaultValue', function() { return []; });
  }

  if (shape.member) {
    memoizedProperty(this, 'member', function() {
      return Shape.create(shape.member, options);
    });
  }

  if (this.flattened) {
    var oldName = this.name;
    memoizedProperty(this, 'name', function() {
      return self.member.name || oldName;
    });
  }
}

function MapShape(shape, options) {
  var firstInit = !this.isShape;
  CompositeShape.apply(this, arguments);

  if (firstInit) {
    property(this, 'defaultValue', function() { return {}; });
    property(this, 'key', Shape.create({type: 'string'}, options));
    property(this, 'value', Shape.create({type: 'string'}, options));
  }

  if (shape.key) {
    memoizedProperty(this, 'key', function() {
      return Shape.create(shape.key, options);
    });
  }
  if (shape.value) {
    memoizedProperty(this, 'value', function() {
      return Shape.create(shape.value, options);
    });
  }
}

function TimestampShape(shape) {
  var self = this;
  Shape.apply(this, arguments);

  if (this.location === 'header') {
    property(this, 'timestampFormat', 'rfc822');
  } else if (shape.timestampFormat) {
    property(this, 'timestampFormat', shape.timestampFormat);
  } else if (this.api) {
    if (this.api.timestampFormat) {
      property(this, 'timestampFormat', this.api.timestampFormat);
    } else {
      switch (this.api.protocol) {
        case 'json':
        case 'rest-json':
          property(this, 'timestampFormat', 'unixTimestamp');
          break;
        case 'rest-xml':
        case 'query':
        case 'ec2':
          property(this, 'timestampFormat', 'iso8601');
          break;
      }
    }
  }

  this.toType = function(value) {
    if (value === null || value === undefined) return null;
    if (typeof value.toUTCString === 'function') return value;
    return typeof value === 'string' || typeof value === 'number' ?
           util.date.parseTimestamp(value) : null;
  };

  this.toWireFormat = function(value) {
    return util.date.format(value, self.timestampFormat);
  };
}

function StringShape() {
  Shape.apply(this, arguments);

  var nullLessProtocols = ['rest-xml', 'query', 'ec2'];
  this.toType = function(value) {
    value = this.api && nullLessProtocols.indexOf(this.api.protocol) > -1 ?
      value || '' : value;
    return this.isJsonValue ? JSON.parse(value) : value;
  };

  this.toWireFormat = function(value) {
    return this.isJsonValue ? JSON.stringify(value) : value;
  };
}

function FloatShape() {
  Shape.apply(this, arguments);

  this.toType = function(value) {
    if (value === null || value === undefined) return null;
    return parseFloat(value);
  };
  this.toWireFormat = this.toType;
}

function IntegerShape() {
  Shape.apply(this, arguments);

  this.toType = function(value) {
    if (value === null || value === undefined) return null;
    return parseInt(value, 10);
  };
  this.toWireFormat = this.toType;
}

function BinaryShape() {
  Shape.apply(this, arguments);
  this.toType = util.base64.decode;
  this.toWireFormat = util.base64.encode;
}

function Base64Shape() {
  BinaryShape.apply(this, arguments);
}

function BooleanShape() {
  Shape.apply(this, arguments);

  this.toType = function(value) {
    if (typeof value === 'boolean') return value;
    if (value === null || value === undefined) return null;
    return value === 'true';
  };
}

/**
 * @api private
 */
Shape.shapes = {
  StructureShape: StructureShape,
  ListShape: ListShape,
  MapShape: MapShape,
  StringShape: StringShape,
  BooleanShape: BooleanShape,
  Base64Shape: Base64Shape
};

module.exports = Shape;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Exception = undefined;

var _Exception = __webpack_require__(113);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Base exception
 */
let Exception = exports.Exception = function (_BaseException) {
  _inherits(Exception, _BaseException);

  /**
   * @param {Array} args
   */
  function Exception() {
    var _ref;

    _classCallCheck(this, Exception);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = Exception.__proto__ || Object.getPrototypeOf(Exception)).call.apply(_ref, [this].concat(args)));
  }

  return Exception;
}(_Exception.Exception);

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Extractable = undefined;

var _Interface2 = __webpack_require__(67);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Extractable helper
 */
let Extractable = exports.Extractable = function (_Interface) {
  _inherits(Extractable, _Interface);

  function Extractable() {
    _classCallCheck(this, Extractable);

    return _possibleConstructorReturn(this, (Extractable.__proto__ || Object.getPrototypeOf(Extractable)).call(this, ['extract']));
  }

  return Extractable;
}(_Interface2.Interface);

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Exception = undefined;

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when any kernel exception occurs
 */
let Exception = exports.Exception = function (_Core$Exception$Excep) {
  _inherits(Exception, _Core$Exception$Excep);

  /**
   * @param {Array} args
   */
  function Exception() {
    var _ref;

    _classCallCheck(this, Exception);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = Exception.__proto__ || Object.getPrototypeOf(Exception)).call.apply(_ref, [this].concat(args)));
  }

  return Exception;
}(_deepCore2.default.Exception.Exception);

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/15/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _crypto = __webpack_require__(19);

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Abstract log driver
 */
let AbstractDriver = exports.AbstractDriver = function (_Core$OOP$Interface) {
  _inherits(AbstractDriver, _Core$OOP$Interface);

  function AbstractDriver() {
    _classCallCheck(this, AbstractDriver);

    return _possibleConstructorReturn(this, (AbstractDriver.__proto__ || Object.getPrototypeOf(AbstractDriver)).call(this, ['log']));
  }

  /**
   * @param {*} context
   * @returns {String}
   */


  _createClass(AbstractDriver, null, [{
    key: 'plainifyContext',
    value: function plainifyContext(context) {
      let type = typeof context;
      var plainContext;

      if (type === 'object') {
        plainContext = JSON.stringify(context);
      } else if (context instanceof Object) {
        plainContext = `${type}: ${context.toString()}`;
      } else {
        plainContext = context.toString();
      }

      return plainContext;
    }

    /**
     * @returns {String}
     */

  }, {
    key: '_md5',


    /**
     * @param {String} str
     * @returns {String}
     */
    value: function _md5(str) {
      return _crypto2.default.createHash('md5').update(str).digest('hex');
    }
  }, {
    key: 'datetime',
    get: function get() {
      return new Date().toISOString();
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'timeString',
    get: function get() {
      return new Date().toTimeString();
    }
  }]);

  return AbstractDriver;
}(_deepCore2.default.OOP.Interface);

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Hoek = __webpack_require__(5);
var Ref = __webpack_require__(39);
// Type modules are delay-loaded to prevent circular dependencies


// Declare internals

var internals = {
    any: null,
    date: __webpack_require__(80),
    string: __webpack_require__(138),
    number: __webpack_require__(136),
    boolean: __webpack_require__(135),
    alt: null,
    object: null
};


exports.schema = function (config) {

    internals.any = internals.any || new (__webpack_require__(10))();
    internals.alt = internals.alt || __webpack_require__(79);
    internals.object = internals.object || __webpack_require__(137);

    if (config &&
        typeof config === 'object') {

        if (config.isJoi) {
            return config;
        }

        if (Array.isArray(config)) {
            return internals.alt.try(config);
        }

        if (config instanceof RegExp) {
            return internals.string.regex(config);
        }

        if (config instanceof Date) {
            return internals.date.valid(config);
        }

        return internals.object.keys(config);
    }

    if (typeof config === 'string') {
        return internals.string.valid(config);
    }

    if (typeof config === 'number') {
        return internals.number.valid(config);
    }

    if (typeof config === 'boolean') {
        return internals.boolean.valid(config);
    }

    if (Ref.isRef(config)) {
        return internals.any.valid(config);
    }

    Hoek.assert(config === null, 'Invalid schema content:', config);

    return internals.any.valid(null);
};


exports.ref = function (id) {

    return Ref.isRef(id) ? id : Ref.create(id);
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Hoek = __webpack_require__(5);


// Declare internals

var internals = {};


exports.create = function (key, options) {

    Hoek.assert(typeof key === 'string', 'Invalid reference key:', key);

    var settings = Hoek.clone(options);         // options can be reused and modified

    var ref = function (value, validationOptions) {

        return Hoek.reach(ref.isContext ? validationOptions.context : value, ref.key, settings);
    };

    ref.isContext = (key[0] === ((settings && settings.contextPrefix) || '$'));
    ref.key = (ref.isContext ? key.slice(1) : key);
    ref.path = ref.key.split((settings && settings.separator) || '.');
    ref.depth = ref.path.length;
    ref.root = ref.path[0];
    ref.isJoi = true;

    ref.toString = function () {

        return (ref.isContext ? 'context:' : 'ref:') + ref.key;
    };

    return ref;
};


exports.isRef = function (ref) {

    return typeof ref === 'function' && ref.isJoi;
};


exports.push = function (array, ref) {

    if (exports.isRef(ref) &&
        !ref.isContext) {

        array.push(ref.root);
    }
};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(52),
    getRawTag = __webpack_require__(433),
    objectToString = __webpack_require__(458);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(58),
    isLength = __webpack_require__(89);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),
/* 42 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(397),
    baseKeys = __webpack_require__(144),
    isArrayLike = __webpack_require__(41);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24);
var AWS = __webpack_require__(0);
var Service = __webpack_require__(25);
var apiLoader = __webpack_require__(23);

apiLoader.services['sts'] = {};
AWS.STS = Service.defineService('sts', ['2011-06-15']);
__webpack_require__(206);
Object.defineProperty(apiLoader.services['sts'], '2011-06-15', {
  get: function get() {
    var model = __webpack_require__(185);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.STS;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);

function populateMethod(req) {
  req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;
}

function generateURI(endpointPath, operationPath, input, params) {
  var uri = [endpointPath, operationPath].join('/');
  uri = uri.replace(/\/+/g, '/');

  var queryString = {}, queryStringSet = false;
  util.each(input.members, function (name, member) {
    var paramValue = params[name];
    if (paramValue === null || paramValue === undefined) return;
    if (member.location === 'uri') {
      var regex = new RegExp('\\{' + member.name + '(\\+)?\\}');
      uri = uri.replace(regex, function(_, plus) {
        var fn = plus ? util.uriEscapePath : util.uriEscape;
        return fn(String(paramValue));
      });
    } else if (member.location === 'querystring') {
      queryStringSet = true;

      if (member.type === 'list') {
        queryString[member.name] = paramValue.map(function(val) {
          return util.uriEscape(String(val));
        });
      } else if (member.type === 'map') {
        util.each(paramValue, function(key, value) {
          if (Array.isArray(value)) {
            queryString[key] = value.map(function(val) {
              return util.uriEscape(String(val));
            });
          } else {
            queryString[key] = util.uriEscape(String(value));
          }
        });
      } else {
        queryString[member.name] = util.uriEscape(String(paramValue));
      }
    }
  });

  if (queryStringSet) {
    uri += (uri.indexOf('?') >= 0 ? '&' : '?');
    var parts = [];
    util.arrayEach(Object.keys(queryString).sort(), function(key) {
      if (!Array.isArray(queryString[key])) {
        queryString[key] = [queryString[key]];
      }
      for (var i = 0; i < queryString[key].length; i++) {
        parts.push(util.uriEscape(String(key)) + '=' + queryString[key][i]);
      }
    });
    uri += parts.join('&');
  }

  return uri;
}

function populateURI(req) {
  var operation = req.service.api.operations[req.operation];
  var input = operation.input;

  var uri = generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);
  req.httpRequest.path = uri;
}

function populateHeaders(req) {
  var operation = req.service.api.operations[req.operation];
  util.each(operation.input.members, function (name, member) {
    var value = req.params[name];
    if (value === null || value === undefined) return;

    if (member.location === 'headers' && member.type === 'map') {
      util.each(value, function(key, memberValue) {
        req.httpRequest.headers[member.name + key] = memberValue;
      });
    } else if (member.location === 'header') {
      value = member.toWireFormat(value).toString();
      if (member.isJsonValue) {
        value = util.base64.encode(value);
      }
      req.httpRequest.headers[member.name] = value;
    }
  });
}

function buildRequest(req) {
  populateMethod(req);
  populateURI(req);
  populateHeaders(req);
}

function extractError() {
}

function extractData(resp) {
  var req = resp.request;
  var data = {};
  var r = resp.httpResponse;
  var operation = req.service.api.operations[req.operation];
  var output = operation.output;

  // normalize headers names to lower-cased keys for matching
  var headers = {};
  util.each(r.headers, function (k, v) {
    headers[k.toLowerCase()] = v;
  });

  util.each(output.members, function(name, member) {
    var header = (member.name || name).toLowerCase();
    if (member.location === 'headers' && member.type === 'map') {
      data[name] = {};
      var location = member.isLocationName ? member.name : '';
      var pattern = new RegExp('^' + location + '(.+)', 'i');
      util.each(r.headers, function (k, v) {
        var result = k.match(pattern);
        if (result !== null) {
          data[name][result[1]] = v;
        }
      });
    } else if (member.location === 'header') {
      if (headers[header] !== undefined) {
        var value = member.isJsonValue ?
          util.base64.decode(headers[header]) :
          headers[header];
        data[name] = member.toType(value);
      }
    } else if (member.location === 'statusCode') {
      data[name] = parseInt(r.statusCode, 10);
    }
  });

  resp.data = data;
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData,
  generateURI: generateURI
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _MissingCacheException = __webpack_require__(258);

var _NoFlushException = __webpack_require__(259);

var _DriverException = __webpack_require__(256);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Abstract driver implementation
 */
let AbstractDriver = exports.AbstractDriver = function (_Core$OOP$Interface) {
  _inherits(AbstractDriver, _Core$OOP$Interface);

  function AbstractDriver() {
    _classCallCheck(this, AbstractDriver);

    var _this = _possibleConstructorReturn(this, (AbstractDriver.__proto__ || Object.getPrototypeOf(AbstractDriver)).call(this, ['_get', '_has', '_set', '_invalidate', '_type']));

    _this._buildId = '';
    _this._namespace = '';
    _this._silent = false;
    return _this;
  }

  /**
   * @returns {String}
   */


  _createClass(AbstractDriver, [{
    key: 'has',


    /**
     * @param {String} key
     * @param {Function} callback
     * @returns {AbstractDriver}
     */
    value: function has(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      try {
        this._has(this._buildKey(key), callback);
      } catch (e) {
        callback(new _DriverException.DriverException(e), null);
      }

      return this;
    }

    /**
     * @param {String} key
     * @param {Function} callback
     * @returns {AbstractDriver}
     */

  }, {
    key: 'get',
    value: function get(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      try {
        this.has(key, (error, result) => {
          if (error) {
            callback(new _DriverException.DriverException(error), null);

            return;
          }

          if (!result && !this._silent) {
            callback(new _MissingCacheException.MissingCacheException(key), null);

            return;
          }

          this._get(this._buildKey(key), callback);
        });
      } catch (e) {
        callback(new _DriverException.DriverException(e), null);
      }

      return this;
    }

    /**
     * @param {String} key
     * @param {*} value
     * @param {Number} ttl
     * @param {Function} callback
     * @returns {AbstractDriver}
     */

  }, {
    key: 'set',
    value: function set(key, value) {
      let ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      let callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};

      try {
        this._set(this._buildKey(key), value, ttl, callback);
      } catch (e) {
        callback(new _DriverException.DriverException(e), null);
      }

      return this;
    }

    /**
     * @param {String} key
     * @param {Number} timeout
     * @param {Function} callback
     * @returns {AbstractDriver}
     */

  }, {
    key: 'invalidate',
    value: function invalidate(key) {
      let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};

      try {
        this.has(key, (exception, result) => {
          if (exception) {
            callback(new _DriverException.DriverException(exception), null);

            return;
          }

          if (!result) {
            callback(null, true);

            return;
          }

          this._invalidate(this._buildKey(key), timeout, callback);
        });
      } catch (e) {
        callback(new _DriverException.DriverException(e), null);
      }

      return this;
    }

    /**
     * @param {Function} callback
     * @returns {AbstractDriver}
     */

  }, {
    key: 'flush',
    value: function flush() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      try {
        this._flush(callback);
      } catch (e) {
        callback(new _DriverException.DriverException(e), null);
      }

      return this;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'type',
    value: function type() {
      return this._type();
    }

    /**
     * @private
     */

  }, {
    key: '_flush',
    value: function _flush() {
      throw new _NoFlushException.NoFlushException();
    }

    /**
     * @returns {String}
     */

  }, {
    key: '_buildKey',


    /**
     * @param {String} key
     * @returns {String}
     * @private
     */
    value: function _buildKey(key) {
      return `${this._buildId}:${this._namespace}#${key}`;
    }

    /**
     * @param {String} key
     * @returns {String}
     */

  }, {
    key: '_getKeyBuildId',
    value: function _getKeyBuildId(key) {
      if (this.isDeepKey(key)) {
        let matches = key.match(/^([^:])+:/);

        return matches[1];
      }

      return null;
    }

    /**
     * @param {String} key
     * @returns {Boolean}
     */

  }, {
    key: 'isDeepKey',
    value: function isDeepKey(key) {
      return (/.+:.*#.+/.test(key)
      );
    }
  }, {
    key: 'buildId',
    get: function get() {
      return this._buildId;
    }

    /**
     * @param {String} id
     */
    ,
    set: function set(id) {
      this._buildId = id;
    }
  }, {
    key: 'namespace',
    get: function get() {
      return this._namespace;
    }

    /**
     * @param {String} ns
     */
    ,
    set: function set(ns) {
      this._namespace = ns;
    }

    /**
     * @param {Boolean} value
     */

  }, {
    key: 'silent',
    set: function set(value) {
      this._silent = value;
    }

    /**
     * @returns {Boolean}
     */
    ,
    get: function get() {
      return this._silent;
    }
  }]);

  return AbstractDriver;
}(_deepCore2.default.OOP.Interface);

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Policy = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Extractable2 = __webpack_require__(35);

var _Collection = __webpack_require__(65);

var _Statement = __webpack_require__(117);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * IAM policy
 */
let Policy = exports.Policy = function (_Extractable) {
  _inherits(Policy, _Extractable);

  function Policy() {
    _classCallCheck(this, Policy);

    var _this = _possibleConstructorReturn(this, (Policy.__proto__ || Object.getPrototypeOf(Policy)).call(this));

    _this._version = Policy.DEFAULT_VERSION;
    _this._statement = new _Collection.Collection(_Statement.Statement);
    return _this;
  }

  /**
   * @returns {String}
   */


  _createClass(Policy, [{
    key: 'extract',


    /**
     * @return {Object}
     */
    value: function extract() {
      return {
        Version: this._version,
        Statement: this._statement.extract()
      };
    }

    /**
     * @return {String}
     */

  }, {
    key: 'toString',
    value: function toString() {
      return JSON.stringify(this.extract());
    }
  }, {
    key: 'version',


    /**
     * @param {String} version
     */
    set: function set(version) {
      this._version = version;
    }

    /**
     * @returns {String}
     */
    ,
    get: function get() {
      return this._version;
    }

    /**
     * @returns {Collection}
     */

  }, {
    key: 'statement',
    get: function get() {
      return this._statement;
    }
  }], [{
    key: 'ANY',
    get: function get() {
      return '*';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'DEFAULT_VERSION',
    get: function get() {
      return '2012-10-17';
    }
  }]);

  return Policy;
}(_Extractable2.Extractable);

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/15/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Log = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepKernel = __webpack_require__(18);

var _deepKernel2 = _interopRequireDefault(_deepKernel);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _ConsoleDriver = __webpack_require__(305);

var _RavenDriver = __webpack_require__(317);

var _RavenBrowserDriver = __webpack_require__(316);

var _RumSqsDriver = __webpack_require__(318);

var _AbstractDriver = __webpack_require__(37);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Logging manager
 */
let Log = exports.Log = function (_Kernel$ContainerAwar) {
  _inherits(Log, _Kernel$ContainerAwar);

  /**
   * @param {Object} drivers
   */
  function Log() {
    let drivers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Log);

    var _this = _possibleConstructorReturn(this, (Log.__proto__ || Object.getPrototypeOf(Log)).call(this));

    _this._drivers = new _deepCore2.default.Generic.ObjectStorage();

    for (let driverName in drivers) {
      if (!drivers.hasOwnProperty(driverName)) {
        continue;
      }

      _this.register(driverName, drivers[driverName]);
    }
    return _this;
  }

  /**
   * Booting a certain service
   *
   * @param {Kernel} kernel
   * @param {Function} callback
   */


  _createClass(Log, [{
    key: 'boot',
    value: function boot(kernel, callback) {
      let globals = kernel.config.globals;
      let drivers = globals.logDrivers || {};

      // add console driver by default to all environments except for PROD
      if (!drivers.hasOwnProperty('console') && kernel.env !== _deepKernel2.default.PROD_ENVIRONMENT) {
        drivers.console = {};
      }

      for (let driverName in drivers) {
        if (!drivers.hasOwnProperty(driverName)) {
          continue;
        }

        this.register(driverName, drivers[driverName]);
      }

      callback();
    }

    /**
     *
     * @param {String} type
     * @param {Array} args
     * @returns {AbstractDriver}
     */

  }, {
    key: 'create',
    value: function create(type) {
      var driver;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      switch (type.toLowerCase()) {
        case 'console':
          driver = new (Function.prototype.bind.apply(_ConsoleDriver.ConsoleDriver, [null].concat(args)))();
          break;
        case 'raven':
        case 'sentry':
          let DriverPrototype = this.container.get(_deepKernel2.default.CONTEXT).isFrontend ? _RavenBrowserDriver.RavenBrowserDriver : _RavenDriver.RavenDriver;

          driver = new DriverPrototype(args.length > 0 && typeof args[0] === 'object' ? args[0].dsn : null);
          break;
        case 'rum':
          let rumQueueUrl = this.kernel.config.hasOwnProperty('rumQueue') ? this.kernel.config.rumQueue.url : '';
          let enabled = args.length > 0 && args[0] && typeof args[0] === 'object' ? args[0].enabled : false;

          driver = new _RumSqsDriver.RumSqsDriver(rumQueueUrl, this.kernel, enabled);
          break;
        default:
          throw new _deepCore2.default.Exception.InvalidArgumentException(type, '[Console, Raven, Sentry, RUM]');
      }

      return driver;
    }

    /**
     * @param {*} args
     * @returns {Log}
     *
     * @todo: do we need this here?
     */

  }, {
    key: 'overrideJsConsole',
    value: function overrideJsConsole() {
      var _ref;

      let consoleDriver = this._drivers.find(_ConsoleDriver.ConsoleDriver);

      if (!consoleDriver) {
        this.register('console');
      }

      (_ref = consoleDriver || this._drivers.find(_ConsoleDriver.ConsoleDriver)).overrideNative.apply(_ref, arguments);

      return this;
    }

    /**
     * @param {AbstractDriver|String} driver
     * @param {Array} args
     * @returns {Log}
     */

  }, {
    key: 'register',
    value: function register(driver) {
      if (typeof driver === 'string') {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        driver = this.create.apply(this, [driver].concat(args));
      }

      if (!(driver instanceof _AbstractDriver.AbstractDriver)) {
        throw new _deepCore2.default.Exception.InvalidArgumentException(driver, 'AbstractDriver');
      }

      this._drivers.add(driver);

      return this;
    }

    /**
     * @returns {Core.Generic.ObjectStorage}
     */

  }, {
    key: 'log',


    /**
     * @param {String} msg
     * @param {String} level
     * @param {Object} context
     * @returns {Log}
     */
    value: function log(msg) {
      let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Log.INFO;
      let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      let driversArr = this.drivers.iterator;

      for (let driverKey in driversArr) {
        if (!driversArr.hasOwnProperty(driverKey)) {
          continue;
        }

        let driver = driversArr[driverKey];

        // do not log common messages into RUM
        if (driver instanceof _RumSqsDriver.RumSqsDriver) {
          continue;
        }

        driver.log(msg, level, context);
      }

      return this;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isRumEnabled',
    value: function isRumEnabled() {
      let driver = this.rumDriver();

      return driver && driver.enabled;
    }

    /**
     * @param {Object} event
     */

  }, {
    key: 'rumLog',
    value: function rumLog(event) {
      let driver = this.rumDriver();

      if (driver) {
        driver.log(event, (error, data) => {
          if (error) {
            this.log(error, Log.ERROR, event);
          }
        });
      }
    }

    /**
     * Flushes RUM batch messages
     * @param {Function} callback
     */

  }, {
    key: 'rumFlush',
    value: function rumFlush(callback) {
      let driver = this.rumDriver();

      if (!driver) {
        callback(null, null);
        return;
      }

      driver.flush((error, data) => {
        if (error) {
          this.log(error, Log.ERROR);
        }

        callback(error, data);
      });
    }

    /**
     * @returns {RumSqsDriver}
     */

  }, {
    key: 'rumDriver',
    value: function rumDriver() {
      return this.drivers.find(_RumSqsDriver.RumSqsDriver);
    }

    /**
     * @param {String} msg
     * @param {Object} context
     * @returns {Log}
     */

  }, {
    key: 'debug',
    value: function debug(msg) {
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.log(msg, Log.DEBUG, context);
    }

    /**
     * @param {String} msg
     * @param {Object} context
     * @returns {Log}
     */

  }, {
    key: 'err',
    value: function err(msg) {
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.log(msg, Log.ERROR, context);
    }

    /**
     * @param {Array} args
     * @returns {Object}
     */

  }, {
    key: 'error',
    value: function error() {
      return this.err.apply(this, arguments);
    }

    /**
     * @param {String} msg
     * @param {Object} context
     * @returns {Log}
     */

  }, {
    key: 'info',
    value: function info(msg) {
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.log(msg, Log.INFO, context);
    }

    /**
     * @param {String} msg
     * @param {Object} context
     * @returns {Log}
     */

  }, {
    key: 'warn',
    value: function warn(msg) {
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.log(msg, Log.WARNING, context);
    }

    /**
     * @param {*} args
     * @returns {*}
     */

  }, {
    key: 'warning',
    value: function warning() {
      return this.warn.apply(this, arguments);
    }

    /**
     * @param {String} msg
     * @param {Object} context
     * @returns {Log}
     */

  }, {
    key: 'emerg',
    value: function emerg(msg) {
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.log(msg, Log.EMERGENCY, context);
    }

    /**
     * @param {*} args
     * @returns {*}
     */

  }, {
    key: 'emergency',
    value: function emergency() {
      return this.emerg.apply(this, arguments);
    }

    /**
     * @param {String} msg
     * @param {Object} context
     * @returns {Log}
     */

  }, {
    key: 'crit',
    value: function crit(msg) {
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.log(msg, Log.CRITICAL, context);
    }

    /**
     * @param {*} args
     * @returns {*}
     */

  }, {
    key: 'critical',
    value: function critical() {
      return this.crit.apply(this, arguments);
    }

    /**
     * @param {String} msg
     * @param {Object} context
     * @returns {Log}
     */

  }, {
    key: 'notice',
    value: function notice(msg) {
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.log(msg, Log.NOTICE, context);
    }

    /**
     * @param {String} msg
     * @param {Object} context
     * @returns {Log}
     */

  }, {
    key: 'alert',
    value: function alert(msg) {
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.log(msg, Log.ALERT, context);
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'drivers',
    get: function get() {
      return this._drivers;
    }
  }], [{
    key: 'LEVELS',
    get: function get() {
      return [Log.EMERGENCY, Log.ALERT, Log.CRITICAL, Log.ERROR, Log.WARNING, Log.NOTICE, Log.INFO, Log.DEBUG];
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'EMERGENCY',
    get: function get() {
      return 'emergency';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ALERT',
    get: function get() {
      return 'alert';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'CRITICAL',
    get: function get() {
      return 'critical';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ERROR',
    get: function get() {
      return 'error';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'WARNING',
    get: function get() {
      return 'warning';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'NOTICE',
    get: function get() {
      return 'notice';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'INFO',
    get: function get() {
      return 'info';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'DEBUG',
    get: function get() {
      return 'debug';
    }
  }]);

  return Log;
}(_deepKernel2.default.ContainerAware);

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 11/14/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractStrategy = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let AbstractStrategy = exports.AbstractStrategy = function (_Core$OOP$Interface) {
  _inherits(AbstractStrategy, _Core$OOP$Interface);

  function AbstractStrategy() {
    _classCallCheck(this, AbstractStrategy);

    return _possibleConstructorReturn(this, (AbstractStrategy.__proto__ || Object.getPrototypeOf(AbstractStrategy)).call(this, ['onSuccess', 'onError']));
  }

  /**
   * @param {Response} response
   * @returns {Boolean}
   */


  _createClass(AbstractStrategy, [{
    key: 'decide',
    value: function decide(response) {
      return this[response.isError ? 'onError' : 'onSuccess'](response);
    }
  }]);

  return AbstractStrategy;
}(_deepCore2.default.OOP.Interface);

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Exception = undefined;

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when any exception occurs
 */
let Exception = exports.Exception = function (_Core$Exception$Excep) {
  _inherits(Exception, _Core$Exception$Excep);

  /**
   * @param {Array} args
   */
  function Exception() {
    var _ref;

    _classCallCheck(this, Exception);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = Exception.__proto__ || Object.getPrototypeOf(Exception)).call.apply(_ref, [this].concat(args)));
  }

  return Exception;
}(_deepCore2.default.Exception.Exception);

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(444),
    listCacheDelete = __webpack_require__(445),
    listCacheGet = __webpack_require__(446),
    listCacheHas = __webpack_require__(447),
    listCacheSet = __webpack_require__(448);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(17);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(57);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(442);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(22);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(90);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),
/* 57 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(40),
    isObject = __webpack_require__(14);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);

function JsonBuilder() { }

JsonBuilder.prototype.build = function(value, shape) {
  return JSON.stringify(translate(value, shape));
};

function translate(value, shape) {
  if (!shape || value === undefined || value === null) return undefined;

  switch (shape.type) {
    case 'structure': return translateStructure(value, shape);
    case 'map': return translateMap(value, shape);
    case 'list': return translateList(value, shape);
    default: return translateScalar(value, shape);
  }
}

function translateStructure(structure, shape) {
  var struct = {};
  util.each(structure, function(name, value) {
    var memberShape = shape.members[name];
    if (memberShape) {
      if (memberShape.location !== 'body') return;
      var locationName = memberShape.isLocationName ? memberShape.name : name;
      var result = translate(value, memberShape);
      if (result !== undefined) struct[locationName] = result;
    }
  });
  return struct;
}

function translateList(list, shape) {
  var out = [];
  util.arrayEach(list, function(value) {
    var result = translate(value, shape.member);
    if (result !== undefined) out.push(result);
  });
  return out;
}

function translateMap(map, shape) {
  var out = {};
  util.each(map, function(key, value) {
    var result = translate(value, shape.value);
    if (result !== undefined) out[key] = result;
  });
  return out;
}

function translateScalar(value, shape) {
  return shape.toWireFormat(value);
}

module.exports = JsonBuilder;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);

function JsonParser() { }

JsonParser.prototype.parse = function(value, shape) {
  return translate(JSON.parse(value), shape);
};

function translate(value, shape) {
  if (!shape || value === undefined) return undefined;

  switch (shape.type) {
    case 'structure': return translateStructure(value, shape);
    case 'map': return translateMap(value, shape);
    case 'list': return translateList(value, shape);
    default: return translateScalar(value, shape);
  }
}

function translateStructure(structure, shape) {
  if (structure == null) return undefined;

  var struct = {};
  var shapeMembers = shape.members;
  util.each(shapeMembers, function(name, memberShape) {
    var locationName = memberShape.isLocationName ? memberShape.name : name;
    if (Object.prototype.hasOwnProperty.call(structure, locationName)) {
      var value = structure[locationName];
      var result = translate(value, memberShape);
      if (result !== undefined) struct[name] = result;
    }
  });
  return struct;
}

function translateList(list, shape) {
  if (list == null) return undefined;

  var out = [];
  util.arrayEach(list, function(value) {
    var result = translate(value, shape.member);
    if (result === undefined) out.push(null);
    else out.push(result);
  });
  return out;
}

function translateMap(map, shape) {
  if (map == null) return undefined;

  var out = {};
  util.each(map, function(key, value) {
    var result = translate(value, shape.value);
    if (result === undefined) out[key] = null;
    else out[key] = result;
  });
  return out;
}

function translateScalar(value, shape) {
  return shape.toType(value);
}

module.exports = JsonParser;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var JsonBuilder = __webpack_require__(59);
var JsonParser = __webpack_require__(60);

function buildRequest(req) {
  var httpRequest = req.httpRequest;
  var api = req.service.api;
  var target = api.targetPrefix + '.' + api.operations[req.operation].name;
  var version = api.jsonVersion || '1.0';
  var input = api.operations[req.operation].input;
  var builder = new JsonBuilder();

  if (version === 1) version = '1.0';
  httpRequest.body = builder.build(req.params || {}, input);
  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;
  httpRequest.headers['X-Amz-Target'] = target;
}

function extractError(resp) {
  var error = {};
  var httpResponse = resp.httpResponse;

  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';
  if (typeof error.code === 'string') {
    error.code = error.code.split(':')[0];
  }

  if (httpResponse.body.length > 0) {
    try {
      var e = JSON.parse(httpResponse.body.toString());
      if (e.__type || e.code) {
        error.code = (e.__type || e.code).split('#').pop();
      }
      if (error.code === 'RequestEntityTooLarge') {
        error.message = 'Request body must be less than 1 MB';
      } else {
        error.message = (e.message || e.Message || null);
      }
    } catch (e) {
      error.statusCode = httpResponse.statusCode;
      error.message = httpResponse.statusMessage;
    }
  } else {
    error.statusCode = httpResponse.statusCode;
    error.message = httpResponse.statusCode.toString();
  }

  resp.error = util.error(new Error(), error);
}

function extractData(resp) {
  var body = resp.httpResponse.body.toString() || '{}';
  if (resp.request.service.config.convertResponseTypes === false) {
    resp.data = JSON.parse(body);
  } else {
    var operation = resp.request.service.api.operations[resp.request.operation];
    var shape = operation.output || {};
    var parser = new JsonParser();
    resp.data = parser.parse(body, shape);
  }
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(221);
exports.encode = exports.stringify = __webpack_require__(222);


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(220);
var util = __webpack_require__(224);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(62);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(9).Buffer;
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}

module.exports = { hash: hash };


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */

/*eslint no-proto: 0 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collection = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Extractable2 = __webpack_require__(35);

var _InvalidArgumentException = __webpack_require__(27);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Collection of something
 */
let Collection = exports.Collection = function (_Extractable) {
  _inherits(Collection, _Extractable);

  /**
   * @param {Object} prototype
   */
  function Collection(prototype) {
    _classCallCheck(this, Collection);

    var _this = _possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).call(this));

    if (prototype.__proto__ !== _Extractable2.Extractable) {
      throw new _InvalidArgumentException.InvalidArgumentException(prototype, _Extractable2.Extractable);
    }

    _this._prototype = prototype;
    _this._vector = [];
    return _this;
  }

  /**
   * @returns {Object}
   */


  _createClass(Collection, [{
    key: 'create',


    /**
     * @param {Array} args
     * @returns {Object}
     */
    value: function create() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new (Function.prototype.bind.apply(this._prototype, [null].concat(args)))();
    }

    /**
     * @param {Array} args
     * @returns {Object}
     */

  }, {
    key: 'add',
    value: function add() {
      let instance = arguments.length === 1 && (arguments.length <= 0 ? undefined : arguments[0]) instanceof this._prototype ? arguments.length <= 0 ? undefined : arguments[0] : this.create.apply(this, arguments);

      this._vector.push(instance);

      return instance;
    }

    /**
     * @returns {Number}
     */

  }, {
    key: 'count',
    value: function count() {
      return this._vector.length;
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'list',
    value: function list() {
      return this._vector;
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'extract',
    value: function extract() {
      let vector = [];

      for (let itemKey in this._vector) {
        if (!this._vector.hasOwnProperty(itemKey)) {
          continue;
        }

        let item = this._vector[itemKey];

        vector.push(item.extract());
      }

      return vector;
    }
  }, {
    key: 'prototype',
    get: function get() {
      return this._prototype;
    }
  }]);

  return Collection;
}(_Extractable2.Extractable);

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */



/**
 * Available AWS services
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let Service = exports.Service = function () {
  function Service() {
    _classCallCheck(this, Service);
  }

  _createClass(Service, null, [{
    key: 'identifier',


    /**
     * @param {String} service
     * @returns {String}
     */
    value: function identifier(service) {
      return `${service}.amazonaws.com`;
    }

    /**
     * @param {String} name
     * @returns {Boolean}
     */

  }, {
    key: 'exists',
    value: function exists(name) {
      return -1 !== Service.list().indexOf(name);
    }

    /**
     * @returns {String[]}
     */

  }, {
    key: 'list',
    value: function list() {
      return [Service.ANY, Service.LAMBDA, Service.SIMPLE_STORAGE_SERVICE, Service.DYNAMO_DB, Service.SIMPLE_NOTIFICATION_SERVICE, Service.COGNITO_IDENTITY, Service.COGNITO_IDENTITY_PROVIDER, Service.COGNITO_SYNC, Service.ELASTIC_CACHE, Service.IDENTITY_AND_ACCESS_MANAGEMENT, Service.KINESIS, Service.CLOUD_FRONT, Service.SECURITY_TOKEN_SERVICE, Service.CLOUD_WATCH_LOGS, Service.API_GATEWAY, Service.API_GATEWAY_EXECUTE, Service.CLOUD_SEARCH, Service.SIMPLE_QUEUE_SERVICE, Service.CERTIFICATE_MANAGER, Service.EC2, Service.ELASTIC_SEARCH, Service.CLOUD_WATCH_EVENTS, Service.CLOUD_WATCH, Service.SIMPLE_EMAIL_SERVICE, Service.LAMBDA_EDGE];
    }
  }, {
    key: 'ANY',

    /**
     * @returns {String}
     */
    get: function get() {
      return '*';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'EC2',
    get: function get() {
      return 'ec2';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'LAMBDA',
    get: function get() {
      return 'lambda';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'SIMPLE_EMAIL_SERVICE',
    get: function get() {
      return 'ses';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'SIMPLE_STORAGE_SERVICE',
    get: function get() {
      return 's3';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'DYNAMO_DB',
    get: function get() {
      return 'dynamodb';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'SIMPLE_NOTIFICATION_SERVICE',
    get: function get() {
      return 'sns';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'COGNITO_IDENTITY',
    get: function get() {
      return 'cognito-identity';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'COGNITO_IDENTITY_PROVIDER',
    get: function get() {
      return 'cognito-idp';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'COGNITO_SYNC',
    get: function get() {
      return 'cognito-sync';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ELASTIC_CACHE',
    get: function get() {
      return 'elasticache';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'IDENTITY_AND_ACCESS_MANAGEMENT',
    get: function get() {
      return 'iam';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'KINESIS',
    get: function get() {
      return 'kinesis';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'CLOUD_FRONT',
    get: function get() {
      return 'cloudfront';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'CLOUD_SEARCH',
    get: function get() {
      return 'cloudsearch';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'SECURITY_TOKEN_SERVICE',
    get: function get() {
      return 'sts';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'CLOUD_WATCH',
    get: function get() {
      return 'cloudwatch';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'CLOUD_WATCH_LOGS',
    get: function get() {
      return 'logs';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'CLOUD_WATCH_EVENTS',
    get: function get() {
      return 'events';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'API_GATEWAY',
    get: function get() {
      return 'apigateway';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'API_GATEWAY_EXECUTE',
    get: function get() {
      return 'execute-api';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'SIMPLE_QUEUE_SERVICE',
    get: function get() {
      return 'sqs';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'CERTIFICATE_MANAGER',
    get: function get() {
      return 'acm';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ELASTIC_SEARCH',
    get: function get() {
      return 'es';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'LAMBDA_EDGE',
    get: function get() {
      return 'edgelambda';
    }
  }]);

  return Service;
}();

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/25/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Interface = undefined;

var _MethodsNotImplementedException = __webpack_require__(120);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Interface implementation
 */
let Interface =
/**
 * @param {String[]|String} abstractMethods
 */
exports.Interface = function Interface() {
  _classCallCheck(this, Interface);

  for (var _len = arguments.length, abstractMethods = Array(_len), _key = 0; _key < _len; _key++) {
    abstractMethods[_key] = arguments[_key];
  }

  let methods = abstractMethods.length === 1 && abstractMethods[0] instanceof Array ? abstractMethods[0] : abstractMethods;

  let notImplementedMethods = [];

  for (let abstractMethodKey in methods) {
    if (!methods.hasOwnProperty(abstractMethodKey)) {
      continue;
    }

    let abstractMethod = methods[abstractMethodKey];
    if (!(this[abstractMethod] instanceof Function)) {
      notImplementedMethods.push(abstractMethod);
    }
  }

  if (notImplementedMethods.length > 0) {
    throw new _MethodsNotImplementedException.MethodsNotImplementedException(notImplementedMethods);
  }
};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Injectable = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Instance = __webpack_require__(128);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _MissingWorkingMicroserviceException = __webpack_require__(304);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Microservice injectable object
 */
let Injectable = exports.Injectable = function () {
  function Injectable() {
    _classCallCheck(this, Injectable);

    this._microservice = null;
  }

  /**
   * @param {Instance} microservice
   * @returns {Injectable}
   */


  _createClass(Injectable, [{
    key: 'bind',
    value: function bind(microservice) {
      this.microservice = microservice;

      return this;
    }

    /**
     * @returns {Instance}
     */

  }, {
    key: 'microservice',
    get: function get() {
      if (this._microservice === null) {
        throw new _MissingWorkingMicroserviceException.MissingWorkingMicroserviceException();
      }

      return this._microservice;
    }

    /**
     * @param {Instance} instance
     */
    ,
    set: function set(instance) {
      if (!(instance instanceof _Instance.Instance)) {
        throw new _deepCore2.default.Exception.InvalidArgumentException(instance, 'Microservice');
      }

      this._microservice = instance;
    }
  }]);

  return Injectable;
}();

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Created by mgoria on 1/29/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractEvent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _joi = __webpack_require__(21);

var _joi2 = _interopRequireDefault(_joi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Abstract RUM event
 */
let AbstractEvent = exports.AbstractEvent = function (_Core$OOP$Interface) {
  _inherits(AbstractEvent, _Core$OOP$Interface);

  /**
   * @param {Object} kernel
   * @param {Object} rawData
   */
  function AbstractEvent(kernel, rawData) {
    _classCallCheck(this, AbstractEvent);

    var _this = _possibleConstructorReturn(this, (AbstractEvent.__proto__ || Object.getPrototypeOf(AbstractEvent)).call(this, ['toJSON', 'getValidationSchema', 'getEventLevel']));

    _this._kernel = kernel;
    _this._rawData = rawData;
    _this._data = _this._enrichWithContextData(rawData);

    _this._validationError = null;
    return _this;
  }

  /**
   * @returns {String}
   */


  _createClass(AbstractEvent, [{
    key: 'isValid',


    /**
     * @returns {Boolean}
     */
    value: function isValid() {
      let result = this.validate();

      return result.error ? false : true;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'validate',
    value: function validate() {
      let result = _joi2.default.validate(this._data, this.getValidationSchema(), {
        stripUnknown: true,
        convert: true,
        abortEarly: false
      });

      if (result.error) {
        this._validationError = result.error;
      } else {
        this._data = result.value;
      }

      return result;
    }

    /**
     * @returns {Object|null}
     */

  }, {
    key: '_enrichWithContextData',


    /**
     * @param {Object} event
     * @returns {Object}
     * @private
     */
    value: function _enrichWithContextData(event) {
      event.eventLevel = this.getEventLevel();
      event.time = event.time || new Date().getTime();
      event.metadata = event.metadata || {};

      if (this._kernel.isBackend) {
        let runtimeContext = this._kernel.runtimeContext;

        event.depthLevel = runtimeContext.getDeepFrameworkOption('lambdaDepthLevel') || 0;
        event.mainRequestId = runtimeContext.getDeepFrameworkOption('mainRequestId') || runtimeContext.awsRequestId;
        event.context = AbstractEvent.BACKEND_CONTEXT;
        event.memoryUsage = process.memoryUsage();
        event.environment = {}; // @todo - find a way to get Lambda container info (id, OS, etc)

        event.requestId = event.requestId || runtimeContext.awsRequestId;

        // identity context is not passed if lambda is called directly by another lambda not through API Gateway
        event.identityId = runtimeContext.identity && runtimeContext.identity.cognitoIdentityId ? runtimeContext.identity.cognitoIdentityId : 'system';
      } else {
        event.context = AbstractEvent.FRONTEND_CONTEXT;
        event.memoryUsage = window.performance && window.performance.memory ? window.performance.memory : {};
        event.environment = {
          userAgent: navigator ? navigator.userAgent : ''
        };

        let securityToken = this._kernel.get('security').token;
        event.identityId = securityToken && securityToken.identityId ? securityToken.identityId : 'anonymous';
      }

      return event;
    }
  }, {
    key: 'validationError',
    get: function get() {
      return this._validationError;
    }
  }], [{
    key: 'FRAMEWORK_EVENT_LEVEL',
    get: function get() {
      return 'Framework';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'FRONTEND_EVENT_LEVEL',
    get: function get() {
      return 'Frontend';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'BACKEND_CONTEXT',
    get: function get() {
      return 'Backend';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'FRONTEND_CONTEXT',
    get: function get() {
      return 'Frontend';
    }

    /**
     * @returns {String[]}
     */

  }, {
    key: 'CONTEXTS',
    get: function get() {
      return [AbstractEvent.BACKEND_CONTEXT, AbstractEvent.FRONTEND_CONTEXT];
    }

    /**
     * @returns {String[]}
     */

  }, {
    key: 'SERVICES',
    get: function get() {
      return ['deep-asset', 'deep-cache', 'deep-core', 'deep-db', 'deep-event', 'deep-fs', 'deep-kernel', 'deep-log', 'deep-notification', 'deep-resource', 'deep-security', 'deep-validation'];
    }

    /**
     * @returns {String[]}
     */

  }, {
    key: 'RESOURCE_TYPES',
    get: function get() {
      return ['Browser', 'Lambda', 'S3', 'DynamoDB', 'CloudFront', 'InMemory', 'LocalStorage', 'Redis', 'S3FS', 'Cognito'];
    }
  }]);

  return AbstractEvent;
}(_deepCore2.default.OOP.Interface);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 8/4/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Action = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UnknownMethodException = __webpack_require__(334);

var _Request = __webpack_require__(129);

var _LocalRequest = __webpack_require__(337);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Resource action
 */
let Action = exports.Action = function () {
  /**
   * @param {Instance} resource
   * @param {String} name
   * @param {String} type
   * @param {Array} methods
   * @param {Object} source
   * @param {String} region
   * @param {Boolean} forceUserIdentity
   * @param {Object} apiCache
   * @param {String} scope
   * @param {Object} api
   */
  function Action(resource, name, type, methods, source, region, forceUserIdentity, apiCache, scope, api) {
    _classCallCheck(this, Action);

    this._resource = resource;
    this._name = name;
    this._type = type;
    this._methods = methods;
    this._source = source;
    this._region = region;
    this._forceUserIdentity = forceUserIdentity;
    this._apiCacheEnabled = apiCache && apiCache.hasOwnProperty('enabled') ? apiCache.enabled : false;
    this._apiCacheTtl = apiCache && apiCache.hasOwnProperty('ttl') ? apiCache.ttl : _Request.Request.TTL_INVALIDATE;
    this._scope = scope;
    // setup AWS_IAM as default auth type for back compatibility
    this._apiAuthType = api && api.hasOwnProperty('authorization') ? api.authorization : Action.API_AWS_IAM_AUTH;
    this._apiKeyRequired = api && api.hasOwnProperty('keyRequired') ? api.keyRequired : false;

    this._validationSchemaName = null;
    this._baseUrl = null;
  }

  /**
   * @param {String|null} url
   */


  _createClass(Action, [{
    key: 'request',


    /**
     * @param {Object} payload
     * @param {String} method
     * @returns {LocalRequest|Request}
     */
    value: function request() {
      let payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      method = method || (this._methods.length > 0 ? this._methods[0] : Action.HTTP_VERBS[0]);

      if (this._methods.length > 0 && this._methods.indexOf(method) === -1) {
        throw new _UnknownMethodException.UnknownMethodException(method, this._methods);
      }

      let RequestImplementation = this._resource.localBackend ? _LocalRequest.LocalRequest : _Request.Request;
      let requestObject = new RequestImplementation(this, payload, method);

      requestObject.validationSchemaName = this._validationSchemaName;

      if (this._resource.cache) {
        requestObject.cacheImpl = this._resource.cache;
      }

      return requestObject;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'baseUrl',
    set: function set(url) {
      this._baseUrl = url;
    }

    /**
     * @returns {String|null}
     */
    ,
    get: function get() {
      return this._baseUrl;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'validationSchemaName',
    get: function get() {
      return this._validationSchemaName;
    }

    /**
     * @param {String} validationSchemaName
     */
    ,
    set: function set(validationSchemaName) {
      this._validationSchemaName = validationSchemaName;
    }
  }, {
    key: 'sourceId',
    get: function get() {
      return this._type === Action.LAMBDA ? this._source.original : this._source.api;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'forceUserIdentity',
    get: function get() {
      return this._forceUserIdentity;
    }

    /**
     * @returns {Instance}
     */

  }, {
    key: 'resource',
    get: function get() {
      return this._resource;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'name',
    get: function get() {
      return this._name;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'type',
    get: function get() {
      return this._type;
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'methods',
    get: function get() {
      return this._methods;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'source',
    get: function get() {
      return this._source;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isOriginalSourceInvokable',
    get: function get() {
      return !!this._source.original;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isApiSourceInvokable',
    get: function get() {
      return !!this._source.api;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'region',
    get: function get() {
      return this._region;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'apiCacheEnabled',
    get: function get() {
      return this._apiCacheEnabled;
    }

    /**
     * @returns {Number}
     */

  }, {
    key: 'apiCacheTtl',
    get: function get() {
      return this._apiCacheTtl;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'scope',
    get: function get() {
      return this._scope;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'apiAuthType',
    get: function get() {
      return this._apiAuthType;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'apiKeyRequired',
    get: function get() {
      return this._apiKeyRequired;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'fullName',
    get: function get() {
      return `@${this._resource.microservice.identifier}:${this._resource.name}:${this._name}`;
    }

    /**
     * @returns {Array}
     */

  }], [{
    key: 'HTTP_VERBS',
    get: function get() {
      return ['GET', 'POST', 'DELETE', 'HEAD', 'PUT', 'OPTIONS', 'PATCH'];
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'LAMBDA',
    get: function get() {
      return 'lambda';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'EXTERNAL',
    get: function get() {
      return 'external';
    }

    /**
     * @returns {string}
     */

  }, {
    key: 'DEEP_CACHE_QS_PARAM',
    get: function get() {
      return '_deepQsHash';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'API_AWS_IAM_AUTH',
    get: function get() {
      return 'AWS_IAM';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'API_NONE_AUTH',
    get: function get() {
      return 'NONE';
    }
  }]);

  return Action;
}();

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LambdaResponse = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Response2 = __webpack_require__(72);

var _ValidationError = __webpack_require__(335);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Response object
 */
let LambdaResponse = exports.LambdaResponse = function (_Response) {
  _inherits(LambdaResponse, _Response);

  /**
   * @param {*} args
   */
  function LambdaResponse() {
    var _ref;

    _classCallCheck(this, LambdaResponse);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = LambdaResponse.__proto__ || Object.getPrototypeOf(LambdaResponse)).call.apply(_ref, [this].concat(args)));

    _this._originalResponse = null;
    _this._logResult = null;

    // assure calling the very first!
    _this._fillStatusCode();

    let responsePayload = _this._decodePayload();

    _this._fillData(responsePayload);
    _this._fillError(responsePayload);
    return _this;
  }

  /**
   * @param {AWS.Response|null} response
   */


  _createClass(LambdaResponse, [{
    key: '_fillData',


    /**
     * @param {Object|null} responsePayload
     * @private
     */
    value: function _fillData(responsePayload) {
      if (responsePayload && !this._request.async && !responsePayload.hasOwnProperty('errorMessage')) {

        this._data = responsePayload;
      }
    }

    /**
     * @param {Object|null} responsePayload
     * @private
     */

  }, {
    key: '_fillError',
    value: function _fillError(responsePayload) {
      if (this._rawError) {
        this._error = this._rawError;
      } else if (!this._request.async) {
        if (responsePayload && responsePayload.hasOwnProperty('errorMessage')) {
          this._error = LambdaResponse.getPayloadError(responsePayload);
        }
      } else if (this._statusCode !== 202) {
        // check for failed async invocation
        this._error = new Error('Unknown async invocation error');
      }
    }

    /**
     * @private
     */

  }, {
    key: '_fillStatusCode',
    value: function _fillStatusCode() {
      if (this._rawData) {
        this._statusCode = parseInt(this._rawData.StatusCode || this._rawData.Status);
      } else {
        this._statusCode = 500;
      }
    }

    /**
     * @returns {Object|null}
     * @private
     */

  }, {
    key: '_decodePayload',
    value: function _decodePayload() {
      let decodedPayload = null;

      if (this._rawData) {
        if (this._rawData.Payload) {
          decodedPayload = LambdaResponse._decodePayloadObject(this._rawData.Payload);

          // treat the case when error is stored in payload (nested)
          if (decodedPayload && decodedPayload.hasOwnProperty('errorMessage')) {
            decodedPayload = LambdaResponse._decodeRawErrorObject(decodedPayload.errorMessage);
          }
        } else if (this._rawData.errorMessage) {
          decodedPayload = LambdaResponse._decodeRawErrorObject(this._rawData.errorMessage);
        }
      }

      return decodedPayload;
    }

    /**
     * @param {String|Object|*} rawError
     * @returns {Object|String|null}
     * @private
     */

  }, {
    key: '_decodeBase64',


    /**
     * @param {String} str
     * @returns {String}
     * @private
     */
    value: function _decodeBase64(str) {
      if (typeof Buffer !== 'undefined') {
        str = new Buffer(str, 'base64').toString('utf8');
      } else if (typeof atob !== 'undefined') {
        str = atob(str);
      }

      return str;
    }
  }, {
    key: 'originalResponse',
    set: function set(response) {
      this._originalResponse = response;
    }

    /**
     *
     * @returns {AWS.Response|null}
     */
    ,
    get: function get() {
      return this._originalResponse;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'headers',
    get: function get() {
      if (!this._headers && this.originalResponse) {
        this._headers = this.originalResponse.httpResponse ? this.originalResponse.httpResponse.headers : {};
      }

      return this._headers;
    }

    /**
     * @returns {String|null}
     */

  }, {
    key: 'requestId',
    get: function get() {
      if (!this._requestId && this.headers) {
        if (this.headers[_Response2.Response.REQUEST_ID_HEADER.toLowerCase()]) {
          this._requestId = this.headers[_Response2.Response.REQUEST_ID_HEADER.toLowerCase()];
        }
      }

      return this._requestId;
    }
  }, {
    key: 'logResult',


    /**
     * @returns {String}
     */
    get: function get() {
      if (this._logResult) {
        return this._logResult;
      }

      if (this._rawData && this._rawData.hasOwnProperty('LogResult')) {
        this._logResult = this._decodeBase64(this._rawData.LogResult);
      }

      return this._logResult;
    }

    /**
     * @param {String} rawPayload
     * @returns {Object|String|null}
     * @private
     */

  }], [{
    key: '_decodeRawErrorObject',
    value: function _decodeRawErrorObject(rawError) {
      let errorObj = rawError;

      if (typeof errorObj === 'string') {
        try {
          errorObj = JSON.parse(errorObj);
        } catch (e) {
          errorObj = {
            errorMessage: errorObj, // assume errorObj is the error message
            errorStack: new Error('Unknown error occurred.').stack,
            errorType: 'UnknownError'
          };
        }
      } else {
        errorObj = errorObj || {
          errorMessage: 'Unknown error occurred.',
          errorStack: new Error('Unknown error occurred.').stack,
          errorType: 'UnknownError'
        };
      }

      return errorObj;
    }
  }, {
    key: '_decodePayloadObject',
    value: function _decodePayloadObject(rawPayload) {
      let payload = rawPayload;

      if (typeof rawPayload === 'string') {
        try {
          payload = JSON.parse(payload);
        } catch (e) {
          console.debug('Unable to parse: ', e);
        }
      }

      return payload;
    }

    /**
     * @param {Object} payload
     * @returns {Error|ValidationError|null}
     */

  }, {
    key: 'getPayloadError',
    value: function getPayloadError(payload) {
      if (payload.hasOwnProperty('errorMessage')) {
        let error = null;

        if (LambdaResponse.isValidationError(payload)) {
          error = new _ValidationError.ValidationError(payload.errorMessage, payload.validationErrors);
        } else {
          payload.errorType = payload.errorType || 'UnknownError';
          payload.errorMessage = payload.errorMessage || 'Unknown error occurred.';
          payload.errorStack = payload.errorStack || new Error(payload.errorMessage).stack;

          error = new Error(payload.errorMessage);

          // try to define a custom constructor name
          // fail silently in case of readonly property...
          try {
            Object.defineProperty(error, 'name', {
              value: payload.errorType
            });
          } catch (e) {
            console.debug('Unable to define property: ', e);
          }
        }

        try {
          Object.defineProperty(error, 'stack', {
            value: payload.errorStack
          });
        } catch (e) {
          console.debug('Unable to define property: ', e);
        }

        return error;
      }

      return null;
    }

    /**
     * @param {Object} payload
     * @returns {Boolean}
     */

  }, {
    key: 'isValidationError',
    value: function isValidationError(payload) {
      return payload.hasOwnProperty('errorType') && payload.hasOwnProperty('errorMessage') && payload.hasOwnProperty('validationErrors') && payload.errorType === LambdaResponse.VALIDATION_ERROR_TYPE;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'VALIDATION_ERROR_TYPE',
    get: function get() {
      return 'ValidationError';
    }
  }]);

  return LambdaResponse;
}(_Response2.Response);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer))

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



/**
 * Response object
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let Response = exports.Response = function () {
  /**
   * @param {Request|*} request
   * @param {Object} data
   * @param {String} error
   */
  function Response(request, data, error) {
    _classCallCheck(this, Response);

    this._request = request;

    this._rawError = error;
    this._rawData = data;

    if (this._rawError) {
      this._rawError = Response._toErrorObj(this._rawError);
    }

    this._statusCode = null;
    this._data = null;
    this._error = null;
    this._headers = null;
    this._requestId = null;
  }

  /**
   * @returns {String}
   */


  _createClass(Response, [{
    key: 'toJSON',


    /**
     * @returns {{requestId: String, statusCode: Number, headers: (Object|null), data: Object, error: Error}}
     */
    value: function toJSON() {
      return {
        requestId: this.requestId,
        statusCode: this.statusCode,
        headers: this.headers,
        data: this.data,
        error: this.error
      };
    }
  }, {
    key: 'rawData',


    /**
     * @returns {*}
     */
    get: function get() {
      return this._rawData;
    }

    /**
     * @returns {*}
     */

  }, {
    key: 'rawError',
    get: function get() {
      return this._rawError;
    }

    /**
     * @returns {Request}
     */

  }, {
    key: 'request',
    get: function get() {
      return this._request;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }

    /**
     * @returns {Number}
     */

  }, {
    key: 'statusCode',
    get: function get() {
      return this._statusCode;
    }

    /**
     * @returns {Error}
     */

  }, {
    key: 'error',
    get: function get() {
      return this._error;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'requestId',
    get: function get() {
      return this._requestId;
    }

    /**
     * @returns {Object|null}
     */

  }, {
    key: 'headers',
    get: function get() {
      return this._headers;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isError',
    get: function get() {
      return !!this.error;
    }

    /**
     * @param {String|Error|*} rawError
     * @returns {Error}
     * @private
     */

  }], [{
    key: '_toErrorObj',
    value: function _toErrorObj(rawError) {
      return rawError instanceof Error ? rawError : new Error(rawError.toString());
    }
  }, {
    key: 'ORIGINAL_REQUEST_ID_HEADER',
    get: function get() {
      return 'x-amzn-original-RequestId';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'REQUEST_ID_HEADER',
    get: function get() {
      return 'x-amzn-RequestId';
    }
  }]);

  return Response;
}();

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 11/14/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomStrategy = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractStrategy2 = __webpack_require__(49);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let CustomStrategy = exports.CustomStrategy = function (_AbstractStrategy) {
  _inherits(CustomStrategy, _AbstractStrategy);

  /**
   * @param {Function} onError
   * @param {Function} onSuccess
   */
  function CustomStrategy() {
    let onError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => false;
    let onSuccess = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => false;

    _classCallCheck(this, CustomStrategy);

    var _this = _possibleConstructorReturn(this, (CustomStrategy.__proto__ || Object.getPrototypeOf(CustomStrategy)).call(this));

    _this._onErrorCb = onError;
    _this._onSuccessCb = onSuccess;
    return _this;
  }

  /**
   * @param {Response} response
   * @returns {*}
   */


  _createClass(CustomStrategy, [{
    key: 'onSuccess',
    value: function onSuccess(response) {
      return this._onSuccessCb(response);
    }

    /**
     * @param {Response} response
     * @returns {*}
     */

  }, {
    key: 'onError',
    value: function onError(response) {
      return this._onErrorCb(response);
    }
  }]);

  return CustomStrategy;
}(_AbstractStrategy2.AbstractStrategy);

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Created by CCristi on 11/14/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InternalErrorStrategy = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractStrategy2 = __webpack_require__(49);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let InternalErrorStrategy = exports.InternalErrorStrategy = function (_AbstractStrategy) {
  _inherits(InternalErrorStrategy, _AbstractStrategy);

  function InternalErrorStrategy() {
    _classCallCheck(this, InternalErrorStrategy);

    return _possibleConstructorReturn(this, (InternalErrorStrategy.__proto__ || Object.getPrototypeOf(InternalErrorStrategy)).call(this));
  }

  /**
   * @returns {Boolean}
   */


  _createClass(InternalErrorStrategy, [{
    key: 'onSuccess',
    value: function onSuccess() {
      return false;
    }

    /**
     * @param {Response} response
     * @returns {Boolean}
     */

  }, {
    key: 'onError',
    value: function onError(response) {
      return response.statusCode >= 500;
    }
  }]);

  return InternalErrorStrategy;
}(_AbstractStrategy2.AbstractStrategy);

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 11/14/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StrategyFactory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CustomStrategy = __webpack_require__(73);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

__webpack_require__(74);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// browserify fix

let StrategyFactory = exports.StrategyFactory = function () {
  function StrategyFactory() {
    _classCallCheck(this, StrategyFactory);
  }

  _createClass(StrategyFactory, null, [{
    key: 'create',

    /**
     * @param {String|Function} strategy
     * @param {Object[]} args
     * @returns {AbstractStrategy}
     */
    value: function create() {
      let strategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'internal-error';

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof strategy === 'string') {
        const strategyFullName = `${StrategyFactory._pascalCase(strategy)}Strategy`;
        const StrategyProto = __webpack_require__(339)(`./${strategyFullName}`)[strategyFullName];

        return new (Function.prototype.bind.apply(StrategyProto, [null].concat(args)))();
      } else if (typeof strategy === 'function') {
        return new (Function.prototype.bind.apply(_CustomStrategy.CustomStrategy, [null].concat([strategy], args)))();
      }

      throw new _deepCore2.default.Exception.InvalidArgumentException(strategy, 'string|function');
    }

    /**
     * @param {String} str
     * @returns {String}
     */

  }, {
    key: '_pascalCase',
    value: function _pascalCase(str) {
      return str.split(/[^a-zA-Z0-9]+/).reduce((pascalString, part) => {
        return pascalString + part.charAt(0).toUpperCase() + part.slice(1);
      }, '');
    }
  }]);

  return StrategyFactory;
}();

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 12/22/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdentityProviderTokenExpiredException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when identity provider token expired
 */
let IdentityProviderTokenExpiredException = exports.IdentityProviderTokenExpiredException = function (_Exception) {
  _inherits(IdentityProviderTokenExpiredException, _Exception);

  /**
   * @param {String} providerName
   * @param {Date} expireTime
   */
  function IdentityProviderTokenExpiredException(providerName, expireTime) {
    _classCallCheck(this, IdentityProviderTokenExpiredException);

    return _possibleConstructorReturn(this, (IdentityProviderTokenExpiredException.__proto__ || Object.getPrototypeOf(IdentityProviderTokenExpiredException)).call(this, `"${providerName}" access_token has expired on "${expireTime.toString()}".`));
  }

  return IdentityProviderTokenExpiredException;
}(_Exception2.Exception);

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/12/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdentityProvider = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MissingLoginProviderException = __webpack_require__(349);

var _IdentityProviderMismatchException = __webpack_require__(345);

var _InvalidProviderIdentityException = __webpack_require__(346);

var _MissingIdentityImplementationException = __webpack_require__(348);

var _UserPoolImplementation = __webpack_require__(354);

var _MissingRefreshTokenException = __webpack_require__(350);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @todo: split identity providers implementations
 * 
 * 3rd Party identity provider (Amazon, Facebook, Google, etc.)
 */
let IdentityProvider = exports.IdentityProvider = function () {
  /**
   * @param {Object} providers
   * @param {String} providerName
   * @param {Object} identityMetadata
   */
  function IdentityProvider(providers, providerName, identityMetadata) {
    _classCallCheck(this, IdentityProvider);

    let providerDomain = this.getProviderDomain(providerName, providers);

    if (!providerDomain) {
      throw new _MissingLoginProviderException.MissingLoginProviderException(providerName);
    }

    if (identityMetadata.provider && identityMetadata.provider !== providerName && providerName !== IdentityProvider.SNAPSHOT_PROVIDER) {

      throw new _IdentityProviderMismatchException.IdentityProviderMismatchException(providerName, identityMetadata.provider);
    }

    let normalizedMetadata = this._normalizeIdentityMetadata(providerName, identityMetadata);

    this._metadata = identityMetadata;
    this._userToken = normalizedMetadata.token;
    this._tokenExpTime = new Date(normalizedMetadata.expireTime);
    this._userId = normalizedMetadata.userId;
    this._providers = providers;
    this._refreshToken = normalizedMetadata.refreshToken;
    this._domain = providerDomain;
    this._clientName = normalizedMetadata.clientName;
    this._name = providerName;
  }

  /**
   * @param {Object} metadata
   * @returns {IdentityProvider}
   */


  _createClass(IdentityProvider, [{
    key: 'getProviderDomain',


    /**
     * @param {String} providerName
     * @param {Object} providers
     * @returns {*}
     */
    value: function getProviderDomain(providerName, providers) {
      let domainRegexp;

      switch (providerName) {
        case IdentityProvider.AMAZON_PROVIDER:
          domainRegexp = /^www\.amazon\.com$/;
          break;
        case IdentityProvider.FACEBOOK_PROVIDER:
          domainRegexp = /^graph\.facebook\.com$/;
          break;
        case IdentityProvider.GOOGLE_PROVIDER:
          domainRegexp = /^accounts\.google\.com$/;
          break;
        case IdentityProvider.AUTH0_PROVIDER:
          domainRegexp = /^.+\.auth0\.com$/;
          break;
        case IdentityProvider.COGNITO_USER_POOL_PROVIDER:
          domainRegexp = /^cognito\-idp\.[\w\d\-]+\.amazonaws\.com\/[\w\d\-]+$/;
          break;
        case IdentityProvider.SNAPSHOT_PROVIDER:
          return IdentityProvider.SNAPSHOT_PROVIDER;
      }

      if (!domainRegexp) {
        return null;
      }

      for (let providerDomain in providers) {
        if (!providers.hasOwnProperty(providerDomain)) {
          continue;
        }

        if (domainRegexp.test(providerDomain)) {
          return providerDomain;
        }
      }

      return null;
    }

    /**
     * @todo: Implement other identity providers
     * @param {String} providerName
     * @param {Object} identityMetadata
     * @returns {{token: String, userId: String, expireTime: Number}}
     * @private
     */

  }, {
    key: '_normalizeIdentityMetadata',
    value: function _normalizeIdentityMetadata(providerName, identityMetadata) {
      let token = null;
      let expiresIn = null;
      let expireTime = null;
      let userId = null;
      let refreshToken = null;
      let clientName = null;

      switch (providerName) {
        case IdentityProvider.FACEBOOK_PROVIDER:
          token = identityMetadata.accessToken;
          expiresIn = identityMetadata.expiresIn;
          userId = identityMetadata.userID;
          break;

        case IdentityProvider.COGNITO_USER_POOL_PROVIDER:
          let userSession = identityMetadata.getSignInUserSession();
          let idTokenInstance = userSession.getIdToken();
          refreshToken = userSession.getRefreshToken().getToken();
          token = idTokenInstance.getJwtToken();
          expireTime = idTokenInstance.getExpiration() * 1000;
          clientName = identityMetadata.pool.getClientId();
          break;

        case IdentityProvider.AMAZON_PROVIDER:
          token = identityMetadata.access_token;
          userId = identityMetadata.user_id;
          expiresIn = identityMetadata.expires_in || 3600;
          break;

        case IdentityProvider.AUTH0_PROVIDER:
          expireTime = identityMetadata.tokenExpirationTime;
          token = identityMetadata.access_token;
          userId = identityMetadata.user_id;
          break;

        // backend identity provider has the same structure as normalized metadata. see `toJSON` method
        case IdentityProvider.SNAPSHOT_PROVIDER:
          return identityMetadata;
      }

      userId = userId || null;
      expireTime = expireTime || (expiresIn ? Date.now() + expiresIn * 1000 : null);

      if (!(token && expireTime)) {
        throw new _InvalidProviderIdentityException.InvalidProviderIdentityException(providerName);
      }

      return { token: token, userId: userId, expireTime: expireTime, refreshToken: refreshToken, clientName: clientName };
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'isTokenValid',


    /**
     * @returns {boolean}
     */
    value: function isTokenValid() {
      if (this.userToken && this.tokenExpirationTime) {
        return this.tokenExpirationTime > new Date();
      }

      return false;
    }

    /**
     * @param {Object} idpSnapshot
     * 
     * @returns {IdentityProvider}
     */

  }, {
    key: 'fillFromSnapshot',
    value: function fillFromSnapshot(idpSnapshot) {
      this._name = idpSnapshot.name;
      this._refreshToken = idpSnapshot.refreshToken;
      this._clientName = idpSnapshot.clientName;
      this._userToken = idpSnapshot.token;
      this._tokenExpTime = new Date(idpSnapshot.expireTime);

      return this;
    }

    /**
     * return normalizedMetadata compatible structure, see `_normalizeIdentityMetadata` method
     * @returns {{name: *, refreshToken: *}}
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        token: this._userToken,
        expireTime: this._tokenExpTime.getTime(),
        userId: this._userId,
        refreshToken: this._refreshToken,
        name: this._name,
        clientName: this._clientName
      };
    }

    /**
     * @returns {Promise}
     */

  }, {
    key: 'refresh',
    value: function refresh() {
      if (!this._refreshToken) {
        return Promise.reject(new _MissingRefreshTokenException.MissingRefreshTokenException());
      }

      let implementation = null;

      switch (this._name) {
        case IdentityProvider.COGNITO_USER_POOL_PROVIDER:
          implementation = new _UserPoolImplementation.UserPoolImplementation(this);
          break;
        default:
          throw new _MissingIdentityImplementationException.MissingIdentityImplementationException(this._name);
      }

      return implementation.refreshIdentity();
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'config',


    /**
     * @param {String} name
     * @returns {Object}
     */
    value: function config(name) {
      if (!this.providers.hasOwnProperty(name)) {
        throw new _MissingLoginProviderException.MissingLoginProviderException(name);
      }

      return this.providers[name];
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'name',


    /**
     * @param {String} name
     */
    set: function set(name) {
      this._name = name;
    },


    /**
     * @returns {String}
     */
    get: function get() {
      return this._name;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'providers',
    get: function get() {
      return this._providers;
    }
  }, {
    key: 'domain',
    get: function get() {
      return this._domain;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'userToken',
    get: function get() {
      return this._userToken;
    }

    /**
     * @param {String} userToken
     */
    ,
    set: function set(userToken) {
      this._userToken = userToken;
    }

    /**
     * @returns {Date}
     */

  }, {
    key: 'tokenExpirationTime',
    get: function get() {
      return this._tokenExpTime;
    }

    /**
     * @param {Date} tokenExpirationTime
     */
    ,
    set: function set(tokenExpirationTime) {
      this._tokenExpTime = tokenExpirationTime instanceof Date ? tokenExpirationTime : new Date(tokenExpirationTime);
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'refreshToken',
    get: function get() {
      return this._refreshToken;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'clientName',
    get: function get() {
      return this._clientName;
    }
  }, {
    key: 'userId',
    get: function get() {
      return this._userId;
    }
  }], [{
    key: 'createFromSnapshot',
    value: function createFromSnapshot(metadata) {
      let provider = new IdentityProvider(null, IdentityProvider.SNAPSHOT_PROVIDER, metadata);

      provider.fillFromSnapshot(metadata);

      return provider;
    }
  }, {
    key: 'COGNITO_USER_POOL_PROVIDER',
    get: function get() {
      return 'cognito-user-pool';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'FACEBOOK_PROVIDER',
    get: function get() {
      return 'facebook';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'AMAZON_PROVIDER',
    get: function get() {
      return 'amazon';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'GOOGLE_PROVIDER',
    get: function get() {
      return 'google';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'AUTH0_PROVIDER',
    get: function get() {
      return 'auth0';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'SNAPSHOT_PROVIDER',
    get: function get() {
      return 'snapshot';
    }
  }]);

  return IdentityProvider;
}();

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

(function(exports) {
  "use strict";

  function isArray(obj) {
    if (obj !== null) {
      return Object.prototype.toString.call(obj) === "[object Array]";
    } else {
      return false;
    }
  }

  function isObject(obj) {
    if (obj !== null) {
      return Object.prototype.toString.call(obj) === "[object Object]";
    } else {
      return false;
    }
  }

  function strictDeepEqual(first, second) {
    // Check the scalar case first.
    if (first === second) {
      return true;
    }

    // Check if they are the same type.
    var firstType = Object.prototype.toString.call(first);
    if (firstType !== Object.prototype.toString.call(second)) {
      return false;
    }
    // We know that first and second have the same type so we can just check the
    // first type from now on.
    if (isArray(first) === true) {
      // Short circuit if they're not the same length;
      if (first.length !== second.length) {
        return false;
      }
      for (var i = 0; i < first.length; i++) {
        if (strictDeepEqual(first[i], second[i]) === false) {
          return false;
        }
      }
      return true;
    }
    if (isObject(first) === true) {
      // An object is equal if it has the same key/value pairs.
      var keysSeen = {};
      for (var key in first) {
        if (hasOwnProperty.call(first, key)) {
          if (strictDeepEqual(first[key], second[key]) === false) {
            return false;
          }
          keysSeen[key] = true;
        }
      }
      // Now check that there aren't any keys in second that weren't
      // in first.
      for (var key2 in second) {
        if (hasOwnProperty.call(second, key2)) {
          if (keysSeen[key2] !== true) {
            return false;
          }
        }
      }
      return true;
    }
    return false;
  }

  function isFalse(obj) {
    // From the spec:
    // A false value corresponds to the following values:
    // Empty list
    // Empty object
    // Empty string
    // False boolean
    // null value

    // First check the scalar values.
    if (obj === "" || obj === false || obj === null) {
        return true;
    } else if (isArray(obj) && obj.length === 0) {
        // Check for an empty array.
        return true;
    } else if (isObject(obj)) {
        // Check for an empty object.
        for (var key in obj) {
            // If there are any keys, then
            // the object is not empty so the object
            // is not false.
            if (obj.hasOwnProperty(key)) {
              return false;
            }
        }
        return true;
    } else {
        return false;
    }
  }

  function objValues(obj) {
    var keys = Object.keys(obj);
    var values = [];
    for (var i = 0; i < keys.length; i++) {
      values.push(obj[keys[i]]);
    }
    return values;
  }

  function merge(a, b) {
      var merged = {};
      for (var key in a) {
          merged[key] = a[key];
      }
      for (var key2 in b) {
          merged[key2] = b[key2];
      }
      return merged;
  }

  var trimLeft;
  if (typeof String.prototype.trimLeft === "function") {
    trimLeft = function(str) {
      return str.trimLeft();
    };
  } else {
    trimLeft = function(str) {
      return str.match(/^\s*(.*)/)[1];
    };
  }

  // Type constants used to define functions.
  var TYPE_NUMBER = 0;
  var TYPE_ANY = 1;
  var TYPE_STRING = 2;
  var TYPE_ARRAY = 3;
  var TYPE_OBJECT = 4;
  var TYPE_BOOLEAN = 5;
  var TYPE_EXPREF = 6;
  var TYPE_NULL = 7;
  var TYPE_ARRAY_NUMBER = 8;
  var TYPE_ARRAY_STRING = 9;

  var TOK_EOF = "EOF";
  var TOK_UNQUOTEDIDENTIFIER = "UnquotedIdentifier";
  var TOK_QUOTEDIDENTIFIER = "QuotedIdentifier";
  var TOK_RBRACKET = "Rbracket";
  var TOK_RPAREN = "Rparen";
  var TOK_COMMA = "Comma";
  var TOK_COLON = "Colon";
  var TOK_RBRACE = "Rbrace";
  var TOK_NUMBER = "Number";
  var TOK_CURRENT = "Current";
  var TOK_EXPREF = "Expref";
  var TOK_PIPE = "Pipe";
  var TOK_OR = "Or";
  var TOK_AND = "And";
  var TOK_EQ = "EQ";
  var TOK_GT = "GT";
  var TOK_LT = "LT";
  var TOK_GTE = "GTE";
  var TOK_LTE = "LTE";
  var TOK_NE = "NE";
  var TOK_FLATTEN = "Flatten";
  var TOK_STAR = "Star";
  var TOK_FILTER = "Filter";
  var TOK_DOT = "Dot";
  var TOK_NOT = "Not";
  var TOK_LBRACE = "Lbrace";
  var TOK_LBRACKET = "Lbracket";
  var TOK_LPAREN= "Lparen";
  var TOK_LITERAL= "Literal";

  // The "&", "[", "<", ">" tokens
  // are not in basicToken because
  // there are two token variants
  // ("&&", "[?", "<=", ">=").  This is specially handled
  // below.

  var basicTokens = {
    ".": TOK_DOT,
    "*": TOK_STAR,
    ",": TOK_COMMA,
    ":": TOK_COLON,
    "{": TOK_LBRACE,
    "}": TOK_RBRACE,
    "]": TOK_RBRACKET,
    "(": TOK_LPAREN,
    ")": TOK_RPAREN,
    "@": TOK_CURRENT
  };

  var operatorStartToken = {
      "<": true,
      ">": true,
      "=": true,
      "!": true
  };

  var skipChars = {
      " ": true,
      "\t": true,
      "\n": true
  };


  function isAlpha(ch) {
      return (ch >= "a" && ch <= "z") ||
             (ch >= "A" && ch <= "Z") ||
             ch === "_";
  }

  function isNum(ch) {
      return (ch >= "0" && ch <= "9") ||
             ch === "-";
  }
  function isAlphaNum(ch) {
      return (ch >= "a" && ch <= "z") ||
             (ch >= "A" && ch <= "Z") ||
             (ch >= "0" && ch <= "9") ||
             ch === "_";
  }

  function Lexer() {
  }
  Lexer.prototype = {
      tokenize: function(stream) {
          var tokens = [];
          this._current = 0;
          var start;
          var identifier;
          var token;
          while (this._current < stream.length) {
              if (isAlpha(stream[this._current])) {
                  start = this._current;
                  identifier = this._consumeUnquotedIdentifier(stream);
                  tokens.push({type: TOK_UNQUOTEDIDENTIFIER,
                               value: identifier,
                               start: start});
              } else if (basicTokens[stream[this._current]] !== undefined) {
                  tokens.push({type: basicTokens[stream[this._current]],
                              value: stream[this._current],
                              start: this._current});
                  this._current++;
              } else if (isNum(stream[this._current])) {
                  token = this._consumeNumber(stream);
                  tokens.push(token);
              } else if (stream[this._current] === "[") {
                  // No need to increment this._current.  This happens
                  // in _consumeLBracket
                  token = this._consumeLBracket(stream);
                  tokens.push(token);
              } else if (stream[this._current] === "\"") {
                  start = this._current;
                  identifier = this._consumeQuotedIdentifier(stream);
                  tokens.push({type: TOK_QUOTEDIDENTIFIER,
                               value: identifier,
                               start: start});
              } else if (stream[this._current] === "'") {
                  start = this._current;
                  identifier = this._consumeRawStringLiteral(stream);
                  tokens.push({type: TOK_LITERAL,
                               value: identifier,
                               start: start});
              } else if (stream[this._current] === "`") {
                  start = this._current;
                  var literal = this._consumeLiteral(stream);
                  tokens.push({type: TOK_LITERAL,
                               value: literal,
                               start: start});
              } else if (operatorStartToken[stream[this._current]] !== undefined) {
                  tokens.push(this._consumeOperator(stream));
              } else if (skipChars[stream[this._current]] !== undefined) {
                  // Ignore whitespace.
                  this._current++;
              } else if (stream[this._current] === "&") {
                  start = this._current;
                  this._current++;
                  if (stream[this._current] === "&") {
                      this._current++;
                      tokens.push({type: TOK_AND, value: "&&", start: start});
                  } else {
                      tokens.push({type: TOK_EXPREF, value: "&", start: start});
                  }
              } else if (stream[this._current] === "|") {
                  start = this._current;
                  this._current++;
                  if (stream[this._current] === "|") {
                      this._current++;
                      tokens.push({type: TOK_OR, value: "||", start: start});
                  } else {
                      tokens.push({type: TOK_PIPE, value: "|", start: start});
                  }
              } else {
                  var error = new Error("Unknown character:" + stream[this._current]);
                  error.name = "LexerError";
                  throw error;
              }
          }
          return tokens;
      },

      _consumeUnquotedIdentifier: function(stream) {
          var start = this._current;
          this._current++;
          while (this._current < stream.length && isAlphaNum(stream[this._current])) {
              this._current++;
          }
          return stream.slice(start, this._current);
      },

      _consumeQuotedIdentifier: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (stream[this._current] !== "\"" && this._current < maxLength) {
              // You can escape a double quote and you can escape an escape.
              var current = this._current;
              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                               stream[current + 1] === "\"")) {
                  current += 2;
              } else {
                  current++;
              }
              this._current = current;
          }
          this._current++;
          return JSON.parse(stream.slice(start, this._current));
      },

      _consumeRawStringLiteral: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (stream[this._current] !== "'" && this._current < maxLength) {
              // You can escape a single quote and you can escape an escape.
              var current = this._current;
              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                               stream[current + 1] === "'")) {
                  current += 2;
              } else {
                  current++;
              }
              this._current = current;
          }
          this._current++;
          var literal = stream.slice(start + 1, this._current - 1);
          return literal.replace("\\'", "'");
      },

      _consumeNumber: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (isNum(stream[this._current]) && this._current < maxLength) {
              this._current++;
          }
          var value = parseInt(stream.slice(start, this._current));
          return {type: TOK_NUMBER, value: value, start: start};
      },

      _consumeLBracket: function(stream) {
          var start = this._current;
          this._current++;
          if (stream[this._current] === "?") {
              this._current++;
              return {type: TOK_FILTER, value: "[?", start: start};
          } else if (stream[this._current] === "]") {
              this._current++;
              return {type: TOK_FLATTEN, value: "[]", start: start};
          } else {
              return {type: TOK_LBRACKET, value: "[", start: start};
          }
      },

      _consumeOperator: function(stream) {
          var start = this._current;
          var startingChar = stream[start];
          this._current++;
          if (startingChar === "!") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_NE, value: "!=", start: start};
              } else {
                return {type: TOK_NOT, value: "!", start: start};
              }
          } else if (startingChar === "<") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_LTE, value: "<=", start: start};
              } else {
                  return {type: TOK_LT, value: "<", start: start};
              }
          } else if (startingChar === ">") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_GTE, value: ">=", start: start};
              } else {
                  return {type: TOK_GT, value: ">", start: start};
              }
          } else if (startingChar === "=") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_EQ, value: "==", start: start};
              }
          }
      },

      _consumeLiteral: function(stream) {
          this._current++;
          var start = this._current;
          var maxLength = stream.length;
          var literal;
          while(stream[this._current] !== "`" && this._current < maxLength) {
              // You can escape a literal char or you can escape the escape.
              var current = this._current;
              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                               stream[current + 1] === "`")) {
                  current += 2;
              } else {
                  current++;
              }
              this._current = current;
          }
          var literalString = trimLeft(stream.slice(start, this._current));
          literalString = literalString.replace("\\`", "`");
          if (this._looksLikeJSON(literalString)) {
              literal = JSON.parse(literalString);
          } else {
              // Try to JSON parse it as "<literal>"
              literal = JSON.parse("\"" + literalString + "\"");
          }
          // +1 gets us to the ending "`", +1 to move on to the next char.
          this._current++;
          return literal;
      },

      _looksLikeJSON: function(literalString) {
          var startingChars = "[{\"";
          var jsonLiterals = ["true", "false", "null"];
          var numberLooking = "-0123456789";

          if (literalString === "") {
              return false;
          } else if (startingChars.indexOf(literalString[0]) >= 0) {
              return true;
          } else if (jsonLiterals.indexOf(literalString) >= 0) {
              return true;
          } else if (numberLooking.indexOf(literalString[0]) >= 0) {
              try {
                  JSON.parse(literalString);
                  return true;
              } catch (ex) {
                  return false;
              }
          } else {
              return false;
          }
      }
  };

      var bindingPower = {};
      bindingPower[TOK_EOF] = 0;
      bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;
      bindingPower[TOK_QUOTEDIDENTIFIER] = 0;
      bindingPower[TOK_RBRACKET] = 0;
      bindingPower[TOK_RPAREN] = 0;
      bindingPower[TOK_COMMA] = 0;
      bindingPower[TOK_RBRACE] = 0;
      bindingPower[TOK_NUMBER] = 0;
      bindingPower[TOK_CURRENT] = 0;
      bindingPower[TOK_EXPREF] = 0;
      bindingPower[TOK_PIPE] = 1;
      bindingPower[TOK_OR] = 2;
      bindingPower[TOK_AND] = 3;
      bindingPower[TOK_EQ] = 5;
      bindingPower[TOK_GT] = 5;
      bindingPower[TOK_LT] = 5;
      bindingPower[TOK_GTE] = 5;
      bindingPower[TOK_LTE] = 5;
      bindingPower[TOK_NE] = 5;
      bindingPower[TOK_FLATTEN] = 9;
      bindingPower[TOK_STAR] = 20;
      bindingPower[TOK_FILTER] = 21;
      bindingPower[TOK_DOT] = 40;
      bindingPower[TOK_NOT] = 45;
      bindingPower[TOK_LBRACE] = 50;
      bindingPower[TOK_LBRACKET] = 55;
      bindingPower[TOK_LPAREN] = 60;

  function Parser() {
  }

  Parser.prototype = {
      parse: function(expression) {
          this._loadTokens(expression);
          this.index = 0;
          var ast = this.expression(0);
          if (this._lookahead(0) !== TOK_EOF) {
              var t = this._lookaheadToken(0);
              var error = new Error(
                  "Unexpected token type: " + t.type + ", value: " + t.value);
              error.name = "ParserError";
              throw error;
          }
          return ast;
      },

      _loadTokens: function(expression) {
          var lexer = new Lexer();
          var tokens = lexer.tokenize(expression);
          tokens.push({type: TOK_EOF, value: "", start: expression.length});
          this.tokens = tokens;
      },

      expression: function(rbp) {
          var leftToken = this._lookaheadToken(0);
          this._advance();
          var left = this.nud(leftToken);
          var currentToken = this._lookahead(0);
          while (rbp < bindingPower[currentToken]) {
              this._advance();
              left = this.led(currentToken, left);
              currentToken = this._lookahead(0);
          }
          return left;
      },

      _lookahead: function(number) {
          return this.tokens[this.index + number].type;
      },

      _lookaheadToken: function(number) {
          return this.tokens[this.index + number];
      },

      _advance: function() {
          this.index++;
      },

      nud: function(token) {
        var left;
        var right;
        var expression;
        switch (token.type) {
          case TOK_LITERAL:
            return {type: "Literal", value: token.value};
          case TOK_UNQUOTEDIDENTIFIER:
            return {type: "Field", name: token.value};
          case TOK_QUOTEDIDENTIFIER:
            var node = {type: "Field", name: token.value};
            if (this._lookahead(0) === TOK_LPAREN) {
                throw new Error("Quoted identifier not allowed for function names.");
            } else {
                return node;
            }
            break;
          case TOK_NOT:
            right = this.expression(bindingPower.Not);
            return {type: "NotExpression", children: [right]};
          case TOK_STAR:
            left = {type: "Identity"};
            right = null;
            if (this._lookahead(0) === TOK_RBRACKET) {
                // This can happen in a multiselect,
                // [a, b, *]
                right = {type: "Identity"};
            } else {
                right = this._parseProjectionRHS(bindingPower.Star);
            }
            return {type: "ValueProjection", children: [left, right]};
          case TOK_FILTER:
            return this.led(token.type, {type: "Identity"});
          case TOK_LBRACE:
            return this._parseMultiselectHash();
          case TOK_FLATTEN:
            left = {type: TOK_FLATTEN, children: [{type: "Identity"}]};
            right = this._parseProjectionRHS(bindingPower.Flatten);
            return {type: "Projection", children: [left, right]};
          case TOK_LBRACKET:
            if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {
                right = this._parseIndexExpression();
                return this._projectIfSlice({type: "Identity"}, right);
            } else if (this._lookahead(0) === TOK_STAR &&
                       this._lookahead(1) === TOK_RBRACKET) {
                this._advance();
                this._advance();
                right = this._parseProjectionRHS(bindingPower.Star);
                return {type: "Projection",
                        children: [{type: "Identity"}, right]};
            } else {
                return this._parseMultiselectList();
            }
            break;
          case TOK_CURRENT:
            return {type: TOK_CURRENT};
          case TOK_EXPREF:
            expression = this.expression(bindingPower.Expref);
            return {type: "ExpressionReference", children: [expression]};
          case TOK_LPAREN:
            var args = [];
            while (this._lookahead(0) !== TOK_RPAREN) {
              if (this._lookahead(0) === TOK_CURRENT) {
                expression = {type: TOK_CURRENT};
                this._advance();
              } else {
                expression = this.expression(0);
              }
              args.push(expression);
            }
            this._match(TOK_RPAREN);
            return args[0];
          default:
            this._errorToken(token);
        }
      },

      led: function(tokenName, left) {
        var right;
        switch(tokenName) {
          case TOK_DOT:
            var rbp = bindingPower.Dot;
            if (this._lookahead(0) !== TOK_STAR) {
                right = this._parseDotRHS(rbp);
                return {type: "Subexpression", children: [left, right]};
            } else {
                // Creating a projection.
                this._advance();
                right = this._parseProjectionRHS(rbp);
                return {type: "ValueProjection", children: [left, right]};
            }
            break;
          case TOK_PIPE:
            right = this.expression(bindingPower.Pipe);
            return {type: TOK_PIPE, children: [left, right]};
          case TOK_OR:
            right = this.expression(bindingPower.Or);
            return {type: "OrExpression", children: [left, right]};
          case TOK_AND:
            right = this.expression(bindingPower.And);
            return {type: "AndExpression", children: [left, right]};
          case TOK_LPAREN:
            var name = left.name;
            var args = [];
            var expression, node;
            while (this._lookahead(0) !== TOK_RPAREN) {
              if (this._lookahead(0) === TOK_CURRENT) {
                expression = {type: TOK_CURRENT};
                this._advance();
              } else {
                expression = this.expression(0);
              }
              if (this._lookahead(0) === TOK_COMMA) {
                this._match(TOK_COMMA);
              }
              args.push(expression);
            }
            this._match(TOK_RPAREN);
            node = {type: "Function", name: name, children: args};
            return node;
          case TOK_FILTER:
            var condition = this.expression(0);
            this._match(TOK_RBRACKET);
            if (this._lookahead(0) === TOK_FLATTEN) {
              right = {type: "Identity"};
            } else {
              right = this._parseProjectionRHS(bindingPower.Filter);
            }
            return {type: "FilterProjection", children: [left, right, condition]};
          case TOK_FLATTEN:
            var leftNode = {type: TOK_FLATTEN, children: [left]};
            var rightNode = this._parseProjectionRHS(bindingPower.Flatten);
            return {type: "Projection", children: [leftNode, rightNode]};
          case TOK_EQ:
          case TOK_NE:
          case TOK_GT:
          case TOK_GTE:
          case TOK_LT:
          case TOK_LTE:
            return this._parseComparator(left, tokenName);
          case TOK_LBRACKET:
            var token = this._lookaheadToken(0);
            if (token.type === TOK_NUMBER || token.type === TOK_COLON) {
                right = this._parseIndexExpression();
                return this._projectIfSlice(left, right);
            } else {
                this._match(TOK_STAR);
                this._match(TOK_RBRACKET);
                right = this._parseProjectionRHS(bindingPower.Star);
                return {type: "Projection", children: [left, right]};
            }
            break;
          default:
            this._errorToken(this._lookaheadToken(0));
        }
      },

      _match: function(tokenType) {
          if (this._lookahead(0) === tokenType) {
              this._advance();
          } else {
              var t = this._lookaheadToken(0);
              var error = new Error("Expected " + tokenType + ", got: " + t.type);
              error.name = "ParserError";
              throw error;
          }
      },

      _errorToken: function(token) {
          var error = new Error("Invalid token (" +
                                token.type + "): \"" +
                                token.value + "\"");
          error.name = "ParserError";
          throw error;
      },


      _parseIndexExpression: function() {
          if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {
              return this._parseSliceExpression();
          } else {
              var node = {
                  type: "Index",
                  value: this._lookaheadToken(0).value};
              this._advance();
              this._match(TOK_RBRACKET);
              return node;
          }
      },

      _projectIfSlice: function(left, right) {
          var indexExpr = {type: "IndexExpression", children: [left, right]};
          if (right.type === "Slice") {
              return {
                  type: "Projection",
                  children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)]
              };
          } else {
              return indexExpr;
          }
      },

      _parseSliceExpression: function() {
          // [start:end:step] where each part is optional, as well as the last
          // colon.
          var parts = [null, null, null];
          var index = 0;
          var currentToken = this._lookahead(0);
          while (currentToken !== TOK_RBRACKET && index < 3) {
              if (currentToken === TOK_COLON) {
                  index++;
                  this._advance();
              } else if (currentToken === TOK_NUMBER) {
                  parts[index] = this._lookaheadToken(0).value;
                  this._advance();
              } else {
                  var t = this._lookahead(0);
                  var error = new Error("Syntax error, unexpected token: " +
                                        t.value + "(" + t.type + ")");
                  error.name = "Parsererror";
                  throw error;
              }
              currentToken = this._lookahead(0);
          }
          this._match(TOK_RBRACKET);
          return {
              type: "Slice",
              children: parts
          };
      },

      _parseComparator: function(left, comparator) {
        var right = this.expression(bindingPower[comparator]);
        return {type: "Comparator", name: comparator, children: [left, right]};
      },

      _parseDotRHS: function(rbp) {
          var lookahead = this._lookahead(0);
          var exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];
          if (exprTokens.indexOf(lookahead) >= 0) {
              return this.expression(rbp);
          } else if (lookahead === TOK_LBRACKET) {
              this._match(TOK_LBRACKET);
              return this._parseMultiselectList();
          } else if (lookahead === TOK_LBRACE) {
              this._match(TOK_LBRACE);
              return this._parseMultiselectHash();
          }
      },

      _parseProjectionRHS: function(rbp) {
          var right;
          if (bindingPower[this._lookahead(0)] < 10) {
              right = {type: "Identity"};
          } else if (this._lookahead(0) === TOK_LBRACKET) {
              right = this.expression(rbp);
          } else if (this._lookahead(0) === TOK_FILTER) {
              right = this.expression(rbp);
          } else if (this._lookahead(0) === TOK_DOT) {
              this._match(TOK_DOT);
              right = this._parseDotRHS(rbp);
          } else {
              var t = this._lookaheadToken(0);
              var error = new Error("Sytanx error, unexpected token: " +
                                    t.value + "(" + t.type + ")");
              error.name = "ParserError";
              throw error;
          }
          return right;
      },

      _parseMultiselectList: function() {
          var expressions = [];
          while (this._lookahead(0) !== TOK_RBRACKET) {
              var expression = this.expression(0);
              expressions.push(expression);
              if (this._lookahead(0) === TOK_COMMA) {
                  this._match(TOK_COMMA);
                  if (this._lookahead(0) === TOK_RBRACKET) {
                    throw new Error("Unexpected token Rbracket");
                  }
              }
          }
          this._match(TOK_RBRACKET);
          return {type: "MultiSelectList", children: expressions};
      },

      _parseMultiselectHash: function() {
        var pairs = [];
        var identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];
        var keyToken, keyName, value, node;
        for (;;) {
          keyToken = this._lookaheadToken(0);
          if (identifierTypes.indexOf(keyToken.type) < 0) {
            throw new Error("Expecting an identifier token, got: " +
                            keyToken.type);
          }
          keyName = keyToken.value;
          this._advance();
          this._match(TOK_COLON);
          value = this.expression(0);
          node = {type: "KeyValuePair", name: keyName, value: value};
          pairs.push(node);
          if (this._lookahead(0) === TOK_COMMA) {
            this._match(TOK_COMMA);
          } else if (this._lookahead(0) === TOK_RBRACE) {
            this._match(TOK_RBRACE);
            break;
          }
        }
        return {type: "MultiSelectHash", children: pairs};
      }
  };


  function TreeInterpreter(runtime) {
    this.runtime = runtime;
  }

  TreeInterpreter.prototype = {
      search: function(node, value) {
          return this.visit(node, value);
      },

      visit: function(node, value) {
          var matched, current, result, first, second, field, left, right, collected, i;
          switch (node.type) {
            case "Field":
              if (value === null ) {
                  return null;
              } else if (isObject(value)) {
                  field = value[node.name];
                  if (field === undefined) {
                      return null;
                  } else {
                      return field;
                  }
              } else {
                return null;
              }
              break;
            case "Subexpression":
              result = this.visit(node.children[0], value);
              for (i = 1; i < node.children.length; i++) {
                  result = this.visit(node.children[1], result);
                  if (result === null) {
                      return null;
                  }
              }
              return result;
            case "IndexExpression":
              left = this.visit(node.children[0], value);
              right = this.visit(node.children[1], left);
              return right;
            case "Index":
              if (!isArray(value)) {
                return null;
              }
              var index = node.value;
              if (index < 0) {
                index = value.length + index;
              }
              result = value[index];
              if (result === undefined) {
                result = null;
              }
              return result;
            case "Slice":
              if (!isArray(value)) {
                return null;
              }
              var sliceParams = node.children.slice(0);
              var computed = this.computeSliceParams(value.length, sliceParams);
              var start = computed[0];
              var stop = computed[1];
              var step = computed[2];
              result = [];
              if (step > 0) {
                  for (i = start; i < stop; i += step) {
                      result.push(value[i]);
                  }
              } else {
                  for (i = start; i > stop; i += step) {
                      result.push(value[i]);
                  }
              }
              return result;
            case "Projection":
              // Evaluate left child.
              var base = this.visit(node.children[0], value);
              if (!isArray(base)) {
                return null;
              }
              collected = [];
              for (i = 0; i < base.length; i++) {
                current = this.visit(node.children[1], base[i]);
                if (current !== null) {
                  collected.push(current);
                }
              }
              return collected;
            case "ValueProjection":
              // Evaluate left child.
              base = this.visit(node.children[0], value);
              if (!isObject(base)) {
                return null;
              }
              collected = [];
              var values = objValues(base);
              for (i = 0; i < values.length; i++) {
                current = this.visit(node.children[1], values[i]);
                if (current !== null) {
                  collected.push(current);
                }
              }
              return collected;
            case "FilterProjection":
              base = this.visit(node.children[0], value);
              if (!isArray(base)) {
                return null;
              }
              var filtered = [];
              var finalResults = [];
              for (i = 0; i < base.length; i++) {
                matched = this.visit(node.children[2], base[i]);
                if (!isFalse(matched)) {
                  filtered.push(base[i]);
                }
              }
              for (var j = 0; j < filtered.length; j++) {
                current = this.visit(node.children[1], filtered[j]);
                if (current !== null) {
                  finalResults.push(current);
                }
              }
              return finalResults;
            case "Comparator":
              first = this.visit(node.children[0], value);
              second = this.visit(node.children[1], value);
              switch(node.name) {
                case TOK_EQ:
                  result = strictDeepEqual(first, second);
                  break;
                case TOK_NE:
                  result = !strictDeepEqual(first, second);
                  break;
                case TOK_GT:
                  result = first > second;
                  break;
                case TOK_GTE:
                  result = first >= second;
                  break;
                case TOK_LT:
                  result = first < second;
                  break;
                case TOK_LTE:
                  result = first <= second;
                  break;
                default:
                  throw new Error("Unknown comparator: " + node.name);
              }
              return result;
            case TOK_FLATTEN:
              var original = this.visit(node.children[0], value);
              if (!isArray(original)) {
                return null;
              }
              var merged = [];
              for (i = 0; i < original.length; i++) {
                current = original[i];
                if (isArray(current)) {
                  merged.push.apply(merged, current);
                } else {
                  merged.push(current);
                }
              }
              return merged;
            case "Identity":
              return value;
            case "MultiSelectList":
              if (value === null) {
                return null;
              }
              collected = [];
              for (i = 0; i < node.children.length; i++) {
                  collected.push(this.visit(node.children[i], value));
              }
              return collected;
            case "MultiSelectHash":
              if (value === null) {
                return null;
              }
              collected = {};
              var child;
              for (i = 0; i < node.children.length; i++) {
                child = node.children[i];
                collected[child.name] = this.visit(child.value, value);
              }
              return collected;
            case "OrExpression":
              matched = this.visit(node.children[0], value);
              if (isFalse(matched)) {
                  matched = this.visit(node.children[1], value);
              }
              return matched;
            case "AndExpression":
              first = this.visit(node.children[0], value);

              if (isFalse(first) === true) {
                return first;
              }
              return this.visit(node.children[1], value);
            case "NotExpression":
              first = this.visit(node.children[0], value);
              return isFalse(first);
            case "Literal":
              return node.value;
            case TOK_PIPE:
              left = this.visit(node.children[0], value);
              return this.visit(node.children[1], left);
            case TOK_CURRENT:
              return value;
            case "Function":
              var resolvedArgs = [];
              for (i = 0; i < node.children.length; i++) {
                  resolvedArgs.push(this.visit(node.children[i], value));
              }
              return this.runtime.callFunction(node.name, resolvedArgs);
            case "ExpressionReference":
              var refNode = node.children[0];
              // Tag the node with a specific attribute so the type
              // checker verify the type.
              refNode.jmespathType = TOK_EXPREF;
              return refNode;
            default:
              throw new Error("Unknown node type: " + node.type);
          }
      },

      computeSliceParams: function(arrayLength, sliceParams) {
        var start = sliceParams[0];
        var stop = sliceParams[1];
        var step = sliceParams[2];
        var computed = [null, null, null];
        if (step === null) {
          step = 1;
        } else if (step === 0) {
          var error = new Error("Invalid slice, step cannot be 0");
          error.name = "RuntimeError";
          throw error;
        }
        var stepValueNegative = step < 0 ? true : false;

        if (start === null) {
            start = stepValueNegative ? arrayLength - 1 : 0;
        } else {
            start = this.capSliceRange(arrayLength, start, step);
        }

        if (stop === null) {
            stop = stepValueNegative ? -1 : arrayLength;
        } else {
            stop = this.capSliceRange(arrayLength, stop, step);
        }
        computed[0] = start;
        computed[1] = stop;
        computed[2] = step;
        return computed;
      },

      capSliceRange: function(arrayLength, actualValue, step) {
          if (actualValue < 0) {
              actualValue += arrayLength;
              if (actualValue < 0) {
                  actualValue = step < 0 ? -1 : 0;
              }
          } else if (actualValue >= arrayLength) {
              actualValue = step < 0 ? arrayLength - 1 : arrayLength;
          }
          return actualValue;
      }

  };

  function Runtime(interpreter) {
    this._interpreter = interpreter;
    this.functionTable = {
        // name: [function, <signature>]
        // The <signature> can be:
        //
        // {
        //   args: [[type1, type2], [type1, type2]],
        //   variadic: true|false
        // }
        //
        // Each arg in the arg list is a list of valid types
        // (if the function is overloaded and supports multiple
        // types.  If the type is "any" then no type checking
        // occurs on the argument.  Variadic is optional
        // and if not provided is assumed to be false.
        abs: {_func: this._functionAbs, _signature: [{types: [TYPE_NUMBER]}]},
        avg: {_func: this._functionAvg, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
        ceil: {_func: this._functionCeil, _signature: [{types: [TYPE_NUMBER]}]},
        contains: {
            _func: this._functionContains,
            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]},
                        {types: [TYPE_ANY]}]},
        "ends_with": {
            _func: this._functionEndsWith,
            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
        floor: {_func: this._functionFloor, _signature: [{types: [TYPE_NUMBER]}]},
        length: {
            _func: this._functionLength,
            _signature: [{types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT]}]},
        map: {
            _func: this._functionMap,
            _signature: [{types: [TYPE_EXPREF]}, {types: [TYPE_ARRAY]}]},
        max: {
            _func: this._functionMax,
            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
        "merge": {
            _func: this._functionMerge,
            _signature: [{types: [TYPE_OBJECT], variadic: true}]
        },
        "max_by": {
          _func: this._functionMaxBy,
          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
        },
        sum: {_func: this._functionSum, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
        "starts_with": {
            _func: this._functionStartsWith,
            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
        min: {
            _func: this._functionMin,
            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
        "min_by": {
          _func: this._functionMinBy,
          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
        },
        type: {_func: this._functionType, _signature: [{types: [TYPE_ANY]}]},
        keys: {_func: this._functionKeys, _signature: [{types: [TYPE_OBJECT]}]},
        values: {_func: this._functionValues, _signature: [{types: [TYPE_OBJECT]}]},
        sort: {_func: this._functionSort, _signature: [{types: [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER]}]},
        "sort_by": {
          _func: this._functionSortBy,
          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
        },
        join: {
            _func: this._functionJoin,
            _signature: [
                {types: [TYPE_STRING]},
                {types: [TYPE_ARRAY_STRING]}
            ]
        },
        reverse: {
            _func: this._functionReverse,
            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]}]},
        "to_array": {_func: this._functionToArray, _signature: [{types: [TYPE_ANY]}]},
        "to_string": {_func: this._functionToString, _signature: [{types: [TYPE_ANY]}]},
        "to_number": {_func: this._functionToNumber, _signature: [{types: [TYPE_ANY]}]},
        "not_null": {
            _func: this._functionNotNull,
            _signature: [{types: [TYPE_ANY], variadic: true}]
        }
    };
  }

  Runtime.prototype = {
    callFunction: function(name, resolvedArgs) {
      var functionEntry = this.functionTable[name];
      if (functionEntry === undefined) {
          throw new Error("Unknown function: " + name + "()");
      }
      this._validateArgs(name, resolvedArgs, functionEntry._signature);
      return functionEntry._func.call(this, resolvedArgs);
    },

    _validateArgs: function(name, args, signature) {
        // Validating the args requires validating
        // the correct arity and the correct type of each arg.
        // If the last argument is declared as variadic, then we need
        // a minimum number of args to be required.  Otherwise it has to
        // be an exact amount.
        var pluralized;
        if (signature[signature.length - 1].variadic) {
            if (args.length < signature.length) {
                pluralized = signature.length === 1 ? " argument" : " arguments";
                throw new Error("ArgumentError: " + name + "() " +
                                "takes at least" + signature.length + pluralized +
                                " but received " + args.length);
            }
        } else if (args.length !== signature.length) {
            pluralized = signature.length === 1 ? " argument" : " arguments";
            throw new Error("ArgumentError: " + name + "() " +
                            "takes " + signature.length + pluralized +
                            " but received " + args.length);
        }
        var currentSpec;
        var actualType;
        var typeMatched;
        for (var i = 0; i < signature.length; i++) {
            typeMatched = false;
            currentSpec = signature[i].types;
            actualType = this._getTypeName(args[i]);
            for (var j = 0; j < currentSpec.length; j++) {
                if (this._typeMatches(actualType, currentSpec[j], args[i])) {
                    typeMatched = true;
                    break;
                }
            }
            if (!typeMatched) {
                throw new Error("TypeError: " + name + "() " +
                                "expected argument " + (i + 1) +
                                " to be type " + currentSpec +
                                " but received type " + actualType +
                                " instead.");
            }
        }
    },

    _typeMatches: function(actual, expected, argValue) {
        if (expected === TYPE_ANY) {
            return true;
        }
        if (expected === TYPE_ARRAY_STRING ||
            expected === TYPE_ARRAY_NUMBER ||
            expected === TYPE_ARRAY) {
            // The expected type can either just be array,
            // or it can require a specific subtype (array of numbers).
            //
            // The simplest case is if "array" with no subtype is specified.
            if (expected === TYPE_ARRAY) {
                return actual === TYPE_ARRAY;
            } else if (actual === TYPE_ARRAY) {
                // Otherwise we need to check subtypes.
                // I think this has potential to be improved.
                var subtype;
                if (expected === TYPE_ARRAY_NUMBER) {
                  subtype = TYPE_NUMBER;
                } else if (expected === TYPE_ARRAY_STRING) {
                  subtype = TYPE_STRING;
                }
                for (var i = 0; i < argValue.length; i++) {
                    if (!this._typeMatches(
                            this._getTypeName(argValue[i]), subtype,
                                             argValue[i])) {
                        return false;
                    }
                }
                return true;
            }
        } else {
            return actual === expected;
        }
    },
    _getTypeName: function(obj) {
        switch (Object.prototype.toString.call(obj)) {
            case "[object String]":
              return TYPE_STRING;
            case "[object Number]":
              return TYPE_NUMBER;
            case "[object Array]":
              return TYPE_ARRAY;
            case "[object Boolean]":
              return TYPE_BOOLEAN;
            case "[object Null]":
              return TYPE_NULL;
            case "[object Object]":
              // Check if it's an expref.  If it has, it's been
              // tagged with a jmespathType attr of 'Expref';
              if (obj.jmespathType === TOK_EXPREF) {
                return TYPE_EXPREF;
              } else {
                return TYPE_OBJECT;
              }
        }
    },

    _functionStartsWith: function(resolvedArgs) {
        return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;
    },

    _functionEndsWith: function(resolvedArgs) {
        var searchStr = resolvedArgs[0];
        var suffix = resolvedArgs[1];
        return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;
    },

    _functionReverse: function(resolvedArgs) {
        var typeName = this._getTypeName(resolvedArgs[0]);
        if (typeName === TYPE_STRING) {
          var originalStr = resolvedArgs[0];
          var reversedStr = "";
          for (var i = originalStr.length - 1; i >= 0; i--) {
              reversedStr += originalStr[i];
          }
          return reversedStr;
        } else {
          var reversedArray = resolvedArgs[0].slice(0);
          reversedArray.reverse();
          return reversedArray;
        }
    },

    _functionAbs: function(resolvedArgs) {
      return Math.abs(resolvedArgs[0]);
    },

    _functionCeil: function(resolvedArgs) {
        return Math.ceil(resolvedArgs[0]);
    },

    _functionAvg: function(resolvedArgs) {
        var sum = 0;
        var inputArray = resolvedArgs[0];
        for (var i = 0; i < inputArray.length; i++) {
            sum += inputArray[i];
        }
        return sum / inputArray.length;
    },

    _functionContains: function(resolvedArgs) {
        return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;
    },

    _functionFloor: function(resolvedArgs) {
        return Math.floor(resolvedArgs[0]);
    },

    _functionLength: function(resolvedArgs) {
       if (!isObject(resolvedArgs[0])) {
         return resolvedArgs[0].length;
       } else {
         // As far as I can tell, there's no way to get the length
         // of an object without O(n) iteration through the object.
         return Object.keys(resolvedArgs[0]).length;
       }
    },

    _functionMap: function(resolvedArgs) {
      var mapped = [];
      var interpreter = this._interpreter;
      var exprefNode = resolvedArgs[0];
      var elements = resolvedArgs[1];
      for (var i = 0; i < elements.length; i++) {
          mapped.push(interpreter.visit(exprefNode, elements[i]));
      }
      return mapped;
    },

    _functionMerge: function(resolvedArgs) {
      var merged = {};
      for (var i = 0; i < resolvedArgs.length; i++) {
        var current = resolvedArgs[i];
        for (var key in current) {
          merged[key] = current[key];
        }
      }
      return merged;
    },

    _functionMax: function(resolvedArgs) {
      if (resolvedArgs[0].length > 0) {
        var typeName = this._getTypeName(resolvedArgs[0][0]);
        if (typeName === TYPE_NUMBER) {
          return Math.max.apply(Math, resolvedArgs[0]);
        } else {
          var elements = resolvedArgs[0];
          var maxElement = elements[0];
          for (var i = 1; i < elements.length; i++) {
              if (maxElement.localeCompare(elements[i]) < 0) {
                  maxElement = elements[i];
              }
          }
          return maxElement;
        }
      } else {
          return null;
      }
    },

    _functionMin: function(resolvedArgs) {
      if (resolvedArgs[0].length > 0) {
        var typeName = this._getTypeName(resolvedArgs[0][0]);
        if (typeName === TYPE_NUMBER) {
          return Math.min.apply(Math, resolvedArgs[0]);
        } else {
          var elements = resolvedArgs[0];
          var minElement = elements[0];
          for (var i = 1; i < elements.length; i++) {
              if (elements[i].localeCompare(minElement) < 0) {
                  minElement = elements[i];
              }
          }
          return minElement;
        }
      } else {
        return null;
      }
    },

    _functionSum: function(resolvedArgs) {
      var sum = 0;
      var listToSum = resolvedArgs[0];
      for (var i = 0; i < listToSum.length; i++) {
        sum += listToSum[i];
      }
      return sum;
    },

    _functionType: function(resolvedArgs) {
        switch (this._getTypeName(resolvedArgs[0])) {
          case TYPE_NUMBER:
            return "number";
          case TYPE_STRING:
            return "string";
          case TYPE_ARRAY:
            return "array";
          case TYPE_OBJECT:
            return "object";
          case TYPE_BOOLEAN:
            return "boolean";
          case TYPE_EXPREF:
            return "expref";
          case TYPE_NULL:
            return "null";
        }
    },

    _functionKeys: function(resolvedArgs) {
        return Object.keys(resolvedArgs[0]);
    },

    _functionValues: function(resolvedArgs) {
        var obj = resolvedArgs[0];
        var keys = Object.keys(obj);
        var values = [];
        for (var i = 0; i < keys.length; i++) {
            values.push(obj[keys[i]]);
        }
        return values;
    },

    _functionJoin: function(resolvedArgs) {
        var joinChar = resolvedArgs[0];
        var listJoin = resolvedArgs[1];
        return listJoin.join(joinChar);
    },

    _functionToArray: function(resolvedArgs) {
        if (this._getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {
            return resolvedArgs[0];
        } else {
            return [resolvedArgs[0]];
        }
    },

    _functionToString: function(resolvedArgs) {
        if (this._getTypeName(resolvedArgs[0]) === TYPE_STRING) {
            return resolvedArgs[0];
        } else {
            return JSON.stringify(resolvedArgs[0]);
        }
    },

    _functionToNumber: function(resolvedArgs) {
        var typeName = this._getTypeName(resolvedArgs[0]);
        var convertedValue;
        if (typeName === TYPE_NUMBER) {
            return resolvedArgs[0];
        } else if (typeName === TYPE_STRING) {
            convertedValue = +resolvedArgs[0];
            if (!isNaN(convertedValue)) {
                return convertedValue;
            }
        }
        return null;
    },

    _functionNotNull: function(resolvedArgs) {
        for (var i = 0; i < resolvedArgs.length; i++) {
            if (this._getTypeName(resolvedArgs[i]) !== TYPE_NULL) {
                return resolvedArgs[i];
            }
        }
        return null;
    },

    _functionSort: function(resolvedArgs) {
        var sortedArray = resolvedArgs[0].slice(0);
        sortedArray.sort();
        return sortedArray;
    },

    _functionSortBy: function(resolvedArgs) {
        var sortedArray = resolvedArgs[0].slice(0);
        if (sortedArray.length === 0) {
            return sortedArray;
        }
        var interpreter = this._interpreter;
        var exprefNode = resolvedArgs[1];
        var requiredType = this._getTypeName(
            interpreter.visit(exprefNode, sortedArray[0]));
        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {
            throw new Error("TypeError");
        }
        var that = this;
        // In order to get a stable sort out of an unstable
        // sort algorithm, we decorate/sort/undecorate (DSU)
        // by creating a new list of [index, element] pairs.
        // In the cmp function, if the evaluated elements are
        // equal, then the index will be used as the tiebreaker.
        // After the decorated list has been sorted, it will be
        // undecorated to extract the original elements.
        var decorated = [];
        for (var i = 0; i < sortedArray.length; i++) {
          decorated.push([i, sortedArray[i]]);
        }
        decorated.sort(function(a, b) {
          var exprA = interpreter.visit(exprefNode, a[1]);
          var exprB = interpreter.visit(exprefNode, b[1]);
          if (that._getTypeName(exprA) !== requiredType) {
              throw new Error(
                  "TypeError: expected " + requiredType + ", received " +
                  that._getTypeName(exprA));
          } else if (that._getTypeName(exprB) !== requiredType) {
              throw new Error(
                  "TypeError: expected " + requiredType + ", received " +
                  that._getTypeName(exprB));
          }
          if (exprA > exprB) {
            return 1;
          } else if (exprA < exprB) {
            return -1;
          } else {
            // If they're equal compare the items by their
            // order to maintain relative order of equal keys
            // (i.e. to get a stable sort).
            return a[0] - b[0];
          }
        });
        // Undecorate: extract out the original list elements.
        for (var j = 0; j < decorated.length; j++) {
          sortedArray[j] = decorated[j][1];
        }
        return sortedArray;
    },

    _functionMaxBy: function(resolvedArgs) {
      var exprefNode = resolvedArgs[1];
      var resolvedArray = resolvedArgs[0];
      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
      var maxNumber = -Infinity;
      var maxRecord;
      var current;
      for (var i = 0; i < resolvedArray.length; i++) {
        current = keyFunction(resolvedArray[i]);
        if (current > maxNumber) {
          maxNumber = current;
          maxRecord = resolvedArray[i];
        }
      }
      return maxRecord;
    },

    _functionMinBy: function(resolvedArgs) {
      var exprefNode = resolvedArgs[1];
      var resolvedArray = resolvedArgs[0];
      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
      var minNumber = Infinity;
      var minRecord;
      var current;
      for (var i = 0; i < resolvedArray.length; i++) {
        current = keyFunction(resolvedArray[i]);
        if (current < minNumber) {
          minNumber = current;
          minRecord = resolvedArray[i];
        }
      }
      return minRecord;
    },

    createKeyFunction: function(exprefNode, allowedTypes) {
      var that = this;
      var interpreter = this._interpreter;
      var keyFunc = function(x) {
        var current = interpreter.visit(exprefNode, x);
        if (allowedTypes.indexOf(that._getTypeName(current)) < 0) {
          var msg = "TypeError: expected one of " + allowedTypes +
                    ", received " + that._getTypeName(current);
          throw new Error(msg);
        }
        return current;
      };
      return keyFunc;
    }

  };

  function compile(stream) {
    var parser = new Parser();
    var ast = parser.parse(stream);
    return ast;
  }

  function tokenize(stream) {
      var lexer = new Lexer();
      return lexer.tokenize(stream);
  }

  function search(data, expression) {
      var parser = new Parser();
      // This needs to be improved.  Both the interpreter and runtime depend on
      // each other.  The runtime needs the interpreter to support exprefs.
      // There's likely a clean way to avoid the cyclic dependency.
      var runtime = new Runtime();
      var interpreter = new TreeInterpreter(runtime);
      runtime._interpreter = interpreter;
      var node = parser.parse(expression);
      return interpreter.search(node, data);
  }

  exports.tokenize = tokenize;
  exports.compile = compile;
  exports.search = search;
  exports.strictDeepEqual = strictDeepEqual;
})( false ? this.jmespath = {} : exports);


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Hoek = __webpack_require__(5);
var Any = __webpack_require__(10);
var Cast = __webpack_require__(38);
var Ref = __webpack_require__(39);
var Errors = __webpack_require__(12);


// Declare internals

var internals = {};


internals.Alternatives = function () {

    Any.call(this);
    this._type = 'alternatives';
    this._invalids.remove(null);

    this._inner.matches = [];
};

Hoek.inherits(internals.Alternatives, Any);


internals.Alternatives.prototype._base = function (value, state, options) {

    var errors = [];
    for (var i = 0, il = this._inner.matches.length; i < il; ++i) {
        var item = this._inner.matches[i];
        var schema = item.schema;
        if (!schema) {
            var failed = item.is._validate(item.ref(state.parent, options), null, options, state.parent).errors;
            schema = failed ? item.otherwise : item.then;
            if (!schema) {
                continue;
            }
        }

        var result = schema._validate(value, state, options);
        if (!result.errors) {     // Found a valid match
            return result;
        }

        errors = errors.concat(result.errors);
    }

    return { errors: errors.length ? errors : Errors.create('alternatives.base', null, state, options) };
};


internals.Alternatives.prototype.try = function (/* schemas */) {


    var schemas = Hoek.flatten(Array.prototype.slice.call(arguments));
    Hoek.assert(schemas.length, 'Cannot add other alternatives without at least one schema');

    var obj = this.clone();

    for (var i = 0, il = schemas.length; i < il; ++i) {
        var cast = Cast.schema(schemas[i]);
        if (cast._refs.length) {
            obj._refs = obj._refs.concat(cast._refs)
        }
        obj._inner.matches.push({ schema: cast });
    }

    return obj;
};


internals.Alternatives.prototype.when = function (ref, options) {

    Hoek.assert(Ref.isRef(ref) || typeof ref === 'string', 'Invalid reference:', ref);
    Hoek.assert(options, 'Missing options');
    Hoek.assert(typeof options === 'object', 'Invalid options');
    Hoek.assert(options.hasOwnProperty('is'), 'Missing "is" directive');
    Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');

    var obj = this.clone();

    var item = {
        ref: Cast.ref(ref),
        is: Cast.schema(options.is),
        then: options.then !== undefined ? Cast.schema(options.then) : undefined,
        otherwise: options.otherwise !== undefined ? Cast.schema(options.otherwise) : undefined
    };

    Ref.push(obj._refs, item.ref);
    obj._refs = obj._refs.concat(item.is._refs);

    if (item.then && item.then._refs) {
        obj._refs = obj._refs.concat(item.then._refs);
    }

    if (item.otherwise && item.otherwise._refs) {
        obj._refs = obj._refs.concat(item.otherwise._refs);
    }

    obj._inner.matches.push(item);

    return obj;
};


internals.Alternatives.prototype.describe = function () {

    var description = Any.prototype.describe.call(this);
    var alternatives = [];
    for (var i = 0, il = this._inner.matches.length; i < il; ++i) {
        var item = this._inner.matches[i];
        if (item.schema) {

            // try()

            alternatives.push(item.schema.describe());
        }
        else {

            // when()

            var when = {
                ref: item.ref.toString(),
                is: item.is.describe()
            };

            if (item.then) {
                when.then = item.then.describe();
            }

            if (item.otherwise) {
                when.otherwise = item.otherwise.describe();
            }

            alternatives.push(when);
        }
    }

    description.alternatives = alternatives;
    return description;
};


module.exports = new internals.Alternatives();


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Any = __webpack_require__(10);
var Errors = __webpack_require__(12);
var Ref = __webpack_require__(39);
var Hoek = __webpack_require__(5);
var Moment = __webpack_require__(29);


// Declare internals

var internals = {};

internals.isoDate = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\d))$/;
internals.invalidDate = new Date('');
internals.isIsoDate = (function() {

    var isoString = internals.isoDate.toString();

    return function (date) {

        return date && (date.toString() === isoString);
    };
})();

internals.Date = function () {

    Any.call(this);
    this._type = 'date';
};

Hoek.inherits(internals.Date, Any);


internals.Date.prototype._base = function (value, state, options) {

    var result = {
        value: (options.convert && internals.toDate(value, this._flags.format)) || value
    };

    if (result.value instanceof Date && !isNaN(result.value.getTime())) {
        result.errors = null;
    }
    else {
        result.errors = Errors.create(internals.isIsoDate(this._flags.format) ? 'date.isoDate' : 'date.base', null, state, options);
    }

    return result;
};


internals.toDate = function (value, format) {

    if (value instanceof Date) {
        return value;
    }

    if (typeof value === 'string' ||
        Hoek.isInteger(value)) {

        if (typeof value === 'string' &&
            /^[+-]?\d+$/.test(value)) {

            value = parseInt(value, 10);
        }

        var date;
        if (format) {
            if (internals.isIsoDate(format)) {
                date = format.test(value) ? new Date(value) : internals.invalidDate;
            }
            else {
                date = Moment(value, format, true);
                date = date.isValid() ? date.toDate() : internals.invalidDate;
            }
        }
        else {
            date = new Date(value);
        }

        if (!isNaN(date.getTime())) {
            return date;
        }
    }

    return null;
};


internals.compare = function (type, compare) {

    return function (date) {

        var isNow = date === 'now';
        var isRef = Ref.isRef(date);

        if (!isNow && !isRef) {
            date =  internals.toDate(date);
        }

        Hoek.assert(date, 'Invalid date format');

        return this._test(type, date, function (value, state, options) {

            var compareTo;
            if (isNow) {
                compareTo = Date.now();
            }
            else if (isRef) {
                compareTo = internals.toDate(date(state.parent));

                if (!compareTo) {
                    return Errors.create('date.ref', { ref: date.key }, state, options);
                }

                compareTo = compareTo.getTime();
            }
            else {
                compareTo = date.getTime();
            }

            if (compare(value.getTime(), compareTo)) {
                return null;
            }

            return Errors.create('date.' + type, { limit: new Date(compareTo) }, state, options);
        });
    };
};


internals.Date.prototype.min = internals.compare('min', function (value, date) {

    return value >= date;
});


internals.Date.prototype.max = internals.compare('max', function (value, date) {

    return value <= date;
});


internals.Date.prototype.format = function (format) {

    Hoek.assert(typeof format === 'string' || (Array.isArray(format) && format.every(function (f) {

        return typeof f === 'string';
    })), 'Invalid format.');

    var obj = this.clone();
    obj._flags.format = format;
    return obj;
};

internals.Date.prototype.iso = function () {

    var obj = this.clone();
    obj._flags.format = internals.isoDate;
    return obj;
};

internals.Date.prototype._isIsoDate = function (value) {

    return internals.isoDate.test(value);
};

module.exports = new internals.Date();


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(22),
    root = __webpack_require__(17);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(449),
    mapCacheDelete = __webpack_require__(450),
    mapCacheGet = __webpack_require__(451),
    mapCacheHas = __webpack_require__(452),
    mapCacheSet = __webpack_require__(453);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),
/* 83 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(13),
    isSymbol = __webpack_require__(90);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),
/* 85 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),
/* 86 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(409),
    isObjectLike = __webpack_require__(42);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(17),
    stubFalse = __webpack_require__(481);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)(module)))

/***/ }),
/* 89 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(40),
    isObjectLike = __webpack_require__(42);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(413),
    baseUnary = __webpack_require__(423),
    nodeUtil = __webpack_require__(457);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),
/* 92 */
/***/ (function(module, exports) {

/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var required = __webpack_require__(492)
  , lolcation = __webpack_require__(514)
  , qs = __webpack_require__(486)
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i;

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @api private
 */
function extractProtocol(address) {
  var match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @api private
 */
function resolve(relative, base) {
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} location Location defaults for relative paths.
 * @param {Boolean|Function} parser Parser for the query string.
 * @api public
 */
function URL(address, location, parser) {
  if (!(this instanceof URL)) {
    return new URL(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];
    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL}
 * @api public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
      url.pathname = value.length && value.charAt(0) !== '/' ? '/' + value : value;

      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
};

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String}
 * @api public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

URL.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
URL.extractProtocol = extractProtocol;
URL.location = lolcation;
URL.qs = qs;

module.exports = URL;


/***/ }),
/* 94 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24);
var AWS = __webpack_require__(0);
var Service = __webpack_require__(25);
var apiLoader = __webpack_require__(23);

apiLoader.services['cognitoidentity'] = {};
AWS.CognitoIdentity = Service.defineService('cognitoidentity', ['2014-06-30']);
__webpack_require__(204);
Object.defineProperty(apiLoader.services['cognitoidentity'], '2014-06-30', {
  get: function get() {
    var model = __webpack_require__(175);
    model.paginators = __webpack_require__(176).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CognitoIdentity;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * Represents your AWS security credentials, specifically the
 * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.
 * Creating a `Credentials` object allows you to pass around your
 * security information to configuration and service objects.
 *
 * Note that this class typically does not need to be constructed manually,
 * as the {AWS.Config} and {AWS.Service} classes both accept simple
 * options hashes with the three keys. These structures will be converted
 * into Credentials objects automatically.
 *
 * ## Expiring and Refreshing Credentials
 *
 * Occasionally credentials can expire in the middle of a long-running
 * application. In this case, the SDK will automatically attempt to
 * refresh the credentials from the storage location if the Credentials
 * class implements the {refresh} method.
 *
 * If you are implementing a credential storage location, you
 * will want to create a subclass of the `Credentials` class and
 * override the {refresh} method. This method allows credentials to be
 * retrieved from the backing store, be it a file system, database, or
 * some network storage. The method should reset the credential attributes
 * on the object.
 *
 * @!attribute expired
 *   @return [Boolean] whether the credentials have been expired and
 *     require a refresh. Used in conjunction with {expireTime}.
 * @!attribute expireTime
 *   @return [Date] a time when credentials should be considered expired. Used
 *     in conjunction with {expired}.
 * @!attribute accessKeyId
 *   @return [String] the AWS access key ID
 * @!attribute secretAccessKey
 *   @return [String] the AWS secret access key
 * @!attribute sessionToken
 *   @return [String] an optional AWS session token
 */
AWS.Credentials = AWS.util.inherit({
  /**
   * A credentials object can be created using positional arguments or an options
   * hash.
   *
   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)
   *   Creates a Credentials object with a given set of credential information
   *   as positional arguments.
   *   @param accessKeyId [String] the AWS access key ID
   *   @param secretAccessKey [String] the AWS secret access key
   *   @param sessionToken [String] the optional AWS session token
   *   @example Create a credentials object with AWS credentials
   *     var creds = new AWS.Credentials('akid', 'secret', 'session');
   * @overload AWS.Credentials(options)
   *   Creates a Credentials object with a given set of credential information
   *   as an options hash.
   *   @option options accessKeyId [String] the AWS access key ID
   *   @option options secretAccessKey [String] the AWS secret access key
   *   @option options sessionToken [String] the optional AWS session token
   *   @example Create a credentials object with AWS credentials
   *     var creds = new AWS.Credentials({
   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'
   *     });
   */
  constructor: function Credentials() {
    // hide secretAccessKey from being displayed with util.inspect
    AWS.util.hideProperties(this, ['secretAccessKey']);

    this.expired = false;
    this.expireTime = null;
    if (arguments.length === 1 && typeof arguments[0] === 'object') {
      var creds = arguments[0].credentials || arguments[0];
      this.accessKeyId = creds.accessKeyId;
      this.secretAccessKey = creds.secretAccessKey;
      this.sessionToken = creds.sessionToken;
    } else {
      this.accessKeyId = arguments[0];
      this.secretAccessKey = arguments[1];
      this.sessionToken = arguments[2];
    }
  },

  /**
   * @return [Integer] the number of seconds before {expireTime} during which
   *   the credentials will be considered expired.
   */
  expiryWindow: 15,

  /**
   * @return [Boolean] whether the credentials object should call {refresh}
   * @note Subclasses should override this method to provide custom refresh
   *   logic.
   */
  needsRefresh: function needsRefresh() {
    var currentTime = AWS.util.date.getDate().getTime();
    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);

    if (this.expireTime && adjustedTime > this.expireTime) {
      return true;
    } else {
      return this.expired || !this.accessKeyId || !this.secretAccessKey;
    }
  },

  /**
   * Gets the existing credentials, refreshing them if they are not yet loaded
   * or have expired. Users should call this method before using {refresh},
   * as this will not attempt to reload credentials when they are already
   * loaded into the object.
   *
   * @callback callback function(err)
   *   When this callback is called with no error, it means either credentials
   *   do not need to be refreshed or refreshed credentials information has
   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,
   *   and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   */
  get: function get(callback) {
    var self = this;
    if (this.needsRefresh()) {
      this.refresh(function(err) {
        if (!err) self.expired = false; // reset expired flag
        if (callback) callback(err);
      });
    } else if (callback) {
      callback();
    }
  },

  /**
   * @!method  getPromise()
   *   Returns a 'thenable' promise.
   *   Gets the existing credentials, refreshing them if they are not yet loaded
   *   or have expired. Users should call this method before using {refresh},
   *   as this will not attempt to reload credentials when they are already
   *   loaded into the object.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function()
   *     Called if the promise is fulfilled. When this callback is called, it
   *     means either credentials do not need to be refreshed or refreshed
   *     credentials information has been loaded into the object (as the
   *     `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
   *   @callback rejectedCallback function(err)
   *     Called if the promise is rejected.
   *     @param err [Error] if an error occurred, this value will be filled
   *   @return [Promise] A promise that represents the state of the `get` call.
   *   @example Calling the `getPromise` method.
   *     var promise = credProvider.getPromise();
   *     promise.then(function() { ... }, function(err) { ... });
   */

  /**
   * @!method  refreshPromise()
   *   Returns a 'thenable' promise.
   *   Refreshes the credentials. Users should call {get} before attempting
   *   to forcibly refresh credentials.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function()
   *     Called if the promise is fulfilled. When this callback is called, it
   *     means refreshed credentials information has been loaded into the object
   *     (as the `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
   *   @callback rejectedCallback function(err)
   *     Called if the promise is rejected.
   *     @param err [Error] if an error occurred, this value will be filled
   *   @return [Promise] A promise that represents the state of the `refresh` call.
   *   @example Calling the `refreshPromise` method.
   *     var promise = credProvider.refreshPromise();
   *     promise.then(function() { ... }, function(err) { ... });
   */

  /**
   * Refreshes the credentials. Users should call {get} before attempting
   * to forcibly refresh credentials.
   *
   * @callback callback function(err)
   *   When this callback is called with no error, it means refreshed
   *   credentials information has been loaded into the object (as the
   *   `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @note Subclasses should override this class to reset the
   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}
   *   on the credentials object and then call the callback with
   *   any error information.
   * @see get
   */
  refresh: function refresh(callback) {
    this.expired = false;
    callback();
  }
});

/**
 * @api private
 */
AWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);
  this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);
};

/**
 * @api private
 */
AWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.getPromise;
  delete this.prototype.refreshPromise;
};

AWS.util.addPromises(AWS.Credentials);


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * Creates a credential provider chain that searches for AWS credentials
 * in a list of credential providers specified by the {providers} property.
 *
 * By default, the chain will use the {defaultProviders} to resolve credentials.
 * These providers will look in the environment using the
 * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.
 *
 * ## Setting Providers
 *
 * Each provider in the {providers} list should be a function that returns
 * a {AWS.Credentials} object, or a hardcoded credentials object. The function
 * form allows for delayed execution of the credential construction.
 *
 * ## Resolving Credentials from a Chain
 *
 * Call {resolve} to return the first valid credential object that can be
 * loaded by the provider chain.
 *
 * For example, to resolve a chain with a custom provider that checks a file
 * on disk after the set of {defaultProviders}:
 *
 * ```javascript
 * var diskProvider = new AWS.FileSystemCredentials('./creds.json');
 * var chain = new AWS.CredentialProviderChain();
 * chain.providers.push(diskProvider);
 * chain.resolve();
 * ```
 *
 * The above code will return the `diskProvider` object if the
 * file contains credentials and the `defaultProviders` do not contain
 * any credential settings.
 *
 * @!attribute providers
 *   @return [Array<AWS.Credentials, Function>]
 *     a list of credentials objects or functions that return credentials
 *     objects. If the provider is a function, the function will be
 *     executed lazily when the provider needs to be checked for valid
 *     credentials. By default, this object will be set to the
 *     {defaultProviders}.
 *   @see defaultProviders
 */
AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {

  /**
   * Creates a new CredentialProviderChain with a default set of providers
   * specified by {defaultProviders}.
   */
  constructor: function CredentialProviderChain(providers) {
    if (providers) {
      this.providers = providers;
    } else {
      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);
    }
  },

  /**
   * @!method  resolvePromise()
   *   Returns a 'thenable' promise.
   *   Resolves the provider chain by searching for the first set of
   *   credentials in {providers}.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function(credentials)
   *     Called if the promise is fulfilled and the provider resolves the chain
   *     to a credentials object
   *     @param credentials [AWS.Credentials] the credentials object resolved
   *       by the provider chain.
   *   @callback rejectedCallback function(error)
   *     Called if the promise is rejected.
   *     @param err [Error] the error object returned if no credentials are found.
   *   @return [Promise] A promise that represents the state of the `resolve` method call.
   *   @example Calling the `resolvePromise` method.
   *     var promise = chain.resolvePromise();
   *     promise.then(function(credentials) { ... }, function(err) { ... });
   */

  /**
   * Resolves the provider chain by searching for the first set of
   * credentials in {providers}.
   *
   * @callback callback function(err, credentials)
   *   Called when the provider resolves the chain to a credentials object
   *   or null if no credentials can be found.
   *
   *   @param err [Error] the error object returned if no credentials are
   *     found.
   *   @param credentials [AWS.Credentials] the credentials object resolved
   *     by the provider chain.
   * @return [AWS.CredentialProviderChain] the provider, for chaining.
   */
  resolve: function resolve(callback) {
    if (this.providers.length === 0) {
      callback(new Error('No providers'));
      return this;
    }

    var index = 0;
    var providers = this.providers.slice(0);

    function resolveNext(err, creds) {
      if ((!err && creds) || index === providers.length) {
        callback(err, creds);
        return;
      }

      var provider = providers[index++];
      if (typeof provider === 'function') {
        creds = provider.call();
      } else {
        creds = provider;
      }

      if (creds.get) {
        creds.get(function(getErr) {
          resolveNext(getErr, getErr ? null : creds);
        });
      } else {
        resolveNext(null, creds);
      }
    }

    resolveNext();
    return this;
  }
});

/**
 * The default set of providers used by a vanilla CredentialProviderChain.
 *
 * In the browser:
 *
 * ```javascript
 * AWS.CredentialProviderChain.defaultProviders = []
 * ```
 *
 * In Node.js:
 *
 * ```javascript
 * AWS.CredentialProviderChain.defaultProviders = [
 *   function () { return new AWS.EnvironmentCredentials('AWS'); },
 *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },
 *   function () { return new AWS.SharedIniFileCredentials(); },
 *   function () {
 *     // if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI is set
 *       return new AWS.ECSCredentials();
 *     // else
 *       return new AWS.EC2MetadataCredentials();
 *   }
 * ]
 * ```
 */
AWS.CredentialProviderChain.defaultProviders = [];

/**
 * @api private
 */
AWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);
};

/**
 * @api private
 */
AWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.resolvePromise;
};

AWS.util.addPromises(AWS.CredentialProviderChain);


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * The endpoint that a service will talk to, for example,
 * `'https://ec2.ap-southeast-1.amazonaws.com'`. If
 * you need to override an endpoint for a service, you can
 * set the endpoint on a service by passing the endpoint
 * object with the `endpoint` option key:
 *
 * ```javascript
 * var ep = new AWS.Endpoint('awsproxy.example.com');
 * var s3 = new AWS.S3({endpoint: ep});
 * s3.service.endpoint.hostname == 'awsproxy.example.com'
 * ```
 *
 * Note that if you do not specify a protocol, the protocol will
 * be selected based on your current {AWS.config} configuration.
 *
 * @!attribute protocol
 *   @return [String] the protocol (http or https) of the endpoint
 *     URL
 * @!attribute hostname
 *   @return [String] the host portion of the endpoint, e.g.,
 *     example.com
 * @!attribute host
 *   @return [String] the host portion of the endpoint including
 *     the port, e.g., example.com:80
 * @!attribute port
 *   @return [Integer] the port of the endpoint
 * @!attribute href
 *   @return [String] the full URL of the endpoint
 */
AWS.Endpoint = inherit({

  /**
   * @overload Endpoint(endpoint)
   *   Constructs a new endpoint given an endpoint URL. If the
   *   URL omits a protocol (http or https), the default protocol
   *   set in the global {AWS.config} will be used.
   *   @param endpoint [String] the URL to construct an endpoint from
   */
  constructor: function Endpoint(endpoint, config) {
    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);

    if (typeof endpoint === 'undefined' || endpoint === null) {
      throw new Error('Invalid endpoint: ' + endpoint);
    } else if (typeof endpoint !== 'string') {
      return AWS.util.copy(endpoint);
    }

    if (!endpoint.match(/^http/)) {
      var useSSL = config && config.sslEnabled !== undefined ?
        config.sslEnabled : AWS.config.sslEnabled;
      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;
    }

    AWS.util.update(this, AWS.util.urlParse(endpoint));

    // Ensure the port property is set as an integer
    if (this.port) {
      this.port = parseInt(this.port, 10);
    } else {
      this.port = this.protocol === 'https:' ? 443 : 80;
    }
  }

});

/**
 * The low level HTTP request object, encapsulating all HTTP header
 * and body data sent by a service request.
 *
 * @!attribute method
 *   @return [String] the HTTP method of the request
 * @!attribute path
 *   @return [String] the path portion of the URI, e.g.,
 *     "/list/?start=5&num=10"
 * @!attribute headers
 *   @return [map<String,String>]
 *     a map of header keys and their respective values
 * @!attribute body
 *   @return [String] the request body payload
 * @!attribute endpoint
 *   @return [AWS.Endpoint] the endpoint for the request
 * @!attribute region
 *   @api private
 *   @return [String] the region, for signing purposes only.
 */
AWS.HttpRequest = inherit({

  /**
   * @api private
   */
  constructor: function HttpRequest(endpoint, region) {
    endpoint = new AWS.Endpoint(endpoint);
    this.method = 'POST';
    this.path = endpoint.path || '/';
    this.headers = {};
    this.body = '';
    this.endpoint = endpoint;
    this.region = region;
    this._userAgent = '';
    this.setUserAgent();
  },

  /**
   * @api private
   */
  setUserAgent: function setUserAgent() {
    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();
  },

  getUserAgentHeaderName: function getUserAgentHeaderName() {
    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';
    return prefix + 'User-Agent';
  },

  /**
   * @api private
   */
  appendToUserAgent: function appendToUserAgent(agentPartial) {
    if (typeof agentPartial === 'string' && agentPartial) {
      this._userAgent += ' ' + agentPartial;
    }
    this.headers[this.getUserAgentHeaderName()] = this._userAgent;
  },

  /**
   * @api private
   */
  getUserAgent: function getUserAgent() {
    return this._userAgent;
  },

  /**
   * @return [String] the part of the {path} excluding the
   *   query string
   */
  pathname: function pathname() {
    return this.path.split('?', 1)[0];
  },

  /**
   * @return [String] the query string portion of the {path}
   */
  search: function search() {
    var query = this.path.split('?', 2)[1];
    if (query) {
      query = AWS.util.queryStringParse(query);
      return AWS.util.queryParamsToString(query);
    }
    return '';
  }

});

/**
 * The low level HTTP response object, encapsulating all HTTP header
 * and body data returned from the request.
 *
 * @!attribute statusCode
 *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)
 * @!attribute headers
 *   @return [map<String,String>]
 *      a map of response header keys and their respective values
 * @!attribute body
 *   @return [String] the response body payload
 * @!attribute [r] streaming
 *   @return [Boolean] whether this response is being streamed at a low-level.
 *     Defaults to `false` (buffered reads). Do not modify this manually, use
 *     {createUnbufferedStream} to convert the stream to unbuffered mode
 *     instead.
 */
AWS.HttpResponse = inherit({

  /**
   * @api private
   */
  constructor: function HttpResponse() {
    this.statusCode = undefined;
    this.headers = {};
    this.body = undefined;
    this.streaming = false;
    this.stream = null;
  },

  /**
   * Disables buffering on the HTTP response and returns the stream for reading.
   * @return [Stream, XMLHttpRequest, null] the underlying stream object.
   *   Use this object to directly read data off of the stream.
   * @note This object is only available after the {AWS.Request~httpHeaders}
   *   event has fired. This method must be called prior to
   *   {AWS.Request~httpData}.
   * @example Taking control of a stream
   *   request.on('httpHeaders', function(statusCode, headers) {
   *     if (statusCode < 300) {
   *       if (headers.etag === 'xyz') {
   *         // pipe the stream, disabling buffering
   *         var stream = this.response.httpResponse.createUnbufferedStream();
   *         stream.pipe(process.stdout);
   *       } else { // abort this request and set a better error message
   *         this.abort();
   *         this.response.error = new Error('Invalid ETag');
   *       }
   *     }
   *   }).send(console.log);
   */
  createUnbufferedStream: function createUnbufferedStream() {
    this.streaming = true;
    return this.stream;
  }
});


AWS.HttpClient = inherit({});

/**
 * @api private
 */
AWS.HttpClient.getInstance = function getInstance() {
  if (this.singleton === undefined) {
    this.singleton = new this();
  }
  return this.singleton;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var Collection = __webpack_require__(100);
var Operation = __webpack_require__(101);
var Shape = __webpack_require__(32);
var Paginator = __webpack_require__(102);
var ResourceWaiter = __webpack_require__(103);

var util = __webpack_require__(2);
var property = util.property;
var memoizedProperty = util.memoizedProperty;

function Api(api, options) {
  api = api || {};
  options = options || {};
  options.api = this;

  api.metadata = api.metadata || {};

  property(this, 'isApi', true, false);
  property(this, 'apiVersion', api.metadata.apiVersion);
  property(this, 'endpointPrefix', api.metadata.endpointPrefix);
  property(this, 'signingName', api.metadata.signingName);
  property(this, 'globalEndpoint', api.metadata.globalEndpoint);
  property(this, 'signatureVersion', api.metadata.signatureVersion);
  property(this, 'jsonVersion', api.metadata.jsonVersion);
  property(this, 'targetPrefix', api.metadata.targetPrefix);
  property(this, 'protocol', api.metadata.protocol);
  property(this, 'timestampFormat', api.metadata.timestampFormat);
  property(this, 'xmlNamespaceUri', api.metadata.xmlNamespace);
  property(this, 'abbreviation', api.metadata.serviceAbbreviation);
  property(this, 'fullName', api.metadata.serviceFullName);

  memoizedProperty(this, 'className', function() {
    var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;
    if (!name) return null;

    name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, '');
    if (name === 'ElasticLoadBalancing') name = 'ELB';
    return name;
  });

  property(this, 'operations', new Collection(api.operations, options, function(name, operation) {
    return new Operation(name, operation, options);
  }, util.string.lowerFirst));

  property(this, 'shapes', new Collection(api.shapes, options, function(name, shape) {
    return Shape.create(shape, options);
  }));

  property(this, 'paginators', new Collection(api.paginators, options, function(name, paginator) {
    return new Paginator(name, paginator, options);
  }));

  property(this, 'waiters', new Collection(api.waiters, options, function(name, waiter) {
    return new ResourceWaiter(name, waiter, options);
  }, util.string.lowerFirst));

  if (options.documentation) {
    property(this, 'documentation', api.documentation);
    property(this, 'documentationUrl', api.documentationUrl);
  }
}

module.exports = Api;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var memoizedProperty = __webpack_require__(2).memoizedProperty;

function memoize(name, value, fn, nameTr) {
  memoizedProperty(this, nameTr(name), function() {
    return fn(name, value);
  });
}

function Collection(iterable, options, fn, nameTr) {
  nameTr = nameTr || String;
  var self = this;

  for (var id in iterable) {
    if (Object.prototype.hasOwnProperty.call(iterable, id)) {
      memoize.call(self, id, iterable[id], fn, nameTr);
    }
  }
}

module.exports = Collection;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var Shape = __webpack_require__(32);

var util = __webpack_require__(2);
var property = util.property;
var memoizedProperty = util.memoizedProperty;

function Operation(name, operation, options) {
  var self = this;
  options = options || {};

  property(this, 'name', operation.name || name);
  property(this, 'api', options.api, false);

  operation.http = operation.http || {};
  property(this, 'httpMethod', operation.http.method || 'POST');
  property(this, 'httpPath', operation.http.requestUri || '/');
  property(this, 'authtype', operation.authtype || '');

  memoizedProperty(this, 'input', function() {
    if (!operation.input) {
      return new Shape.create({type: 'structure'}, options);
    }
    return Shape.create(operation.input, options);
  });

  memoizedProperty(this, 'output', function() {
    if (!operation.output) {
      return new Shape.create({type: 'structure'}, options);
    }
    return Shape.create(operation.output, options);
  });

  memoizedProperty(this, 'errors', function() {
    var list = [];
    if (!operation.errors) return null;

    for (var i = 0; i < operation.errors.length; i++) {
      list.push(Shape.create(operation.errors[i], options));
    }

    return list;
  });

  memoizedProperty(this, 'paginator', function() {
    return options.api.paginators[name];
  });

  if (options.documentation) {
    property(this, 'documentation', operation.documentation);
    property(this, 'documentationUrl', operation.documentationUrl);
  }

  // idempotentMembers only tracks top-level input shapes
  memoizedProperty(this, 'idempotentMembers', function() {
    var idempotentMembers = [];
    var input = self.input;
    var members = input.members;
    if (!input.members) {
      return idempotentMembers;
    }
    for (var name in members) {
      if (!members.hasOwnProperty(name)) {
        continue;
      }
      if (members[name].isIdempotent === true) {
        idempotentMembers.push(name);
      }
    }
    return idempotentMembers;
  });

}

module.exports = Operation;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var property = __webpack_require__(2).property;

function Paginator(name, paginator) {
  property(this, 'inputToken', paginator.input_token);
  property(this, 'limitKey', paginator.limit_key);
  property(this, 'moreResults', paginator.more_results);
  property(this, 'outputToken', paginator.output_token);
  property(this, 'resultKey', paginator.result_key);
}

module.exports = Paginator;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var property = util.property;

function ResourceWaiter(name, waiter, options) {
  options = options || {};
  property(this, 'name', name);
  property(this, 'api', options.api, false);

  if (waiter.operation) {
    property(this, 'operation', util.string.lowerFirst(waiter.operation));
  }

  var self = this;
  var keys = [
    'type',
    'description',
    'delay',
    'maxAttempts',
    'acceptors'
  ];

  keys.forEach(function(key) {
    var value = waiter[key];
    if (value) {
      property(self, key, value);
    }
  });
}

module.exports = ResourceWaiter;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var util = __webpack_require__(2);
var QueryParamSerializer = __webpack_require__(198);
var Shape = __webpack_require__(32);

function buildRequest(req) {
  var operation = req.service.api.operations[req.operation];
  var httpRequest = req.httpRequest;
  httpRequest.headers['Content-Type'] =
    'application/x-www-form-urlencoded; charset=utf-8';
  httpRequest.params = {
    Version: req.service.api.apiVersion,
    Action: operation.name
  };

  // convert the request parameters into a list of query params,
  // e.g. Deeply.NestedParam.0.Name=value
  var builder = new QueryParamSerializer();
  builder.serialize(req.params, operation.input, function(name, value) {
    httpRequest.params[name] = value;
  });
  httpRequest.body = util.queryParamsToString(httpRequest.params);
}

function extractError(resp) {
  var data, body = resp.httpResponse.body.toString();
  if (body.match('<UnknownOperationException')) {
    data = {
      Code: 'UnknownOperation',
      Message: 'Unknown operation ' + resp.request.operation
    };
  } else {
    try {
      data = new AWS.XML.Parser().parse(body);
    } catch (e) {
      data = {
        Code: resp.httpResponse.statusCode,
        Message: resp.httpResponse.statusMessage
      };
    }
  }

  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;
  if (data.Errors) data = data.Errors;
  if (data.Error) data = data.Error;
  if (data.Code) {
    resp.error = util.error(new Error(), {
      code: data.Code,
      message: data.Message
    });
  } else {
    resp.error = util.error(new Error(), {
      code: resp.httpResponse.statusCode,
      message: null
    });
  }
}

function extractData(resp) {
  var req = resp.request;
  var operation = req.service.api.operations[req.operation];
  var shape = operation.output || {};
  var origRules = shape;

  if (origRules.resultWrapper) {
    var tmp = Shape.create({type: 'structure'});
    tmp.members[origRules.resultWrapper] = shape;
    tmp.memberNames = [origRules.resultWrapper];
    util.property(shape, 'name', shape.resultWrapper);
    shape = tmp;
  }

  var parser = new AWS.XML.Parser();

  // TODO: Refactor XML Parser to parse RequestId from response.
  if (shape && shape.members && !shape.members._XAMZRequestId) {
    var requestIdShape = Shape.create(
      { type: 'string' },
      { api: { protocol: 'query' } },
      'requestId'
    );
    shape.members._XAMZRequestId = requestIdShape;
  }

  var data = parser.parse(resp.httpResponse.body.toString(), shape);
  resp.requestId = data._XAMZRequestId || data.requestId;

  if (data._XAMZRequestId) delete data._XAMZRequestId;

  if (origRules.resultWrapper) {
    if (data[origRules.resultWrapper]) {
      util.update(data, data[origRules.resultWrapper]);
      delete data[origRules.resultWrapper];
    }
  }

  resp.data = data;
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var Rest = __webpack_require__(45);
var Json = __webpack_require__(61);
var JsonBuilder = __webpack_require__(59);
var JsonParser = __webpack_require__(60);

function populateBody(req) {
  var builder = new JsonBuilder();
  var input = req.service.api.operations[req.operation].input;

  if (input.payload) {
    var params = {};
    var payloadShape = input.members[input.payload];
    params = req.params[input.payload];
    if (params === undefined) return;

    if (payloadShape.type === 'structure') {
      req.httpRequest.body = builder.build(params, payloadShape);
    } else { // non-JSON payload
      req.httpRequest.body = params;
    }
  } else {
    req.httpRequest.body = builder.build(req.params, input);
  }
}

function buildRequest(req) {
  Rest.buildRequest(req);

  // never send body payload on GET/HEAD/DELETE
  if (['GET', 'HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {
    populateBody(req);
  }
}

function extractError(resp) {
  Json.extractError(resp);
}

function extractData(resp) {
  Rest.extractData(resp);

  var req = resp.request;
  var rules = req.service.api.operations[req.operation].output || {};
  if (rules.payload) {
    var payloadMember = rules.members[rules.payload];
    var body = resp.httpResponse.body;
    if (payloadMember.isStreaming) {
      resp.data[rules.payload] = body;
    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {
      var parser = new JsonParser();
      resp.data[rules.payload] = parser.parse(body, payloadMember);
    } else {
      resp.data[rules.payload] = body.toString();
    }
  } else {
    var data = resp.data;
    Json.extractData(resp);
    resp.data = util.merge(data, resp.data);
  }
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var util = __webpack_require__(2);
var Rest = __webpack_require__(45);

function populateBody(req) {
  var input = req.service.api.operations[req.operation].input;
  var builder = new AWS.XML.Builder();
  var params = req.params;

  var payload = input.payload;
  if (payload) {
    var payloadMember = input.members[payload];
    params = params[payload];
    if (params === undefined) return;

    if (payloadMember.type === 'structure') {
      var rootElement = payloadMember.name;
      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);
    } else { // non-xml payload
      req.httpRequest.body = params;
    }
  } else {
    req.httpRequest.body = builder.toXML(params, input, input.name ||
      input.shape || util.string.upperFirst(req.operation) + 'Request');
  }
}

function buildRequest(req) {
  Rest.buildRequest(req);

  // never send body payload on GET/HEAD
  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {
    populateBody(req);
  }
}

function extractError(resp) {
  Rest.extractError(resp);

  var data;
  try {
    data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());
  } catch (e) {
    data = {
      Code: resp.httpResponse.statusCode,
      Message: resp.httpResponse.statusMessage
    };
  }

  if (data.Errors) data = data.Errors;
  if (data.Error) data = data.Error;
  if (data.Code) {
    resp.error = util.error(new Error(), {
      code: data.Code,
      message: data.Message
    });
  } else {
    resp.error = util.error(new Error(), {
      code: resp.httpResponse.statusCode,
      message: null
    });
  }
}

function extractData(resp) {
  Rest.extractData(resp);

  var parser;
  var req = resp.request;
  var body = resp.httpResponse.body;
  var operation = req.service.api.operations[req.operation];
  var output = operation.output;

  var payload = output.payload;
  if (payload) {
    var payloadMember = output.members[payload];
    if (payloadMember.isStreaming) {
      resp.data[payload] = body;
    } else if (payloadMember.type === 'structure') {
      parser = new AWS.XML.Parser();
      resp.data[payload] = parser.parse(body.toString(), payloadMember);
    } else {
      resp.data[payload] = body.toString();
    }
  } else if (body.length > 0) {
    parser = new AWS.XML.Parser();
    var data = parser.parse(body.toString(), output);
    util.update(resp.data, data);
  }
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * @api private
 * @!method on(eventName, callback)
 *   Registers an event listener callback for the event given by `eventName`.
 *   Parameters passed to the callback function depend on the individual event
 *   being triggered. See the event documentation for those parameters.
 *
 *   @param eventName [String] the event name to register the listener for
 *   @param callback [Function] the listener callback function
 *   @return [AWS.SequentialExecutor] the same object for chaining
 */
AWS.SequentialExecutor = AWS.util.inherit({

  constructor: function SequentialExecutor() {
    this._events = {};
  },

  /**
   * @api private
   */
  listeners: function listeners(eventName) {
    return this._events[eventName] ? this._events[eventName].slice(0) : [];
  },

  on: function on(eventName, listener) {
    if (this._events[eventName]) {
      this._events[eventName].push(listener);
    } else {
      this._events[eventName] = [listener];
    }
    return this;
  },

  /**
   * @api private
   */
  onAsync: function onAsync(eventName, listener) {
    listener._isAsync = true;
    return this.on(eventName, listener);
  },

  removeListener: function removeListener(eventName, listener) {
    var listeners = this._events[eventName];
    if (listeners) {
      var length = listeners.length;
      var position = -1;
      for (var i = 0; i < length; ++i) {
        if (listeners[i] === listener) {
          position = i;
        }
      }
      if (position > -1) {
        listeners.splice(position, 1);
      }
    }
    return this;
  },

  removeAllListeners: function removeAllListeners(eventName) {
    if (eventName) {
      delete this._events[eventName];
    } else {
      this._events = {};
    }
    return this;
  },

  /**
   * @api private
   */
  emit: function emit(eventName, eventArgs, doneCallback) {
    if (!doneCallback) doneCallback = function() { };
    var listeners = this.listeners(eventName);
    var count = listeners.length;
    this.callListeners(listeners, eventArgs, doneCallback);
    return count > 0;
  },

  /**
   * @api private
   */
  callListeners: function callListeners(listeners, args, doneCallback, prevError) {
    var self = this;
    var error = prevError || null;

    function callNextListener(err) {
      if (err) {
        error = AWS.util.error(error || new Error(), err);
        if (self._haltHandlersOnError) {
          return doneCallback.call(self, error);
        }
      }
      self.callListeners(listeners, args, doneCallback, error);
    }

    while (listeners.length > 0) {
      var listener = listeners.shift();
      if (listener._isAsync) { // asynchronous listener
        listener.apply(self, args.concat([callNextListener]));
        return; // stop here, callNextListener will continue
      } else { // synchronous listener
        try {
          listener.apply(self, args);
        } catch (err) {
          error = AWS.util.error(error || new Error(), err);
        }
        if (error && self._haltHandlersOnError) {
          doneCallback.call(self, error);
          return;
        }
      }
    }
    doneCallback.call(self, error);
  },

  /**
   * Adds or copies a set of listeners from another list of
   * listeners or SequentialExecutor object.
   *
   * @param listeners [map<String,Array<Function>>, AWS.SequentialExecutor]
   *   a list of events and callbacks, or an event emitter object
   *   containing listeners to add to this emitter object.
   * @return [AWS.SequentialExecutor] the emitter object, for chaining.
   * @example Adding listeners from a map of listeners
   *   emitter.addListeners({
   *     event1: [function() { ... }, function() { ... }],
   *     event2: [function() { ... }]
   *   });
   *   emitter.emit('event1'); // emitter has event1
   *   emitter.emit('event2'); // emitter has event2
   * @example Adding listeners from another emitter object
   *   var emitter1 = new AWS.SequentialExecutor();
   *   emitter1.on('event1', function() { ... });
   *   emitter1.on('event2', function() { ... });
   *   var emitter2 = new AWS.SequentialExecutor();
   *   emitter2.addListeners(emitter1);
   *   emitter2.emit('event1'); // emitter2 has event1
   *   emitter2.emit('event2'); // emitter2 has event2
   */
  addListeners: function addListeners(listeners) {
    var self = this;

    // extract listeners if parameter is an SequentialExecutor object
    if (listeners._events) listeners = listeners._events;

    AWS.util.each(listeners, function(event, callbacks) {
      if (typeof callbacks === 'function') callbacks = [callbacks];
      AWS.util.arrayEach(callbacks, function(callback) {
        self.on(event, callback);
      });
    });

    return self;
  },

  /**
   * Registers an event with {on} and saves the callback handle function
   * as a property on the emitter object using a given `name`.
   *
   * @param name [String] the property name to set on this object containing
   *   the callback function handle so that the listener can be removed in
   *   the future.
   * @param (see on)
   * @return (see on)
   * @example Adding a named listener DATA_CALLBACK
   *   var listener = function() { doSomething(); };
   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);
   *
   *   // the following prints: true
   *   console.log(emitter.DATA_CALLBACK == listener);
   */
  addNamedListener: function addNamedListener(name, eventName, callback) {
    this[name] = callback;
    this.addListener(eventName, callback);
    return this;
  },

  /**
   * @api private
   */
  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback) {
    callback._isAsync = true;
    return this.addNamedListener(name, eventName, callback);
  },

  /**
   * Helper method to add a set of named listeners using
   * {addNamedListener}. The callback contains a parameter
   * with a handle to the `addNamedListener` method.
   *
   * @callback callback function(add)
   *   The callback function is called immediately in order to provide
   *   the `add` function to the block. This simplifies the addition of
   *   a large group of named listeners.
   *   @param add [Function] the {addNamedListener} function to call
   *     when registering listeners.
   * @example Adding a set of named listeners
   *   emitter.addNamedListeners(function(add) {
   *     add('DATA_CALLBACK', 'data', function() { ... });
   *     add('OTHER', 'otherEvent', function() { ... });
   *     add('LAST', 'lastEvent', function() { ... });
   *   });
   *
   *   // these properties are now set:
   *   emitter.DATA_CALLBACK;
   *   emitter.OTHER;
   *   emitter.LAST;
   */
  addNamedListeners: function addNamedListeners(callback) {
    var self = this;
    callback(
      function() {
        self.addNamedListener.apply(self, arguments);
      },
      function() {
        self.addNamedAsyncListener.apply(self, arguments);
      }
    );
    return this;
  }
});

/**
 * {on} is the prefered method.
 * @api private
 */
AWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;

module.exports = AWS.SequentialExecutor;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {
  addAuthorization: function addAuthorization(credentials, date) {

    var datetime = AWS.util.date.rfc822(date);

    this.request.headers['X-Amz-Date'] = datetime;

    if (credentials.sessionToken) {
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
    }

    this.request.headers['X-Amzn-Authorization'] =
      this.authorization(credentials, datetime);

  },

  authorization: function authorization(credentials) {
    return 'AWS3 ' +
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
      'Algorithm=HmacSHA256,' +
      'SignedHeaders=' + this.signedHeaders() + ',' +
      'Signature=' + this.signature(credentials);
  },

  signedHeaders: function signedHeaders() {
    var headers = [];
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
      headers.push(h.toLowerCase());
    });
    return headers.sort().join(';');
  },

  canonicalHeaders: function canonicalHeaders() {
    var headers = this.request.headers;
    var parts = [];
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());
    });
    return parts.sort().join('\n') + '\n';
  },

  headersToSign: function headersToSign() {
    var headers = [];
    AWS.util.each(this.request.headers, function iterator(k) {
      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {
        headers.push(k);
      }
    });
    return headers;
  },

  signature: function signature(credentials) {
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
  },

  stringToSign: function stringToSign() {
    var parts = [];
    parts.push(this.request.method);
    parts.push('/');
    parts.push('');
    parts.push(this.canonicalHeaders());
    parts.push(this.request.body);
    return AWS.util.crypto.sha256(parts.join('\n'));
  }

});

module.exports = AWS.Signers.V3;


/***/ }),
/* 109 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 110 */
/***/ (function(module, exports) {

exports.createServer =
exports.createConnection =
exports.connect =
function () {};

exports.isIP =
exports.isIPv4 =
exports.isIPv6 =
function () { return true };



/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 12/11/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractFsDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(46);

var _crypto = __webpack_require__(19);

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Abstract FileSystem Driver
 */
let AbstractFsDriver = exports.AbstractFsDriver = function (_AbstractDriver) {
  _inherits(AbstractFsDriver, _AbstractDriver);

  /**
   * @param {String} directory
   */
  function AbstractFsDriver() {
    let directory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : AbstractFsDriver.DEFAULT_DIRECTORY;

    _classCallCheck(this, AbstractFsDriver);

    var _this = _possibleConstructorReturn(this, (AbstractFsDriver.__proto__ || Object.getPrototypeOf(AbstractFsDriver)).call(this));

    _this._directory = directory;
    return _this;
  }

  /**
   * @param {String} key
   * @returns {String}
   * @private
   */


  _createClass(AbstractFsDriver, [{
    key: '_buildKey',
    value: function _buildKey(key) {
      return `${this._directory}/${AbstractFsDriver._hash(key, 'sha1')}.${AbstractFsDriver._hash(key, 'md5')}`;
    }

    /**
     * @param {String} text
     * @param {String} alg
     * @returns {String}
     * @private
     */

  }], [{
    key: '_hash',
    value: function _hash(text, alg) {
      return _crypto2.default.createHash(alg).update(text).digest('hex');
    }

    /**
     * @returns {Number}
     */

  }, {
    key: '_now',
    get: function get() {
      return parseInt(new Date().getTime() / 1000);
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'DEFAULT_DIRECTORY',
    get: function get() {
      return '__cache__';
    }
  }]);

  return AbstractFsDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InMemoryDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(46);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * In memory driver implementation
 */
let InMemoryDriver = exports.InMemoryDriver = function (_AbstractDriver) {
  _inherits(InMemoryDriver, _AbstractDriver);

  function InMemoryDriver() {
    _classCallCheck(this, InMemoryDriver);

    var _this = _possibleConstructorReturn(this, (InMemoryDriver.__proto__ || Object.getPrototypeOf(InMemoryDriver)).call(this));

    _this._storage = {};
    return _this;
  }

  /**
   * @returns {String}
   * @private
   */


  _createClass(InMemoryDriver, [{
    key: '_type',
    value: function _type() {
      return 'InMemory';
    }

    /**
     * @returns {Object}
     */

  }, {
    key: '_has',


    /**
     * @param {String} key
     * @param {Function} callback
     * @returns {Function}
     */
    value: function _has(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      if (!this._storage.hasOwnProperty(key)) {
        return callback(null, false);
      } else if (this._storage[key][1] === false) {
        return callback(null, true);
      }

      let timedOut = this._storage[key][1] < InMemoryDriver._now;

      if (timedOut) {
        this._invalidate(key);

        return callback(null, false);
      }

      return callback(null, true);
    }

    /**
     * @param {String} key
     * @param {Function} callback
     * @returns {Function}
     */

  }, {
    key: '_get',
    value: function _get(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      if (!this._storage.hasOwnProperty(key)) {
        return callback(null, null);
      } else if (this._storage[key][1] === false) {
        return callback(null, this._storage[key][0]);
      }

      let timedOut = this._storage[key][1] < InMemoryDriver._now;

      if (timedOut) {
        this._invalidate(key);

        return callback(null, null);
      }

      return callback(null, this._storage[key][0]);
    }

    /**
     * @param {String} key
     * @param {*} value
     * @param {Number} ttl
     * @param {Function} callback
     */

  }, {
    key: '_set',
    value: function _set(key, value) {
      let ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      let callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};

      this._storage[key] = [value, ttl <= 0 ? false : InMemoryDriver._now + ttl];

      callback(null, true);
    }

    /**
     * @param {String} key
     * @param {Number} timeout
     * @param {Function} callback
     */

  }, {
    key: '_invalidate',
    value: function _invalidate(key) {
      let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};

      if (timeout <= 0) {
        delete this._storage[key];

        callback(null, true);

        return;
      }

      this._storage[key][1] = InMemoryDriver._now + timeout;

      callback(null, true);
    }

    /**
     * @param {Function} callback
     */

  }, {
    key: '_flush',
    value: function _flush() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      this._storage = {};

      callback(null, true);
    }

    /**
     * @returns {Number}
     * @private
     */

  }, {
    key: 'storage',
    get: function get() {
      return this._storage;
    }
  }], [{
    key: '_now',
    get: function get() {
      return parseInt(new Date().getTime() / 1000);
    }
  }]);

  return InMemoryDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Exception = undefined;

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when any exception occurs
 */
let Exception = exports.Exception = function (_Core$Exception$Excep) {
  _inherits(Exception, _Core$Exception$Excep);

  /**
   * @param {Array} args
   */
  function Exception() {
    var _ref;

    _classCallCheck(this, Exception);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = Exception.__proto__ || Object.getPrototypeOf(Exception)).call.apply(_ref, [this].concat(args)));
  }

  return Exception;
}(_deepCore2.default.Exception.Exception);

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 2/16/16.
 */



/**
 * Shared Key
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let SharedKey = exports.SharedKey = function () {
  /**
   *
   * @param {String} keyString
   * @param {Instance} microservice
   */
  function SharedKey(keyString, microservice) {
    _classCallCheck(this, SharedKey);

    this._key = keyString;
    this._microservice = microservice;
  }

  /**
   * @returns {Instance}
   */


  _createClass(SharedKey, [{
    key: 'toString',


    /**
     * @returns {String}
     */
    value: function toString() {
      return this._key;
    }
  }, {
    key: 'microservice',
    get: function get() {
      return this._microservice;
    }
  }]);

  return SharedKey;
}();

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Action = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Extractable2 = __webpack_require__(35);

var _Service = __webpack_require__(66);

var _InvalidArgumentException = __webpack_require__(27);

var _Policy = __webpack_require__(47);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Iam statement action
 */
let Action = exports.Action = function (_Extractable) {
  _inherits(Action, _Extractable);

  /**
   * @param {String} service
   * @param {String} actionName
   */
  function Action() {
    let service = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Service.Service.ANY;
    let actionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Policy.Policy.ANY;

    _classCallCheck(this, Action);

    var _this = _possibleConstructorReturn(this, (Action.__proto__ || Object.getPrototypeOf(Action)).call(this));

    _this._service = null;
    _this._action = actionName;

    _this.service = service;
    return _this;
  }

  /**
   * @param {String} action
   */


  _createClass(Action, [{
    key: 'extract',


    /**
     * @returns {String}
     */
    value: function extract() {
      let service = this._service;
      let action = this._action;

      return `${service}:${action}`;
    }
  }, {
    key: 'action',
    set: function set(action) {
      this._action = action;
    }

    /**
     * @returns {String}
     */
    ,
    get: function get() {
      return this._action;
    }

    /**
     * @param {String} name
     */

  }, {
    key: 'service',
    set: function set(name) {
      if (!_Service.Service.exists(name)) {
        throw new _InvalidArgumentException.InvalidArgumentException(name, _Service.Service);
      }

      this._service = name;
    }

    /**
     * @returns {String}
     */
    ,
    get: function get() {
      return this._service;
    }
  }]);

  return Action;
}(_Extractable2.Extractable);

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resource = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Extractable2 = __webpack_require__(35);

var _Region = __webpack_require__(119);

var _Service = __webpack_require__(66);

var _InvalidArgumentException = __webpack_require__(27);

var _InvalidArnException = __webpack_require__(266);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * IAM statement resource
 */
let Resource = exports.Resource = function (_Extractable) {
  _inherits(Resource, _Extractable);

  function Resource() {
    let service = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Service.Service.ANY;
    let region = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let accountId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    let descriptor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

    _classCallCheck(this, Resource);

    var _this = _possibleConstructorReturn(this, (Resource.__proto__ || Object.getPrototypeOf(Resource)).call(this));

    _this._service = null;
    _this._region = null;
    _this._accountId = accountId;
    _this._descriptor = descriptor;

    _this.service = service;
    _this.region = region;

    _this._any = false;
    return _this;
  }

  /**
   * @returns {Resource}
   */


  _createClass(Resource, [{
    key: 'any',
    value: function any() {
      this._any = true;
      return this;
    }

    /**
     * @param {String} identifier
     */

  }, {
    key: 'updateFromArn',


    /**
     * @see - http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html
     *
     * @param {string} arn
     * @returns {Resource}
     */
    value: function updateFromArn(arn) {
      let arnParts = arn.split(':');

      if (arnParts.length < 6) {
        throw new _InvalidArnException.InvalidArnException(arn);
      }

      this.service = arnParts[2];
      this.region = arnParts[3];
      this.accountId = arnParts[4];
      this.descriptor = arnParts.slice(5).join(':');

      return this;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'extract',
    value: function extract() {
      if (this._any) {
        return '*';
      }

      let service = this._service;
      let region = this._region;
      let accountId = this._accountId;
      let descriptor = this._descriptor;

      return `arn:aws:${service}:${region}:${accountId}:${descriptor}`;
    }
  }, {
    key: 'accountId',
    set: function set(identifier) {
      this._accountId = identifier;
    }

    /**
     * @returns {String}
     */
    ,
    get: function get() {
      return this._accountId;
    }

    /**
     * @param {String} descriptor
     */

  }, {
    key: 'descriptor',
    set: function set(descriptor) {
      this._descriptor = descriptor;
    }

    /**
     * @returns {String}
     */
    ,
    get: function get() {
      return this._descriptor;
    }

    /**
     * @param {String} name
     */

  }, {
    key: 'region',
    set: function set(name) {
      if (!_Region.Region.exists(name)) {
        throw new _InvalidArgumentException.InvalidArgumentException(name, _Region.Region);
      }

      this._region = name;
    }

    /**
     * @returns {String}
     */
    ,
    get: function get() {
      return this._region;
    }

    /**
     * @param {String} name
     */

  }, {
    key: 'service',
    set: function set(name) {
      if (!_Service.Service.exists(name)) {
        throw new _InvalidArgumentException.InvalidArgumentException(name, _Service.Service);
      }

      this._service = name;
    }

    /**
     * @returns {String}
     */
    ,
    get: function get() {
      return this._service;
    }
  }]);

  return Resource;
}(_Extractable2.Extractable);

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */

/*eslint no-eq-null: 0, eqeqeq:0 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Statement = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Resource = __webpack_require__(116);

var _Collection = __webpack_require__(65);

var _Action = __webpack_require__(115);

var _Policy = __webpack_require__(47);

var _Extractable2 = __webpack_require__(35);

var _InvalidArgumentException = __webpack_require__(27);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * IAM policy statement
 */
let Statement = exports.Statement = function (_Extractable) {
  _inherits(Statement, _Extractable);

  function Statement() {
    _classCallCheck(this, Statement);

    var _this = _possibleConstructorReturn(this, (Statement.__proto__ || Object.getPrototypeOf(Statement)).call(this));

    _this._effect = Statement.ALLOW;
    _this._action = new _Collection.Collection(_Action.Action);
    _this._notAction = new _Collection.Collection(_Action.Action);
    _this._resource = new _Collection.Collection(_Resource.Resource);
    _this._notResource = new _Collection.Collection(_Resource.Resource);
    _this._condition = null;
    _this._principal = null;
    return _this;
  }

  /**
   * @param {String} effect
   */


  _createClass(Statement, [{
    key: 'extract',


    /**
     * @returns {Object}
     */
    value: function extract() {
      let actions = this._action.count() > 0 ? this._action.extract() : _Policy.Policy.ANY;
      let resources = this._resource.count() > 0 ? this._resource.extract() : null;

      let statement = {
        Effect: this._effect,
        Action: actions
      };

      if (resources !== null) {
        statement.Resource = resources;
      }

      if (this._condition !== null && this._condition instanceof Object) {
        statement.Condition = this._condition;
      }

      // @todo - create separate class for Principal
      if (this._principal != null) {
        statement.Principal = this._principal;
      }

      if (this._notAction.count() > 0) {
        statement.NotAction = this._notAction.extract();
      }

      if (this._notResource.count() > 0) {
        statement.NotResource = this._notResource.extract();
      }

      return statement;
    }
  }, {
    key: 'effect',
    set: function set(effect) {
      if ([Statement.ALLOW, Statement.DENY].indexOf(effect) === -1) {
        throw new _InvalidArgumentException.InvalidArgumentException(effect, '[Statement.ALLOW, Statement.DENY]');
      }

      this._effect = effect;
    }

    /**
     * @returns {String}
     */
    ,
    get: function get() {
      return this._effect;
    }

    /**
     * @param {Object} condition
     */

  }, {
    key: 'condition',
    set: function set(condition) {
      this._condition = condition;
    }

    /**
     * @returns {Object}
     */
    ,
    get: function get() {
      return this._condition;
    }

    /**
     * @param {*} principal
     */

  }, {
    key: 'principal',
    set: function set(principal) {
      this._principal = principal;
    }

    /**
     * @returns {*}
     */
    ,
    get: function get() {
      return this._principal;
    }

    /**
     * @returns {Collection}
     */

  }, {
    key: 'notResource',
    get: function get() {
      return this._notResource;
    }

    /**
     * @returns {Collection}
     */

  }, {
    key: 'resource',
    get: function get() {
      return this._resource;
    }

    /**
     * @returns {Collection}
     */

  }, {
    key: 'notAction',
    get: function get() {
      return this._notAction;
    }

    /**
     * @returns {Collection}
     */

  }, {
    key: 'action',
    get: function get() {
      return this._action;
    }

    /**
     * @returns {String}
     */

  }], [{
    key: 'ALLOW',
    get: function get() {
      return 'Allow';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'DENY',
    get: function get() {
      return 'Deny';
    }
  }]);

  return Statement;
}(_Extractable2.Extractable);

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/25/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Response = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MissingRuntimeContextException = __webpack_require__(271);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Response sent to the lambda context
 */
let Response = exports.Response = function () {
  /**
   * @param {Runtime} runtime
   * @param {Object} data
   */
  function Response(runtime, data) {
    _classCallCheck(this, Response);

    this._data = data;
    this._runtime = runtime;
  }

  /**
   * @returns {Runtime}
   */


  _createClass(Response, [{
    key: 'send',


    /**
     * @returns {Response}
     */
    value: function send() {
      if (!this._runtime.context) {
        throw new _MissingRuntimeContextException.MissingRuntimeContextException();
        // @todo: Figure out why lambda container caches _runtime.contextSent
        // } else if (this.contextSent) {
        //   throw new ContextAlreadySentException();
      }

      this.runtime.logService.rumLog({
        service: 'deep-core',
        resourceType: 'Lambda',
        resourceId: this.runtime.context.invokedFunctionArn,
        eventName: 'Run'
      });

      // flush RUM batched messages if any
      this.runtime.logService.rumFlush((error, data) => {
        // @todo: via setter?
        this._runtime._contextSent = true;

        (this._runtime.resolver || this._runtime.context)[this.constructor.contextMethod](this.data);
      });

      return this;
    }

    /**
     *
     * @returns {Object}
     * @private
     */

  }, {
    key: 'runtime',
    get: function get() {
      return this._runtime;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'contextSent',
    get: function get() {
      return this._runtime.contextSent;
    }
  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'rawData',
    get: function get() {
      return this._data;
    }

    /**
     * @returns {String}
     */

  }], [{
    key: 'contextMethod',
    get: function get() {
      return 'succeed';
    }
  }]);

  return Response;
}();

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */



/**
 * Available AWS regions
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let Region = exports.Region = function () {
  function Region() {
    _classCallCheck(this, Region);
  }

  _createClass(Region, null, [{
    key: 'exists',


    /**
     * @param {String} name
     * @returns {Boolean}
     */
    value: function exists(name) {
      return name === '' || -1 !== Region.list().indexOf(name);
    }

    /**
     * @returns {String[]}
     */

  }, {
    key: 'list',
    value: function list() {
      return [Region.ANY, Region.ASIA_PACIFIC_TOKYO, Region.ASIA_PACIFIC_SEOUL, Region.ASIA_PACIFIC_SYDNEY, Region.ASIA_PACIFIC_SINGAPORE, Region.EU_FRANKFURT, Region.EU_IRELAND, Region.EU_LONDON, Region.SOUTH_AMERICA_SAO_PAULO, Region.US_EAST_N_VIRGINIA, Region.US_EAST_OHIO, Region.US_WEST_N_CALIFORNIA, Region.US_WEST_OREGON, Region.AP_SOUTH_MUMBAI];
    }

    /**
     * List method alias
     *
     * @returns {String[]}
     */

  }, {
    key: 'all',
    value: function all() {
      return Region.list();
    }

    /**
     * @param {string} defaultRegion
     * @param {array} availableRegions
     * @returns {string}
     */

  }, {
    key: 'getAppropriateAwsRegion',
    value: function getAppropriateAwsRegion(defaultRegion, availableRegions) {
      if (availableRegions.indexOf(defaultRegion) !== -1) {
        return defaultRegion;
      }

      let regionContinent = defaultRegion.split('-')[0];

      for (let regionKey in availableRegions) {
        if (!availableRegions.hasOwnProperty(regionKey)) {
          continue;
        }

        let region = availableRegions[regionKey];

        if (region === Region.ANY) {
          return defaultRegion;
        }

        if (region.split('-')[0] === regionContinent) {
          return region;
        }
      }

      return availableRegions[0]; // fallback to first available region
    }

    /**
     *
     * @param {String} region
     * @returns {String}
     */

  }, {
    key: 'getRegionPrefix',
    value: function getRegionPrefix(region) {
      let regionsWithDifferentPrefix = [Region.EU_FRANKFURT, Region.ASIA_PACIFIC_SEOUL];
      return regionsWithDifferentPrefix.indexOf(region) !== -1 ? '.' : '-';
    }
  }, {
    key: 'ANY',

    /**
     * @returns {String}
     */
    get: function get() {
      return '*';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ASIA_PACIFIC_TOKYO',
    get: function get() {
      return 'ap-northeast-1';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ASIA_PACIFIC_SEOUL',
    get: function get() {
      return 'ap-northeast-2';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ASIA_PACIFIC_SINGAPORE',
    get: function get() {
      return 'ap-southeast-1';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ASIA_PACIFIC_SYDNEY',
    get: function get() {
      return 'ap-southeast-2';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'EU_FRANKFURT',
    get: function get() {
      return 'eu-central-1';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'EU_IRELAND',
    get: function get() {
      return 'eu-west-1';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'EU_LONDON',
    get: function get() {
      return 'eu-west-2';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'SOUTH_AMERICA_SAO_PAULO',
    get: function get() {
      return 'sa-east-1';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'US_EAST_N_VIRGINIA',
    get: function get() {
      return 'us-east-1';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'US_EAST_OHIO',
    get: function get() {
      return 'us-east-2';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'US_WEST_N_CALIFORNIA',
    get: function get() {
      return 'us-west-1';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'US_WEST_OREGON',
    get: function get() {
      return 'us-west-2';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'AP_SOUTH_MUMBAI',
    get: function get() {
      return 'ap-south-1';
    }
  }]);

  return Region;
}();

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/25/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MethodsNotImplementedException = undefined;

var _Exception2 = __webpack_require__(11);

var _InvalidArgumentException = __webpack_require__(27);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when methods from interface or abstract class are not implemented
 */
let MethodsNotImplementedException = exports.MethodsNotImplementedException = function (_Exception) {
  _inherits(MethodsNotImplementedException, _Exception);

  /**
   * @param {Array} methods
   */
  function MethodsNotImplementedException(methods) {
    _classCallCheck(this, MethodsNotImplementedException);

    if (!Array.isArray(methods)) {
      throw new _InvalidArgumentException.InvalidArgumentException(methods, 'Array');
    }

    let methodPlain = methods.join(', ');

    return _possibleConstructorReturn(this, (MethodsNotImplementedException.__proto__ || Object.getPrototypeOf(MethodsNotImplementedException)).call(this, `One or more method are not implemented (${methodPlain}).`, 500));
  }

  return MethodsNotImplementedException;
}(_Exception2.Exception);

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 2/25/16.
 */



/**
 * Base exception
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let Helper = exports.Helper = function () {
  function Helper() {
    _classCallCheck(this, Helper);
  }

  _createClass(Helper, null, [{
    key: 'assureDefinedCode',


    /**
     * @param {String|Number}code
     * @returns {Number}
     */
    value: function assureDefinedCode(code) {
      code = parseInt(code);

      if (Helper.CODES.indexOf(code) !== -1) {
        return code;
      }

      // fallback to a defined error code
      code = parseInt(String(code).charAt(0) + '00');

      return Helper.CODES.indexOf(code) !== -1 ? code : 500;
    }
  }, {
    key: 'CODES',

    /**
     * @returns {Number[]}
     */
    get: function get() {
      return [200, 400, 401, 403, 404, 406, 409, 500];
    }
  }]);

  return Helper;
}();

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate) {/**
 * Created by AlexanderC on 1/21/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sandbox = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _domain = __webpack_require__(217);

var _domain2 = _interopRequireDefault(_domain);

var _process = __webpack_require__(6);

var _process2 = _interopRequireDefault(_process);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let Sandbox = exports.Sandbox = function () {
  /**
   * @param {Function} func
   */
  function Sandbox(func) {
    _classCallCheck(this, Sandbox);

    this._func = func;
    this._onFail = Sandbox.ON_FAIL_CB;
  }

  /**
   * @returns {Function}
   */


  _createClass(Sandbox, [{
    key: 'run',


    /**
     * @returns {Sandbox}
     */
    value: function run() {
      let execDomain = _domain2.default.create();
      let failCbTriggered = false;

      let failCb = error => {
        if (failCbTriggered) {
          return;
        }

        failCbTriggered = true;

        try {
          execDomain.exit();
        } catch (e) {/* silent fail */}

        setImmediate(() => {
          this._onFail(error);
        });
      };

      execDomain.once('error', failCb);

      // lambda predefined listeners forces "Process exited ..." error
      _process2.default.removeAllListeners('uncaughtException');
      _process2.default.removeAllListeners('unhandledRejection');
      _process2.default.on('uncaughtException', failCb);
      _process2.default.on('unhandledRejection', failCb);

      try {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        execDomain.run.apply(execDomain, [this._func].concat(args));
      } catch (error) {
        failCb(error);
      }

      return this;
    }

    /**
     * @param {Function} cb
     * @returns {Sandbox}
     */

  }, {
    key: 'fail',
    value: function fail(cb) {
      this._onFail = cb;

      return this;
    }

    /**
     * @returns {Function}
     */

  }, {
    key: 'func',
    get: function get() {
      return this._func;
    }
  }], [{
    key: 'ON_FAIL_CB',
    get: function get() {
      return error => {
        console.error(error);
      };
    }
  }]);

  return Sandbox;
}();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(223).setImmediate))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 2/22/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BackendContext = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractContext2 = __webpack_require__(288);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let BackendContext = exports.BackendContext = function (_AbstractContext) {
  _inherits(BackendContext, _AbstractContext);

  function BackendContext() {
    _classCallCheck(this, BackendContext);

    return _possibleConstructorReturn(this, (BackendContext.__proto__ || Object.getPrototypeOf(BackendContext)).apply(this, arguments));
  }

  _createClass(BackendContext, null, [{
    key: 'fromKernel',

    /**
     * @param {Kernel|*} kernel
     *
     * @returns {AbstractContext|*}
     */
    value: function fromKernel(kernel) {
      const runtimeContext = BackendContext._filterRuntimeContext(kernel.runtimeContext);

      return new this(runtimeContext);
    }

    /**
     * @param {*} runtimeContext
     * 
     * @returns {*}
     *
     * @private
     */

  }, {
    key: '_filterRuntimeContext',
    value: function _filterRuntimeContext(runtimeContext) {
      const context = {};

      Object.keys(runtimeContext).forEach(key => {
        const value = runtimeContext[key];

        if (BackendContext._isScalarOrArray(value)) {
          context[key] = value;
        } else if (typeof value === 'object') {
          if (Object.keys(value).length <= 0) {
            context[key] = value;
          } else {
            const plainValue = BackendContext._filterRuntimeContext(value);

            if (Object.keys(plainValue).length > 0) {
              context[key] = plainValue;
            }
          }
        }
      });

      return context;
    }

    /**
     * @param {*} value
     * 
     * @returns {Boolean}
     *
     * @private
     */

  }, {
    key: '_isScalarOrArray',
    value: function _isScalarOrArray(value) {
      return null === value || Array.isArray(value) || /string|number|boolean/i.test(typeof value);
    }
  }]);

  return BackendContext;
}(_AbstractContext2.AbstractContext);

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 2/22/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let AbstractDriver = exports.AbstractDriver = function () {
  /**
   * @param {*} context
   */
  function AbstractDriver(context) {
    _classCallCheck(this, AbstractDriver);

    this._context = context;
  }

  /**
   * @returns {*}
   */


  _createClass(AbstractDriver, [{
    key: 'log',


    /**
     * @param   {String} name
     * @param   {*} data
     * @param   {*} context
     *
     * @returns {Promise|*}
     */
    value: function log(name, data) {
      let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return this._log(name, data, this.context.enrichEventContext(context));
    }

    /**
     * @param   {String} name
     * @param   {*} data
     * @param   {*} context
     *
     * @returns {Promise|*}
     *
     * @private
     */

  }, {
    key: '_printEvent',
    value: function _printEvent(name, data, context) {
      console.log('[EVENT]', name, '{DATA->', data, '}', '{CONTEXT->', context, '}');

      return Promise.resolve();
    }

    /**
     * @param   {String} name
     * @param   {*} data
     * @param   {Object} context
     *
     * @returns {Promise|*}
     *
     * @private
     */

  }, {
    key: '_log',
    value: function _log(name, data, context) {
      return Promise.reject(new Error(`Driver._log() not implemented!`));
    }
  }, {
    key: 'context',
    get: function get() {
      return this._context;
    }
  }]);

  return AbstractDriver;
}();

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 3/7/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsyncConfig = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(28);

var _HttpDriver = __webpack_require__(127);

var _FsDriver = __webpack_require__(126);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let AsyncConfig = exports.AsyncConfig = function (_AbstractDriver) {
  _inherits(AsyncConfig, _AbstractDriver);

  /**
   * @param {Kernel|*} kernel
   * @param {String} configFile
   */
  function AsyncConfig(kernel) {
    let configFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AsyncConfig.DEFAULT_CONFIG_FILE;

    _classCallCheck(this, AsyncConfig);

    var _this = _possibleConstructorReturn(this, (AsyncConfig.__proto__ || Object.getPrototypeOf(AsyncConfig)).call(this));

    _this._kernel = kernel;
    _this._configFile = configFile;
    return _this;
  }

  /**
   * @returns {Kernel|*}
   */


  _createClass(AsyncConfig, [{
    key: '_load',


    /**
     * @param {String} configFile
     * @private
     */
    value: function _load() {
      let configFile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      this._configFile = configFile || this._configFile;

      this._kernel.isBackend ? this._loadFromFS() : this._loadFromEndpoint();
    }

    /**
     * @private
     */

  }, {
    key: '_loadFromFS',
    value: function _loadFromFS() {
      let driver = new _FsDriver.FsDriver(this._configFile).inherit(this);

      if (!this._kernel.container.localBackend) {
        let sharedFs = this._kernel.get('fs').shared(this._kernel.rootMicroservice.identifier);

        driver.setFs(sharedFs);
      }

      driver.load();
    }

    /**
     * @private
     */

  }, {
    key: '_loadFromEndpoint',
    value: function _loadFromEndpoint() {
      new _HttpDriver.HttpDriver(this._configFile).inherit(this).load();
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'kernel',
    get: function get() {
      return this._kernel;
    }

    /**
     * @returns {String|*}
     */

  }, {
    key: 'configFile',
    get: function get() {
      return this._configFile;
    }
  }], [{
    key: 'DEFAULT_CONFIG_FILE',
    get: function get() {
      return '_async_config.json';
    }
  }]);

  return AsyncConfig;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 3/7/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FsDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(28);

var _fs = __webpack_require__(219);

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let FsDriver = exports.FsDriver = function (_AbstractDriver) {
  _inherits(FsDriver, _AbstractDriver);

  /**
   * @param {String} file
   */
  function FsDriver() {
    let file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, FsDriver);

    var _this = _possibleConstructorReturn(this, (FsDriver.__proto__ || Object.getPrototypeOf(FsDriver)).call(this));

    _this._fs = _fs2.default;
    _this._file = file;
    return _this;
  }

  /**
   * @returns {String}
   */


  _createClass(FsDriver, [{
    key: 'setFs',


    /**
     * @param {fs|s3fs|*} fs
     * @returns {FsDriver}
     */
    value: function setFs(fs) {
      this._fs = fs;

      return this;
    }

    /**
     * @param {String} file
     * @returns {FsDriver}
     */

  }, {
    key: 'setFile',
    value: function setFile(file) {
      this._file = file;

      return this;
    }

    /**
     * @param {String} file
     * @private
     */

  }, {
    key: '_load',
    value: function _load() {
      let file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      this._file = file || this._file;

      this._fs.readFile(this._file, (error, data) => {
        let configStr = data ? data.toString() : '{}';

        if (error && error.name !== 'NoSuchKey') {
          this.fail(`Error reading configuration file '${this._file}': ${error}`);

          return;
        }

        this.loadedJson(configStr);
      });
    }
  }, {
    key: 'file',
    get: function get() {
      return this._file;
    }

    /**
     * @returns {fs|s3fs|*}
     */

  }, {
    key: 'fs',
    get: function get() {
      return this._fs;
    }
  }]);

  return FsDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 3/7/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(28);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let HttpDriver = exports.HttpDriver = function (_AbstractDriver) {
  _inherits(HttpDriver, _AbstractDriver);

  /**
   * @param {String} endpoint
   * @param {Boolean} enforceRoot
   */
  function HttpDriver() {
    let endpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let enforceRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, HttpDriver);

    var _this = _possibleConstructorReturn(this, (HttpDriver.__proto__ || Object.getPrototypeOf(HttpDriver)).call(this));

    _this._endpoint = endpoint;
    _this._enforceRoot = enforceRoot;
    return _this;
  }

  /**
   * @returns {String|*}
   */


  _createClass(HttpDriver, [{
    key: 'setEndpoint',


    /**
     * @param {String} endpoint
     * @returns {HttpDriver}
     */
    value: function setEndpoint(endpoint) {
      this._endpoint = endpoint;

      return this;
    }

    /**
     * @param {String} endpoint
     * @private
     */

  }, {
    key: '_load',
    value: function _load() {
      let endpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      this._endpoint = endpoint || this._endpoint;

      if (this._enforceRoot && !/^http|\//i.test(this._endpoint)) {
        this._endpoint = `/${this._endpoint}`;
      }

      let client = new XMLHttpRequest();

      client.open('GET', this._endpoint);

      client.onreadystatechange = () => {
        if (client.readyState === 4) {
          if (client.status !== 200) {
            this.fail(`Failed to load config from ${this._endpoint} (status=${client.status})`);
          } else {
            this.loadedJson(client.responseText);
          }
        }
      };

      client.send();
    }
  }, {
    key: 'endpoint',
    get: function get() {
      return this._endpoint;
    }
  }]);

  return HttpDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Instance = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _Injectable = __webpack_require__(68);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Microservice instance class
 */
let Instance = exports.Instance = function () {
  /**
   * @param {String} identifier
   * @param {Object} rawResources
   * @param {Object} parameters
   */
  function Instance(identifier, rawResources) {
    let parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Instance);

    this._isRoot = false;
    this._rawResources = rawResources;
    this._identifier = identifier;
    this._parameters = parameters;
  }

  /**
   * @param {Object} globalConfig
   * @returns {Instance[]}
   */


  _createClass(Instance, [{
    key: 'inject',


    /**
     * @param {Object} objectInstance
     * @return {Object}
     */
    value: function inject(objectInstance) {
      if (!(objectInstance instanceof _Injectable.Injectable)) {
        throw new _deepCore2.default.Exception.InvalidArgumentException(objectInstance, 'deep-kernel.Injectable');
      }

      objectInstance.microservice = this;

      return objectInstance;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'toString',
    value: function toString() {
      return this._identifier;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'parameters',
    get: function get() {
      return this._parameters;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'rawResources',
    get: function get() {
      return this._rawResources;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'identifier',
    get: function get() {
      return this._identifier;
    }

    /**
     * @param {Boolean} state
     */

  }, {
    key: 'isRoot',
    set: function set(state) {
      this._isRoot = state;
    }

    /**
     * @returns {Boolean}
     */
    ,
    get: function get() {
      return this._isRoot;
    }
  }], [{
    key: 'createVector',
    value: function createVector(globalConfig) {
      let vector = [];

      for (let identifier in globalConfig.microservices) {
        if (!globalConfig.microservices.hasOwnProperty(identifier)) {
          continue;
        }

        let microservice = globalConfig.microservices[identifier];

        let microserviceObject = new Instance(identifier, microservice.resources, microservice.parameters || {});

        microserviceObject.isRoot = microservice.isRoot;

        vector.push(microserviceObject);
      }

      return vector;
    }
  }]);

  return Instance;
}();

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Request = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _SuperagentResponse = __webpack_require__(130);

var _LambdaResponse = __webpack_require__(71);

var _Response = __webpack_require__(72);

var _Exception = __webpack_require__(4);

var _Action = __webpack_require__(70);

var _RetryManager = __webpack_require__(338);

var _superagent = __webpack_require__(164);

var _superagent2 = _interopRequireDefault(_superagent);

var _awsSdk = __webpack_require__(15);

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _MissingCacheImplementationException = __webpack_require__(328);

var _CachedRequestException = __webpack_require__(324);

var _NotAuthenticatedException = __webpack_require__(332);

var _aws = __webpack_require__(241);

var _aws2 = _interopRequireDefault(_aws);

var _urlParse = __webpack_require__(93);

var _urlParse2 = _interopRequireDefault(_urlParse);

var _qs = __webpack_require__(160);

var _qs2 = _interopRequireDefault(_qs);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _MissingSecurityServiceException = __webpack_require__(331);

var _AsyncCallNotAvailableException = __webpack_require__(323);

var _LambdaParamsCompatibilityException = __webpack_require__(325);

var _LoadCredentialsException = __webpack_require__(326);

var _SourceNotAvailableException = __webpack_require__(333);

var _crypto = __webpack_require__(19);

var _crypto2 = _interopRequireDefault(_crypto);

var _util = __webpack_require__(16);

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Action request instance
 */
let Request = function () {
  /**
   * @param {Action} action
   * @param {Object} payload
   * @param {String} method
   */
  function Request(action, payload, method) {
    _classCallCheck(this, Request);

    this._action = action;
    this._payload = payload;
    this._method = method;
    this._lambda = new _awsSdk2.default.Lambda();

    this._cacheImpl = null;
    this._cacheTtl = Request.TTL_FOREVER;
    this._cached = false;
    this._publicCached = false;

    this._async = false;
    this._xhrAsync = true; // it's passed to httpOptions.xhrAsync option of AWS Service
    this._native = false;

    this._validationSchemaName = null;

    this._customId = null;
    this._returnLogs = false;

    this._withUserCredentials = true;
    this._authScope = this._buildAuthScope();

    this._apiKey = null;

    this._baseUrl = null;

    this._retryManager = new _RetryManager.RetryManager(['internal-error']);
  }

  /**
   * @param {String} url
   * @returns {LocalRequest}
   */


  _createClass(Request, [{
    key: 'baseUrl',
    value: function baseUrl(url) {
      this._baseUrl = url;

      return this;
    }

    /**
     * @returns {String|null}
     */

  }, {
    key: 'skipLoadingCredentials',


    /**
     * @returns {Request}
     */
    value: function skipLoadingCredentials() {
      this._withUserCredentials = false;

      return this;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'skipPreValidation',


    /**
     * @returns {Request}
     */
    value: function skipPreValidation() {
      this._validationSchemaName = null;

      return this;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'invokeAsync',


    /**
     * @returns {Request}
     */
    value: function invokeAsync() {
      if (!this.isLambda) {
        throw new _AsyncCallNotAvailableException.AsyncCallNotAvailableException(this._action.type);
      }

      if (this._returnLogs) {
        throw new _LambdaParamsCompatibilityException.LambdaParamsCompatibilityException({
          InvocationType: 'Event',
          LogType: 'Tail'
        });
      }

      this._native = true;
      this._async = true;

      return this;
    }

    /**
     * @param {Boolean} flag
     *
     * @returns {Request}
     */

  }, {
    key: 'httpXhrAsync',
    value: function httpXhrAsync(flag) {
      if (!this.isLambda) {
        throw new _Exception.Exception('XHR sync requests are supported only for calls to lambda functions.', 400);
      }

      this._xhrAsync = !!flag;

      return this;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'useDirectCall',


    /**
     * @param {Boolean} returnLogs
     * @returns {Request}
     */
    value: function useDirectCall() {
      let returnLogs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (this._async && returnLogs) {
        throw new _LambdaParamsCompatibilityException.LambdaParamsCompatibilityException({
          InvocationType: 'Event',
          LogType: 'Tail'
        });
      }

      this._native = true;
      this._returnLogs = returnLogs;

      return this;
    }

    /**
     * @returns {Request}
     */

  }, {
    key: 'usePublicCache',
    value: function usePublicCache() {
      this._publicCached = true;
      return this;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'enableCache',


    /**
     * @returns {Request}
     */
    value: function enableCache() {
      this._cached = true;
      return this;
    }

    /**
     * @returns {Request}
     */

  }, {
    key: 'disableCache',
    value: function disableCache() {
      this._cached = false;
      return this;
    }

    /**
     * @param {Number} ttl
     * @returns {Request}
     */

  }, {
    key: 'cache',
    value: function cache() {
      let ttl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Request.TTL_FOREVER;

      if (!this._cacheImpl) {
        throw new _MissingCacheImplementationException.MissingCacheImplementationException();
      }

      this._cacheTtl = ttl;
      this.enableCache();

      return this;
    }

    /**
     * @param {Number} count
     * @returns {Request}
     */

  }, {
    key: 'retry',
    value: function retry(count) {
      this._retryManager.count = count;
      return this;
    }

    /**
     * @param {Function|String} strategy
     * @param {Object[]} args 
     * @returns {Request}
     */

  }, {
    key: 'addRetryStrategy',
    value: function addRetryStrategy(strategy) {
      var _retryManager;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_retryManager = this._retryManager).addStrategy.apply(_retryManager, [strategy].concat(args));
      return this;
    }

    /**
     * @returns {Number}
     */

  }, {
    key: 'authScope',


    /**
     * @param {String|null} authScope
     * @returns {Request}
     */
    value: function authScope(_authScope) {
      this._authScope = _authScope;

      return this;
    }

    /**
     * @param {String} key
     * @returns {Request}
     */

  }, {
    key: 'apiKey',
    value: function apiKey(key) {
      this._apiKey = key;

      return this;
    }

    /**
     * @returns {String}
     * @private
     */

  }, {
    key: '_buildCacheKey',
    value: function _buildCacheKey() {
      let payload = Request._md5(JSON.stringify(this.payload));
      let endpoint = this.native ? this._action.source.original : this._action.source.api;

      return `${this._method}:${this._action.type}:${endpoint}#${payload}`;
    }

    /**
     * @param {String} str
     * @returns {String}
     */

  }, {
    key: '_rebuildResponse',


    /**
     * @param {String|Object} rawData
     * @returns {Response}
     * @private
     */
    value: function _rebuildResponse(rawData) {
      let response = typeof rawData === 'string' ? JSON.parse(rawData) : rawData;

      if (!response) {
        throw new _CachedRequestException.CachedRequestException(`Unable to unpack cached JSON object from ${rawData}`);
      }

      if (response._class) {
        let ResponseImpl = Request._chooseResponseImpl(response._class);

        if (!ResponseImpl) {
          throw new _Exception.Exception(`Unknown Response implementation ${response._class}`);
        }

        return new ResponseImpl(this, response.data, response.error);
      }

      return new _SuperagentResponse.SuperagentResponse(this, response, null);
    }

    /**
     * @param {String} className
     * @returns {*}
     * @private
     */

  }, {
    key: 'invalidateCache',


    /**
     *
     * @param {Function} callback
     * @returns {Request}
     */
    value: function invalidateCache() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      if (!this.isCached) {
        callback(true);

        return this;
      }

      let cache = this._cacheImpl;
      let cacheKey = this._buildCacheKey();

      cache.has(cacheKey, (error, result) => {
        if (error) {
          throw new _CachedRequestException.CachedRequestException(error);
        }

        if (result) {
          cache.invalidate(cacheKey, 0, (error, result) => {
            if (error) {
              throw new _CachedRequestException.CachedRequestException(error);
            }

            callback(result);
          });

          return;
        }

        callback(true);
      });

      return this;
    }

    /**
     * @param {Function} callback
     * @returns {Request}
     */

  }, {
    key: 'send',
    value: function send() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      let cache = this.cacheImpl;
      let cacheKey = this._buildCacheKey();

      if (!this.isCached || this._async || this.cacheTtl === Request.TTL_INVALIDATE) {
        return this._send(callback);
      }

      this._loadResponseFromCache(cache, cacheKey, (error, response) => {
        if (!error) {
          callback(response);
          return;
        }

        if (this.isPublicCached) {
          let publicCache = cache.shared;
          let publicCacheKey = publicCache.buildKeyFromRequest(this);

          this._loadResponseFromCache(publicCache, publicCacheKey, (error, response) => {
            if (!error) {
              callback(response);
              return;
            }

            this._send(callback);
          });
        } else {
          this._send(callback);
        }
      });

      return this;
    }

    /**
     * @param {Function} callback
     * @returns {Request}
     */

  }, {
    key: '_send',
    value: function _send() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      let logService = this.action.resource.log;
      let requestEvent = {
        service: 'deep-resource',
        resourceType: 'Browser',
        resourceId: this.native ? this.action.source.original : this.action.source.api,
        eventName: this.method,
        eventId: this.customId,
        requestId: this.customId,
        time: Date.now()
      };

      let decoratedCallback = response => {
        if (this._retryManager.isRetryable(response)) {
          return this._send(callback);
        }

        if (this.method.toUpperCase() === 'GET') {
          this._saveResponseToCache(response);
        }

        requestEvent.requestId = requestEvent.mainRequestId = response.requestId;

        let responseEvent = _util2.default._extend({}, requestEvent);
        responseEvent.payload = response;
        responseEvent.time = Date.now();

        logService.rumLog(requestEvent);
        logService.rumLog(responseEvent);

        callback(response);
      };

      if (this.validationSchemaName) {
        let result = this._validate();

        if (result.error) {
          return decoratedCallback(this._createValidationErrorResponse(result.error));
        }
      }

      this._fillPayloadWithSystemData();

      if (!this._native) {
        return this._sendThroughApi(decoratedCallback);
      }

      switch (this._action.type) {
        case _Action.Action.LAMBDA:
          if (!this._action.isOriginalSourceInvokable) {
            throw new _SourceNotAvailableException.SourceNotAvailableException(_Action.Action.LAMBDA, this._action);
          }

          this._sendLambda(decoratedCallback);
          break;
        case _Action.Action.EXTERNAL:
          if (!this._action.isApiSourceInvokable) {
            throw new _SourceNotAvailableException.SourceNotAvailableException(_Action.Action.EXTERNAL, this._action);
          }

          this._sendExternal(decoratedCallback);
          break;
        default:
          throw new _Exception.Exception(`Request of type ${this._action.type} is not implemented`);
      }

      return this;
    }

    /**
     * @returns {Request}
     * @private
     */

  }, {
    key: '_fillPayloadWithSystemData',
    value: function _fillPayloadWithSystemData() {
      let resource = this.action.resource;

      if (!resource.isBackend || !resource.log.isRumEnabled()) {
        return this;
      }

      let runtimeContext = resource.contextProvider.context;

      this._payload.lambdaDepthLevel = (runtimeContext.getDeepFrameworkOption('lambdaDepthLevel') || 0) + 1;
      this._payload.mainRequestId = runtimeContext.getDeepFrameworkOption('mainRequestId') || runtimeContext.awsRequestId;

      return this;
    }

    /**
     * @param {Object} response
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_saveResponseToCache',
    value: function _saveResponseToCache(response) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      if (!this.isCached || this.async || this.cacheTtl === Request.TTL_INVALIDATE || response.isError) {
        callback(null, response);
        return;
      }

      let cacheKey = this._buildCacheKey();
      let logService = this.action.resource.log;

      let event = {
        service: 'deep-cache',
        resourceType: this.cacheImpl.type(),
        resourceId: cacheKey,
        eventName: 'set',
        requestId: response.requestId
      };

      logService.rumLog(event);

      this.cacheImpl.set(cacheKey, Request._stringifyResponse(response), this.cacheTtl, (error, result) => {
        event = _util2.default._extend({}, event);
        event.payload = { error: error, result: result };
        logService.rumLog(event);

        if (!error && !result) {
          error = `Unable to persist request cache under key ${cacheKey}.`;
        }

        if (error) {
          error = new _CachedRequestException.CachedRequestException(error);
        }

        callback(error, result);

        return;
      });
    }

    /**
     * @param {Object} driver
     * @param {String|Key} key
     * @param {Function} callback
     */

  }, {
    key: '_loadResponseFromCache',
    value: function _loadResponseFromCache(driver, key, callback) {
      driver.has(key, (err, has) => {
        if (err) {
          callback(new _CachedRequestException.CachedRequestException(`Error to check if has in cache key ${key}`));
          return;
        }

        if (has) {
          let logService = this.action.resource.log;

          let event = {
            service: 'deep-cache',
            resourceType: driver.type(),
            resourceId: key,
            eventName: 'get',
            requestId: this.customId
          };

          logService.rumLog(event);

          driver.get(key, (err, data) => {
            event = _util2.default._extend({}, event);
            event.payload = { err: err, data: data };

            logService.rumLog(event);

            if (err) {
              callback(err, null);

              return;
            }

            callback(null, this._rebuildResponse(data));
          });

          return;
        }

        callback(new _CachedRequestException.CachedRequestException(`Missing key ${key}`), null);
      });
    }

    /**
     * @returns {Object}
     * @private
     */

  }, {
    key: '_validate',
    value: function _validate() {
      if (!this.validationSchemaName) {
        throw new _Exception.Exception('Error on validating request. Validation schema is not defined.');
      }

      return this.action.resource.validation.validate(this.validationSchemaName, this.payload, true);
    }

    /**
     * @param {Error} validationError
     *
     * @returns {LambdaResponse}
     * @private
     */

  }, {
    key: '_createValidationErrorResponse',
    value: function _createValidationErrorResponse(validationError) {
      return new _LambdaResponse.LambdaResponse(this, {
        errorMessage: JSON.stringify({
          errorType: validationError.name,
          errorMessage: validationError.annotate(),
          errorStack: validationError.stack || new Error(validationError.message).stack,
          validationErrors: validationError.details
        })
      }, null);
    }

    /**
     * @param {Function} callback
     * @returns {Request}
     * @private
     */

  }, {
    key: '_sendThroughApi',
    value: function _sendThroughApi() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      let endpoint = this.action.source.api;
      let headers = {};

      let sendRequestFunc = request => {
        request.end((error, response) => {
          callback(new _SuperagentResponse.SuperagentResponse(this, response, error));
        });
      };

      // make sure apiKey is set for endpoints that requires it
      if (this.action.apiKeyRequired) {
        if (!this._apiKey) {
          callback(new _SuperagentResponse.SuperagentResponse(this, null, new Error('Missing required api key parameter.')));

          return this;
        }

        headers = { 'x-api-key': this._apiKey };
      }

      if (this.action.apiAuthType === _Action.Action.API_AWS_IAM_AUTH) {
        this._createAws4SignedRequest(endpoint, this.method, this.payload, headers, (error, signedRequest) => {
          if (error) {
            callback(new _SuperagentResponse.SuperagentResponse(this, null, error));
            return this;
          }

          sendRequestFunc(signedRequest);
        });
      } else {
        sendRequestFunc(this._createBasicHttpRequest(endpoint, this.method, this.payload, headers));
      }

      return this;
    }

    /**
     * @param {Function} callback
     * @returns {Request}
     * @private
     */

  }, {
    key: '_sendLambda',
    value: function _sendLambda() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};


      // @todo: set retries in a smarter way...
      _awsSdk2.default.config.maxRetries = 3;

      let options = {
        region: this._action.region,
        httpOptions: {
          xhrAsync: this.xhrAsync
        }
      };

      let invocationParameters = {
        FunctionName: this._action.source.original,
        Payload: JSON.stringify(this.payload),
        InvocationType: this._async ? 'Event' : 'RequestResponse',
        LogType: this._returnLogs ? 'Tail' : 'None'
      };

      if (!this.withUserCredentials) {
        this._invokeLambda(invocationParameters, callback);
      } else {
        this._loadSecurityCredentials((error, credentials) => {

          // use cognito identity credentials if present
          // if not, fallback to lambda execution role permissions
          if (!error && credentials) {
            options.credentials = credentials;
          }

          this._lambda = new _awsSdk2.default.Lambda(options);

          this._invokeLambda(invocationParameters, callback);
        });
      }

      return this;
    }

    /**
     * @param {Object} invocationParameters
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_invokeLambda',
    value: function _invokeLambda(invocationParameters, callback) {
      let _this = this;

      // @note - don't replace this callback function with an arrow one
      // (we need injected context to access AWS.Response)
      this._lambda.invoke(invocationParameters, function (error, data) {
        let lambdaResponse = new _LambdaResponse.LambdaResponse(_this, data, error);
        lambdaResponse.originalResponse = this; // this is an instance of AWS.Response

        callback(lambdaResponse);
      });
    }

    /**
     * @param {String} url
     * @param {String} method
     * @param {*} payload
     * @param {*} headers
     * @returns {*}
     * @private
     */

  }, {
    key: '_createBasicHttpRequest',
    value: function _createBasicHttpRequest(url) {
      let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.method;
      let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.payload;
      let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      let request = _superagent2.default[Request._httpRealMethod(method)](url, payload);

      for (let headerName in headers) {
        if (!headers.hasOwnProperty(headerName)) {
          continue;
        }

        request.set(headerName, headers[headerName]);
      }

      return request;
    }

    /**
     * @param {Function} callback
     * @returns {Request}
     * @private
     */

  }, {
    key: '_sendExternal',
    value: function _sendExternal() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      this._createBasicHttpRequest(this._action.source.original).send().end((error, response) => {
        callback(new _SuperagentResponse.SuperagentResponse(this, response, error));
      });

      return this;
    }

    /**
     * @param {String} url
     * @param {String} httpMethod
     * @param {Object} payload
     * @param {Object} headers
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_createAws4SignedRequest',
    value: function _createAws4SignedRequest(url, httpMethod, payload, headers, callback) {
      let parsedUrl = (0, _urlParse2.default)(url, _qs2.default);
      let apiHost = parsedUrl.hostname;
      let apiPath = parsedUrl.pathname ? parsedUrl.pathname : '/';

      headers = _util2.default._extend(headers, {
        'Content-Type': 'application/json; charset=UTF-8'
      });

      let opsToSign = {
        service: _deepCore2.default.AWS.Service.API_GATEWAY_EXECUTE,
        region: this.getEndpointHostRegion(apiHost),
        host: apiHost,
        method: httpMethod,
        path: apiPath,
        headers: _util2.default._extend({}, headers) };

      httpMethod = httpMethod.toLowerCase();

      switch (httpMethod) {
        case 'get':
        case 'delete':
          if (parsedUrl.query || payload) {
            //assure parsedUrl.query is a valid object
            if (parsedUrl.query === null || typeof parsedUrl.query !== 'object') {
              parsedUrl.query = {};
            }

            let mergedPayload = _util2.default._extend(parsedUrl.query, payload);

            if (this.action.apiCacheEnabled) {
              mergedPayload[_Action.Action.DEEP_CACHE_QS_PARAM] = Request._md5(_qs2.default.stringify(mergedPayload));
            }

            opsToSign.path += `?${_qs2.default.stringify(mergedPayload)}`;

            // pass payload as query string
            parsedUrl.set('query', mergedPayload, _qs2.default.parse);
            url = parsedUrl.toString(_qs2.default.stringify);
            payload = null; // reset it coz superagent overrides url query string
          }
          break;
        case 'post':
        case 'put':
        case 'patch':
          opsToSign.body = JSON.stringify(payload);
          break;
      }

      this._loadSecurityCredentials((error, credentials) => {
        if (error) {
          callback(error);
          return;
        }

        let signature = _aws2.default.sign(opsToSign, credentials);
        let request = this._createBasicHttpRequest(url, httpMethod, payload, headers);

        // Adding aws4 required headers
        ['X-Amz-Date', 'X-Amz-Security-Token', 'Authorization'].forEach(header => {
          request.set(header, signature.headers[header]);
        });

        if (this.action.resource.isBackend && signature.headers.hasOwnProperty('Content-Length')) {
          request.set('Content-Length', signature.headers['Content-Length']);
        }

        callback(null, request);
      });
    }

    /**
     * @param {String} httpMethod
     * @returns {String}
     * @private
     */

  }, {
    key: '_loadSecurityCredentials',


    /**
     * @param {Function} callback
     * @returns {Request}
     * @private
     */
    value: function _loadSecurityCredentials(callback) {
      let securityService = this._action.resource.security;

      if (!securityService) {
        callback(new _MissingSecurityServiceException.MissingSecurityServiceException(), null);
        return this;
      }

      if (!securityService.token) {
        callback(new _NotAuthenticatedException.NotAuthenticatedException(), null);
        return this;
      }

      securityService.token.loadCredentials((error, credentials) => {
        if (error) {
          callback(new _LoadCredentialsException.LoadCredentialsException(error), null);
          return;
        }

        callback(null, credentials);
      }, this._authScope);

      return this;
    }

    /**
     * @param {String} endpointHost
     * @returns {String}
     */

  }, {
    key: 'getEndpointHostRegion',
    value: function getEndpointHostRegion(endpointHost) {
      let regionParts = endpointHost.match(/\.([^\.]+)\.amazonaws\.com$/i);

      // @todo - expose API region into config provision section
      return regionParts ? regionParts[1] : this._action.region; // use action region as fallback
    }

    /**
     * @return {String}
     */

  }, {
    key: '_buildAuthScope',
    value: function _buildAuthScope() {
      let action = this._action;
      let resource = action.resource;
      let microservice = resource.microservice;

      return `${microservice.identifier}:${resource.name}:${action.name}`;
    }

    /**
     * @returns {Action}
     */

  }, {
    key: 'baseUrl',
    get: function get() {
      if (!this._baseUrl) {
        this._baseUrl = this._action.baseUrl;
      }

      return this._baseUrl;
    }
  }, {
    key: 'withUserCredentials',
    get: function get() {
      if (this.action.scope === 'private') {
        this._withUserCredentials = false;
      }

      return this._withUserCredentials;
    }
  }, {
    key: 'validationSchemaName',
    get: function get() {
      return this._validationSchemaName;
    }

    /**
     * @param {String} validationSchemaName
     */
    ,
    set: function set(validationSchemaName) {
      this._validationSchemaName = validationSchemaName;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'async',
    get: function get() {
      return this._async;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'xhrAsync',
    get: function get() {
      return this._xhrAsync;
    }

    /**
     * @returns {Boolean}
     *
     * @todo: remove this?
     */

  }, {
    key: 'isLambda',
    get: function get() {
      return this._action.type === _Action.Action.LAMBDA;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'customId',
    get: function get() {
      if (!this._customId) {
        this._customId = Request._md5(this._buildCacheKey() + new Date().getTime());
      }

      return this._customId;
    }
  }, {
    key: 'native',
    get: function get() {
      return this._native;
    }
  }, {
    key: 'isCached',
    get: function get() {
      return this._cacheImpl && this._cached;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isPublicCached',
    get: function get() {
      return this._publicCached && this._cacheImpl && this._cacheImpl.shared;
    }
  }, {
    key: 'cacheTtl',
    get: function get() {
      return this._cacheTtl;
    }

    /**
     * @param {Number} ttl
     */
    ,
    set: function set(ttl) {
      this._cacheTtl = ttl;
    }

    /**
     * @returns {Cache}
     */

  }, {
    key: 'cacheImpl',
    get: function get() {
      return this._cacheImpl;
    }

    /**
     * @param {Cache} cache
     */
    ,
    set: function set(cache) {
      this._cacheImpl = cache;

      // @todo: do we really have to force it?
      this.cache(Request.TTL_DEFAULT);
    }
  }, {
    key: 'action',
    get: function get() {
      return this._action;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'payload',
    get: function get() {
      return this._payload;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'method',
    get: function get() {
      return this._method;
    }

    /**
     * @returns {Number}
     * @constructor
     */

  }], [{
    key: '_md5',
    value: function _md5(str) {
      var md5sum = _crypto2.default.createHash('md5');

      md5sum.update(str);

      return md5sum.digest('hex');
    }

    /**
     * @param {Response} response
     * @returns {String}
     * @private
     */

  }, {
    key: '_stringifyResponse',
    value: function _stringifyResponse(response) {
      return JSON.stringify({
        _class: response.constructor.name,
        data: {
          body: response.rawData.body,
          status: response.rawData.status,
          headers: response.rawData.headers
        },
        error: response.rawError,
        headers: response.headers
      });
    }
  }, {
    key: '_chooseResponseImpl',
    value: function _chooseResponseImpl(className) {
      let implMap = {};

      implMap[_Response.Response.name] = _Response.Response;
      implMap[_LambdaResponse.LambdaResponse.name] = _LambdaResponse.LambdaResponse;
      implMap[_SuperagentResponse.SuperagentResponse.name] = _SuperagentResponse.SuperagentResponse;

      return implMap[className];
    }
  }, {
    key: '_httpRealMethod',
    value: function _httpRealMethod(httpMethod) {
      let method = httpMethod.toLowerCase();

      // @see https://visionmedia.github.io/superagent/
      if (method === 'delete') {
        method = 'del';
      }

      return method;
    }
  }, {
    key: 'TTL_DEFAULT',
    get: function get() {
      return 10;
    }

    /**
     * @returns {Number}
     */

  }, {
    key: 'TTL_INVALIDATE',
    get: function get() {
      return -1;
    }

    /**
     * @returns {Number}
     */

  }, {
    key: 'TTL_FOREVER',
    get: function get() {
      return 0;
    }
  }]);

  return Request;
}();

exports.Request = Request;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuperagentResponse = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Response2 = __webpack_require__(72);

var _LambdaResponse = __webpack_require__(71);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let SuperagentResponse = exports.SuperagentResponse = function (_Response) {
  _inherits(SuperagentResponse, _Response);

  /**
   * @param {*} args
   */
  function SuperagentResponse() {
    var _ref;

    _classCallCheck(this, SuperagentResponse);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = SuperagentResponse.__proto__ || Object.getPrototypeOf(SuperagentResponse)).call.apply(_ref, [this].concat(args)));

    if (_this._request.isLambda) {
      _this._parseLambda();
    } else {
      _this._parseExternal();
    }
    return _this;
  }

  /**
   * @returns {Object}
   */


  _createClass(SuperagentResponse, [{
    key: '_parseLambda',


    /**
     * @private
     */
    value: function _parseLambda() {
      this._parseExternal();

      // check if any Lambda response available
      if (this._data) {

        // manage this weird case...
        if (typeof this._data === 'string') {
          try {
            this._data = JSON.parse(this._data);
          } catch (e) {
            console.log('Unable to parse data: ', e);
          }
        }

        let dataObj = this._data;

        // check whether Lambda execution failed
        if (dataObj.errorMessage) {
          let errorObj = null;

          if (dataObj.errorStack && dataObj.errorType) {
            errorObj = dataObj;
          } else {
            errorObj = dataObj.errorMessage;

            if (typeof errorObj === 'string') {
              try {
                errorObj = JSON.parse(errorObj);
              } catch (e) {
                errorObj = {
                  errorMessage: errorObj,
                  errorStack: new Error('Internal error occurred.').stack,
                  errorType: 'InternalError'
                };
              }
            } else {
              errorObj = errorObj || {
                errorMessage: 'Unknown error occurred.',
                errorStack: new Error('Unknown error occurred.').stack,
                errorType: 'UnknownError'
              };
            }
          }

          this._error = _LambdaResponse.LambdaResponse.getPayloadError(errorObj);
          this._data = null;
        } else {
          this._data = dataObj;
        }
      }
    }

    /**
     * @private
     */

  }, {
    key: '_parseExternal',
    value: function _parseExternal() {
      let data = this._rawData;
      let error = this._rawError;

      if (error) {
        this._error = error;
      }

      if (data && data.error) {
        // weird case...
        this._error = data.error;
      }

      this._data = data && data.body ? data.body : null;

      // @todo: treat Response.status lack somehow else?
      if (data && data.status) {
        this._statusCode = parseInt(data.status);
      } else if (this._data && !this._error) {
        this._statusCode = 200;
      } else {
        if (this._error && typeof this._error === 'object' && this._error.crossDomain && typeof this._error.crossDomain.status === 'undefined') {

          this._statusCode = 403;
        } else {
          this._statusCode = this._error && typeof this._error === 'object' ? this._error.status || 500 : 500;
        }
      }
    }
  }, {
    key: 'headers',
    get: function get() {
      if (!this._headers) {
        // rawData in this case is superagent original Response object
        this._headers = this.rawData && this.rawData.headers ? this.rawData.headers : {};
      }

      return this._headers;
    }

    /**
     * @returns {String|null}
     */

  }, {
    key: 'requestId',
    get: function get() {
      if (!this._requestId && this.headers) {
        if (this.headers[_Response2.Response.ORIGINAL_REQUEST_ID_HEADER.toLowerCase()]) {
          this._requestId = this.headers[_Response2.Response.ORIGINAL_REQUEST_ID_HEADER.toLowerCase()];
        } else if (this.headers[_Response2.Response.REQUEST_ID_HEADER.toLowerCase()]) {
          this._requestId = this.headers[_Response2.Response.REQUEST_ID_HEADER.toLowerCase()];
        }
      }

      return this._requestId;
    }
  }]);

  return SuperagentResponse;
}(_Response2.Response);

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 6/17/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Security = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepKernel = __webpack_require__(18);

var _deepKernel2 = _interopRequireDefault(_deepKernel);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _Exception = __webpack_require__(8);

var _Token = __webpack_require__(132);

var _LocalToken = __webpack_require__(356);

var _UserProvider = __webpack_require__(359);

var _IdentityProvider = __webpack_require__(77);

var _LocalIdentityProvider = __webpack_require__(355);

var _RoleResolver = __webpack_require__(358);

var _RoleProvider = __webpack_require__(357);

var _util = __webpack_require__(16);

var _util2 = _interopRequireDefault(_util);

var _crypto = __webpack_require__(19);

var _crypto2 = _interopRequireDefault(_crypto);

var _awsSdk = __webpack_require__(15);

var _awsSdk2 = _interopRequireDefault(_awsSdk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Deep Security implementation
 */
let Security = exports.Security = function (_Kernel$ContainerAwar) {
  _inherits(Security, _Kernel$ContainerAwar);

  /**
   * Defines all class private properties
   *
   * @param {String} identityPoolId
   * @param {Object} identityProviders
   */
  function Security() {
    let identityPoolId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let identityProviders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Security);

    var _this = _possibleConstructorReturn(this, (Security.__proto__ || Object.getPrototypeOf(Security)).call(this));

    _this._identityPoolId = identityPoolId;
    _this._identityProviders = identityProviders;

    _this._token = null;
    _this._userProvider = null;
    _this._userProviderEndpoint = null;
    _this._roleProviderEndpoint = null;
    _this._roleResolver = null;
    _this._roleProvider = null;
    return _this;
  }

  /**
   * @returns {String}
   */


  _createClass(Security, [{
    key: 'boot',


    /**
     * Booting a certain service
     *
     * @param {Kernel} kernel
     * @param {Function} callback
     */
    value: function boot(kernel, callback) {
      let globals = kernel.config.globals;

      this._identityPoolId = kernel.config.identityPoolId;
      this._identityProviders = kernel.config.identityProviders || {};
      this._userProviderEndpoint = globals.userProviderEndpoint || null;
      this._roleProviderEndpoint = globals.roleProviderEndpoint || null;

      callback();
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'cleanup',
    value: function cleanup() {
      this.roleProvider.invalidateCache();

      if (this._token) {
        this._token.user = null;
      }
    }

    /**
     * @returns {null|Token}
     */

  }, {
    key: 'login',


    /**
     * @param {String} providerName
     * @param {Object} identityMetadata
     * @param {Function} callback
     * @returns {Token}
     */
    value: function login(providerName, identityMetadata, callback) {
      let TokenImplementation = _LocalToken.LocalToken;
      let IdentityProviderImplementation = _LocalIdentityProvider.LocalIdentityProvider;

      if (!this._localBackend) {
        TokenImplementation = _Token.Token;
        IdentityProviderImplementation = _IdentityProvider.IdentityProvider;
      }

      let identityProvider = new IdentityProviderImplementation(this._identityProviders, providerName, identityMetadata);
      this._token = TokenImplementation.createFromIdentityProvider(this._identityPoolId, identityProvider);

      this._token.roleResolver = this.roleResolver;
      this._token.userProvider = this.userProvider;
      this._token.cacheService = this._cacheService;
      this._token.logService = this.kernel.get('log');

      let event = {
        eventName: 'login',
        eventId: Security.customEventId(this.identityPoolId),
        payload: { providerName: providerName, identityMetadata: identityMetadata },
        time: new Date().getTime()
      };

      this._token.loadCredentials((error, credentials) => {
        this._logRumEvent(event);

        event = _util2.default._extend({}, event);
        event.payload = { credentials: credentials };

        this._logRumEvent(event);

        callback(error, this._token);
      });

      return this._token;
    }

    /**
     * @param {Function} callback
     * @returns {Token}
     */

  }, {
    key: 'anonymousLogin',
    value: function anonymousLogin(callback) {
      let TokenImplementation = this._localBackend ? _LocalToken.LocalToken : _Token.Token;

      this._token = TokenImplementation.create(this.identityPoolId);

      this._token.userProvider = this.userProvider;
      this._token.roleResolver = this.roleResolver;
      this._token.cacheService = this._cacheService;
      this._token.logService = this.kernel.get('log');

      let event = {
        eventName: 'anonymousLogin',
        eventId: Security.customEventId(this.identityPoolId),
        time: new Date().getTime()
      };

      this._token.loadCredentials((error, credentials) => {
        this._logRumEvent(event);

        event = _util2.default._extend({}, event);
        event.payload = { credentials: credentials };

        this._logRumEvent(event);

        callback(error, this._token);
      });

      return this._token;
    }

    /**
     * @param {Object} lambdaContext
     * @returns {Promise}
     */

  }, {
    key: 'warmupBackendLogin',
    value: function warmupBackendLogin(lambdaContext) {
      if (this.kernel.isFrontend) {
        throw new _Exception.Exception('Call to warmupBackendLogin method is not allowed from frontend context.');
      }

      if (_awsSdk2.default.config.credentials instanceof _awsSdk2.default.EnvironmentCredentials) {
        // store lambda default credentials, in order to be able to switch from an account to another
        _deepCore2.default.AWS.ENV_CREDENTIALS = _awsSdk2.default.config.credentials;
      }

      let TokenImplementation = this._localBackend ? _LocalToken.LocalToken : _Token.Token;

      this._token = TokenImplementation.createFromLambdaContext(this._identityPoolId, lambdaContext);

      this._token.userProvider = this.userProvider;
      this._token.logService = this.kernel.get('log');
      this._token.roleResolver = this.roleResolver;
      this._token.cacheService = this._cacheService;

      return this.kernel.config.forceUserIdentity && this.kernel.accountMicroservice ? this._token.loadLambdaCredentials() : Promise.resolve(_deepCore2.default.AWS.ENV_CREDENTIALS);
    }

    /**
     * Destroys user session
     *
     * @returns {Promise}
     */

  }, {
    key: 'logout',
    value: function logout() {
      this._logRumEvent({
        eventName: 'logout'
      });

      if (this._token) {
        return this._token.destroy().then(() => {
          this._roleProvider.invalidateCache();
          this._token = null;
          return this;
        });
      }

      return Promise.resolve(this);
    }

    /**
     * @param {Object} customData
     * @returns {Boolean}
     * @private
     */

  }, {
    key: '_logRumEvent',
    value: function _logRumEvent(customData) {
      if (this.kernel && !this.kernel.isRumEnabled) {
        return false;
      }

      let logService = this.kernel.get('log');
      let event = _util2.default._extend(customData, {
        service: 'deep-security',
        resourceType: 'Cognito',
        resourceId: this.identityPoolId
      });

      logService.rumLog(event);

      return true;
    }

    /**
     * @param {String} identityPoolId
     * @returns {String}
     */

  }, {
    key: 'identityPoolId',
    get: function get() {
      return this._identityPoolId;
    }

    /**
     * @returns {UserProvider}
     */

  }, {
    key: 'userProvider',
    get: function get() {
      if (!this._userProvider) {
        this._userProvider = new _UserProvider.UserProvider(this._userProviderEndpoint, this._resourceService);
      }

      return this._userProvider;
    }

    /**
     * @returns {RoleResolver}
     */

  }, {
    key: 'roleResolver',
    get: function get() {
      if (!this._roleResolver) {
        this._roleResolver = new _RoleResolver.RoleResolver(this.roleProvider);
      }

      return this._roleResolver;
    }

    /**
     * @returns {RoleProvider}
     */

  }, {
    key: 'roleProvider',
    get: function get() {
      if (!this._roleProvider) {
        this._roleProvider = new _RoleProvider.RoleProvider(this._resourceService, this._roleProviderEndpoint);
      }

      return this._roleProvider;
    }
  }, {
    key: 'token',
    get: function get() {
      return this._token;
    }
  }, {
    key: '_resourceService',


    /**
     * @returns {Object}
     */
    get: function get() {
      return this.container.get('resource');
    }

    /**
     * @returns {Cache|LocalStorageDriver}
     * @private
     */

  }, {
    key: '_cacheService',
    get: function get() {
      return this.container.get('cache');
    }
  }], [{
    key: 'customEventId',
    value: function customEventId(identityPoolId) {
      return Security._md5(identityPoolId + new Date().getTime());
    }

    /**
     * @todo - move all this utils methods into separate class somewhere in deep-core or deep-kernel
     *
     * @param {String} str
     * @returns {String}
     */

  }, {
    key: '_md5',
    value: function _md5(str) {
      var md5sum = _crypto2.default.createHash('md5');

      md5sum.update(str);

      return md5sum.digest('hex');
    }
  }]);

  return Security;
}(_deepKernel2.default.ContainerAware);

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 6/23/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Token = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _awsSdk = __webpack_require__(15);

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _util = __webpack_require__(16);

var _util2 = _interopRequireDefault(_util);

var _IdentityProviderTokenExpiredException = __webpack_require__(76);

var _DescribeIdentityException = __webpack_require__(344);

var _Security = __webpack_require__(131);

var _TokenManager = __webpack_require__(133);

var _CredentialsManager = __webpack_require__(341);

var _IdentityProvider = __webpack_require__(77);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Security token holds details about logged user
 */
let Token = exports.Token = function () {
  _createClass(Token, null, [{
    key: 'MAX_RETRIES',

    /**
     * @returns {number}
     */
    get: function get() {
      return 3;
    }

    /**
     * @returns {number}
     */

  }, {
    key: 'RETRIES_INTERVAL_MS',
    get: function get() {
      return 200;
    }

    /**
     * @param {String} identityPoolId
     */

  }]);

  function Token(identityPoolId) {
    _classCallCheck(this, Token);

    this._identityPoolId = identityPoolId;

    this._lambdaContext = null;
    this._user = null;
    this._identityMetadata = null;
    this._tokenExpiredCallback = null;

    this._identityProvider = null;
    this._userProvider = null;
    this._roleResolver = null;
    this._logService = null;
    this._cacheService = null;

    this._credsPromises = {};

    this._tokenManager = new _TokenManager.TokenManager(identityPoolId);
    this._credentialsManager = new _CredentialsManager.CredentialsManager(this);
    this._sts = new _awsSdk2.default.STS();

    this._setupAwsCognitoConfig();
  }

  /**
   * Setup region for CognitoIdentity and CognitoSync services
   *
   * @private
   */


  _createClass(Token, [{
    key: '_setupAwsCognitoConfig',
    value: function _setupAwsCognitoConfig() {
      // @todo: set retries in a smarter way...
      _awsSdk2.default.config.maxRetries = 3;

      let cognitoRegion = Token.getRegionFromIdentityPoolId(this._identityPoolId);

      _awsSdk2.default.config.update({
        cognitoidentity: { region: cognitoRegion },
        cognitosync: { region: cognitoRegion }
      });
    }

    /**
     * @returns {CredentialsManager}
     */

  }, {
    key: '_tryLoadIdentityProvider',


    /**
     * @returns {Promise<IdentityProvider>}
     * @private
     */
    value: function _tryLoadIdentityProvider() {
      if (this._identityProvider) {
        return Promise.resolve(this._identityProvider);
      }

      return new Promise(resolve => {
        this._cacheService.get(Token.IDENTITY_PROVIDER_CACHE_KEY, (error, rawProvider) => {
          if (error || !rawProvider) {
            return resolve(null);
          }

          let providerSnapshot = JSON.parse(rawProvider);
          let providerInstance = _IdentityProvider.IdentityProvider.createFromSnapshot(providerSnapshot);

          resolve(providerInstance.isTokenValid() ? providerInstance : null);
        });
      });
    }

    /**
     * Example: token.isAllowed('deep-security:role:create').then(boolean => {});
     *
     * @param {String} authScope
     * @returns {Promise}
     */

  }, {
    key: 'isAllowed',
    value: function isAllowed(authScope) {
      return this._roleResolver.resolve(authScope).then(role => {
        return !!role;
      });
    }

    /**
     * @returns {Promise}
     */

  }, {
    key: 'loadLambdaCredentials',
    value: function loadLambdaCredentials() {
      return new Promise((resolve, reject) => {
        this._cacheService.get('credentialsCache', (error, credentialsCache) => {
          if (error && error.name !== 'MissingCacheException') {
            return reject(error);
          }

          credentialsCache = credentialsCache || { default: _deepCore2.default.AWS.ENV_CREDENTIALS };

          this._sts.config.credentials = credentialsCache.default;

          this.getUser((error, user) => {
            if (error) {
              return reject(error);
            }

            if (!user || !user.ActiveAccount || !user.ActiveAccount.BackendRole) {
              return resolve(credentialsCache.default);
            }

            let awsRole = user.ActiveAccount.BackendRole;

            if (credentialsCache.hasOwnProperty(awsRole.Arn) && this._credentialsManager.validCredentials(credentialsCache[awsRole.Arn])) {

              return resolve(credentialsCache[awsRole.Arn]);
            }

            let stsParams = {
              RoleArn: awsRole.Arn,
              RoleSessionName: `backend-role-${awsRole.Name}`
            };

            this._stsAssumeRole(stsParams).then(response => {
              let credentialsObj = response.Credentials;

              let credentials = new _awsSdk2.default.Credentials({
                accessKeyId: credentialsObj.AccessKeyId,
                secretAccessKey: credentialsObj.SecretAccessKey,
                sessionToken: credentialsObj.SessionToken
              });

              credentials.expireTime = credentialsObj.Expiration;

              credentialsCache[awsRole.Arn] = credentials;

              // save backend credentials asynchronously
              this._cacheService.set('credentialsCache', credentialsCache);

              return resolve(credentialsCache[awsRole.Arn]);
            }).catch(reject);
          });
        });
      });
    }

    /**
     * @param {Object} stsParams
     * @param {Number} _retryCount
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_stsAssumeRole',
    value: function _stsAssumeRole(stsParams) {
      let _retryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      return this._sts.assumeRole(stsParams).promise().catch(e => {
        if (_retryCount++ < Token.MAX_RETRIES) {
          console.warn(`Retrying "sts:assumeRole" with params: ${JSON.stringify(stsParams)}`);

          return new Promise((resolve, reject) => {
            setTimeout(() => {
              this._stsAssumeRole(stsParams, _retryCount).then(resolve).catch(reject);
            }, Math.pow(2, _retryCount) * 1000);
          });
        }

        throw e;
      });
    }

    /**
     * @param {Function} callback
     * @param {String|null} authScope
     * @returns {Promise}
     */

  }, {
    key: 'loadCredentials',
    value: function loadCredentials() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};
      let authScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      let scopeKey = authScope ? authScope.toString() : 'default';

      let event = {
        service: 'deep-security',
        resourceType: 'Cognito',
        resourceId: this._identityPoolId,
        eventName: 'loadCredentials',
        eventId: _Security.Security.customEventId(this._identityPoolId),
        time: new Date().getTime()
      };

      let proxyCallback = (error, credentials) => {
        if (error instanceof _IdentityProviderTokenExpiredException.IdentityProviderTokenExpiredException && typeof this._tokenExpiredCallback === 'function') {
          this._tokenExpiredCallback(this.identityProvider);
          this._identityProvider = null;
        }

        // log event only after credentials are loaded to get identityId
        this._logService.rumLog(event);
        event = _util2.default._extend({}, event);
        event.payload = { error: error, credentials: {} }; // avoid logging user credentials
        this._logService.rumLog(event);

        delete this._credsPromises[scopeKey];

        // run callback async, to avoid catching sync errors
        setTimeout(() => {
          callback(error, credentials);
        }, 0);
      };

      if (!this._credsPromises.hasOwnProperty(scopeKey)) {
        this._credsPromises[scopeKey] = this._tryLoadIdentityProvider().then(identityProvider => {
          this._identityProvider = identityProvider;

          return this._loadTokenSnapshot();
        }).then(tokenSnapshot => {
          if (tokenSnapshot) {
            this._fillFromTokenSnapshot(tokenSnapshot);
          }

          return this._credentialsManager.getCredentials();
        }).then(defaultCredentials => {
          if (!authScope) {
            return defaultCredentials;
          }

          // roleResolver needs system credentials to be loaded
          return this._roleResolver.resolve(authScope).then(role => {
            return this._credentialsManager.getCredentials(role);
          });
        }).then(credentials => {
          if (!this.lambdaContext) {
            return this._saveToken().then(() => credentials).catch(() => Promise.resolve(credentials));
          }

          return credentials;
        });
      }

      return this._credsPromises[scopeKey].then(credentials => proxyCallback(null, credentials)).catch(error => proxyCallback(error, null));
    }

    /**
     * @returns {*}
     * @private
     */

  }, {
    key: '_loadTokenSnapshot',
    value: function _loadTokenSnapshot() {
      return this._credentialsManager.getCredentials(null, false).then(credentials => {
        if (this._credentialsManager.validCredentials(credentials)) {
          return null; // do not load token snapshot if credentials are already valid
        } else if (this.lambdaContext) {
          return this._tokenManager.loadBackendToken(this.identityId);
        } else {
          _awsSdk2.default.config.credentials = credentials; // CognitoSyncClient requires credentials to be set
          return this._tokenManager.loadFrontendToken();
        }
      });
    }

    /**
     * @param {Object} tokenSnapshot
     * @returns {Token}
     * @private
     */

  }, {
    key: '_fillFromTokenSnapshot',
    value: function _fillFromTokenSnapshot(tokenSnapshot) {
      let providerSnapshot = tokenSnapshot.identityProvider;

      if (providerSnapshot) {
        if (!this._identityProvider && this._lambdaContext) {
          this._identityProvider = _IdentityProvider.IdentityProvider.createFromSnapshot(providerSnapshot);
        }
      }

      if (this._credentialsManager.validCredentials(tokenSnapshot.credentials)) {
        this._credentialsManager.systemCredentials = tokenSnapshot.credentials;
        this._credentialsManager.rolesCredentials = tokenSnapshot.rolesCredentials;
      }

      return this;
    }

    /**
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_saveToken',
    value: function _saveToken() {
      if (this.identityProvider) {
        this._cacheService.set(Token.IDENTITY_PROVIDER_CACHE_KEY, JSON.stringify(this._identityProvider.toJSON()), parseInt((this.identityProvider.tokenExpirationTime.getTime() - Date.now()) / 1000));
      }

      return this._tokenManager.saveToken(this);
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'getUser',


    /**
     * @param {Function} callback
     */
    value: function getUser(callback) {
      // @todo: backward compatibility hook, remove on next major release
      let argsHandler = (error, user) => {
        if (callback.length === 1) {
          if (error) {
            throw error;
          }

          return callback(user);
        }

        callback(error, user);
      };

      if (this.lambdaContext) {
        this._describeIdentity(this.identityId).then(() => {
          this._loadUser(argsHandler);
        }).catch(argsHandler);
      } else {
        this._loadUser(argsHandler);
      }
    }

    /**
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_loadUser',
    value: function _loadUser(callback) {
      if (this.isAnonymous) {
        callback(null);
        return;
      }

      if (!this._user) {
        this._userProvider.loadUserByIdentityId(this.identityId, (error, user) => {
          if (error) {
            callback(error, null);
            return;
          }

          this._user = user;

          callback(null, this._user);
        });

        return;
      }

      callback(null, this._user);
    }

    /**
     * @param {String} identityId
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_describeIdentity',
    value: function _describeIdentity(identityId) {
      if (this._identityMetadata) {
        return Promise.resolve(this._identityMetadata);
      }

      let cognitoIdentity = new _awsSdk2.default.CognitoIdentity({
        credentials: _deepCore2.default.AWS.ENV_CREDENTIALS
      });

      return cognitoIdentity.describeIdentity({ IdentityId: identityId }).promise().then(data => {
        this._identityMetadata = data;

        return data;
      }).catch(error => {
        throw new _DescribeIdentityException.DescribeIdentityException(identityId, error);
      });
    }

    /**
     * @returns {Array}
     * @private
     */

  }, {
    key: 'registerTokenExpiredCallback',


    /**
     * @param {Function} callback
     * @returns {Token}
     */
    value: function registerTokenExpiredCallback(callback) {
      if (typeof callback !== 'function') {
        throw new _deepCore.Exception.InvalidArgumentException(callback, 'function');
      }

      this._tokenExpiredCallback = callback;

      return this;
    }

    /**
     * Removes identity credentials related cached stuff
     * @returns {Promise}
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      return Promise.all(Object.keys(this._credsPromises).map(k => this._credsPromises[k])).catch(e => Promise.resolve(null)).then(() => {
        // clear cache, even on credentials load error
        this._credentialsManager.clearCache();
        this._tokenManager.deleteToken();
        this._cacheService.invalidate(Token.IDENTITY_PROVIDER_CACHE_KEY);
        this._credsPromises = {};
        this._identityProvider = null;
      });
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        credentials: this._credentialsManager.systemCredentials,
        rolesCredentials: this._credentialsManager.rolesCredentials,
        identityId: this.identityId,
        identityProvider: this._identityProvider.toJSON()
      };
    }

    /**
     * @param {String} identityPoolId
     * @returns {String}
     */

  }, {
    key: 'credentialsManager',
    get: function get() {
      return this._credentialsManager;
    }

    /**
     * @returns {IdentityProvider}
     */

  }, {
    key: 'identityProvider',
    get: function get() {
      return this._identityProvider;
    }

    /**
     * @returns {String}
     */
    ,


    /**
     * @param {IdentityProvider} provider
     */
    set: function set(provider) {
      this._identityProvider = provider;
    }

    /**
     * @param {Cache|LocalStorageDriver} cacheService
     */

  }, {
    key: 'identityPoolId',
    get: function get() {
      return this._identityPoolId;
    }
  }, {
    key: 'cacheService',
    set: function set(cacheService) {
      this._cacheService = cacheService;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'lambdaContext',
    get: function get() {
      return this._lambdaContext;
    }

    /**
     * @param {Object} lambdaContext
     */
    ,
    set: function set(lambdaContext) {
      this._lambdaContext = lambdaContext;
    }

    /**
     * @param {Object} logService
     */

  }, {
    key: 'logService',
    set: function set(logService) {
      this._logService = logService;
    }

    /**
     * @param {RoleResolver} roleResolver
     */

  }, {
    key: 'roleResolver',
    set: function set(roleResolver) {
      this._roleResolver = roleResolver;
    }

    /**
     * @param {Object} user
     */

  }, {
    key: 'user',
    set: function set(user) {
      this._user = user;
    }

    /**
     * @returns {Object}
     */
    ,
    get: function get() {
      return this._user;
    }
  }, {
    key: 'identityId',
    get: function get() {
      let identityId = null;
      let credentials = this.credentialsManager.systemCredentials;

      if (this.lambdaContext) {
        identityId = this.lambdaContext.identity.cognitoIdentityId;
      } else if (credentials) {
        if (credentials.identityId) {
          identityId = credentials.identityId;
        } else if (credentials.params && credentials.params.IdentityId) {
          // load IdentityId from localStorage cache
          identityId = credentials.params.IdentityId;
        } else if (this._tokenManager.identityId) {
          identityId = this._tokenManager.identityId;
        }
      }

      return identityId;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isAnonymous',
    get: function get() {
      if (this.lambdaContext) {
        return this._identityLogins.length <= 0;
      } else {
        return !this.identityProvider;
      }
    }

    /**
     * @param {UserProvider} userProvider
     */

  }, {
    key: 'userProvider',
    set: function set(userProvider) {
      this._userProvider = userProvider;
    }
  }, {
    key: '_identityLogins',
    get: function get() {
      return this._identityMetadata && this._identityMetadata.hasOwnProperty('Logins') ? this._identityMetadata.Logins : [];
    }
  }], [{
    key: 'getRegionFromIdentityPoolId',
    value: function getRegionFromIdentityPoolId(identityPoolId) {
      return identityPoolId.split(':')[0];
    }

    /**
     * @param {String} identityPoolId
     * @returns {Token}
     */

  }, {
    key: 'create',
    value: function create(identityPoolId) {
      return new this(identityPoolId);
    }

    /**
     * @param {String} identityPoolId
     * @param {IdentityProvider} identityProvider
     * @returns {Token}
     */

  }, {
    key: 'createFromIdentityProvider',
    value: function createFromIdentityProvider(identityPoolId, identityProvider) {
      let token = new this(identityPoolId);
      token.identityProvider = identityProvider;

      return token;
    }

    /**
     * @param {String} identityPoolId
     * @param {Object} lambdaContext
     * @returns {Token}
     */

  }, {
    key: 'createFromLambdaContext',
    value: function createFromLambdaContext(identityPoolId, lambdaContext) {
      let token = new this(identityPoolId);
      token.lambdaContext = lambdaContext;

      return token;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'IDENTITY_PROVIDER_CACHE_KEY',
    get: function get() {
      return '__deep_framework|security|token|identity-provider';
    }
  }]);

  return Token;
}();

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/6/15.
 */

/* eslint-disable no-unused-vars */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TokenManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _awsSdk = __webpack_require__(15);

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _amazonCognitoJs = __webpack_require__(230);

var _amazonCognitoJs2 = _interopRequireDefault(_amazonCognitoJs);

var _CreateCognitoDatasetException = __webpack_require__(343);

var _PutCognitoRecordException = __webpack_require__(351);

var _SynchronizeCognitoDatasetException = __webpack_require__(352);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let TokenManager = exports.TokenManager = function () {
  _createClass(TokenManager, null, [{
    key: 'DATASET_NAME',

    /**
     * @returns {String}
     */
    get: function get() {
      return 'deep_session';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'RECORD_NAME',
    get: function get() {
      return 'session_creds';
    }

    /**
     * @param {String} identityPoolId
     * @param {Object|null} cognitoSyncClient
     */

  }]);

  function TokenManager(identityPoolId) {
    let cognitoSyncClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, TokenManager);

    this._identityPoolId = identityPoolId;
    this._cognitoSyncClient = cognitoSyncClient;
    this._lastSyncedEntry = null;
    this._syncInProgress = false;
  }

  /**
   * @returns {Object}
   */


  _createClass(TokenManager, [{
    key: 'saveToken',


    /**
     * @param {Token} token
     * @returns {Promise}
     */
    value: function saveToken(token) {
      return new Promise((resolve, reject) => {
        this._createOrGetDataset((error, dataset) => {
          if (error) {
            return reject(error);
          }

          let encodedToken = this._encodeToken(token);

          if (this._lastSyncedEntry === encodedToken || this._syncInProgress) {
            return resolve();
          }

          this._syncInProgress = true;
          this._lastSyncedEntry = encodedToken;

          dataset.put(TokenManager.RECORD_NAME, this._encodeToken(token), (error /*, record*/) => {
            if (error) {
              return reject(new _PutCognitoRecordException.PutCognitoRecordException(TokenManager.DATASET_NAME, TokenManager.RECORD_NAME, error));
            }

            this._synchronizeDataset(dataset, (error, savedRecords) => {
              this._syncInProgress = false;

              if (error) {
                return reject(new _SynchronizeCognitoDatasetException.SynchronizeCognitoDatasetException(dataset, error));
              }

              resolve(savedRecords);
            });
          });
        });
      });
    }

    /**
     * @param {String} identityId
     * @returns {Promise}
     */

  }, {
    key: 'loadBackendToken',
    value: function loadBackendToken(identityId) {
      let cognitosync = new _awsSdk2.default.CognitoSync({
        credentials: _deepCore2.default.AWS.ENV_CREDENTIALS
      });

      let params = {
        DatasetName: TokenManager.DATASET_NAME,
        IdentityId: identityId,
        IdentityPoolId: this._identityPoolId
      };

      return cognitosync.listRecords(params).promise().then(data => {
        let token = null;

        data.Records.forEach(record => {
          if (record.Key === TokenManager.RECORD_NAME) {
            token = this._decodeToken(record.Value);
            return token;
          }
        });

        return token;
      });
    }

    /**
     * @returns {Promise}
     */

  }, {
    key: 'loadFrontendToken',
    value: function loadFrontendToken() {
      return new Promise((resolve, reject) => {
        this._createOrGetDataset((error, dataset) => {
          if (error) {
            return reject(error);
          }

          dataset.get(TokenManager.RECORD_NAME, (error, rawToken) => {
            if (error) {
              return reject(error);
            }

            resolve(this._decodeToken(rawToken));
          });
        });
      });
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'deleteToken',


    /**
     * Deletes cached Token from local storage
     *
     * @returns {TokenManager}
     */
    value: function deleteToken() {
      this.cognitoSyncClient.wipeData();

      return this;
    }

    /**
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_createOrGetDataset',
    value: function _createOrGetDataset(callback) {
      this.cognitoSyncClient.openOrCreateDataset(TokenManager.DATASET_NAME, (error, dataset) => {
        if (error) {
          callback(new _CreateCognitoDatasetException.CreateCognitoDatasetException(TokenManager.DATASET_NAME, error), null);
          return;
        }

        callback(null, dataset);
      });
    }

    /**
     * @param {Object} dataset
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_synchronizeDataset',
    value: function _synchronizeDataset(dataset, callback) {
      dataset.synchronize({
        onSuccess: (dataset, newRecords) => {
          callback(null, newRecords);
        },
        onFailure: error => {
          callback(error, null);
        },
        onConflict: (dataset, conflicts, cb) => {
          let resolved = [];

          for (let i = 0; i < conflicts.length; i++) {
            // take local version. @todo: implement custom merge logic to take latest changes
            resolved.push(conflicts[i].resolveWithLocalRecord());
          }

          dataset.resolve(resolved, () => {
            return cb(true);
          });
        },
        onDatasetDeleted: (dataset, datasetName, cb) => {
          return cb(true);
        },
        onDatasetMerged: (dataset, datasetNames, cb) => {
          return cb(true);
        }
      });
    }

    /**
     * @todo: implement an encoding method
     *
     * @param {Token} token
     * @returns {String}
     */

  }, {
    key: '_encodeToken',
    value: function _encodeToken(token) {
      return JSON.stringify(token.toJSON());
    }

    /**
     * @todo: implement a decoding method
     *
     * @param {String} rawToken
     * @returns {Object}
     */

  }, {
    key: '_decodeToken',
    value: function _decodeToken(rawToken) {
      if (rawToken && typeof rawToken === 'string') {
        try {
          let tokenObj = JSON.parse(rawToken);

          tokenObj.credentials = this._decodeCredentials(tokenObj.credentials);
          tokenObj.credentials.params = {
            IdentityId: tokenObj.identityId,
            IdentityPoolId: this._identityPoolId
          };

          for (let key in tokenObj.rolesCredentials) {
            if (tokenObj.rolesCredentials.hasOwnProperty(key)) {
              tokenObj.rolesCredentials[key] = this._decodeCredentials(tokenObj.rolesCredentials[key]);
            }
          }

          return tokenObj;
        } catch (e) {
          return null;
        }
      }

      return null;
    }

    /**
     * @todo: implement a decoding method
     *
     * @param {Object} credentials
     * @returns {Object}
     */

  }, {
    key: '_decodeCredentials',
    value: function _decodeCredentials(credentials) {
      let expireTime = credentials.expireTime;

      credentials = new _awsSdk2.default.Credentials(credentials);

      // restore expireTime because AWS.Credentials resets it to null
      credentials.expireTime = expireTime;

      // set secretAccessKey property enumerable:true to allow storing it into Cognito datastore
      credentials = this._makeKeyEnumerable(credentials, 'secretAccessKey');

      return credentials;
    }

    /**
     * @param {Object} obj
     * @param {String} key
     * @returns {Object}
     * @private
     */

  }, {
    key: '_makeKeyEnumerable',
    value: function _makeKeyEnumerable(obj, key) {
      obj = Object.defineProperty(obj, key, {
        enumerable: true,
        writable: true,
        configurable: true
      });

      return obj;
    }

    /**
     * @returns {Boolean}
     * @private
     */

  }, {
    key: '_isLocalStorageAvailable',
    value: function _isLocalStorageAvailable() {
      try {
        if (window && window.localStorage) {
          window.localStorage.setItem('key', 'value');
          window.localStorage.removeItem('key');

          return true;
        }

        return false;
      } catch (e) {
        return false;
      }
    }
  }, {
    key: 'cognitoSyncClient',
    get: function get() {
      if (!this._cognitoSyncClient) {
        let options = {};

        if (!this._isLocalStorageAvailable()) {
          options.DataStore = _awsSdk2.default.CognitoSyncManager.StoreInMemory;
        }

        this._cognitoSyncClient = new _awsSdk2.default.CognitoSyncManager(options);
      }

      return this._cognitoSyncClient;
    }
  }, {
    key: 'identityId',
    get: function get() {
      return this.cognitoSyncClient.getIdentityId();
    }
  }]);

  return TokenManager;
}();

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 7/15/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VoterInterface = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let VoterInterface = exports.VoterInterface = function (_Core$OOP$Interface) {
  _inherits(VoterInterface, _Core$OOP$Interface);

  function VoterInterface() {
    _classCallCheck(this, VoterInterface);

    return _possibleConstructorReturn(this, (VoterInterface.__proto__ || Object.getPrototypeOf(VoterInterface)).call(this, ['vote']));
  }

  /**
   * @returns {String}
   */


  _createClass(VoterInterface, null, [{
    key: 'ALLOW',
    get: function get() {
      return 'Allow';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'DENY',
    get: function get() {
      return 'Deny';
    }
  }]);

  return VoterInterface;
}(_deepCore2.default.OOP.Interface);

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Any = __webpack_require__(10);
var Errors = __webpack_require__(12);
var Hoek = __webpack_require__(5);


// Declare internals

var internals = {};


internals.Boolean = function () {

    Any.call(this);
    this._type = 'boolean';
};

Hoek.inherits(internals.Boolean, Any);


internals.Boolean.prototype._base = function (value, state, options) {

    var result = {
        value: value
    };

    if (typeof value === 'string' &&
        options.convert) {

        var lower = value.toLowerCase();
        result.value = (lower === 'true' || lower === 'yes' || lower === 'on' ? true
                                                                              : (lower === 'false' || lower === 'no' || lower === 'off' ? false : value));
    }

    result.errors = (typeof result.value === 'boolean') ? null : Errors.create('boolean.base', null, state, options);
    return result;
};


module.exports = new internals.Boolean();

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Any = __webpack_require__(10);
var Errors = __webpack_require__(12);
var Hoek = __webpack_require__(5);


// Declare internals

var internals = {};


internals.Number = function () {

    Any.call(this);
    this._type = 'number';
    this._invalids.add(Infinity);
    this._invalids.add(-Infinity);
};

Hoek.inherits(internals.Number, Any);


internals.Number.prototype._base = function (value, state, options) {

    var result = {
        errors: null,
        value: value
    };

    if (typeof value === 'string' &&
        options.convert) {

        var number = parseFloat(value);
        result.value = (isNaN(number) || !isFinite(value)) ? NaN : number;
    }

    var isNumber = typeof result.value === 'number' && !isNaN(result.value);

    if (options.convert && 'precision' in this._flags && isNumber) {
        // This is conceptually equivalent to using toFixed but it should be much faster
        var precision = Math.pow(10, this._flags.precision);
        result.value = Math.round(result.value * precision) / precision;
    }

    result.errors = isNumber ? null : Errors.create('number.base', null, state, options);
    return result;
};


internals.Number.prototype.min = function (limit) {

    Hoek.assert(Hoek.isInteger(limit), 'limit must be an integer');

    return this._test('min', limit, function (value, state, options) {

        if (value >= limit) {
            return null;
        }

        return Errors.create('number.min', { limit: limit }, state, options);
    });
};


internals.Number.prototype.max = function (limit) {

    Hoek.assert(Hoek.isInteger(limit), 'limit must be an integer');

    return this._test('max', limit, function (value, state, options) {

        if (value <= limit) {
            return null;
        }

        return Errors.create('number.max', { limit: limit }, state, options);
    });
};


internals.Number.prototype.greater = function (limit) {

    Hoek.assert(Hoek.isInteger(limit), 'limit must be an integer');

    return this._test('greater', limit, function (value, state, options) {

        if (value > limit) {
            return null;
        }

        return Errors.create('number.greater', { limit: limit }, state, options);
    });
};


internals.Number.prototype.less = function (limit) {

    Hoek.assert(Hoek.isInteger(limit), 'limit must be an integer');

    return this._test('less', limit, function (value, state, options) {

        if (value < limit) {
            return null;
        }

        return Errors.create('number.less', { limit: limit }, state, options);
    });
};


internals.Number.prototype.integer = function () {

    return this._test('integer', undefined, function (value, state, options) {

        return Hoek.isInteger(value) ? null : Errors.create('number.integer', null, state, options);
    });
};


internals.Number.prototype.negative = function () {

    return this._test('negative', undefined, function (value, state, options) {

        if (value < 0) {
            return null;
        }

        return Errors.create('number.negative', null, state, options);
    });
};


internals.Number.prototype.positive = function () {

    return this._test('positive', undefined, function (value, state, options) {

        if (value > 0) {
            return null;
        }

        return Errors.create('number.positive', null, state, options);
    });
};


internals.precisionRx = /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/;


internals.Number.prototype.precision = function (limit) {

    Hoek.assert(Hoek.isInteger(limit), 'limit must be an integer');
    Hoek.assert(!('precision' in this._flags), 'precision already set');

    var obj = this._test('precision', limit, function (value, state, options){

        var places = value.toString().match(internals.precisionRx);
        var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);
        if (decimals <= limit) {
            return null;
        }

        return Errors.create('number.precision', {limit: limit}, state, options);
    });

    obj._flags.precision = limit;
    return obj;
};


module.exports = new internals.Number();


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Hoek = __webpack_require__(5);
var Topo = __webpack_require__(513);
var Any = __webpack_require__(10);
var Cast = __webpack_require__(38);
var Errors = __webpack_require__(12);


// Declare internals

var internals = {};


internals.Object = function () {

    Any.call(this);
    this._type = 'object';
    this._inner.children = null;
    this._inner.renames = [];
    this._inner.dependencies = [];
    this._inner.patterns = [];
};

Hoek.inherits(internals.Object, Any);


internals.Object.prototype._base = function (value, state, options) {

    var target = value;
    var errors = [];
    var finish = function () {

        return {
            value: target,
            errors: errors.length ? errors : null
        };
    };

    if (typeof value === 'string' &&
        options.convert) {

        try {
            value = JSON.parse(value);
        }
        catch (err) { }
    }

    if (!value ||
        typeof value !== 'object' ||
        Array.isArray(value)) {

        errors.push(Errors.create('object.base', null, state, options));
        return finish();
    }

    // Skip if there are no other rules to test

    if (!this._inner.renames.length &&
        !this._inner.dependencies.length &&
        !this._inner.children &&                    // null allows any keys
        !this._inner.patterns.length) {

        target = value;
        return finish();
    }

    // Ensure target is a local copy (parsed) or shallow copy

    if (target === value) {
        target = Object.create(Object.getPrototypeOf(value));
        var valueKeys = Object.keys(value);
        for (var t = 0, tl = valueKeys.length; t < tl; ++t) {
            target[valueKeys[t]] = value[valueKeys[t]];
        }
    }
    else {
        target = value;
    }

    // Rename keys

    var renamed = {};
    for (var r = 0, rl = this._inner.renames.length; r < rl; ++r) {
        var item = this._inner.renames[r];

        if (target[item.from] === undefined) {
            continue;
        }

        if (!item.options.multiple &&
            renamed[item.to]) {

            errors.push(Errors.create('object.rename.multiple', { from: item.from, to: item.to }, state, options));
            if (options.abortEarly) {
                return finish();
            }
        }

        if (target.hasOwnProperty(item.to) &&
            !item.options.override &&
            !renamed[item.to]) {

            errors.push(Errors.create('object.rename.override', { from: item.from, to: item.to }, state, options));
            if (options.abortEarly) {
                return finish();
            }
        }

        target[item.to] = target[item.from];
        renamed[item.to] = true;

        if (!item.options.alias) {
            delete target[item.from];
        }
    }

    // Validate dependencies

    for (var d = 0, dl = this._inner.dependencies.length; d < dl; ++d) {
        var dep = this._inner.dependencies[d];
        var err = internals[dep.type](dep.key !== null && value[dep.key], dep.peers, target, { key: dep.key, path: (state.path ? state.path + '.' : '') + dep.key }, options);
        if (err) {
            errors.push(err);
            if (options.abortEarly) {
                return finish();
            }
        }
    }

    // Validate schema

    if (!this._inner.children &&            // null allows any keys
        !this._inner.patterns.length) {

        return finish();
    }

    var unprocessed = Hoek.mapToObject(Object.keys(target));
    var key;

    if (this._inner.children) {
        for (var i = 0, il = this._inner.children.length; i < il; ++i) {
            var child = this._inner.children[i];
            var key = child.key;
            var item = target[key];

            delete unprocessed[key];

            var localState = { key: key, path: (state.path ? state.path + '.' : '') + key, parent: target, reference: state.reference };
            var result = child.schema._validate(item, localState, options);
            if (result.errors) {
                errors = errors.concat(result.errors);
                if (options.abortEarly) {
                    return finish();
                }
            }

            if (result.value !== undefined) {
                target[key] = result.value;
            }
        }
    }

    // Unknown keys

    var unprocessedKeys = Object.keys(unprocessed);
    if (unprocessedKeys.length &&
        this._inner.patterns.length) {

        for (i = 0, il = unprocessedKeys.length; i < il; ++i) {
            var key = unprocessedKeys[i];

            for (var p = 0, pl = this._inner.patterns.length; p < pl; ++p) {
                var pattern = this._inner.patterns[p];

                if (pattern.regex.test(key)) {
                    delete unprocessed[key];

                    var item = target[key];
                    var localState = { key: key, path: (state.path ? state.path + '.' : '') + key, parent: target, reference: state.reference };
                    var result = pattern.rule._validate(item, localState, options);
                    if (result.errors) {
                        errors = errors.concat(result.errors);
                        if (options.abortEarly) {
                            return finish();
                        }
                    }

                    if (result.value !== undefined) {
                        target[key] = result.value;
                    }
                }
            }
        }

        unprocessedKeys = Object.keys(unprocessed);
    }

    if (unprocessedKeys.length) {
        if (options.stripUnknown ||
            options.skipFunctions) {

            var hasFunctions = false;
            for (var k = 0, kl = unprocessedKeys.length; k < kl; ++k) {
                key = unprocessedKeys[k];

                if (options.stripUnknown) {
                    delete target[key];
                }
                else if (typeof target[key] === 'function') {
                    delete unprocessed[key];
                    hasFunctions = true;
                }
            }

            if (options.stripUnknown) {
                return finish();
            }

            if (hasFunctions) {
                unprocessedKeys = Object.keys(unprocessed);
            }
        }

        if (unprocessedKeys.length &&
            (this._flags.allowUnknown !== undefined ? !this._flags.allowUnknown : !options.allowUnknown)) {

            for (var e = 0, el = unprocessedKeys.length; e < el; ++e) {
                errors.push(Errors.create('object.allowUnknown', null, { key: unprocessedKeys[e], path: state.path }, options));
            }
        }
    }

    return finish();
};


internals.Object.prototype.keys = function (schema) {

    Hoek.assert(schema === null || schema === undefined || typeof schema === 'object', 'Object schema must be a valid object');
    Hoek.assert(!schema || !schema.isJoi, 'Object schema cannot be a joi schema');

    var obj = this.clone();

    if (!schema) {
        obj._inner.children = null;
        return obj;
    }

    var children = Object.keys(schema);

    if (!children.length) {
        obj._inner.children = [];
        return obj;
    }

    var topo = new Topo();
    if (obj._inner.children) {
        for (var i = 0, il = obj._inner.children.length; i < il; ++i) {
            var child = obj._inner.children[i];
            topo.add(child, { after: child._refs, group: child.key });
        }
    }

    for (var c = 0, cl = children.length; c < cl; ++c) {
        var key = children[c];
        var child = schema[key];
        var cast = Cast.schema(child);
        topo.add({ key: key, schema: cast }, { after: cast._refs, group: key });
    }

    obj._inner.children = topo.nodes;

    return obj;
};


internals.Object.prototype.unknown = function (allow) {

    var obj = this.clone();
    obj._flags.allowUnknown = (allow !== false);
    return obj;
};


internals.Object.prototype.length = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('length', limit, function (value, state, options) {

        if (Object.keys(value).length === limit) {
            return null;
        }

        return Errors.create('object.length', { limit: limit }, state, options);
    });
};


internals.Object.prototype.min = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('min', limit, function (value, state, options) {

        if (Object.keys(value).length >= limit) {
            return null;
        }

        return Errors.create('object.min', { limit: limit }, state, options);
    });
};


internals.Object.prototype.max = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('max', limit, function (value, state, options) {

        if (Object.keys(value).length <= limit) {
            return null;
        }

        return Errors.create('object.max', { limit: limit }, state, options);
    });
};


internals.Object.prototype.pattern = function (pattern, schema) {

    Hoek.assert(pattern instanceof RegExp, 'Invalid regular expression');
    Hoek.assert(schema !== undefined, 'Invalid rule');

    pattern = new RegExp(pattern.source, pattern.ignoreCase ? 'i' : undefined);         // Future version should break this and forbid unsupported regex flags

    var obj = this.clone();
    obj._inner.patterns.push({ regex: pattern, rule: Cast.schema(schema) });
    return obj;
};


internals.Object.prototype.with = function (key, peers) {

    return this._dependency('with', key, peers);
};


internals.Object.prototype.without = function (key, peers) {

    return this._dependency('without', key, peers);
};


internals.Object.prototype.xor = function () {

    var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this._dependency('xor', null, peers);
};


internals.Object.prototype.or = function () {

    var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this._dependency('or', null, peers);
};


internals.Object.prototype.and = function () {

    var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this._dependency('and', null, peers);
};


internals.Object.prototype.nand = function () {

    var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this._dependency('nand', null, peers);
};


internals.Object.prototype.requiredKeys = function (children) {

    children = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this.applyFunctionToChildren(children, 'required');
};


internals.Object.prototype.optionalKeys = function (children) {

    children = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this.applyFunctionToChildren(children, 'optional');
};


internals.renameDefaults = {
    alias: false,                   // Keep old value in place
    multiple: false,                // Allow renaming multiple keys into the same target
    override: false                 // Overrides an existing key
};


internals.Object.prototype.rename = function (from, to, options) {

    Hoek.assert(typeof from === 'string', 'Rename missing the from argument');
    Hoek.assert(typeof to === 'string', 'Rename missing the to argument');
    Hoek.assert(to !== from, 'Cannot rename key to same name:', from);

    for (var i = 0, il = this._inner.renames.length; i < il; ++i) {
        Hoek.assert(this._inner.renames[i].from !== from, 'Cannot rename the same key multiple times');
    }

    var obj = this.clone();

    obj._inner.renames.push({
        from: from,
        to: to,
        options: Hoek.applyToDefaults(internals.renameDefaults, options || {})
    });

    return obj;
};


internals.groupChildren = function (children) {

    children.sort();

    var grouped = {};

    for (var c = 0, lc = children.length; c < lc; c++) {
        var child = children[c];
        Hoek.assert(typeof child === 'string', 'children must be strings');
        var group = child.split('.')[0];
        var childGroup = grouped[group] = (grouped[group] || []);
        childGroup.push(child.substring(group.length + 1));
    }

    return grouped;
};


internals.Object.prototype.applyFunctionToChildren = function (children, fn, args, root) {

    children = [].concat(children);
    Hoek.assert(children.length > 0, 'expected at least one children');

    var groupedChildren = internals.groupChildren(children);
    var obj;

    if ('' in groupedChildren) {
        obj = this[fn].apply(this, args);
        delete groupedChildren[''];
    }
    else {
        obj = this.clone();
    }

    if (obj._inner.children) {
        root = root ? (root + '.') : '';

        for (var i = 0, il = obj._inner.children.length; i < il; ++i) {
            var child = obj._inner.children[i];
            var group = groupedChildren[child.key];

            if (group) {
                obj._inner.children[i] = {
                    key: child.key,
                    _refs: child._refs,
                    schema: child.schema.applyFunctionToChildren(group, fn, args, root + child.key)
                };

                delete groupedChildren[child.key];
            }
        }
    }

    var remaining = Object.keys(groupedChildren);
    Hoek.assert(remaining.length === 0, 'unknown key(s)', remaining.join(', '));

    return obj;
};


internals.Object.prototype._dependency = function (type, key, peers) {

    peers = [].concat(peers);
    for (var i = 0, li = peers.length; i < li; i++) {
        Hoek.assert(typeof peers[i] === 'string', type, 'peers must be a string or array of strings');
    }

    var obj = this.clone();
    obj._inner.dependencies.push({ type: type, key: key, peers: peers });
    return obj;
};


internals.with = function (value, peers, parent, state, options) {

    if (value === undefined) {
        return null;
    }

    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (!parent.hasOwnProperty(peer) ||
            parent[peer] === undefined) {

            return Errors.create('object.with', { peer: peer }, state, options);
        }
    }

    return null;
};


internals.without = function (value, peers, parent, state, options) {

    if (value === undefined) {
        return null;
    }

    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (parent.hasOwnProperty(peer) &&
            parent[peer] !== undefined) {

            return Errors.create('object.without', { peer: peer }, state, options);
        }
    }

    return null;
};


internals.xor = function (value, peers, parent, state, options) {

    var present = [];
    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (parent.hasOwnProperty(peer) &&
            parent[peer] !== undefined) {

            present.push(peer);
        }
    }

    if (present.length === 1) {
        return null;
    }

    if (present.length === 0) {
        return Errors.create('object.missing', { peers: peers }, state, options);
    }

    return Errors.create('object.xor', { peers: peers }, state, options);
};


internals.or = function (value, peers, parent, state, options) {

    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (parent.hasOwnProperty(peer) &&
            parent[peer] !== undefined) {
            return null;
        }
    }

    return Errors.create('object.missing', { peers: peers }, state, options);
};


internals.and = function (value, peers, parent, state, options) {

    var missing = [];
    var present = [];
    var count = peers.length;
    for (var i = 0; i < count; ++i) {
        var peer = peers[i];
        if (!parent.hasOwnProperty(peer) ||
            parent[peer] === undefined) {

            missing.push(peer);
        }
        else {
            present.push(peer);
        }
    }

    var aon = (missing.length === count || present.length === count);
    return !aon ? Errors.create('object.and', { present: present, missing: missing }, state, options) : null;
};


internals.nand = function (value, peers, parent, state, options) {

    var present = [];
    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (parent.hasOwnProperty(peer) &&
            parent[peer] !== undefined) {

            present.push(peer);
        }
    }

    var values = Hoek.clone(peers);
    var main = values.splice(0,1);
    var allPresent = (present.length === peers.length);
    return allPresent ? Errors.create('object.nand', { main: main, peers: values }, state, options) : null;
};


internals.Object.prototype.describe = function (shallow) {

    var description = Any.prototype.describe.call(this);

    if (this._inner.children &&
        !shallow) {

        description.children = {};
        for (var i = 0, il = this._inner.children.length; i < il; ++i) {
            var child = this._inner.children[i];
            description.children[child.key] = child.schema.describe();
        }
    }

    if (this._inner.dependencies.length) {
        description.dependencies = Hoek.clone(this._inner.dependencies);
    }

    if (this._inner.patterns.length) {
        description.patterns = [];

        for (var p = 0, pl = this._inner.patterns.length; p < pl; ++p) {
            var pattern = this._inner.patterns[p];
            description.patterns.push({ regex: pattern.regex.toString(), rule: pattern.rule.describe() });
        }
    }

    return description;
};


internals.Object.prototype.assert = function (ref, schema, message) {

    ref = Cast.ref(ref);
    Hoek.assert(ref.isContext || ref.depth > 1, 'Cannot use assertions for root level references - use direct key rules instead');
    message = message || 'pass the assertion test';

    var cast = Cast.schema(schema);

    return this._test('assert', { cast: cast, ref: ref }, function (value, state, options) {

        var result = cast._validate(ref(value), null, options, value);
        if (!result.errors) {
            return null;
        }

        return Errors.create('object.assert', { ref: ref.path.join('.'), message: message }, state, options);
    });
};


internals.Object.prototype.type = function (constructor, name) {

    Hoek.assert(typeof constructor === 'function', 'type must be a constructor function');
    name = name || constructor.name;

    return this._test('type', name, function (value, state, options) {

        if (value instanceof constructor) {
            return null;
        }

        return Errors.create('object.type', { type: name }, state, options);
    });
};


module.exports = new internals.Object();


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Load modules

var Net = __webpack_require__(110);
var Hoek = __webpack_require__(5);
var Isemail = __webpack_require__(380);
var Any = __webpack_require__(10);
var JoiDate = __webpack_require__(80);
var Errors = __webpack_require__(12);

// Declare internals

var internals = {};


internals.String = function () {

    Any.call(this);
    this._type = 'string';
    this._invalids.add('');
};

Hoek.inherits(internals.String, Any);


internals.String.prototype._base = function (value, state, options) {

    if (typeof value === 'string' &&
        options.convert) {

        if (this._flags.case) {
            value = (this._flags.case === 'upper' ? value.toLocaleUpperCase() : value.toLocaleLowerCase());
        }

        if (this._flags.trim) {
            value = value.trim();
        }
    }

    return {
        value: value,
        errors: (typeof value === 'string') ? null : Errors.create('string.base', null, state, options)
    };
};


internals.String.prototype.insensitive = function () {

    var obj = this.clone();
    obj._flags.insensitive = true;
    return obj;
};


internals.String.prototype.min = function (limit, encoding) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');
    Hoek.assert(!encoding || Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);

    return this._test('min', limit, function (value, state, options) {

        var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
        if (length >= limit) {
            return null;
        }

        return Errors.create('string.min', { limit: limit }, state, options);
    });
};


internals.String.prototype.max = function (limit, encoding) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');
    Hoek.assert(!encoding || Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);

    return this._test('max', limit, function (value, state, options) {

        var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
        if (length <= limit) {
            return null;
        }

        return Errors.create('string.max', { limit: limit }, state, options);
    });
};


internals.String.prototype.creditCard = function () {

    return this._test('creditCard', undefined, function (value, state, options) {

        var i = value.length;
        var sum = 0;
        var mul = 1;
        var char;

        while (i--) {
            char = value.charAt(i) * mul;
            sum += char - (char > 9) * 9;
            mul ^= 3;
        }

        var check =  (sum % 10 === 0) && (sum > 0);
        return check ? null : Errors.create('string.creditCard', null, state, options);
    });
};


internals.String.prototype.length = function (limit, encoding) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');
    Hoek.assert(!encoding || Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);

    return this._test('length', limit, function (value, state, options) {

        var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
        if (length === limit) {
            return null;
        }

        return Errors.create('string.length', { limit: limit }, state, options);
    });
};


internals.String.prototype.regex = function (pattern, name) {

    Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');

    pattern = new RegExp(pattern.source, pattern.ignoreCase ? 'i' : undefined);         // Future version should break this and forbid unsupported regex flags

    return this._test('regex', pattern, function (value, state, options) {

        if (pattern.test(value)) {
            return null;
        }

        return Errors.create((name ? 'string.regex.name' : 'string.regex.base'), { name: name }, state, options);
    });
};


internals.String.prototype.alphanum = function () {

    return this._test('alphanum', undefined, function (value, state, options) {

        if (/^[a-zA-Z0-9]+$/.test(value)) {
            return null;
        }

        return Errors.create('string.alphanum', null, state, options);
    });
};


internals.String.prototype.token = function () {

    return this._test('token', undefined, function (value, state, options) {

        if (/^\w+$/.test(value)) {
            return null;
        }

        return Errors.create('string.token', null, state, options);
    });
};


internals.String.prototype.email = function () {

    return this._test('email', undefined, function (value, state, options) {

        if (Isemail(value)) {
            return null;
        }

        return Errors.create('string.email', null, state, options);
    });
};


internals.String.prototype.isoDate = function () {

    return this._test('isoDate', undefined, function (value, state, options) {

        if (JoiDate._isIsoDate(value)) {
            return null;
        }

        return Errors.create('string.isoDate', null, state, options);
    });
};


internals.String.prototype.guid = function () {

    var regex = /^[A-F0-9]{8}(?:-?[A-F0-9]{4}){3}-?[A-F0-9]{12}$/i;
    var regex2 = /^\{[A-F0-9]{8}(?:-?[A-F0-9]{4}){3}-?[A-F0-9]{12}\}$/i;

    return this._test('guid', undefined, function (value, state, options) {

        if (regex.test(value) || regex2.test(value)) {
            return null;
        }

        return Errors.create('string.guid', null, state, options);
    });
};


internals.String.prototype.hostname = function () {

    var regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;

    return this._test('hostname', undefined, function (value, state, options) {

        if ((value.length <= 255 && regex.test(value)) ||
            Net.isIPv6(value)) {

            return null;
        }

        return Errors.create("string.hostname", null, state, options);
    });
};


internals.String.prototype.lowercase = function () {

    var obj = this._test('lowercase', undefined, function (value, state, options) {

        if (options.convert ||
            value === value.toLocaleLowerCase()) {

            return null;
        }

        return Errors.create('string.lowercase', null, state, options);
    });

    obj._flags.case = 'lower';
    return obj;
};


internals.String.prototype.uppercase = function (options) {

    var obj = this._test('uppercase', undefined, function (value, state, options) {

        if (options.convert ||
            value === value.toLocaleUpperCase()) {

            return null;
        }

        return Errors.create('string.uppercase', null, state, options);
    });

    obj._flags.case = 'upper';
    return obj;
};


internals.String.prototype.trim = function () {

    var obj = this._test('trim', undefined, function (value, state, options) {

        if (options.convert ||
            value === value.trim()) {

            return null;
        }

        return Errors.create('string.trim', null, state, options);
    });

    obj._flags.trim = true;
    return obj;
};


module.exports = new internals.String();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer))

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(51),
    stackClear = __webpack_require__(466),
    stackDelete = __webpack_require__(467),
    stackGet = __webpack_require__(468),
    stackHas = __webpack_require__(469),
    stackSet = __webpack_require__(470);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(141),
    eq = __webpack_require__(57);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(147);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(145),
    toKey = __webpack_require__(56);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(410),
    isObjectLike = __webpack_require__(42);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(85),
    nativeKeys = __webpack_require__(456);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(13),
    isKey = __webpack_require__(84),
    stringToPath = __webpack_require__(471),
    toString = __webpack_require__(482);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(140),
    baseAssignValue = __webpack_require__(141);

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(22);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(391),
    arraySome = __webpack_require__(400),
    cacheHas = __webpack_require__(424);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(387),
    Map = __webpack_require__(81),
    Promise = __webpack_require__(389),
    Set = __webpack_require__(390),
    WeakMap = __webpack_require__(393),
    baseGetTag = __webpack_require__(40),
    toSource = __webpack_require__(154);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(57),
    isArrayLike = __webpack_require__(41),
    isIndex = __webpack_require__(83),
    isObject = __webpack_require__(14);

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(14);

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),
/* 153 */
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),
/* 154 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__(29)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enAu = moment.defineLocale('en-au', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enAu;

})));


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(29)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enCa = moment.defineLocale('en-ca', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'YYYY-MM-DD',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

return enCa;

})));


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(29)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enGb = moment.defineLocale('en-gb', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enGb;

})));


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__(29)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enIe = moment.defineLocale('en-ie', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enIe;

})));


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__(29)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enNz = moment.defineLocale('en-nz', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enNz;

})));


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Stringify = __webpack_require__(485);
var Parse = __webpack_require__(484);


// Declare internals

var internals = {};


module.exports = {
    stringify: Stringify,
    parse: Parse
};


/***/ }),
/* 161 */
/***/ (function(module, exports) {

// Load modules


// Declare internals

var internals = {};
internals.hexTable = new Array(256);
for (var h = 0; h < 256; ++h) {
    internals.hexTable[h] = '%' + ((h < 16 ? '0' : '') + h.toString(16)).toUpperCase();
}


exports.arrayToObject = function (source, options) {

    var obj = options.plainObjects ? Object.create(null) : {};
    for (var i = 0, il = source.length; i < il; ++i) {
        if (typeof source[i] !== 'undefined') {

            obj[i] = source[i];
        }
    }

    return obj;
};


exports.merge = function (target, source, options) {

    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        }
        else if (typeof target === 'object') {
            target[source] = true;
        }
        else {
            target = [target, source];
        }

        return target;
    }

    if (typeof target !== 'object') {
        target = [target].concat(source);
        return target;
    }

    if (Array.isArray(target) &&
        !Array.isArray(source)) {

        target = exports.arrayToObject(target, options);
    }

    var keys = Object.keys(source);
    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var value = source[key];

        if (!Object.prototype.hasOwnProperty.call(target, key)) {
            target[key] = value;
        }
        else {
            target[key] = exports.merge(target[key], value, options);
        }
    }

    return target;
};


exports.decode = function (str) {

    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};

exports.encode = function (str) {

    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    if (typeof str !== 'string') {
        str = '' + str;
    }

    var out = '';
    for (var i = 0, il = str.length; i < il; ++i) {
        var c = str.charCodeAt(i);

        if (c === 0x2D || // -
            c === 0x2E || // .
            c === 0x5F || // _
            c === 0x7E || // ~
            (c >= 0x30 && c <= 0x39) || // 0-9
            (c >= 0x41 && c <= 0x5A) || // a-z
            (c >= 0x61 && c <= 0x7A)) { // A-Z

            out += str[i];
            continue;
        }

        if (c < 0x80) {
            out += internals.hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out += internals.hexTable[0xC0 | (c >> 6)] + internals.hexTable[0x80 | (c & 0x3F)];
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out += internals.hexTable[0xE0 | (c >> 12)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];
            continue;
        }

        ++i;
        c = 0x10000 + (((c & 0x3FF) << 10) | (str.charCodeAt(i) & 0x3FF));
        out += internals.hexTable[0xF0 | (c >> 18)] + internals.hexTable[0x80 | ((c >> 12) & 0x3F)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];
    }

    return out;
};

exports.compact = function (obj, refs) {

    if (typeof obj !== 'object' ||
        obj === null) {

        return obj;
    }

    refs = refs || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
        return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
        var compacted = [];

        for (var i = 0, il = obj.length; i < il; ++i) {
            if (typeof obj[i] !== 'undefined') {
                compacted.push(obj[i]);
            }
        }

        return compacted;
    }

    var keys = Object.keys(obj);
    for (i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        obj[key] = exports.compact(obj[key], refs);
    }

    return obj;
};


exports.isRegExp = function (obj) {

    return Object.prototype.toString.call(obj) === '[object RegExp]';
};


exports.isBuffer = function (obj) {

    if (obj === null ||
        typeof obj === 'undefined') {

        return false;
    }

    return !!(obj.constructor &&
              obj.constructor.isBuffer &&
              obj.constructor.isBuffer(obj));
};


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * Enforces a single instance of the Raven client, and the
 * main entry point for Raven. If you are a consumer of the
 * Raven library, you SHOULD load this file (vs raven.js).
 **/



var RavenConstructor = __webpack_require__(489);

// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)
var _window = typeof window !== 'undefined' ? window
            : typeof global !== 'undefined' ? global
            : typeof self !== 'undefined' ? self
            : {};
var _Raven = _window.Raven;

var Raven = new RavenConstructor();

/*
 * Allow multiple versions of Raven to be installed.
 * Strip Raven from the global context and returns the instance.
 *
 * @return {Raven}
 */
Raven.noConflict = function () {
	_window.Raven = _Raven;
	return Raven;
};

Raven.afterLoad();

module.exports = Raven;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function isObject(what) {
    return typeof what === 'object' && what !== null;
}

// Yanked from https://git.io/vS8DV re-used under CC0
// with some tiny modifications
function isError(value) {
  switch ({}.toString.call(value)) {
    case '[object Error]': return true;
    case '[object Exception]': return true;
    case '[object DOMException]': return true;
    default: return value instanceof Error;
  }
}

module.exports = {
    isObject: isObject,
    isError: isError
};


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  console.warn("Using browser-only version of superagent in non-browser environment");
  root = this;
}

var Emitter = __webpack_require__(246);
var RequestBase = __webpack_require__(509);
var isObject = __webpack_require__(92);
var isFunction = __webpack_require__(508);
var ResponseBase = __webpack_require__(510);
var shouldRetry = __webpack_require__(511);

/**
 * Noop.
 */

function noop(){};

/**
 * Expose `request`.
 */

var request = exports = module.exports = function(method, url) {
  // callback
  if ('function' == typeof url) {
    return new exports.Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
}

exports.Request = Request;

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  throw Error("Browser-only verison of superagent could not find XHR");
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');
    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'application/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  lines.pop(); // trailing CRLF

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  return /[\/+]json\b/.test(mime);
}

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status;
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
      status = 204;
  }
  this._setStatusProperties(status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this._setHeaderProperties(this.header);

  if (null === this.text && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }
}

ResponseBase(Response.prototype);

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function(str){
  var parse = request.parse[this.type];
  if(this.req._parser) {
    return this.req._parser(this, str);
  }
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
        // issue #876: return the http status code if the response parsing fails
        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);

    var new_err;
    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
        new_err.original = err;
        new_err.response = res;
        new_err.status = res.status;
      }
    } catch(e) {
      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android
    }

    // #1000 don't catch errors from the callback to avoid double calling it
    if (new_err) {
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}

/**
 * Mixin `Emitter` and `RequestBase`.
 */

Emitter(Request.prototype);
RequestBase(Request.prototype);

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (typeof pass === 'object' && pass !== null) { // pass is optional and can substitute for options
    options = pass;
  }
  if (!options) {
    options = {
      type: 'function' === typeof btoa ? 'basic' : 'auto',
    }
  }

  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + btoa(user + ':' + pass));
    break;

    case 'auto':
      this.username = user;
      this.password = pass;
    break;
      
    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
    break;  
  }
  return this;
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, options){
  if (file) {
    if (this._data) {
      throw Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  // console.log(this._retries, this._maxRetries)
  if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) err.retries = this._retries - 1;
    this.emit('error', err);
  }

  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

// This only warns, because the request is still likely to work
Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
  console.warn("This is not supported in browser version of superagent");
  return this;
};

// This throws, because it can't send/receive data as expected
Request.prototype.pipe = Request.prototype.write = function(){
  throw Error("Streaming is not supported in browser version of superagent");
};

/**
 * Compose querystring to append to req.url
 *
 * @api private
 */

Request.prototype._appendQueryString = function(){
  var query = this._query.join('&');
  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }

  if (this._sort) {
    var index = this.url.indexOf('?');
    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');
      if (isFunction(this._sort)) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }
      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
}

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  if (this._endCalled) {
    console.warn("Warning: .end() was called twice. This is not supported in superagent");
  }
  this._endCalled = true;

  // store callback
  this._callback = fn || noop;

  // querystring
  this._appendQueryString();

  return this._end();
};

Request.prototype._end = function() {
  var self = this;
  var xhr = this.xhr = request.getXHR();
  var data = this._formData || this._data;

  this._setTimeouts();

  // state change
  xhr.onreadystatechange = function(){
    var readyState = xhr.readyState;
    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }
    if (4 != readyState) {
      return;
    }

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (!status) {
      if (self.timedout || self._aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = direction;
    self.emit('progress', e);
  }
  if (this.hasListeners('progress')) {
    try {
      xhr.onprogress = handleProgress.bind(null, 'download');
      if (xhr.upload) {
        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  }

  // initiate request
  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  }

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) {
      serialize = request.serialize['application/json'];
    }
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;

    if (this.header.hasOwnProperty(field))
      xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.options = function(url, data, fn){
  var req = request('OPTIONS', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

function del(url, data, fn){
  var req = request('DELETE', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};


/***/ }),
/* 165 */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return  bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
var rng;

var crypto = global.crypto || global.msCrypto; // for IE 11
if (crypto && crypto.getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16);
  rng = function whatwgRNG() {
    crypto.getRandomValues(rnds8);
    return rnds8;
  };
}

if (!rng) {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var  rnds = new Array(16);
  rng = function() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

module.exports = rng;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(7);

  XMLNode = __webpack_require__(31);

  module.exports = XMLCData = (function(superClass) {
    extend(XMLCData, superClass);

    function XMLCData(parent, text) {
      XMLCData.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing CDATA text");
      }
      this.text = this.stringify.cdata(text);
    }

    XMLCData.prototype.clone = function() {
      return create(XMLCData.prototype, this);
    };

    XMLCData.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<![CDATA[' + this.text + ']]>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLCData;

  })(XMLNode);

}).call(this);


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLComment, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(7);

  XMLNode = __webpack_require__(31);

  module.exports = XMLComment = (function(superClass) {
    extend(XMLComment, superClass);

    function XMLComment(parent, text) {
      XMLComment.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing comment text");
      }
      this.text = this.stringify.comment(text);
    }

    XMLComment.prototype.clone = function() {
      return create(XMLComment.prototype, this);
    };

    XMLComment.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!-- ' + this.text + ' -->';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLComment;

  })(XMLNode);

}).call(this);


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDeclaration, XMLNode, create, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(7);

  isObject = __webpack_require__(14);

  XMLNode = __webpack_require__(31);

  module.exports = XMLDeclaration = (function(superClass) {
    extend(XMLDeclaration, superClass);

    function XMLDeclaration(parent, version, encoding, standalone) {
      var ref;
      XMLDeclaration.__super__.constructor.call(this, parent);
      if (isObject(version)) {
        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
      }
      if (!version) {
        version = '1.0';
      }
      this.version = this.stringify.xmlVersion(version);
      if (encoding != null) {
        this.encoding = this.stringify.xmlEncoding(encoding);
      }
      if (standalone != null) {
        this.standalone = this.stringify.xmlStandalone(standalone);
      }
    }

    XMLDeclaration.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?xml';
      r += ' version="' + this.version + '"';
      if (this.encoding != null) {
        r += ' encoding="' + this.encoding + '"';
      }
      if (this.standalone != null) {
        r += ' standalone="' + this.standalone + '"';
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDeclaration;

  })(XMLNode);

}).call(this);


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;

  create = __webpack_require__(7);

  isObject = __webpack_require__(14);

  XMLCData = __webpack_require__(167);

  XMLComment = __webpack_require__(168);

  XMLDTDAttList = __webpack_require__(521);

  XMLDTDEntity = __webpack_require__(523);

  XMLDTDElement = __webpack_require__(522);

  XMLDTDNotation = __webpack_require__(524);

  XMLProcessingInstruction = __webpack_require__(172);

  module.exports = XMLDocType = (function() {
    function XMLDocType(parent, pubID, sysID) {
      var ref, ref1;
      this.documentObject = parent;
      this.stringify = this.documentObject.stringify;
      this.children = [];
      if (isObject(pubID)) {
        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
      }
      if (sysID == null) {
        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
      }
      if (pubID != null) {
        this.pubID = this.stringify.dtdPubID(pubID);
      }
      if (sysID != null) {
        this.sysID = this.stringify.dtdSysID(sysID);
      }
    }

    XMLDocType.prototype.element = function(name, value) {
      var child;
      child = new XMLDTDElement(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var child;
      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.entity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, false, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.pEntity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, true, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.notation = function(name, value) {
      var child;
      child = new XMLDTDNotation(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.instruction = function(target, value) {
      var child;
      child = new XMLProcessingInstruction(this, target, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.root = function() {
      return this.documentObject.root();
    };

    XMLDocType.prototype.document = function() {
      return this.documentObject;
    };

    XMLDocType.prototype.toString = function(options, level) {
      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!DOCTYPE ' + this.root().name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      if (this.children.length > 0) {
        r += ' [';
        if (pretty) {
          r += newline;
        }
        ref3 = this.children;
        for (i = 0, len = ref3.length; i < len; i++) {
          child = ref3[i];
          r += child.toString(options, level + 1);
        }
        r += ']';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    XMLDocType.prototype.ele = function(name, value) {
      return this.element(name, value);
    };

    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
    };

    XMLDocType.prototype.ent = function(name, value) {
      return this.entity(name, value);
    };

    XMLDocType.prototype.pent = function(name, value) {
      return this.pEntity(name, value);
    };

    XMLDocType.prototype.not = function(name, value) {
      return this.notation(name, value);
    };

    XMLDocType.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLDocType.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLDocType.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLDocType.prototype.up = function() {
      return this.root();
    };

    XMLDocType.prototype.doc = function() {
      return this.document();
    };

    return XMLDocType;

  })();

}).call(this);


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isFunction, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(7);

  isObject = __webpack_require__(14);

  isFunction = __webpack_require__(58);

  every = __webpack_require__(474);

  XMLNode = __webpack_require__(31);

  XMLAttribute = __webpack_require__(519);

  XMLProcessingInstruction = __webpack_require__(172);

  module.exports = XMLElement = (function(superClass) {
    extend(XMLElement, superClass);

    function XMLElement(parent, name, attributes) {
      XMLElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing element name");
      }
      this.name = this.stringify.eleName(name);
      this.children = [];
      this.instructions = [];
      this.attributes = {};
      if (attributes != null) {
        this.attribute(attributes);
      }
    }

    XMLElement.prototype.clone = function() {
      var att, attName, clonedSelf, i, len, pi, ref, ref1;
      clonedSelf = create(XMLElement.prototype, this);
      if (clonedSelf.isRoot) {
        clonedSelf.documentObject = null;
      }
      clonedSelf.attributes = {};
      ref = this.attributes;
      for (attName in ref) {
        if (!hasProp.call(ref, attName)) continue;
        att = ref[attName];
        clonedSelf.attributes[attName] = att.clone();
      }
      clonedSelf.instructions = [];
      ref1 = this.instructions;
      for (i = 0, len = ref1.length; i < len; i++) {
        pi = ref1[i];
        clonedSelf.instructions.push(pi.clone());
      }
      clonedSelf.children = [];
      this.children.forEach(function(child) {
        var clonedChild;
        clonedChild = child.clone();
        clonedChild.parent = clonedSelf;
        return clonedSelf.children.push(clonedChild);
      });
      return clonedSelf;
    };

    XMLElement.prototype.attribute = function(name, value) {
      var attName, attValue;
      if (name != null) {
        name = name.valueOf();
      }
      if (isObject(name)) {
        for (attName in name) {
          if (!hasProp.call(name, attName)) continue;
          attValue = name[attName];
          this.attribute(attName, attValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        if (!this.options.skipNullAttributes || (value != null)) {
          this.attributes[name] = new XMLAttribute(this, name, value);
        }
      }
      return this;
    };

    XMLElement.prototype.removeAttribute = function(name) {
      var attName, i, len;
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      name = name.valueOf();
      if (Array.isArray(name)) {
        for (i = 0, len = name.length; i < len; i++) {
          attName = name[i];
          delete this.attributes[attName];
        }
      } else {
        delete this.attributes[name];
      }
      return this;
    };

    XMLElement.prototype.instruction = function(target, value) {
      var i, insTarget, insValue, instruction, len;
      if (target != null) {
        target = target.valueOf();
      }
      if (value != null) {
        value = value.valueOf();
      }
      if (Array.isArray(target)) {
        for (i = 0, len = target.length; i < len; i++) {
          insTarget = target[i];
          this.instruction(insTarget);
        }
      } else if (isObject(target)) {
        for (insTarget in target) {
          if (!hasProp.call(target, insTarget)) continue;
          insValue = target[insTarget];
          this.instruction(insTarget, insValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        instruction = new XMLProcessingInstruction(this, target, value);
        this.instructions.push(instruction);
      }
      return this;
    };

    XMLElement.prototype.toString = function(options, level) {
      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      ref3 = this.instructions;
      for (i = 0, len = ref3.length; i < len; i++) {
        instruction = ref3[i];
        r += instruction.toString(options, level);
      }
      if (pretty) {
        r += space;
      }
      r += '<' + this.name;
      ref4 = this.attributes;
      for (name in ref4) {
        if (!hasProp.call(ref4, name)) continue;
        att = ref4[name];
        r += att.toString(options);
      }
      if (this.children.length === 0 || every(this.children, function(e) {
        return e.value === '';
      })) {
        r += '/>';
        if (pretty) {
          r += newline;
        }
      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
        r += '>';
        r += this.children[0].value;
        r += '</' + this.name + '>';
        r += newline;
      } else {
        r += '>';
        if (pretty) {
          r += newline;
        }
        ref5 = this.children;
        for (j = 0, len1 = ref5.length; j < len1; j++) {
          child = ref5[j];
          r += child.toString(options, level + 1);
        }
        if (pretty) {
          r += space;
        }
        r += '</' + this.name + '>';
        if (pretty) {
          r += newline;
        }
      }
      return r;
    };

    XMLElement.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLElement.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    return XMLElement;

  })(XMLNode);

}).call(this);


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLProcessingInstruction, create;

  create = __webpack_require__(7);

  module.exports = XMLProcessingInstruction = (function() {
    function XMLProcessingInstruction(parent, target, value) {
      this.stringify = parent.stringify;
      if (target == null) {
        throw new Error("Missing instruction target");
      }
      this.target = this.stringify.insTarget(target);
      if (value) {
        this.value = this.stringify.insValue(value);
      }
    }

    XMLProcessingInstruction.prototype.clone = function() {
      return create(XMLProcessingInstruction.prototype, this);
    };

    XMLProcessingInstruction.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?';
      r += this.target;
      if (this.value) {
        r += ' ' + this.value;
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLProcessingInstruction;

  })();

}).call(this);


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/22/15.
 */

/*eslint no-unused-vars: 0*/



var _Framework = __webpack_require__(228);

var _deepAsset = __webpack_require__(253);

var _deepAsset2 = _interopRequireDefault(_deepAsset);

var _deepCache = __webpack_require__(265);

var _deepCache2 = _interopRequireDefault(_deepCache);

var _deepSecurity = __webpack_require__(362);

var _deepSecurity2 = _interopRequireDefault(_deepSecurity);

var _deepResource = __webpack_require__(340);

var _deepResource2 = _interopRequireDefault(_deepResource);

var _deepLog = __webpack_require__(320);

var _deepLog2 = _interopRequireDefault(_deepLog);

var _deepEvent = __webpack_require__(295);

var _deepEvent2 = _interopRequireDefault(_deepEvent);

var _deepValidation = __webpack_require__(374);

var _deepValidation2 = _interopRequireDefault(_deepValidation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo - fix lodash error "Uncaught TypeError: Cannot read property 'prototype' of undefined" in runInContext method
//import DeepSearch  from 'deep-search';

//import DeepNotification from 'deep-notification';

let _exports = module.exports = new _Framework.Framework({
  Asset: _deepAsset2.default,
  Cache: _deepCache2.default,
  Security: _deepSecurity2.default,
  Resource: _deepResource2.default,
  Log: _deepLog2.default,
  Validation: _deepValidation2.default,
  Event: _deepEvent2.default

}, _Framework.Framework.FRONTEND_CONTEXT);

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint no-extend-native:0 */

if (!Function.prototype.name) {
  if (!Object.defineProperty) {
    console.error('Cannot define "Function.prototype.name" getter');
  } else {
    Object.defineProperty(Function.prototype, 'name', {
      get: function get() {
        const matches = this.toString().match(/^\s*function\s+([^(]{1,})\(/i);

        return matches && matches.length > 1 ? matches[1].trim() : null;
      },
      set: function set(value) {}
    });
  }
}

/***/ }),
/* 175 */
/***/ (function(module, exports) {

module.exports = {
	"version": "2.0",
	"metadata": {
		"apiVersion": "2014-06-30",
		"endpointPrefix": "cognito-identity",
		"jsonVersion": "1.1",
		"protocol": "json",
		"serviceFullName": "Amazon Cognito Identity",
		"signatureVersion": "v4",
		"targetPrefix": "AWSCognitoIdentityService",
		"uid": "cognito-identity-2014-06-30"
	},
	"operations": {
		"CreateIdentityPool": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolName",
					"AllowUnauthenticatedIdentities"
				],
				"members": {
					"IdentityPoolName": {},
					"AllowUnauthenticatedIdentities": {
						"type": "boolean"
					},
					"SupportedLoginProviders": {
						"shape": "S4"
					},
					"DeveloperProviderName": {},
					"OpenIdConnectProviderARNs": {
						"shape": "S8"
					},
					"CognitoIdentityProviders": {
						"shape": "Sa"
					},
					"SamlProviderARNs": {
						"shape": "Sf"
					}
				}
			},
			"output": {
				"shape": "Sg"
			}
		},
		"DeleteIdentities": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityIdsToDelete"
				],
				"members": {
					"IdentityIdsToDelete": {
						"type": "list",
						"member": {}
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"UnprocessedIdentityIds": {
						"type": "list",
						"member": {
							"type": "structure",
							"members": {
								"IdentityId": {},
								"ErrorCode": {}
							}
						}
					}
				}
			}
		},
		"DeleteIdentityPool": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {}
				}
			}
		},
		"DescribeIdentity": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityId"
				],
				"members": {
					"IdentityId": {}
				}
			},
			"output": {
				"shape": "Sr"
			}
		},
		"DescribeIdentityPool": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {}
				}
			},
			"output": {
				"shape": "Sg"
			}
		},
		"GetCredentialsForIdentity": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityId"
				],
				"members": {
					"IdentityId": {},
					"Logins": {
						"shape": "Sw"
					},
					"CustomRoleArn": {}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityId": {},
					"Credentials": {
						"type": "structure",
						"members": {
							"AccessKeyId": {},
							"SecretKey": {},
							"SessionToken": {},
							"Expiration": {
								"type": "timestamp"
							}
						}
					}
				}
			}
		},
		"GetId": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"AccountId": {},
					"IdentityPoolId": {},
					"Logins": {
						"shape": "Sw"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityId": {}
				}
			}
		},
		"GetIdentityPoolRoles": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityPoolId": {},
					"Roles": {
						"shape": "S18"
					},
					"RoleMappings": {
						"shape": "S1a"
					}
				}
			}
		},
		"GetOpenIdToken": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityId"
				],
				"members": {
					"IdentityId": {},
					"Logins": {
						"shape": "Sw"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityId": {},
					"Token": {}
				}
			}
		},
		"GetOpenIdTokenForDeveloperIdentity": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"Logins"
				],
				"members": {
					"IdentityPoolId": {},
					"IdentityId": {},
					"Logins": {
						"shape": "Sw"
					},
					"TokenDuration": {
						"type": "long"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityId": {},
					"Token": {}
				}
			}
		},
		"ListIdentities": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"MaxResults"
				],
				"members": {
					"IdentityPoolId": {},
					"MaxResults": {
						"type": "integer"
					},
					"NextToken": {},
					"HideDisabled": {
						"type": "boolean"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityPoolId": {},
					"Identities": {
						"type": "list",
						"member": {
							"shape": "Sr"
						}
					},
					"NextToken": {}
				}
			}
		},
		"ListIdentityPools": {
			"input": {
				"type": "structure",
				"required": [
					"MaxResults"
				],
				"members": {
					"MaxResults": {
						"type": "integer"
					},
					"NextToken": {}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityPools": {
						"type": "list",
						"member": {
							"type": "structure",
							"members": {
								"IdentityPoolId": {},
								"IdentityPoolName": {}
							}
						}
					},
					"NextToken": {}
				}
			}
		},
		"LookupDeveloperIdentity": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {},
					"IdentityId": {},
					"DeveloperUserIdentifier": {},
					"MaxResults": {
						"type": "integer"
					},
					"NextToken": {}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityId": {},
					"DeveloperUserIdentifierList": {
						"type": "list",
						"member": {}
					},
					"NextToken": {}
				}
			}
		},
		"MergeDeveloperIdentities": {
			"input": {
				"type": "structure",
				"required": [
					"SourceUserIdentifier",
					"DestinationUserIdentifier",
					"DeveloperProviderName",
					"IdentityPoolId"
				],
				"members": {
					"SourceUserIdentifier": {},
					"DestinationUserIdentifier": {},
					"DeveloperProviderName": {},
					"IdentityPoolId": {}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityId": {}
				}
			}
		},
		"SetIdentityPoolRoles": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"Roles"
				],
				"members": {
					"IdentityPoolId": {},
					"Roles": {
						"shape": "S18"
					},
					"RoleMappings": {
						"shape": "S1a"
					}
				}
			}
		},
		"UnlinkDeveloperIdentity": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityId",
					"IdentityPoolId",
					"DeveloperProviderName",
					"DeveloperUserIdentifier"
				],
				"members": {
					"IdentityId": {},
					"IdentityPoolId": {},
					"DeveloperProviderName": {},
					"DeveloperUserIdentifier": {}
				}
			}
		},
		"UnlinkIdentity": {
			"input": {
				"type": "structure",
				"required": [
					"IdentityId",
					"Logins",
					"LoginsToRemove"
				],
				"members": {
					"IdentityId": {},
					"Logins": {
						"shape": "Sw"
					},
					"LoginsToRemove": {
						"shape": "Ss"
					}
				}
			}
		},
		"UpdateIdentityPool": {
			"input": {
				"shape": "Sg"
			},
			"output": {
				"shape": "Sg"
			}
		}
	},
	"shapes": {
		"S4": {
			"type": "map",
			"key": {},
			"value": {}
		},
		"S8": {
			"type": "list",
			"member": {}
		},
		"Sa": {
			"type": "list",
			"member": {
				"type": "structure",
				"members": {
					"ProviderName": {},
					"ClientId": {},
					"ServerSideTokenCheck": {
						"type": "boolean"
					}
				}
			}
		},
		"Sf": {
			"type": "list",
			"member": {}
		},
		"Sg": {
			"type": "structure",
			"required": [
				"IdentityPoolId",
				"IdentityPoolName",
				"AllowUnauthenticatedIdentities"
			],
			"members": {
				"IdentityPoolId": {},
				"IdentityPoolName": {},
				"AllowUnauthenticatedIdentities": {
					"type": "boolean"
				},
				"SupportedLoginProviders": {
					"shape": "S4"
				},
				"DeveloperProviderName": {},
				"OpenIdConnectProviderARNs": {
					"shape": "S8"
				},
				"CognitoIdentityProviders": {
					"shape": "Sa"
				},
				"SamlProviderARNs": {
					"shape": "Sf"
				}
			}
		},
		"Sr": {
			"type": "structure",
			"members": {
				"IdentityId": {},
				"Logins": {
					"shape": "Ss"
				},
				"CreationDate": {
					"type": "timestamp"
				},
				"LastModifiedDate": {
					"type": "timestamp"
				}
			}
		},
		"Ss": {
			"type": "list",
			"member": {}
		},
		"Sw": {
			"type": "map",
			"key": {},
			"value": {}
		},
		"S18": {
			"type": "map",
			"key": {},
			"value": {}
		},
		"S1a": {
			"type": "map",
			"key": {},
			"value": {
				"type": "structure",
				"required": [
					"Type"
				],
				"members": {
					"Type": {},
					"AmbiguousRoleResolution": {},
					"RulesConfiguration": {
						"type": "structure",
						"required": [
							"Rules"
						],
						"members": {
							"Rules": {
								"type": "list",
								"member": {
									"type": "structure",
									"required": [
										"Claim",
										"MatchType",
										"Value",
										"RoleARN"
									],
									"members": {
										"Claim": {},
										"MatchType": {},
										"Value": {},
										"RoleARN": {}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};

/***/ }),
/* 176 */
/***/ (function(module, exports) {

module.exports = {
	"pagination": {}
};

/***/ }),
/* 177 */
/***/ (function(module, exports) {

module.exports = {
	"version": "2.0",
	"metadata": {
		"apiVersion": "2014-06-30",
		"endpointPrefix": "cognito-sync",
		"jsonVersion": "1.1",
		"serviceFullName": "Amazon Cognito Sync",
		"signatureVersion": "v4",
		"protocol": "rest-json",
		"uid": "cognito-sync-2014-06-30"
	},
	"operations": {
		"BulkPublish": {
			"http": {
				"requestUri": "/identitypools/{IdentityPoolId}/bulkpublish",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityPoolId": {}
				}
			}
		},
		"DeleteDataset": {
			"http": {
				"method": "DELETE",
				"requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"IdentityId",
					"DatasetName"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"IdentityId": {
						"location": "uri",
						"locationName": "IdentityId"
					},
					"DatasetName": {
						"location": "uri",
						"locationName": "DatasetName"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Dataset": {
						"shape": "S8"
					}
				}
			}
		},
		"DescribeDataset": {
			"http": {
				"method": "GET",
				"requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"IdentityId",
					"DatasetName"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"IdentityId": {
						"location": "uri",
						"locationName": "IdentityId"
					},
					"DatasetName": {
						"location": "uri",
						"locationName": "DatasetName"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Dataset": {
						"shape": "S8"
					}
				}
			}
		},
		"DescribeIdentityPoolUsage": {
			"http": {
				"method": "GET",
				"requestUri": "/identitypools/{IdentityPoolId}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityPoolUsage": {
						"shape": "Sg"
					}
				}
			}
		},
		"DescribeIdentityUsage": {
			"http": {
				"method": "GET",
				"requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"IdentityId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"IdentityId": {
						"location": "uri",
						"locationName": "IdentityId"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityUsage": {
						"type": "structure",
						"members": {
							"IdentityId": {},
							"IdentityPoolId": {},
							"LastModifiedDate": {
								"type": "timestamp"
							},
							"DatasetCount": {
								"type": "integer"
							},
							"DataStorage": {
								"type": "long"
							}
						}
					}
				}
			}
		},
		"GetBulkPublishDetails": {
			"http": {
				"requestUri": "/identitypools/{IdentityPoolId}/getBulkPublishDetails",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityPoolId": {},
					"BulkPublishStartTime": {
						"type": "timestamp"
					},
					"BulkPublishCompleteTime": {
						"type": "timestamp"
					},
					"BulkPublishStatus": {},
					"FailureMessage": {}
				}
			}
		},
		"GetCognitoEvents": {
			"http": {
				"method": "GET",
				"requestUri": "/identitypools/{IdentityPoolId}/events",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Events": {
						"shape": "Sq"
					}
				}
			}
		},
		"GetIdentityPoolConfiguration": {
			"http": {
				"method": "GET",
				"requestUri": "/identitypools/{IdentityPoolId}/configuration",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityPoolId": {},
					"PushSync": {
						"shape": "Sv"
					},
					"CognitoStreams": {
						"shape": "Sz"
					}
				}
			}
		},
		"ListDatasets": {
			"http": {
				"method": "GET",
				"requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityId",
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"IdentityId": {
						"location": "uri",
						"locationName": "IdentityId"
					},
					"NextToken": {
						"location": "querystring",
						"locationName": "nextToken"
					},
					"MaxResults": {
						"location": "querystring",
						"locationName": "maxResults",
						"type": "integer"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Datasets": {
						"type": "list",
						"member": {
							"shape": "S8"
						}
					},
					"Count": {
						"type": "integer"
					},
					"NextToken": {}
				}
			}
		},
		"ListIdentityPoolUsage": {
			"http": {
				"method": "GET",
				"requestUri": "/identitypools",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"members": {
					"NextToken": {
						"location": "querystring",
						"locationName": "nextToken"
					},
					"MaxResults": {
						"location": "querystring",
						"locationName": "maxResults",
						"type": "integer"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityPoolUsages": {
						"type": "list",
						"member": {
							"shape": "Sg"
						}
					},
					"MaxResults": {
						"type": "integer"
					},
					"Count": {
						"type": "integer"
					},
					"NextToken": {}
				}
			}
		},
		"ListRecords": {
			"http": {
				"method": "GET",
				"requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"IdentityId",
					"DatasetName"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"IdentityId": {
						"location": "uri",
						"locationName": "IdentityId"
					},
					"DatasetName": {
						"location": "uri",
						"locationName": "DatasetName"
					},
					"LastSyncCount": {
						"location": "querystring",
						"locationName": "lastSyncCount",
						"type": "long"
					},
					"NextToken": {
						"location": "querystring",
						"locationName": "nextToken"
					},
					"MaxResults": {
						"location": "querystring",
						"locationName": "maxResults",
						"type": "integer"
					},
					"SyncSessionToken": {
						"location": "querystring",
						"locationName": "syncSessionToken"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Records": {
						"shape": "S1c"
					},
					"NextToken": {},
					"Count": {
						"type": "integer"
					},
					"DatasetSyncCount": {
						"type": "long"
					},
					"LastModifiedBy": {},
					"MergedDatasetNames": {
						"type": "list",
						"member": {}
					},
					"DatasetExists": {
						"type": "boolean"
					},
					"DatasetDeletedAfterRequestedSyncCount": {
						"type": "boolean"
					},
					"SyncSessionToken": {}
				}
			}
		},
		"RegisterDevice": {
			"http": {
				"requestUri": "/identitypools/{IdentityPoolId}/identity/{IdentityId}/device",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"IdentityId",
					"Platform",
					"Token"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"IdentityId": {
						"location": "uri",
						"locationName": "IdentityId"
					},
					"Platform": {},
					"Token": {}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"DeviceId": {}
				}
			}
		},
		"SetCognitoEvents": {
			"http": {
				"requestUri": "/identitypools/{IdentityPoolId}/events",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"Events"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"Events": {
						"shape": "Sq"
					}
				}
			}
		},
		"SetIdentityPoolConfiguration": {
			"http": {
				"requestUri": "/identitypools/{IdentityPoolId}/configuration",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"PushSync": {
						"shape": "Sv"
					},
					"CognitoStreams": {
						"shape": "Sz"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"IdentityPoolId": {},
					"PushSync": {
						"shape": "Sv"
					},
					"CognitoStreams": {
						"shape": "Sz"
					}
				}
			}
		},
		"SubscribeToDataset": {
			"http": {
				"requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"IdentityId",
					"DatasetName",
					"DeviceId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"IdentityId": {
						"location": "uri",
						"locationName": "IdentityId"
					},
					"DatasetName": {
						"location": "uri",
						"locationName": "DatasetName"
					},
					"DeviceId": {
						"location": "uri",
						"locationName": "DeviceId"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {}
			}
		},
		"UnsubscribeFromDataset": {
			"http": {
				"method": "DELETE",
				"requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"IdentityId",
					"DatasetName",
					"DeviceId"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"IdentityId": {
						"location": "uri",
						"locationName": "IdentityId"
					},
					"DatasetName": {
						"location": "uri",
						"locationName": "DatasetName"
					},
					"DeviceId": {
						"location": "uri",
						"locationName": "DeviceId"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {}
			}
		},
		"UpdateRecords": {
			"http": {
				"requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"IdentityPoolId",
					"IdentityId",
					"DatasetName",
					"SyncSessionToken"
				],
				"members": {
					"IdentityPoolId": {
						"location": "uri",
						"locationName": "IdentityPoolId"
					},
					"IdentityId": {
						"location": "uri",
						"locationName": "IdentityId"
					},
					"DatasetName": {
						"location": "uri",
						"locationName": "DatasetName"
					},
					"DeviceId": {},
					"RecordPatches": {
						"type": "list",
						"member": {
							"type": "structure",
							"required": [
								"Op",
								"Key",
								"SyncCount"
							],
							"members": {
								"Op": {},
								"Key": {},
								"Value": {},
								"SyncCount": {
									"type": "long"
								},
								"DeviceLastModifiedDate": {
									"type": "timestamp"
								}
							}
						}
					},
					"SyncSessionToken": {},
					"ClientContext": {
						"location": "header",
						"locationName": "x-amz-Client-Context"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Records": {
						"shape": "S1c"
					}
				}
			}
		}
	},
	"shapes": {
		"S8": {
			"type": "structure",
			"members": {
				"IdentityId": {},
				"DatasetName": {},
				"CreationDate": {
					"type": "timestamp"
				},
				"LastModifiedDate": {
					"type": "timestamp"
				},
				"LastModifiedBy": {},
				"DataStorage": {
					"type": "long"
				},
				"NumRecords": {
					"type": "long"
				}
			}
		},
		"Sg": {
			"type": "structure",
			"members": {
				"IdentityPoolId": {},
				"SyncSessionsCount": {
					"type": "long"
				},
				"DataStorage": {
					"type": "long"
				},
				"LastModifiedDate": {
					"type": "timestamp"
				}
			}
		},
		"Sq": {
			"type": "map",
			"key": {},
			"value": {}
		},
		"Sv": {
			"type": "structure",
			"members": {
				"ApplicationArns": {
					"type": "list",
					"member": {}
				},
				"RoleArn": {}
			}
		},
		"Sz": {
			"type": "structure",
			"members": {
				"StreamName": {},
				"RoleArn": {},
				"StreamingStatus": {}
			}
		},
		"S1c": {
			"type": "list",
			"member": {
				"type": "structure",
				"members": {
					"Key": {},
					"Value": {},
					"SyncCount": {
						"type": "long"
					},
					"LastModifiedDate": {
						"type": "timestamp"
					},
					"LastModifiedBy": {},
					"DeviceLastModifiedDate": {
						"type": "timestamp"
					}
				}
			}
		}
	},
	"examples": {}
};

/***/ }),
/* 178 */
/***/ (function(module, exports) {

module.exports = {
	"metadata": {
		"apiVersion": "2014-11-11",
		"endpointPrefix": "lambda",
		"serviceFullName": "AWS Lambda",
		"signatureVersion": "v4",
		"protocol": "rest-json"
	},
	"operations": {
		"AddEventSource": {
			"http": {
				"requestUri": "/2014-11-13/event-source-mappings/"
			},
			"input": {
				"type": "structure",
				"required": [
					"EventSource",
					"FunctionName",
					"Role"
				],
				"members": {
					"EventSource": {},
					"FunctionName": {},
					"Role": {},
					"BatchSize": {
						"type": "integer"
					},
					"Parameters": {
						"shape": "S6"
					}
				}
			},
			"output": {
				"shape": "S7"
			}
		},
		"DeleteFunction": {
			"http": {
				"method": "DELETE",
				"requestUri": "/2014-11-13/functions/{FunctionName}",
				"responseCode": 204
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					}
				}
			}
		},
		"GetEventSource": {
			"http": {
				"method": "GET",
				"requestUri": "/2014-11-13/event-source-mappings/{UUID}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"UUID"
				],
				"members": {
					"UUID": {
						"location": "uri",
						"locationName": "UUID"
					}
				}
			},
			"output": {
				"shape": "S7"
			}
		},
		"GetFunction": {
			"http": {
				"method": "GET",
				"requestUri": "/2014-11-13/functions/{FunctionName}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Configuration": {
						"shape": "Se"
					},
					"Code": {
						"type": "structure",
						"members": {
							"RepositoryType": {},
							"Location": {}
						}
					}
				}
			}
		},
		"GetFunctionConfiguration": {
			"http": {
				"method": "GET",
				"requestUri": "/2014-11-13/functions/{FunctionName}/configuration",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					}
				}
			},
			"output": {
				"shape": "Se"
			}
		},
		"InvokeAsync": {
			"http": {
				"requestUri": "/2014-11-13/functions/{FunctionName}/invoke-async/",
				"responseCode": 202
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"InvokeArgs"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"InvokeArgs": {
						"shape": "Sq"
					}
				},
				"payload": "InvokeArgs"
			},
			"output": {
				"type": "structure",
				"members": {
					"Status": {
						"location": "statusCode",
						"type": "integer"
					}
				}
			}
		},
		"ListEventSources": {
			"http": {
				"method": "GET",
				"requestUri": "/2014-11-13/event-source-mappings/",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"members": {
					"EventSourceArn": {
						"location": "querystring",
						"locationName": "EventSource"
					},
					"FunctionName": {
						"location": "querystring",
						"locationName": "FunctionName"
					},
					"Marker": {
						"location": "querystring",
						"locationName": "Marker"
					},
					"MaxItems": {
						"location": "querystring",
						"locationName": "MaxItems",
						"type": "integer"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"NextMarker": {},
					"EventSources": {
						"type": "list",
						"member": {
							"shape": "S7"
						}
					}
				}
			}
		},
		"ListFunctions": {
			"http": {
				"method": "GET",
				"requestUri": "/2014-11-13/functions/",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"members": {
					"Marker": {
						"location": "querystring",
						"locationName": "Marker"
					},
					"MaxItems": {
						"location": "querystring",
						"locationName": "MaxItems",
						"type": "integer"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"NextMarker": {},
					"Functions": {
						"type": "list",
						"member": {
							"shape": "Se"
						}
					}
				}
			}
		},
		"RemoveEventSource": {
			"http": {
				"method": "DELETE",
				"requestUri": "/2014-11-13/event-source-mappings/{UUID}",
				"responseCode": 204
			},
			"input": {
				"type": "structure",
				"required": [
					"UUID"
				],
				"members": {
					"UUID": {
						"location": "uri",
						"locationName": "UUID"
					}
				}
			}
		},
		"UpdateFunctionConfiguration": {
			"http": {
				"method": "PUT",
				"requestUri": "/2014-11-13/functions/{FunctionName}/configuration",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Role": {
						"location": "querystring",
						"locationName": "Role"
					},
					"Handler": {
						"location": "querystring",
						"locationName": "Handler"
					},
					"Description": {
						"location": "querystring",
						"locationName": "Description"
					},
					"Timeout": {
						"location": "querystring",
						"locationName": "Timeout",
						"type": "integer"
					},
					"MemorySize": {
						"location": "querystring",
						"locationName": "MemorySize",
						"type": "integer"
					}
				}
			},
			"output": {
				"shape": "Se"
			}
		},
		"UploadFunction": {
			"http": {
				"method": "PUT",
				"requestUri": "/2014-11-13/functions/{FunctionName}",
				"responseCode": 201
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"FunctionZip",
					"Runtime",
					"Role",
					"Handler",
					"Mode"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"FunctionZip": {
						"shape": "Sq"
					},
					"Runtime": {
						"location": "querystring",
						"locationName": "Runtime"
					},
					"Role": {
						"location": "querystring",
						"locationName": "Role"
					},
					"Handler": {
						"location": "querystring",
						"locationName": "Handler"
					},
					"Mode": {
						"location": "querystring",
						"locationName": "Mode"
					},
					"Description": {
						"location": "querystring",
						"locationName": "Description"
					},
					"Timeout": {
						"location": "querystring",
						"locationName": "Timeout",
						"type": "integer"
					},
					"MemorySize": {
						"location": "querystring",
						"locationName": "MemorySize",
						"type": "integer"
					}
				},
				"payload": "FunctionZip"
			},
			"output": {
				"shape": "Se"
			}
		}
	},
	"shapes": {
		"S6": {
			"type": "map",
			"key": {},
			"value": {}
		},
		"S7": {
			"type": "structure",
			"members": {
				"UUID": {},
				"BatchSize": {
					"type": "integer"
				},
				"EventSource": {},
				"FunctionName": {},
				"Parameters": {
					"shape": "S6"
				},
				"Role": {},
				"LastModified": {
					"type": "timestamp"
				},
				"IsActive": {
					"type": "boolean"
				},
				"Status": {}
			}
		},
		"Se": {
			"type": "structure",
			"members": {
				"FunctionName": {},
				"FunctionARN": {},
				"ConfigurationId": {},
				"Runtime": {},
				"Role": {},
				"Handler": {},
				"Mode": {},
				"CodeSize": {
					"type": "long"
				},
				"Description": {},
				"Timeout": {
					"type": "integer"
				},
				"MemorySize": {
					"type": "integer"
				},
				"LastModified": {
					"type": "timestamp"
				}
			}
		},
		"Sq": {
			"type": "blob",
			"streaming": true
		}
	}
};

/***/ }),
/* 179 */
/***/ (function(module, exports) {

module.exports = {
	"pagination": {
		"ListEventSources": {
			"input_token": "Marker",
			"output_token": "NextMarker",
			"limit_key": "MaxItems",
			"result_key": "EventSources"
		},
		"ListFunctions": {
			"input_token": "Marker",
			"output_token": "NextMarker",
			"limit_key": "MaxItems",
			"result_key": "Functions"
		}
	}
};

/***/ }),
/* 180 */
/***/ (function(module, exports) {

module.exports = {
	"version": "2.0",
	"metadata": {
		"apiVersion": "2015-03-31",
		"endpointPrefix": "lambda",
		"protocol": "rest-json",
		"serviceFullName": "AWS Lambda",
		"signatureVersion": "v4",
		"uid": "lambda-2015-03-31"
	},
	"operations": {
		"AddPermission": {
			"http": {
				"requestUri": "/2015-03-31/functions/{FunctionName}/policy",
				"responseCode": 201
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"StatementId",
					"Action",
					"Principal"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"StatementId": {},
					"Action": {},
					"Principal": {},
					"SourceArn": {},
					"SourceAccount": {},
					"EventSourceToken": {},
					"Qualifier": {
						"location": "querystring",
						"locationName": "Qualifier"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Statement": {}
				}
			}
		},
		"CreateAlias": {
			"http": {
				"requestUri": "/2015-03-31/functions/{FunctionName}/aliases",
				"responseCode": 201
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"Name",
					"FunctionVersion"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Name": {},
					"FunctionVersion": {},
					"Description": {}
				}
			},
			"output": {
				"shape": "Sg"
			}
		},
		"CreateEventSourceMapping": {
			"http": {
				"requestUri": "/2015-03-31/event-source-mappings/",
				"responseCode": 202
			},
			"input": {
				"type": "structure",
				"required": [
					"EventSourceArn",
					"FunctionName",
					"StartingPosition"
				],
				"members": {
					"EventSourceArn": {},
					"FunctionName": {},
					"Enabled": {
						"type": "boolean"
					},
					"BatchSize": {
						"type": "integer"
					},
					"StartingPosition": {},
					"StartingPositionTimestamp": {
						"type": "timestamp"
					}
				}
			},
			"output": {
				"shape": "Sn"
			}
		},
		"CreateFunction": {
			"http": {
				"requestUri": "/2015-03-31/functions",
				"responseCode": 201
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"Runtime",
					"Role",
					"Handler",
					"Code"
				],
				"members": {
					"FunctionName": {},
					"Runtime": {},
					"Role": {},
					"Handler": {},
					"Code": {
						"type": "structure",
						"members": {
							"ZipFile": {
								"shape": "St"
							},
							"S3Bucket": {},
							"S3Key": {},
							"S3ObjectVersion": {}
						}
					},
					"Description": {},
					"Timeout": {
						"type": "integer"
					},
					"MemorySize": {
						"type": "integer"
					},
					"Publish": {
						"type": "boolean"
					},
					"VpcConfig": {
						"shape": "S10"
					},
					"DeadLetterConfig": {
						"shape": "S15"
					},
					"Environment": {
						"shape": "S17"
					},
					"KMSKeyArn": {}
				}
			},
			"output": {
				"shape": "S1c"
			}
		},
		"DeleteAlias": {
			"http": {
				"method": "DELETE",
				"requestUri": "/2015-03-31/functions/{FunctionName}/aliases/{Name}",
				"responseCode": 204
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"Name"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Name": {
						"location": "uri",
						"locationName": "Name"
					}
				}
			}
		},
		"DeleteEventSourceMapping": {
			"http": {
				"method": "DELETE",
				"requestUri": "/2015-03-31/event-source-mappings/{UUID}",
				"responseCode": 202
			},
			"input": {
				"type": "structure",
				"required": [
					"UUID"
				],
				"members": {
					"UUID": {
						"location": "uri",
						"locationName": "UUID"
					}
				}
			},
			"output": {
				"shape": "Sn"
			}
		},
		"DeleteFunction": {
			"http": {
				"method": "DELETE",
				"requestUri": "/2015-03-31/functions/{FunctionName}",
				"responseCode": 204
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Qualifier": {
						"location": "querystring",
						"locationName": "Qualifier"
					}
				}
			}
		},
		"GetAccountSettings": {
			"http": {
				"method": "GET",
				"requestUri": "/2016-08-19/account-settings/",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"members": {}
			},
			"output": {
				"type": "structure",
				"members": {
					"AccountLimit": {
						"type": "structure",
						"members": {
							"TotalCodeSize": {
								"type": "long"
							},
							"CodeSizeUnzipped": {
								"type": "long"
							},
							"CodeSizeZipped": {
								"type": "long"
							},
							"ConcurrentExecutions": {
								"type": "integer"
							}
						}
					},
					"AccountUsage": {
						"type": "structure",
						"members": {
							"TotalCodeSize": {
								"type": "long"
							},
							"FunctionCount": {
								"type": "long"
							}
						}
					}
				}
			}
		},
		"GetAlias": {
			"http": {
				"method": "GET",
				"requestUri": "/2015-03-31/functions/{FunctionName}/aliases/{Name}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"Name"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Name": {
						"location": "uri",
						"locationName": "Name"
					}
				}
			},
			"output": {
				"shape": "Sg"
			}
		},
		"GetEventSourceMapping": {
			"http": {
				"method": "GET",
				"requestUri": "/2015-03-31/event-source-mappings/{UUID}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"UUID"
				],
				"members": {
					"UUID": {
						"location": "uri",
						"locationName": "UUID"
					}
				}
			},
			"output": {
				"shape": "Sn"
			}
		},
		"GetFunction": {
			"http": {
				"method": "GET",
				"requestUri": "/2015-03-31/functions/{FunctionName}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Qualifier": {
						"location": "querystring",
						"locationName": "Qualifier"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Configuration": {
						"shape": "S1c"
					},
					"Code": {
						"type": "structure",
						"members": {
							"RepositoryType": {},
							"Location": {}
						}
					}
				}
			}
		},
		"GetFunctionConfiguration": {
			"http": {
				"method": "GET",
				"requestUri": "/2015-03-31/functions/{FunctionName}/configuration",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Qualifier": {
						"location": "querystring",
						"locationName": "Qualifier"
					}
				}
			},
			"output": {
				"shape": "S1c"
			}
		},
		"GetPolicy": {
			"http": {
				"method": "GET",
				"requestUri": "/2015-03-31/functions/{FunctionName}/policy",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Qualifier": {
						"location": "querystring",
						"locationName": "Qualifier"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"Policy": {}
				}
			}
		},
		"Invoke": {
			"http": {
				"requestUri": "/2015-03-31/functions/{FunctionName}/invocations"
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"InvocationType": {
						"location": "header",
						"locationName": "X-Amz-Invocation-Type"
					},
					"LogType": {
						"location": "header",
						"locationName": "X-Amz-Log-Type"
					},
					"ClientContext": {
						"location": "header",
						"locationName": "X-Amz-Client-Context"
					},
					"Payload": {
						"shape": "St"
					},
					"Qualifier": {
						"location": "querystring",
						"locationName": "Qualifier"
					}
				},
				"payload": "Payload"
			},
			"output": {
				"type": "structure",
				"members": {
					"StatusCode": {
						"location": "statusCode",
						"type": "integer"
					},
					"FunctionError": {
						"location": "header",
						"locationName": "X-Amz-Function-Error"
					},
					"LogResult": {
						"location": "header",
						"locationName": "X-Amz-Log-Result"
					},
					"Payload": {
						"shape": "St"
					}
				},
				"payload": "Payload"
			}
		},
		"InvokeAsync": {
			"http": {
				"requestUri": "/2014-11-13/functions/{FunctionName}/invoke-async/",
				"responseCode": 202
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"InvokeArgs"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"InvokeArgs": {
						"type": "blob",
						"streaming": true
					}
				},
				"deprecated": true,
				"payload": "InvokeArgs"
			},
			"output": {
				"type": "structure",
				"members": {
					"Status": {
						"location": "statusCode",
						"type": "integer"
					}
				},
				"deprecated": true
			},
			"deprecated": true
		},
		"ListAliases": {
			"http": {
				"method": "GET",
				"requestUri": "/2015-03-31/functions/{FunctionName}/aliases",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"FunctionVersion": {
						"location": "querystring",
						"locationName": "FunctionVersion"
					},
					"Marker": {
						"location": "querystring",
						"locationName": "Marker"
					},
					"MaxItems": {
						"location": "querystring",
						"locationName": "MaxItems",
						"type": "integer"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"NextMarker": {},
					"Aliases": {
						"type": "list",
						"member": {
							"shape": "Sg"
						}
					}
				}
			}
		},
		"ListEventSourceMappings": {
			"http": {
				"method": "GET",
				"requestUri": "/2015-03-31/event-source-mappings/",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"members": {
					"EventSourceArn": {
						"location": "querystring",
						"locationName": "EventSourceArn"
					},
					"FunctionName": {
						"location": "querystring",
						"locationName": "FunctionName"
					},
					"Marker": {
						"location": "querystring",
						"locationName": "Marker"
					},
					"MaxItems": {
						"location": "querystring",
						"locationName": "MaxItems",
						"type": "integer"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"NextMarker": {},
					"EventSourceMappings": {
						"type": "list",
						"member": {
							"shape": "Sn"
						}
					}
				}
			}
		},
		"ListFunctions": {
			"http": {
				"method": "GET",
				"requestUri": "/2015-03-31/functions/",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"members": {
					"Marker": {
						"location": "querystring",
						"locationName": "Marker"
					},
					"MaxItems": {
						"location": "querystring",
						"locationName": "MaxItems",
						"type": "integer"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"NextMarker": {},
					"Functions": {
						"shape": "S2h"
					}
				}
			}
		},
		"ListVersionsByFunction": {
			"http": {
				"method": "GET",
				"requestUri": "/2015-03-31/functions/{FunctionName}/versions",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Marker": {
						"location": "querystring",
						"locationName": "Marker"
					},
					"MaxItems": {
						"location": "querystring",
						"locationName": "MaxItems",
						"type": "integer"
					}
				}
			},
			"output": {
				"type": "structure",
				"members": {
					"NextMarker": {},
					"Versions": {
						"shape": "S2h"
					}
				}
			}
		},
		"PublishVersion": {
			"http": {
				"requestUri": "/2015-03-31/functions/{FunctionName}/versions",
				"responseCode": 201
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"CodeSha256": {},
					"Description": {}
				}
			},
			"output": {
				"shape": "S1c"
			}
		},
		"RemovePermission": {
			"http": {
				"method": "DELETE",
				"requestUri": "/2015-03-31/functions/{FunctionName}/policy/{StatementId}",
				"responseCode": 204
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"StatementId"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"StatementId": {
						"location": "uri",
						"locationName": "StatementId"
					},
					"Qualifier": {
						"location": "querystring",
						"locationName": "Qualifier"
					}
				}
			}
		},
		"UpdateAlias": {
			"http": {
				"method": "PUT",
				"requestUri": "/2015-03-31/functions/{FunctionName}/aliases/{Name}",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName",
					"Name"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Name": {
						"location": "uri",
						"locationName": "Name"
					},
					"FunctionVersion": {},
					"Description": {}
				}
			},
			"output": {
				"shape": "Sg"
			}
		},
		"UpdateEventSourceMapping": {
			"http": {
				"method": "PUT",
				"requestUri": "/2015-03-31/event-source-mappings/{UUID}",
				"responseCode": 202
			},
			"input": {
				"type": "structure",
				"required": [
					"UUID"
				],
				"members": {
					"UUID": {
						"location": "uri",
						"locationName": "UUID"
					},
					"FunctionName": {},
					"Enabled": {
						"type": "boolean"
					},
					"BatchSize": {
						"type": "integer"
					}
				}
			},
			"output": {
				"shape": "Sn"
			}
		},
		"UpdateFunctionCode": {
			"http": {
				"method": "PUT",
				"requestUri": "/2015-03-31/functions/{FunctionName}/code",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"ZipFile": {
						"shape": "St"
					},
					"S3Bucket": {},
					"S3Key": {},
					"S3ObjectVersion": {},
					"Publish": {
						"type": "boolean"
					}
				}
			},
			"output": {
				"shape": "S1c"
			}
		},
		"UpdateFunctionConfiguration": {
			"http": {
				"method": "PUT",
				"requestUri": "/2015-03-31/functions/{FunctionName}/configuration",
				"responseCode": 200
			},
			"input": {
				"type": "structure",
				"required": [
					"FunctionName"
				],
				"members": {
					"FunctionName": {
						"location": "uri",
						"locationName": "FunctionName"
					},
					"Role": {},
					"Handler": {},
					"Description": {},
					"Timeout": {
						"type": "integer"
					},
					"MemorySize": {
						"type": "integer"
					},
					"VpcConfig": {
						"shape": "S10"
					},
					"Environment": {
						"shape": "S17"
					},
					"Runtime": {},
					"DeadLetterConfig": {
						"shape": "S15"
					},
					"KMSKeyArn": {}
				}
			},
			"output": {
				"shape": "S1c"
			}
		}
	},
	"shapes": {
		"Sg": {
			"type": "structure",
			"members": {
				"AliasArn": {},
				"Name": {},
				"FunctionVersion": {},
				"Description": {}
			}
		},
		"Sn": {
			"type": "structure",
			"members": {
				"UUID": {},
				"BatchSize": {
					"type": "integer"
				},
				"EventSourceArn": {},
				"FunctionArn": {},
				"LastModified": {
					"type": "timestamp"
				},
				"LastProcessingResult": {},
				"State": {},
				"StateTransitionReason": {}
			}
		},
		"St": {
			"type": "blob",
			"sensitive": true
		},
		"S10": {
			"type": "structure",
			"members": {
				"SubnetIds": {
					"shape": "S11"
				},
				"SecurityGroupIds": {
					"shape": "S13"
				}
			}
		},
		"S11": {
			"type": "list",
			"member": {}
		},
		"S13": {
			"type": "list",
			"member": {}
		},
		"S15": {
			"type": "structure",
			"members": {
				"TargetArn": {}
			}
		},
		"S17": {
			"type": "structure",
			"members": {
				"Variables": {
					"shape": "S18"
				}
			}
		},
		"S18": {
			"type": "map",
			"key": {
				"type": "string",
				"sensitive": true
			},
			"value": {
				"type": "string",
				"sensitive": true
			},
			"sensitive": true
		},
		"S1c": {
			"type": "structure",
			"members": {
				"FunctionName": {},
				"FunctionArn": {},
				"Runtime": {},
				"Role": {},
				"Handler": {},
				"CodeSize": {
					"type": "long"
				},
				"Description": {},
				"Timeout": {
					"type": "integer"
				},
				"MemorySize": {
					"type": "integer"
				},
				"LastModified": {},
				"CodeSha256": {},
				"Version": {},
				"VpcConfig": {
					"type": "structure",
					"members": {
						"SubnetIds": {
							"shape": "S11"
						},
						"SecurityGroupIds": {
							"shape": "S13"
						},
						"VpcId": {}
					}
				},
				"DeadLetterConfig": {
					"shape": "S15"
				},
				"Environment": {
					"type": "structure",
					"members": {
						"Variables": {
							"shape": "S18"
						},
						"Error": {
							"type": "structure",
							"members": {
								"ErrorCode": {},
								"Message": {
									"type": "string",
									"sensitive": true
								}
							}
						}
					}
				},
				"KMSKeyArn": {}
			}
		},
		"S2h": {
			"type": "list",
			"member": {
				"shape": "S1c"
			}
		}
	}
};

/***/ }),
/* 181 */
/***/ (function(module, exports) {

module.exports = {
	"pagination": {
		"ListEventSourceMappings": {
			"input_token": "Marker",
			"limit_key": "MaxItems",
			"output_token": "NextMarker",
			"result_key": "EventSourceMappings"
		},
		"ListFunctions": {
			"input_token": "Marker",
			"limit_key": "MaxItems",
			"output_token": "NextMarker",
			"result_key": "Functions"
		}
	}
};

/***/ }),
/* 182 */
/***/ (function(module, exports) {

module.exports = {
	"acm": {
		"name": "ACM",
		"cors": true
	},
	"apigateway": {
		"name": "APIGateway",
		"cors": true
	},
	"applicationautoscaling": {
		"prefix": "application-autoscaling",
		"name": "ApplicationAutoScaling",
		"cors": true
	},
	"appstream": {
		"name": "AppStream"
	},
	"autoscaling": {
		"name": "AutoScaling",
		"cors": true
	},
	"batch": {
		"name": "Batch"
	},
	"budgets": {
		"name": "Budgets"
	},
	"clouddirectory": {
		"name": "CloudDirectory"
	},
	"cloudformation": {
		"name": "CloudFormation",
		"cors": true
	},
	"cloudfront": {
		"name": "CloudFront",
		"versions": [
			"2013-05-12*",
			"2013-11-11*",
			"2014-05-31*",
			"2014-10-21*",
			"2014-11-06*",
			"2015-04-17*",
			"2015-07-27*",
			"2015-09-17*",
			"2016-01-13*",
			"2016-01-28*",
			"2016-08-01*",
			"2016-08-20*",
			"2016-09-07*",
			"2016-09-29*",
			"2016-11-25*"
		],
		"cors": true
	},
	"cloudhsm": {
		"name": "CloudHSM",
		"cors": true
	},
	"cloudsearch": {
		"name": "CloudSearch"
	},
	"cloudsearchdomain": {
		"name": "CloudSearchDomain"
	},
	"cloudtrail": {
		"name": "CloudTrail",
		"cors": true
	},
	"cloudwatch": {
		"prefix": "monitoring",
		"name": "CloudWatch",
		"cors": true
	},
	"cloudwatchevents": {
		"prefix": "events",
		"name": "CloudWatchEvents",
		"versions": [
			"2014-02-03*"
		],
		"cors": true
	},
	"cloudwatchlogs": {
		"prefix": "logs",
		"name": "CloudWatchLogs",
		"cors": true
	},
	"codebuild": {
		"name": "CodeBuild"
	},
	"codecommit": {
		"name": "CodeCommit",
		"cors": true
	},
	"codedeploy": {
		"name": "CodeDeploy",
		"cors": true
	},
	"codepipeline": {
		"name": "CodePipeline",
		"cors": true
	},
	"cognitoidentity": {
		"prefix": "cognito-identity",
		"name": "CognitoIdentity",
		"cors": true
	},
	"cognitoidentityserviceprovider": {
		"prefix": "cognito-idp",
		"name": "CognitoIdentityServiceProvider",
		"cors": true
	},
	"cognitosync": {
		"prefix": "cognito-sync",
		"name": "CognitoSync",
		"cors": true
	},
	"configservice": {
		"prefix": "config",
		"name": "ConfigService",
		"cors": true
	},
	"cur": {
		"name": "CUR",
		"cors": true
	},
	"datapipeline": {
		"name": "DataPipeline"
	},
	"devicefarm": {
		"name": "DeviceFarm",
		"cors": true
	},
	"directconnect": {
		"name": "DirectConnect",
		"cors": true
	},
	"directoryservice": {
		"prefix": "ds",
		"name": "DirectoryService"
	},
	"discovery": {
		"name": "Discovery"
	},
	"dms": {
		"name": "DMS"
	},
	"dynamodb": {
		"name": "DynamoDB",
		"cors": true
	},
	"dynamodbstreams": {
		"prefix": "streams.dynamodb",
		"name": "DynamoDBStreams",
		"cors": true
	},
	"ec2": {
		"name": "EC2",
		"versions": [
			"2013-06-15*",
			"2013-10-15*",
			"2014-02-01*",
			"2014-05-01*",
			"2014-06-15*",
			"2014-09-01*",
			"2014-10-01*",
			"2015-03-01*",
			"2015-04-15*",
			"2015-10-01*",
			"2016-04-01*",
			"2016-09-15*"
		],
		"cors": true
	},
	"ecr": {
		"name": "ECR",
		"cors": true
	},
	"ecs": {
		"name": "ECS",
		"cors": true
	},
	"efs": {
		"prefix": "elasticfilesystem",
		"name": "EFS"
	},
	"elasticache": {
		"name": "ElastiCache",
		"versions": [
			"2012-11-15*",
			"2014-03-24*",
			"2014-07-15*",
			"2014-09-30*"
		],
		"cors": true
	},
	"elasticbeanstalk": {
		"name": "ElasticBeanstalk",
		"cors": true
	},
	"elb": {
		"prefix": "elasticloadbalancing",
		"name": "ELB",
		"cors": true
	},
	"elbv2": {
		"prefix": "elasticloadbalancingv2",
		"name": "ELBv2",
		"cors": true
	},
	"emr": {
		"prefix": "elasticmapreduce",
		"name": "EMR",
		"cors": true
	},
	"es": {
		"name": "ES"
	},
	"elastictranscoder": {
		"name": "ElasticTranscoder",
		"cors": true
	},
	"firehose": {
		"name": "Firehose",
		"cors": true
	},
	"gamelift": {
		"name": "GameLift",
		"cors": true
	},
	"glacier": {
		"name": "Glacier"
	},
	"health": {
		"name": "Health"
	},
	"iam": {
		"name": "IAM"
	},
	"importexport": {
		"name": "ImportExport"
	},
	"inspector": {
		"name": "Inspector",
		"versions": [
			"2015-08-18*"
		],
		"cors": true
	},
	"iot": {
		"name": "Iot",
		"cors": true
	},
	"iotdata": {
		"prefix": "iot-data",
		"name": "IotData",
		"cors": true
	},
	"kinesis": {
		"name": "Kinesis",
		"cors": true
	},
	"kinesisanalytics": {
		"name": "KinesisAnalytics"
	},
	"kms": {
		"name": "KMS",
		"cors": true
	},
	"lambda": {
		"name": "Lambda",
		"cors": true
	},
	"lexruntime": {
		"prefix": "runtime.lex",
		"name": "LexRuntime",
		"cors": true
	},
	"lightsail": {
		"name": "Lightsail"
	},
	"machinelearning": {
		"name": "MachineLearning",
		"cors": true
	},
	"marketplacecommerceanalytics": {
		"name": "MarketplaceCommerceAnalytics",
		"cors": true
	},
	"marketplacemetering": {
		"prefix": "meteringmarketplace",
		"name": "MarketplaceMetering"
	},
	"mturk": {
		"prefix": "mturk-requester",
		"name": "MTurk",
		"cors": true
	},
	"mobileanalytics": {
		"name": "MobileAnalytics",
		"cors": true
	},
	"opsworks": {
		"name": "OpsWorks",
		"cors": true
	},
	"opsworkscm": {
		"name": "OpsWorksCM"
	},
	"organizations": {
		"name": "Organizations"
	},
	"pinpoint": {
		"name": "Pinpoint"
	},
	"polly": {
		"name": "Polly",
		"cors": true
	},
	"rds": {
		"name": "RDS",
		"versions": [
			"2014-09-01*"
		],
		"cors": true
	},
	"redshift": {
		"name": "Redshift",
		"cors": true
	},
	"rekognition": {
		"name": "Rekognition",
		"cors": true
	},
	"resourcegroupstaggingapi": {
		"name": "ResourceGroupsTaggingAPI"
	},
	"route53": {
		"name": "Route53",
		"cors": true
	},
	"route53domains": {
		"name": "Route53Domains",
		"cors": true
	},
	"s3": {
		"name": "S3",
		"dualstackAvailable": true,
		"cors": true
	},
	"servicecatalog": {
		"name": "ServiceCatalog",
		"cors": true
	},
	"ses": {
		"prefix": "email",
		"name": "SES",
		"cors": true
	},
	"shield": {
		"name": "Shield"
	},
	"simpledb": {
		"prefix": "sdb",
		"name": "SimpleDB"
	},
	"sms": {
		"name": "SMS"
	},
	"snowball": {
		"name": "Snowball"
	},
	"sns": {
		"name": "SNS",
		"cors": true
	},
	"sqs": {
		"name": "SQS",
		"cors": true
	},
	"ssm": {
		"name": "SSM",
		"cors": true
	},
	"storagegateway": {
		"name": "StorageGateway",
		"cors": true
	},
	"stepfunctions": {
		"prefix": "states",
		"name": "StepFunctions"
	},
	"sts": {
		"name": "STS",
		"cors": true
	},
	"support": {
		"name": "Support"
	},
	"swf": {
		"name": "SWF"
	},
	"xray": {
		"name": "XRay"
	},
	"waf": {
		"name": "WAF",
		"cors": true
	},
	"wafregional": {
		"prefix": "waf-regional",
		"name": "WAFRegional"
	},
	"workdocs": {
		"name": "WorkDocs",
		"cors": true
	},
	"workspaces": {
		"name": "WorkSpaces"
	}
};

/***/ }),
/* 183 */
/***/ (function(module, exports) {

module.exports = {
	"version": "2.0",
	"metadata": {
		"apiVersion": "2012-11-05",
		"endpointPrefix": "sqs",
		"protocol": "query",
		"serviceAbbreviation": "Amazon SQS",
		"serviceFullName": "Amazon Simple Queue Service",
		"signatureVersion": "v4",
		"uid": "sqs-2012-11-05",
		"xmlNamespace": "http://queue.amazonaws.com/doc/2012-11-05/"
	},
	"operations": {
		"AddPermission": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl",
					"Label",
					"AWSAccountIds",
					"Actions"
				],
				"members": {
					"QueueUrl": {},
					"Label": {},
					"AWSAccountIds": {
						"type": "list",
						"member": {
							"locationName": "AWSAccountId"
						},
						"flattened": true
					},
					"Actions": {
						"type": "list",
						"member": {
							"locationName": "ActionName"
						},
						"flattened": true
					}
				}
			}
		},
		"ChangeMessageVisibility": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl",
					"ReceiptHandle",
					"VisibilityTimeout"
				],
				"members": {
					"QueueUrl": {},
					"ReceiptHandle": {},
					"VisibilityTimeout": {
						"type": "integer"
					}
				}
			}
		},
		"ChangeMessageVisibilityBatch": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl",
					"Entries"
				],
				"members": {
					"QueueUrl": {},
					"Entries": {
						"type": "list",
						"member": {
							"locationName": "ChangeMessageVisibilityBatchRequestEntry",
							"type": "structure",
							"required": [
								"Id",
								"ReceiptHandle"
							],
							"members": {
								"Id": {},
								"ReceiptHandle": {},
								"VisibilityTimeout": {
									"type": "integer"
								}
							}
						},
						"flattened": true
					}
				}
			},
			"output": {
				"resultWrapper": "ChangeMessageVisibilityBatchResult",
				"type": "structure",
				"required": [
					"Successful",
					"Failed"
				],
				"members": {
					"Successful": {
						"type": "list",
						"member": {
							"locationName": "ChangeMessageVisibilityBatchResultEntry",
							"type": "structure",
							"required": [
								"Id"
							],
							"members": {
								"Id": {}
							}
						},
						"flattened": true
					},
					"Failed": {
						"shape": "Sd"
					}
				}
			}
		},
		"CreateQueue": {
			"input": {
				"type": "structure",
				"required": [
					"QueueName"
				],
				"members": {
					"QueueName": {},
					"Attributes": {
						"shape": "Sh",
						"locationName": "Attribute"
					}
				}
			},
			"output": {
				"resultWrapper": "CreateQueueResult",
				"type": "structure",
				"members": {
					"QueueUrl": {}
				}
			}
		},
		"DeleteMessage": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl",
					"ReceiptHandle"
				],
				"members": {
					"QueueUrl": {},
					"ReceiptHandle": {}
				}
			}
		},
		"DeleteMessageBatch": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl",
					"Entries"
				],
				"members": {
					"QueueUrl": {},
					"Entries": {
						"type": "list",
						"member": {
							"locationName": "DeleteMessageBatchRequestEntry",
							"type": "structure",
							"required": [
								"Id",
								"ReceiptHandle"
							],
							"members": {
								"Id": {},
								"ReceiptHandle": {}
							}
						},
						"flattened": true
					}
				}
			},
			"output": {
				"resultWrapper": "DeleteMessageBatchResult",
				"type": "structure",
				"required": [
					"Successful",
					"Failed"
				],
				"members": {
					"Successful": {
						"type": "list",
						"member": {
							"locationName": "DeleteMessageBatchResultEntry",
							"type": "structure",
							"required": [
								"Id"
							],
							"members": {
								"Id": {}
							}
						},
						"flattened": true
					},
					"Failed": {
						"shape": "Sd"
					}
				}
			}
		},
		"DeleteQueue": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl"
				],
				"members": {
					"QueueUrl": {}
				}
			}
		},
		"GetQueueAttributes": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl"
				],
				"members": {
					"QueueUrl": {},
					"AttributeNames": {
						"shape": "St"
					}
				}
			},
			"output": {
				"resultWrapper": "GetQueueAttributesResult",
				"type": "structure",
				"members": {
					"Attributes": {
						"shape": "Sh",
						"locationName": "Attribute"
					}
				}
			}
		},
		"GetQueueUrl": {
			"input": {
				"type": "structure",
				"required": [
					"QueueName"
				],
				"members": {
					"QueueName": {},
					"QueueOwnerAWSAccountId": {}
				}
			},
			"output": {
				"resultWrapper": "GetQueueUrlResult",
				"type": "structure",
				"members": {
					"QueueUrl": {}
				}
			}
		},
		"ListDeadLetterSourceQueues": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl"
				],
				"members": {
					"QueueUrl": {}
				}
			},
			"output": {
				"resultWrapper": "ListDeadLetterSourceQueuesResult",
				"type": "structure",
				"required": [
					"queueUrls"
				],
				"members": {
					"queueUrls": {
						"shape": "Sz"
					}
				}
			}
		},
		"ListQueues": {
			"input": {
				"type": "structure",
				"members": {
					"QueueNamePrefix": {}
				}
			},
			"output": {
				"resultWrapper": "ListQueuesResult",
				"type": "structure",
				"members": {
					"QueueUrls": {
						"shape": "Sz"
					}
				}
			}
		},
		"PurgeQueue": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl"
				],
				"members": {
					"QueueUrl": {}
				}
			}
		},
		"ReceiveMessage": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl"
				],
				"members": {
					"QueueUrl": {},
					"AttributeNames": {
						"shape": "St"
					},
					"MessageAttributeNames": {
						"type": "list",
						"member": {
							"locationName": "MessageAttributeName"
						},
						"flattened": true
					},
					"MaxNumberOfMessages": {
						"type": "integer"
					},
					"VisibilityTimeout": {
						"type": "integer"
					},
					"WaitTimeSeconds": {
						"type": "integer"
					},
					"ReceiveRequestAttemptId": {}
				}
			},
			"output": {
				"resultWrapper": "ReceiveMessageResult",
				"type": "structure",
				"members": {
					"Messages": {
						"type": "list",
						"member": {
							"locationName": "Message",
							"type": "structure",
							"members": {
								"MessageId": {},
								"ReceiptHandle": {},
								"MD5OfBody": {},
								"Body": {},
								"Attributes": {
									"locationName": "Attribute",
									"type": "map",
									"key": {
										"locationName": "Name"
									},
									"value": {
										"locationName": "Value"
									},
									"flattened": true
								},
								"MD5OfMessageAttributes": {},
								"MessageAttributes": {
									"shape": "S1b",
									"locationName": "MessageAttribute"
								}
							}
						},
						"flattened": true
					}
				}
			}
		},
		"RemovePermission": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl",
					"Label"
				],
				"members": {
					"QueueUrl": {},
					"Label": {}
				}
			}
		},
		"SendMessage": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl",
					"MessageBody"
				],
				"members": {
					"QueueUrl": {},
					"MessageBody": {},
					"DelaySeconds": {
						"type": "integer"
					},
					"MessageAttributes": {
						"shape": "S1b",
						"locationName": "MessageAttribute"
					},
					"MessageDeduplicationId": {},
					"MessageGroupId": {}
				}
			},
			"output": {
				"resultWrapper": "SendMessageResult",
				"type": "structure",
				"members": {
					"MD5OfMessageBody": {},
					"MD5OfMessageAttributes": {},
					"MessageId": {},
					"SequenceNumber": {}
				}
			}
		},
		"SendMessageBatch": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl",
					"Entries"
				],
				"members": {
					"QueueUrl": {},
					"Entries": {
						"type": "list",
						"member": {
							"locationName": "SendMessageBatchRequestEntry",
							"type": "structure",
							"required": [
								"Id",
								"MessageBody"
							],
							"members": {
								"Id": {},
								"MessageBody": {},
								"DelaySeconds": {
									"type": "integer"
								},
								"MessageAttributes": {
									"shape": "S1b",
									"locationName": "MessageAttribute"
								},
								"MessageDeduplicationId": {},
								"MessageGroupId": {}
							}
						},
						"flattened": true
					}
				}
			},
			"output": {
				"resultWrapper": "SendMessageBatchResult",
				"type": "structure",
				"required": [
					"Successful",
					"Failed"
				],
				"members": {
					"Successful": {
						"type": "list",
						"member": {
							"locationName": "SendMessageBatchResultEntry",
							"type": "structure",
							"required": [
								"Id",
								"MessageId",
								"MD5OfMessageBody"
							],
							"members": {
								"Id": {},
								"MessageId": {},
								"MD5OfMessageBody": {},
								"MD5OfMessageAttributes": {},
								"SequenceNumber": {}
							}
						},
						"flattened": true
					},
					"Failed": {
						"shape": "Sd"
					}
				}
			}
		},
		"SetQueueAttributes": {
			"input": {
				"type": "structure",
				"required": [
					"QueueUrl",
					"Attributes"
				],
				"members": {
					"QueueUrl": {},
					"Attributes": {
						"shape": "Sh",
						"locationName": "Attribute"
					}
				}
			}
		}
	},
	"shapes": {
		"Sd": {
			"type": "list",
			"member": {
				"locationName": "BatchResultErrorEntry",
				"type": "structure",
				"required": [
					"Id",
					"SenderFault",
					"Code"
				],
				"members": {
					"Id": {},
					"SenderFault": {
						"type": "boolean"
					},
					"Code": {},
					"Message": {}
				}
			},
			"flattened": true
		},
		"Sh": {
			"type": "map",
			"key": {
				"locationName": "Name"
			},
			"value": {
				"locationName": "Value"
			},
			"flattened": true,
			"locationName": "Attribute"
		},
		"St": {
			"type": "list",
			"member": {
				"locationName": "AttributeName"
			},
			"flattened": true
		},
		"Sz": {
			"type": "list",
			"member": {
				"locationName": "QueueUrl"
			},
			"flattened": true
		},
		"S1b": {
			"type": "map",
			"key": {
				"locationName": "Name"
			},
			"value": {
				"locationName": "Value",
				"type": "structure",
				"required": [
					"DataType"
				],
				"members": {
					"StringValue": {},
					"BinaryValue": {
						"type": "blob"
					},
					"StringListValues": {
						"flattened": true,
						"locationName": "StringListValue",
						"type": "list",
						"member": {
							"locationName": "StringListValue"
						}
					},
					"BinaryListValues": {
						"flattened": true,
						"locationName": "BinaryListValue",
						"type": "list",
						"member": {
							"locationName": "BinaryListValue",
							"type": "blob"
						}
					},
					"DataType": {}
				}
			},
			"flattened": true
		}
	}
};

/***/ }),
/* 184 */
/***/ (function(module, exports) {

module.exports = {
	"pagination": {
		"ListQueues": {
			"result_key": "QueueUrls"
		}
	}
};

/***/ }),
/* 185 */
/***/ (function(module, exports) {

module.exports = {
	"version": "2.0",
	"metadata": {
		"apiVersion": "2011-06-15",
		"endpointPrefix": "sts",
		"globalEndpoint": "sts.amazonaws.com",
		"protocol": "query",
		"serviceAbbreviation": "AWS STS",
		"serviceFullName": "AWS Security Token Service",
		"signatureVersion": "v4",
		"uid": "sts-2011-06-15",
		"xmlNamespace": "https://sts.amazonaws.com/doc/2011-06-15/"
	},
	"operations": {
		"AssumeRole": {
			"input": {
				"type": "structure",
				"required": [
					"RoleArn",
					"RoleSessionName"
				],
				"members": {
					"RoleArn": {},
					"RoleSessionName": {},
					"Policy": {},
					"DurationSeconds": {
						"type": "integer"
					},
					"ExternalId": {},
					"SerialNumber": {},
					"TokenCode": {}
				}
			},
			"output": {
				"resultWrapper": "AssumeRoleResult",
				"type": "structure",
				"members": {
					"Credentials": {
						"shape": "Sa"
					},
					"AssumedRoleUser": {
						"shape": "Sf"
					},
					"PackedPolicySize": {
						"type": "integer"
					}
				}
			}
		},
		"AssumeRoleWithSAML": {
			"input": {
				"type": "structure",
				"required": [
					"RoleArn",
					"PrincipalArn",
					"SAMLAssertion"
				],
				"members": {
					"RoleArn": {},
					"PrincipalArn": {},
					"SAMLAssertion": {},
					"Policy": {},
					"DurationSeconds": {
						"type": "integer"
					}
				}
			},
			"output": {
				"resultWrapper": "AssumeRoleWithSAMLResult",
				"type": "structure",
				"members": {
					"Credentials": {
						"shape": "Sa"
					},
					"AssumedRoleUser": {
						"shape": "Sf"
					},
					"PackedPolicySize": {
						"type": "integer"
					},
					"Subject": {},
					"SubjectType": {},
					"Issuer": {},
					"Audience": {},
					"NameQualifier": {}
				}
			}
		},
		"AssumeRoleWithWebIdentity": {
			"input": {
				"type": "structure",
				"required": [
					"RoleArn",
					"RoleSessionName",
					"WebIdentityToken"
				],
				"members": {
					"RoleArn": {},
					"RoleSessionName": {},
					"WebIdentityToken": {},
					"ProviderId": {},
					"Policy": {},
					"DurationSeconds": {
						"type": "integer"
					}
				}
			},
			"output": {
				"resultWrapper": "AssumeRoleWithWebIdentityResult",
				"type": "structure",
				"members": {
					"Credentials": {
						"shape": "Sa"
					},
					"SubjectFromWebIdentityToken": {},
					"AssumedRoleUser": {
						"shape": "Sf"
					},
					"PackedPolicySize": {
						"type": "integer"
					},
					"Provider": {},
					"Audience": {}
				}
			}
		},
		"DecodeAuthorizationMessage": {
			"input": {
				"type": "structure",
				"required": [
					"EncodedMessage"
				],
				"members": {
					"EncodedMessage": {}
				}
			},
			"output": {
				"resultWrapper": "DecodeAuthorizationMessageResult",
				"type": "structure",
				"members": {
					"DecodedMessage": {}
				}
			}
		},
		"GetCallerIdentity": {
			"input": {
				"type": "structure",
				"members": {}
			},
			"output": {
				"resultWrapper": "GetCallerIdentityResult",
				"type": "structure",
				"members": {
					"UserId": {},
					"Account": {},
					"Arn": {}
				}
			}
		},
		"GetFederationToken": {
			"input": {
				"type": "structure",
				"required": [
					"Name"
				],
				"members": {
					"Name": {},
					"Policy": {},
					"DurationSeconds": {
						"type": "integer"
					}
				}
			},
			"output": {
				"resultWrapper": "GetFederationTokenResult",
				"type": "structure",
				"members": {
					"Credentials": {
						"shape": "Sa"
					},
					"FederatedUser": {
						"type": "structure",
						"required": [
							"FederatedUserId",
							"Arn"
						],
						"members": {
							"FederatedUserId": {},
							"Arn": {}
						}
					},
					"PackedPolicySize": {
						"type": "integer"
					}
				}
			}
		},
		"GetSessionToken": {
			"input": {
				"type": "structure",
				"members": {
					"DurationSeconds": {
						"type": "integer"
					},
					"SerialNumber": {},
					"TokenCode": {}
				}
			},
			"output": {
				"resultWrapper": "GetSessionTokenResult",
				"type": "structure",
				"members": {
					"Credentials": {
						"shape": "Sa"
					}
				}
			}
		}
	},
	"shapes": {
		"Sa": {
			"type": "structure",
			"required": [
				"AccessKeyId",
				"SecretAccessKey",
				"SessionToken",
				"Expiration"
			],
			"members": {
				"AccessKeyId": {},
				"SecretAccessKey": {},
				"SessionToken": {},
				"Expiration": {
					"type": "timestamp"
				}
			}
		},
		"Sf": {
			"type": "structure",
			"required": [
				"AssumedRoleId",
				"Arn"
			],
			"members": {
				"AssumedRoleId": {},
				"Arn": {}
			}
		}
	}
};

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24);

var AWS = __webpack_require__(0);
if (typeof window !== 'undefined') window.AWS = AWS;
if (true) module.exports = AWS;
if (typeof self !== 'undefined') self.AWS = AWS;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24);
var AWS = __webpack_require__(0);
var Service = __webpack_require__(25);
var apiLoader = __webpack_require__(23);

apiLoader.services['cognitosync'] = {};
AWS.CognitoSync = Service.defineService('cognitosync', ['2014-06-30']);
Object.defineProperty(apiLoader.services['cognitosync'], '2014-06-30', {
  get: function get() {
    var model = __webpack_require__(177);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CognitoSync;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24);
var AWS = __webpack_require__(0);
var Service = __webpack_require__(25);
var apiLoader = __webpack_require__(23);

apiLoader.services['lambda'] = {};
AWS.Lambda = Service.defineService('lambda', ['2014-11-11', '2015-03-31']);
Object.defineProperty(apiLoader.services['lambda'], '2014-11-11', {
  get: function get() {
    var model = __webpack_require__(178);
    model.paginators = __webpack_require__(179).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['lambda'], '2015-03-31', {
  get: function get() {
    var model = __webpack_require__(180);
    model.paginators = __webpack_require__(181).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Lambda;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(24);
var AWS = __webpack_require__(0);
var Service = __webpack_require__(25);
var apiLoader = __webpack_require__(23);

apiLoader.services['sqs'] = {};
AWS.SQS = Service.defineService('sqs', ['2012-11-05']);
__webpack_require__(205);
Object.defineProperty(apiLoader.services['sqs'], '2012-11-05', {
  get: function get() {
    var model = __webpack_require__(183);
    model.paginators = __webpack_require__(184).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.SQS;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
__webpack_require__(96);
__webpack_require__(97);
var PromisesDependency;

/**
 * The main configuration class used by all service objects to set
 * the region, credentials, and other options for requests.
 *
 * By default, credentials and region settings are left unconfigured.
 * This should be configured by the application before using any
 * AWS service APIs.
 *
 * In order to set global configuration options, properties should
 * be assigned to the global {AWS.config} object.
 *
 * @see AWS.config
 *
 * @!group General Configuration Options
 *
 * @!attribute credentials
 *   @return [AWS.Credentials] the AWS credentials to sign requests with.
 *
 * @!attribute region
 *   @example Set the global region setting to us-west-2
 *     AWS.config.update({region: 'us-west-2'});
 *   @return [AWS.Credentials] The region to send service requests to.
 *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html
 *     A list of available endpoints for each AWS service
 *
 * @!attribute maxRetries
 *   @return [Integer] the maximum amount of retries to perform for a
 *     service request. By default this value is calculated by the specific
 *     service object that the request is being made to.
 *
 * @!attribute maxRedirects
 *   @return [Integer] the maximum amount of redirects to follow for a
 *     service request. Defaults to 10.
 *
 * @!attribute paramValidation
 *   @return [Boolean|map] whether input parameters should be validated against
 *     the operation description before sending the request. Defaults to true.
 *     Pass a map to enable any of the following specific validation features:
 *
 *     * **min** [Boolean] &mdash; Validates that a value meets the min
 *       constraint. This is enabled by default when paramValidation is set
 *       to `true`.
 *     * **max** [Boolean] &mdash; Validates that a value meets the max
 *       constraint.
 *     * **pattern** [Boolean] &mdash; Validates that a string value matches a
 *       regular expression.
 *     * **enum** [Boolean] &mdash; Validates that a string value matches one
 *       of the allowable enum values.
 *
 * @!attribute computeChecksums
 *   @return [Boolean] whether to compute checksums for payload bodies when
 *     the service accepts it (currently supported in S3 only).
 *
 * @!attribute convertResponseTypes
 *   @return [Boolean] whether types are converted when parsing response data.
 *     Currently only supported for JSON based services. Turning this off may
 *     improve performance on large response payloads. Defaults to `true`.
 *
 * @!attribute correctClockSkew
 *   @return [Boolean] whether to apply a clock skew correction and retry
 *     requests that fail because of an skewed client clock. Defaults to
 *     `false`.
 *
 * @!attribute sslEnabled
 *   @return [Boolean] whether SSL is enabled for requests
 *
 * @!attribute s3ForcePathStyle
 *   @return [Boolean] whether to force path style URLs for S3 objects
 *
 * @!attribute s3BucketEndpoint
 *   @note Setting this configuration option requires an `endpoint` to be
 *     provided explicitly to the service constructor.
 *   @return [Boolean] whether the provided endpoint addresses an individual
 *     bucket (false if it addresses the root API endpoint).
 *
 * @!attribute s3DisableBodySigning
 *   @return [Boolean] whether to disable S3 body signing when using signature version `v4`.
 *     Body signing can only be disabled when using https. Defaults to `true`.
 *
 * @!attribute useAccelerateEndpoint
 *   @note This configuration option is only compatible with S3 while accessing
 *     dns-compatible buckets.
 *   @return [Boolean] Whether to use the Accelerate endpoint with the S3 service.
 *     Defaults to `false`.
 *
 * @!attribute retryDelayOptions
 *   @example Set the base retry delay for all services to 300 ms
 *     AWS.config.update({retryDelayOptions: {base: 300}});
 *     // Delays with maxRetries = 3: 300, 600, 1200
 *   @example Set a custom backoff function to provide delay values on retries
 *     AWS.config.update({retryDelayOptions: {customBackoff: function(retryCount) {
 *       // returns delay in ms
 *     }}});
 *   @return [map] A set of options to configure the retry delay on retryable errors.
 *     Currently supported options are:
 *
 *     * **base** [Integer] &mdash; The base number of milliseconds to use in the
 *       exponential backoff for operation retries. Defaults to 100 ms for all services accept
 *       DynamoDB, where it defaults to 50ms.
 *     * **customBackoff ** [function] &mdash; A custom function that accepts a retry count
 *       and returns the amount of time to delay in milliseconds. The `base` option will be
 *       ignored if this option is supplied.
 *
 * @!attribute httpOptions
 *   @return [map] A set of options to pass to the low-level HTTP request.
 *     Currently supported options are:
 *
 *     * **proxy** [String] &mdash; the URL to proxy requests through
 *     * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
 *       HTTP requests with. Used for connection pooling. Defaults to the global
 *       agent (`http.globalAgent`) for non-SSL connections. Note that for
 *       SSL connections, a special Agent object is used in order to enable
 *       peer certificate verification. This feature is only supported in the
 *       Node.js environment.
 *     * **timeout** [Integer] &mdash; The number of milliseconds to wait before
 *       giving up on a connection attempt. Defaults to two minutes (120000).
 *     * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
 *       HTTP requests. Used in the browser environment only. Set to false to
 *       send requests synchronously. Defaults to true (async on).
 *     * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
 *       property of an XMLHttpRequest object. Used in the browser environment
 *       only. Defaults to false.
 * @!attribute logger
 *   @return [#write,#log] an object that responds to .write() (like a stream)
 *     or .log() (like the console object) in order to log information about
 *     requests
 *
 * @!attribute systemClockOffset
 *   @return [Number] an offset value in milliseconds to apply to all signing
 *     times. Use this to compensate for clock skew when your system may be
 *     out of sync with the service time. Note that this configuration option
 *     can only be applied to the global `AWS.config` object and cannot be
 *     overridden in service-specific configuration. Defaults to 0 milliseconds.
 *
 * @!attribute signatureVersion
 *   @return [String] the signature version to sign requests with (overriding
 *     the API configuration). Possible values are: 'v2', 'v3', 'v4'.
 *
 * @!attribute signatureCache
 *   @return [Boolean] whether the signature to sign requests with (overriding
 *     the API configuration) is cached. Only applies to the signature version 'v4'.
 *     Defaults to `true`.
 */
AWS.Config = AWS.util.inherit({
  /**
   * @!endgroup
   */

  /**
   * Creates a new configuration object. This is the object that passes
   * option data along to service requests, including credentials, security,
   * region information, and some service specific settings.
   *
   * @example Creating a new configuration object with credentials and region
   *   var config = new AWS.Config({
   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'
   *   });
   * @option options accessKeyId [String] your AWS access key ID.
   * @option options secretAccessKey [String] your AWS secret access key.
   * @option options sessionToken [AWS.Credentials] the optional AWS
   *   session token to sign requests with.
   * @option options credentials [AWS.Credentials] the AWS credentials
   *   to sign requests with. You can either specify this object, or
   *   specify the accessKeyId and secretAccessKey options directly.
   * @option options credentialProvider [AWS.CredentialProviderChain] the
   *   provider chain used to resolve credentials if no static `credentials`
   *   property is set.
   * @option options region [String] the region to send service requests to.
   *   See {region} for more information.
   * @option options maxRetries [Integer] the maximum amount of retries to
   *   attempt with a request. See {maxRetries} for more information.
   * @option options maxRedirects [Integer] the maximum amount of redirects to
   *   follow with a request. See {maxRedirects} for more information.
   * @option options sslEnabled [Boolean] whether to enable SSL for
   *   requests.
   * @option options paramValidation [Boolean|map] whether input parameters
   *   should be validated against the operation description before sending
   *   the request. Defaults to true. Pass a map to enable any of the
   *   following specific validation features:
   *
   *   * **min** [Boolean] &mdash; Validates that a value meets the min
   *     constraint. This is enabled by default when paramValidation is set
   *     to `true`.
   *   * **max** [Boolean] &mdash; Validates that a value meets the max
   *     constraint.
   *   * **pattern** [Boolean] &mdash; Validates that a string value matches a
   *     regular expression.
   *   * **enum** [Boolean] &mdash; Validates that a string value matches one
   *     of the allowable enum values.
   * @option options computeChecksums [Boolean] whether to compute checksums
   *   for payload bodies when the service accepts it (currently supported
   *   in S3 only)
   * @option options convertResponseTypes [Boolean] whether types are converted
   *     when parsing response data. Currently only supported for JSON based
   *     services. Turning this off may improve performance on large response
   *     payloads. Defaults to `true`.
   * @option options correctClockSkew [Boolean] whether to apply a clock skew
   *     correction and retry requests that fail because of an skewed client
   *     clock. Defaults to `false`.
   * @option options s3ForcePathStyle [Boolean] whether to force path
   *   style URLs for S3 objects.
   * @option options s3BucketEndpoint [Boolean] whether the provided endpoint
   *   addresses an individual bucket (false if it addresses the root API
   *   endpoint). Note that setting this configuration option requires an
   *   `endpoint` to be provided explicitly to the service constructor.
   * @option options s3DisableBodySigning [Boolean] whether S3 body signing
   *   should be disabled when using signature version `v4`. Body signing
   *   can only be disabled when using https. Defaults to `true`.
   *
   * @option options retryDelayOptions [map] A set of options to configure
   *   the retry delay on retryable errors. Currently supported options are:
   *
   *   * **base** [Integer] &mdash; The base number of milliseconds to use in the
   *     exponential backoff for operation retries. Defaults to 100 ms for all
   *     services accept DynamoDB, where it defaults to 50ms.
   *   * **customBackoff ** [function] &mdash; A custom function that accepts a retry count
   *     and returns the amount of time to delay in milliseconds. The `base` option will be
   *     ignored if this option is supplied.
   * @option options httpOptions [map] A set of options to pass to the low-level
   *   HTTP request. Currently supported options are:
   *
   *   * **proxy** [String] &mdash; the URL to proxy requests through
   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
   *     HTTP requests with. Used for connection pooling. Defaults to the global
   *     agent (`http.globalAgent`) for non-SSL connections. Note that for
   *     SSL connections, a special Agent object is used in order to enable
   *     peer certificate verification. This feature is only available in the
   *     Node.js environment.
   *   * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after
   *     failing to establish a connection with the server after
   *     `connectTimeout` milliseconds. This timeout has no effect once a socket
   *     connection has been established.
   *   * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout
   *     milliseconds of inactivity on the socket. Defaults to two minutes
   *     (120000).
   *   * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
   *     HTTP requests. Used in the browser environment only. Set to false to
   *     send requests synchronously. Defaults to true (async on).
   *   * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
   *     property of an XMLHttpRequest object. Used in the browser environment
   *     only. Defaults to false.
   * @option options apiVersion [String, Date] a String in YYYY-MM-DD format
   *   (or a date) that represents the latest possible API version that can be
   *   used in all services (unless overridden by `apiVersions`). Specify
   *   'latest' to use the latest possible version.
   * @option options apiVersions [map<String, String|Date>] a map of service
   *   identifiers (the lowercase service class name) with the API version to
   *   use when instantiating a service. Specify 'latest' for each individual
   *   that can use the latest available version.
   * @option options logger [#write,#log] an object that responds to .write()
   *   (like a stream) or .log() (like the console object) in order to log
   *   information about requests
   * @option options systemClockOffset [Number] an offset value in milliseconds
   *   to apply to all signing times. Use this to compensate for clock skew
   *   when your system may be out of sync with the service time. Note that
   *   this configuration option can only be applied to the global `AWS.config`
   *   object and cannot be overridden in service-specific configuration.
   *   Defaults to 0 milliseconds.
   * @option options signatureVersion [String] the signature version to sign
   *   requests with (overriding the API configuration). Possible values are:
   *   'v2', 'v3', 'v4'.
   * @option options signatureCache [Boolean] whether the signature to sign
   *   requests with (overriding the API configuration) is cached. Only applies
   *   to the signature version 'v4'. Defaults to `true`.
   */
  constructor: function Config(options) {
    if (options === undefined) options = {};
    options = this.extractCredentials(options);

    AWS.util.each.call(this, this.keys, function (key, value) {
      this.set(key, options[key], value);
    });
  },

  /**
   * @!group Managing Credentials
   */

  /**
   * Loads credentials from the configuration object. This is used internally
   * by the SDK to ensure that refreshable {Credentials} objects are properly
   * refreshed and loaded when sending a request. If you want to ensure that
   * your credentials are loaded prior to a request, you can use this method
   * directly to provide accurate credential data stored in the object.
   *
   * @note If you configure the SDK with static or environment credentials,
   *   the credential data should already be present in {credentials} attribute.
   *   This method is primarily necessary to load credentials from asynchronous
   *   sources, or sources that can refresh credentials periodically.
   * @example Getting your access key
   *   AWS.config.getCredentials(function(err) {
   *     if (err) console.log(err.stack); // credentials not loaded
   *     else console.log("Access Key:", AWS.config.credentials.accessKeyId);
   *   })
   * @callback callback function(err)
   *   Called when the {credentials} have been properly set on the configuration
   *   object.
   *
   *   @param err [Error] if this is set, credentials were not successfuly
   *     loaded and this error provides information why.
   * @see credentials
   * @see Credentials
   */
  getCredentials: function getCredentials(callback) {
    var self = this;

    function finish(err) {
      callback(err, err ? null : self.credentials);
    }

    function credError(msg, err) {
      return new AWS.util.error(err || new Error(), {
        code: 'CredentialsError',
        message: msg,
        name: 'CredentialsError'
      });
    }

    function getAsyncCredentials() {
      self.credentials.get(function(err) {
        if (err) {
          var msg = 'Could not load credentials from ' +
            self.credentials.constructor.name;
          err = credError(msg, err);
        }
        finish(err);
      });
    }

    function getStaticCredentials() {
      var err = null;
      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {
        err = credError('Missing credentials');
      }
      finish(err);
    }

    if (self.credentials) {
      if (typeof self.credentials.get === 'function') {
        getAsyncCredentials();
      } else { // static credentials
        getStaticCredentials();
      }
    } else if (self.credentialProvider) {
      self.credentialProvider.resolve(function(err, creds) {
        if (err) {
          err = credError('Could not load credentials from any providers', err);
        }
        self.credentials = creds;
        finish(err);
      });
    } else {
      finish(credError('No credentials to load'));
    }
  },

  /**
   * @!group Loading and Setting Configuration Options
   */

  /**
   * @overload update(options, allowUnknownKeys = false)
   *   Updates the current configuration object with new options.
   *
   *   @example Update maxRetries property of a configuration object
   *     config.update({maxRetries: 10});
   *   @param [Object] options a map of option keys and values.
   *   @param [Boolean] allowUnknownKeys whether unknown keys can be set on
   *     the configuration object. Defaults to `false`.
   *   @see constructor
   */
  update: function update(options, allowUnknownKeys) {
    allowUnknownKeys = allowUnknownKeys || false;
    options = this.extractCredentials(options);
    AWS.util.each.call(this, options, function (key, value) {
      if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) ||
          AWS.Service.hasService(key)) {
        this.set(key, value);
      }
    });
  },

  /**
   * Loads configuration data from a JSON file into this config object.
   * @note Loading configuration will reset all existing configuration
   *   on the object.
   * @!macro nobrowser
   * @param path [String] the path relative to your process's current
   *    working directory to load configuration from.
   * @return [AWS.Config] the same configuration object
   */
  loadFromPath: function loadFromPath(path) {
    this.clear();

    var options = JSON.parse(AWS.util.readFileSync(path));
    var fileSystemCreds = new AWS.FileSystemCredentials(path);
    var chain = new AWS.CredentialProviderChain();
    chain.providers.unshift(fileSystemCreds);
    chain.resolve(function (err, creds) {
      if (err) throw err;
      else options.credentials = creds;
    });

    this.constructor(options);

    return this;
  },

  /**
   * Clears configuration data on this object
   *
   * @api private
   */
  clear: function clear() {
    /*jshint forin:false */
    AWS.util.each.call(this, this.keys, function (key) {
      delete this[key];
    });

    // reset credential provider
    this.set('credentials', undefined);
    this.set('credentialProvider', undefined);
  },

  /**
   * Sets a property on the configuration object, allowing for a
   * default value
   * @api private
   */
  set: function set(property, value, defaultValue) {
    if (value === undefined) {
      if (defaultValue === undefined) {
        defaultValue = this.keys[property];
      }
      if (typeof defaultValue === 'function') {
        this[property] = defaultValue.call(this);
      } else {
        this[property] = defaultValue;
      }
    } else if (property === 'httpOptions' && this[property]) {
      // deep merge httpOptions
      this[property] = AWS.util.merge(this[property], value);
    } else {
      this[property] = value;
    }
  },

  /**
   * All of the keys with their default values.
   *
   * @constant
   * @api private
   */
  keys: {
    credentials: null,
    credentialProvider: null,
    region: null,
    logger: null,
    apiVersions: {},
    apiVersion: null,
    endpoint: undefined,
    httpOptions: {
      timeout: 120000
    },
    maxRetries: undefined,
    maxRedirects: 10,
    paramValidation: true,
    sslEnabled: true,
    s3ForcePathStyle: false,
    s3BucketEndpoint: false,
    s3DisableBodySigning: true,
    computeChecksums: true,
    convertResponseTypes: true,
    correctClockSkew: false,
    customUserAgent: null,
    dynamoDbCrc32: true,
    systemClockOffset: 0,
    signatureVersion: null,
    signatureCache: true,
    retryDelayOptions: {},
    useAccelerateEndpoint: false
  },

  /**
   * Extracts accessKeyId, secretAccessKey and sessionToken
   * from a configuration hash.
   *
   * @api private
   */
  extractCredentials: function extractCredentials(options) {
    if (options.accessKeyId && options.secretAccessKey) {
      options = AWS.util.copy(options);
      options.credentials = new AWS.Credentials(options);
    }
    return options;
  },

  /**
   * Sets the promise dependency the SDK will use wherever Promises are returned.
   * Passing `null` will force the SDK to use native Promises if they are available.
   * If native Promises are not available, passing `null` will have no effect.
   * @param [Constructor] dep A reference to a Promise constructor
   */
  setPromisesDependency: function setPromisesDependency(dep) {
    PromisesDependency = dep;
    // if null was passed in, we should try to use native promises
    if (dep === null && typeof Promise === 'function') {
      PromisesDependency = Promise;
    }
    var constructors = [AWS.Request, AWS.Credentials, AWS.CredentialProviderChain];
    if (AWS.S3 && AWS.S3.ManagedUpload) constructors.push(AWS.S3.ManagedUpload);
    AWS.util.addPromises(constructors, PromisesDependency);
  },

  /**
   * Gets the promise dependency set by `AWS.config.setPromisesDependency`.
   */
  getPromisesDependency: function getPromisesDependency() {
    return PromisesDependency;
  }
});

/**
 * @return [AWS.Config] The global configuration object singleton instance
 * @readonly
 * @see AWS.Config
 */
AWS.config = new AWS.Config();


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var CognitoIdentity = __webpack_require__(95);
var STS = __webpack_require__(44);

/**
 * Represents credentials retrieved from STS Web Identity Federation using
 * the Amazon Cognito Identity service.
 *
 * By default this provider gets credentials using the
 * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which
 * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito
 * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to
 * obtain an `IdentityId`. If the identity or identity pool is not configured in
 * the Amazon Cognito Console to use IAM roles with the appropriate permissions,
 * then additionally a `RoleArn` is required containing the ARN of the IAM trust
 * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`
 * is provided, then this provider gets credentials using the
 * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an
 * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.
 *
 * In addition, if this credential provider is used to provide authenticated
 * login, the `Logins` map may be set to the tokens provided by the respective
 * identity providers. See {constructor} for an example on creating a credentials
 * object with proper property values.
 *
 * ## Refreshing Credentials from Identity Service
 *
 * In addition to AWS credentials expiring after a given amount of time, the
 * login token from the identity provider will also expire. Once this token
 * expires, it will not be usable to refresh AWS credentials, and another
 * token will be needed. The SDK does not manage refreshing of the token value,
 * but this can be done through a "refresh token" supported by most identity
 * providers. Consult the documentation for the identity provider for refreshing
 * tokens. Once the refreshed token is acquired, you should make sure to update
 * this new token in the credentials object's {params} property. The following
 * code will update the WebIdentityToken, assuming you have retrieved an updated
 * token from the identity provider:
 *
 * ```javascript
 * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;
 * ```
 *
 * Future calls to `credentials.refresh()` will now use the new token.
 *
 * @!attribute params
 *   @return [map] the map of params passed to
 *     {AWS.CognitoIdentity.getId},
 *     {AWS.CognitoIdentity.getOpenIdToken}, and
 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
 *     `params.WebIdentityToken` property.
 * @!attribute data
 *   @return [map] the raw data response from the call to
 *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or
 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
 *     access to other properties from the response.
 * @!attribute identityId
 *   @return [String] the Cognito ID returned by the last call to
 *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual
 *     final resolved identity ID from Amazon Cognito.
 */
AWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * @api private
   */
  localStorageKey: {
    id: 'aws.cognito.identity-id.',
    providers: 'aws.cognito.identity-providers.'
  },

  /**
   * Creates a new credentials object.
   * @example Creating a new credentials object
   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({
   *
   *     // either IdentityPoolId or IdentityId is required
   *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)
   *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity
   *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)
   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',
   *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'
   *
   *     // optional, only necessary when the identity pool is not configured
   *     // to use IAM roles in the Amazon Cognito Console
   *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)
   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',
   *
   *     // optional tokens, used for authenticated login
   *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)
   *     Logins: {
   *       'graph.facebook.com': 'FBTOKEN',
   *       'www.amazon.com': 'AMAZONTOKEN',
   *       'accounts.google.com': 'GOOGLETOKEN',
   *       'api.twitter.com': 'TWITTERTOKEN',
   *       'www.digits.com': 'DIGITSTOKEN'
   *     },
   *
   *     // optional name, defaults to web-identity
   *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)
   *     RoleSessionName: 'web',
   *
   *     // optional, only necessary when application runs in a browser
   *     // and multiple users are signed in at once, used for caching
   *     LoginId: 'example@gmail.com'
   *
   *   }, {
   *      // optionally provide configuration to apply to the underlying service clients
   *      // if configuration is not provided, then configuration will be pulled from AWS.config
   *
   *      // region should match the region your identity pool is located in
   *      region: 'us-east-1',
   *
   *      // specify timeout options
   *      httpOptions: {
   *        timeout: 100
   *      }
   *   });
   * @see AWS.CognitoIdentity.getId
   * @see AWS.CognitoIdentity.getCredentialsForIdentity
   * @see AWS.STS.assumeRoleWithWebIdentity
   * @see AWS.CognitoIdentity.getOpenIdToken
   * @see AWS.Config
   * @note If a region is not provided in the global AWS.config, or
   *   specified in the `clientConfig` to the CognitoIdentityCredentials
   *   constructor, you may encounter a 'Missing credentials in config' error
   *   when calling making a service call.
   */
  constructor: function CognitoIdentityCredentials(params, clientConfig) {
    AWS.Credentials.call(this);
    this.expired = true;
    this.params = params;
    this.data = null;
    this._identityId = null;
    this._clientConfig = AWS.util.copy(clientConfig || {});
    this.loadCachedId();
    var self = this;
    Object.defineProperty(this, 'identityId', {
      get: function() {
        self.loadCachedId();
        return self._identityId || self.params.IdentityId;
      },
      set: function(identityId) {
        self._identityId = identityId;
      }
    });
  },

  /**
   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},
   * or {AWS.STS.assumeRoleWithWebIdentity}.
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see AWS.Credentials.get
   */
  refresh: function refresh(callback) {
    var self = this;
    self.createClients();
    self.data = null;
    self._identityId = null;
    self.getId(function(err) {
      if (!err) {
        if (!self.params.RoleArn) {
          self.getCredentialsForIdentity(callback);
        } else {
          self.getCredentialsFromSTS(callback);
        }
      } else {
        self.clearIdOnNotAuthorized(err);
        callback(err);
      }
    });
  },

  /**
   * Clears the cached Cognito ID associated with the currently configured
   * identity pool ID. Use this to manually invalidate your cache if
   * the identity pool ID was deleted.
   */
  clearCachedId: function clearCache() {
    this._identityId = null;
    delete this.params.IdentityId;

    var poolId = this.params.IdentityPoolId;
    var loginId = this.params.LoginId || '';
    delete this.storage[this.localStorageKey.id + poolId + loginId];
    delete this.storage[this.localStorageKey.providers + poolId + loginId];
  },

  /**
   * @api private
   */
  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {
    var self = this;
    if (err.code == 'NotAuthorizedException') {
      self.clearCachedId();
    }
  },

  /**
   * Retrieves a Cognito ID, loading from cache if it was already retrieved
   * on this device.
   *
   * @callback callback function(err, identityId)
   *   @param err [Error, null] an error object if the call failed or null if
   *     it succeeded.
   *   @param identityId [String, null] if successful, the callback will return
   *     the Cognito ID.
   * @note If not loaded explicitly, the Cognito ID is loaded and stored in
   *   localStorage in the browser environment of a device.
   * @api private
   */
  getId: function getId(callback) {
    var self = this;
    if (typeof self.params.IdentityId === 'string') {
      return callback(null, self.params.IdentityId);
    }

    self.cognito.getId(function(err, data) {
      if (!err && data.IdentityId) {
        self.params.IdentityId = data.IdentityId;
        callback(null, data.IdentityId);
      } else {
        callback(err);
      }
    });
  },


  /**
   * @api private
   */
  loadCredentials: function loadCredentials(data, credentials) {
    if (!data || !credentials) return;
    credentials.expired = false;
    credentials.accessKeyId = data.Credentials.AccessKeyId;
    credentials.secretAccessKey = data.Credentials.SecretKey;
    credentials.sessionToken = data.Credentials.SessionToken;
    credentials.expireTime = data.Credentials.Expiration;
  },

  /**
   * @api private
   */
  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {
    var self = this;
    self.cognito.getCredentialsForIdentity(function(err, data) {
      if (!err) {
        self.cacheId(data);
        self.data = data;
        self.loadCredentials(self.data, self);
      } else {
        self.clearIdOnNotAuthorized(err);
      }
      callback(err);
    });
  },

  /**
   * @api private
   */
  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {
    var self = this;
    self.cognito.getOpenIdToken(function(err, data) {
      if (!err) {
        self.cacheId(data);
        self.params.WebIdentityToken = data.Token;
        self.webIdentityCredentials.refresh(function(webErr) {
          if (!webErr) {
            self.data = self.webIdentityCredentials.data;
            self.sts.credentialsFrom(self.data, self);
          }
          callback(webErr);
        });
      } else {
        self.clearIdOnNotAuthorized(err);
        callback(err);
      }
    });
  },

  /**
   * @api private
   */
  loadCachedId: function loadCachedId() {
    var self = this;

    // in the browser we source default IdentityId from localStorage
    if (AWS.util.isBrowser() && !self.params.IdentityId) {
      var id = self.getStorage('id');
      if (id && self.params.Logins) {
        var actualProviders = Object.keys(self.params.Logins);
        var cachedProviders =
          (self.getStorage('providers') || '').split(',');

        // only load ID if at least one provider used this ID before
        var intersect = cachedProviders.filter(function(n) {
          return actualProviders.indexOf(n) !== -1;
        });
        if (intersect.length !== 0) {
          self.params.IdentityId = id;
        }
      } else if (id) {
        self.params.IdentityId = id;
      }
    }
  },

  /**
   * @api private
   */
  createClients: function() {
    var clientConfig = this._clientConfig;
    this.webIdentityCredentials = this.webIdentityCredentials ||
      new AWS.WebIdentityCredentials(this.params, clientConfig);
    if (!this.cognito) {
      var cognitoConfig = AWS.util.merge({}, clientConfig);
      cognitoConfig.params = this.params;
      this.cognito = new CognitoIdentity(cognitoConfig);
    }
    this.sts = this.sts || new STS(clientConfig);
  },

  /**
   * @api private
   */
  cacheId: function cacheId(data) {
    this._identityId = data.IdentityId;
    this.params.IdentityId = this._identityId;

    // cache this IdentityId in browser localStorage if possible
    if (AWS.util.isBrowser()) {
      this.setStorage('id', data.IdentityId);

      if (this.params.Logins) {
        this.setStorage('providers', Object.keys(this.params.Logins).join(','));
      }
    }
  },

  /**
   * @api private
   */
  getStorage: function getStorage(key) {
    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];
  },

  /**
   * @api private
   */
  setStorage: function setStorage(key, val) {
    try {
      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;
    } catch (_) {}
  },

  /**
   * @api private
   */
  storage: (function() {
    try {
      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?
          window.localStorage : {};

      // Test set/remove which would throw an error in Safari's private browsing
      storage['aws.test-storage'] = 'foobar';
      delete storage['aws.test-storage'];

      return storage;
    } catch (_) {
      return {};
    }
  })()
});


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var STS = __webpack_require__(44);

/**
 * Represents credentials retrieved from STS SAML support.
 *
 * By default this provider gets credentials using the
 * {AWS.STS.assumeRoleWithSAML} service operation. This operation
 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
 * application for which credentials will be given, as well as a `PrincipalArn`
 * representing the ARN for the SAML identity provider. In addition, the
 * `SAMLAssertion` must be set to the token provided by the identity
 * provider. See {constructor} for an example on creating a credentials
 * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.
 *
 * ## Refreshing Credentials from Identity Service
 *
 * In addition to AWS credentials expiring after a given amount of time, the
 * login token from the identity provider will also expire. Once this token
 * expires, it will not be usable to refresh AWS credentials, and another
 * token will be needed. The SDK does not manage refreshing of the token value,
 * but this can be done through a "refresh token" supported by most identity
 * providers. Consult the documentation for the identity provider for refreshing
 * tokens. Once the refreshed token is acquired, you should make sure to update
 * this new token in the credentials object's {params} property. The following
 * code will update the SAMLAssertion, assuming you have retrieved an updated
 * token from the identity provider:
 *
 * ```javascript
 * AWS.config.credentials.params.SAMLAssertion = updatedToken;
 * ```
 *
 * Future calls to `credentials.refresh()` will now use the new token.
 *
 * @!attribute params
 *   @return [map] the map of params passed to
 *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the
 *     `params.SAMLAssertion` property.
 */
AWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new credentials object.
   * @param (see AWS.STS.assumeRoleWithSAML)
   * @example Creating a new credentials object
   *   AWS.config.credentials = new AWS.SAMLCredentials({
   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',
   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',
   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP
   *   });
   * @see AWS.STS.assumeRoleWithSAML
   */
  constructor: function SAMLCredentials(params) {
    AWS.Credentials.call(this);
    this.expired = true;
    this.params = params;
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    var self = this;
    self.createClients();
    if (!callback) callback = function(err) { if (err) throw err; };

    self.service.assumeRoleWithSAML(function (err, data) {
      if (!err) {
        self.service.credentialsFrom(data, self);
      }
      callback(err);
    });
  },

  /**
   * @api private
   */
  createClients: function() {
    this.service = this.service || new STS({params: this.params});
  }

});


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var STS = __webpack_require__(44);

/**
 * Represents temporary credentials retrieved from {AWS.STS}. Without any
 * extra parameters, credentials will be fetched from the
 * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the
 * {AWS.STS.assumeRole} operation will be used to fetch credentials for the
 * role instead.
 *
 * To setup temporary credentials, configure a set of master credentials
 * using the standard credentials providers (environment, EC2 instance metadata,
 * or from the filesystem), then set the global credentials to a new
 * temporary credentials object:
 *
 * ```javascript
 * // Note that environment credentials are loaded by default,
 * // the following line is shown for clarity:
 * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');
 *
 * // Now set temporary credentials seeded from the master credentials
 * AWS.config.credentials = new AWS.TemporaryCredentials();
 *
 * // subsequent requests will now use temporary credentials from AWS STS.
 * new AWS.S3().listBucket(function(err, data) { ... });
 * ```
 *
 * @!attribute masterCredentials
 *   @return [AWS.Credentials] the master (non-temporary) credentials used to
 *     get and refresh temporary credentials from AWS STS.
 * @note (see constructor)
 */
AWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new temporary credentials object.
   *
   * @note In order to create temporary credentials, you first need to have
   *   "master" credentials configured in {AWS.Config.credentials}. These
   *   master credentials are necessary to retrieve the temporary credentials,
   *   as well as refresh the credentials when they expire.
   * @param params [map] a map of options that are passed to the
   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.
   *   If a `RoleArn` parameter is passed in, credentials will be based on the
   *   IAM role.
   * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials
   *  used to get and refresh temporary credentials from AWS STS.
   * @example Creating a new credentials object for generic temporary credentials
   *   AWS.config.credentials = new AWS.TemporaryCredentials();
   * @example Creating a new credentials object for an IAM role
   *   AWS.config.credentials = new AWS.TemporaryCredentials({
   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',
   *   });
   * @see AWS.STS.assumeRole
   * @see AWS.STS.getSessionToken
   */
  constructor: function TemporaryCredentials(params, masterCredentials) {
    AWS.Credentials.call(this);
    this.loadMasterCredentials(masterCredentials);
    this.expired = true;

    this.params = params || {};
    if (this.params.RoleArn) {
      this.params.RoleSessionName =
        this.params.RoleSessionName || 'temporary-credentials';
    }
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRole} or
   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed
   * to the credentials {constructor}.
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    var self = this;
    self.createClients();
    if (!callback) callback = function(err) { if (err) throw err; };

    self.masterCredentials.get(function() {
      self.service.config.credentials = self.masterCredentials;
      var operation = self.params.RoleArn ?
        self.service.assumeRole : self.service.getSessionToken;
      operation.call(self.service, function (err, data) {
        if (!err) {
          self.service.credentialsFrom(data, self);
        }
        callback(err);
      });
    });
  },

  /**
   * @api private
   */
  loadMasterCredentials: function loadMasterCredentials(masterCredentials) {
    this.masterCredentials = masterCredentials || AWS.config.credentials;
    while (this.masterCredentials.masterCredentials) {
      this.masterCredentials = this.masterCredentials.masterCredentials;
    }

    if (typeof this.masterCredentials.get !== 'function') {
      this.masterCredentials = new AWS.Credentials(this.masterCredentials);
    }
  },

  /**
   * @api private
   */
  createClients: function() {
    this.service = this.service || new STS({params: this.params});
  }

});


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var STS = __webpack_require__(44);

/**
 * Represents credentials retrieved from STS Web Identity Federation support.
 *
 * By default this provider gets credentials using the
 * {AWS.STS.assumeRoleWithWebIdentity} service operation. This operation
 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
 * application for which credentials will be given. In addition, the
 * `WebIdentityToken` must be set to the token provided by the identity
 * provider. See {constructor} for an example on creating a credentials
 * object with proper `RoleArn` and `WebIdentityToken` values.
 *
 * ## Refreshing Credentials from Identity Service
 *
 * In addition to AWS credentials expiring after a given amount of time, the
 * login token from the identity provider will also expire. Once this token
 * expires, it will not be usable to refresh AWS credentials, and another
 * token will be needed. The SDK does not manage refreshing of the token value,
 * but this can be done through a "refresh token" supported by most identity
 * providers. Consult the documentation for the identity provider for refreshing
 * tokens. Once the refreshed token is acquired, you should make sure to update
 * this new token in the credentials object's {params} property. The following
 * code will update the WebIdentityToken, assuming you have retrieved an updated
 * token from the identity provider:
 *
 * ```javascript
 * AWS.config.credentials.params.WebIdentityToken = updatedToken;
 * ```
 *
 * Future calls to `credentials.refresh()` will now use the new token.
 *
 * @!attribute params
 *   @return [map] the map of params passed to
 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
 *     `params.WebIdentityToken` property.
 * @!attribute data
 *   @return [map] the raw data response from the call to
 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
 *     access to other properties from the response.
 */
AWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new credentials object.
   * @param (see AWS.STS.assumeRoleWithWebIdentity)
   * @example Creating a new credentials object
   *   AWS.config.credentials = new AWS.WebIdentityCredentials({
   *     RoleArn: 'arn:aws:iam::1234567890:role/WebIdentity',
   *     WebIdentityToken: 'ABCDEFGHIJKLMNOP', // token from identity service
   *     RoleSessionName: 'web' // optional name, defaults to web-identity
   *   }, {
   *     // optionally provide configuration to apply to the underlying AWS.STS service client
   *     // if configuration is not provided, then configuration will be pulled from AWS.config
   *
   *     // specify timeout options
   *     httpOptions: {
   *       timeout: 100
   *     }
   *   });
   * @see AWS.STS.assumeRoleWithWebIdentity
   * @see AWS.Config
   */
  constructor: function WebIdentityCredentials(params, clientConfig) {
    AWS.Credentials.call(this);
    this.expired = true;
    this.params = params;
    this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';
    this.data = null;
    this._clientConfig = AWS.util.copy(clientConfig || {});
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    var self = this;
    self.createClients();
    if (!callback) callback = function(err) { if (err) throw err; };

    self.service.assumeRoleWithWebIdentity(function (err, data) {
      self.data = null;
      if (!err) {
        self.data = data;
        self.service.credentialsFrom(data, self);
      }
      callback(err);
    });
  },

  /**
   * @api private
   */
  createClients: function() {
    if (!this.service) {
      var stsConfig = AWS.util.merge({}, this._clientConfig);
      stsConfig.params = this.params;
      this.service = new STS(stsConfig);
    }
  }

});


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var SequentialExecutor = __webpack_require__(107);
/**
 * The namespace used to register global event listeners for request building
 * and sending.
 */
AWS.EventListeners = {
  /**
   * @!attribute VALIDATE_CREDENTIALS
   *   A request listener that validates whether the request is being
   *   sent with credentials.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating credentials
   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;
   *     request.removeListener('validate', listener);
   *   @readonly
   *   @return [Function]
   * @!attribute VALIDATE_REGION
   *   A request listener that validates whether the region is set
   *   for a request.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating region configuration
   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;
   *     request.removeListener('validate', listener);
   *   @readonly
   *   @return [Function]
   * @!attribute VALIDATE_PARAMETERS
   *   A request listener that validates input parameters in a request.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating parameters
   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;
   *     request.removeListener('validate', listener);
   *   @example Disable parameter validation globally
   *     AWS.EventListeners.Core.removeListener('validate',
   *       AWS.EventListeners.Core.VALIDATE_REGION);
   *   @readonly
   *   @return [Function]
   * @!attribute SEND
   *   A request listener that initiates the HTTP connection for a
   *   request being sent. Handles the {AWS.Request~send 'send' Request event}
   *   @example Replacing the HTTP handler
   *     var listener = AWS.EventListeners.Core.SEND;
   *     request.removeListener('send', listener);
   *     request.on('send', function(response) {
   *       customHandler.send(response);
   *     });
   *   @return [Function]
   *   @readonly
   * @!attribute HTTP_DATA
   *   A request listener that reads data from the HTTP connection in order
   *   to build the response data.
   *   Handles the {AWS.Request~httpData 'httpData' Request event}.
   *   Remove this handler if you are overriding the 'httpData' event and
   *   do not want extra data processing and buffering overhead.
   *   @example Disabling default data processing
   *     var listener = AWS.EventListeners.Core.HTTP_DATA;
   *     request.removeListener('httpData', listener);
   *   @return [Function]
   *   @readonly
   */
  Core: {} /* doc hack */
};

AWS.EventListeners = {
  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {
    addAsync('VALIDATE_CREDENTIALS', 'validate',
        function VALIDATE_CREDENTIALS(req, done) {
      if (!req.service.api.signatureVersion) return done(); // none
      req.service.config.getCredentials(function(err) {
        if (err) {
          req.response.error = AWS.util.error(err,
            {code: 'CredentialsError', message: 'Missing credentials in config'});
        }
        done();
      });
    });

    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {
      if (!req.service.config.region && !req.service.isGlobalEndpoint) {
        req.response.error = AWS.util.error(new Error(),
          {code: 'ConfigError', message: 'Missing region in config'});
      }
    });

    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {
      var operation = req.service.api.operations[req.operation];
      if (!operation) {
        return;
      }
      var idempotentMembers = operation.idempotentMembers;
      if (!idempotentMembers.length) {
        return;
      }
      // creates a copy of params so user's param object isn't mutated
      var params = AWS.util.copy(req.params);
      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
        if (!params[idempotentMembers[i]]) {
          // add the member
          params[idempotentMembers[i]] = AWS.util.uuid.v4();
        }
      }
      req.params = params;
    });

    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {
      var rules = req.service.api.operations[req.operation].input;
      var validation = req.service.config.paramValidation;
      new AWS.ParamValidator(validation).validate(rules, req.params);
    });

    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {
      req.haltHandlersOnError();
      var operation = req.service.api.operations[req.operation];
      var authtype = operation ? operation.authtype : '';
      if (!req.service.api.signatureVersion && !authtype) return done(); // none
      if (req.service.getSignerClass(req) === AWS.Signers.V4) {
        var body = req.httpRequest.body || '';
        if (authtype.indexOf('unsigned-body') >= 0) {
          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';
          return done();
        }
        AWS.util.computeSha256(body, function(err, sha) {
          if (err) {
            done(err);
          }
          else {
            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;
            done();
          }
        });
      } else {
        done();
      }
    });

    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {
      if (req.httpRequest.headers['Content-Length'] === undefined) {
        var length = AWS.util.string.byteLength(req.httpRequest.body);
        req.httpRequest.headers['Content-Length'] = length;
      }
    });

    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {
      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;
    });

    add('RESTART', 'restart', function RESTART() {
      var err = this.response.error;
      if (!err || !err.retryable) return;

      this.httpRequest = new AWS.HttpRequest(
        this.service.endpoint,
        this.service.region
      );

      if (this.response.retryCount < this.service.config.maxRetries) {
        this.response.retryCount++;
      } else {
        this.response.error = null;
      }
    });

    addAsync('SIGN', 'sign', function SIGN(req, done) {
      var service = req.service;
      var operation = req.service.api.operations[req.operation];
      var authtype = operation ? operation.authtype : '';
      if (!service.api.signatureVersion && !authtype) return done(); // none

      service.config.getCredentials(function (err, credentials) {
        if (err) {
          req.response.error = err;
          return done();
        }

        try {
          var date = AWS.util.date.getDate();
          var SignerClass = service.getSignerClass(req);
          var signer = new SignerClass(req.httpRequest,
            service.api.signingName || service.api.endpointPrefix,
            {
              signatureCache: service.config.signatureCache,
              operation: operation
            });
          signer.setServiceClientId(service._clientId);

          // clear old authorization headers
          delete req.httpRequest.headers['Authorization'];
          delete req.httpRequest.headers['Date'];
          delete req.httpRequest.headers['X-Amz-Date'];

          // add new authorization
          signer.addAuthorization(credentials, date);
          req.signedAt = date;
        } catch (e) {
          req.response.error = e;
        }
        done();
      });
    });

    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {
      if (this.service.successfulResponse(resp, this)) {
        resp.data = {};
        resp.error = null;
      } else {
        resp.data = null;
        resp.error = AWS.util.error(new Error(),
          {code: 'UnknownError', message: 'An unknown error occurred.'});
      }
    });

    addAsync('SEND', 'send', function SEND(resp, done) {
      resp.httpResponse._abortCallback = done;
      resp.error = null;
      resp.data = null;

      function callback(httpResp) {
        resp.httpResponse.stream = httpResp;

        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {
          resp.request.emit(
            'httpHeaders',
            [statusCode, headers, resp, statusMessage]
          );

          if (!resp.httpResponse.streaming) {
            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check
              httpResp.on('readable', function onReadable() {
                var data = httpResp.read();
                if (data !== null) {
                  resp.request.emit('httpData', [data, resp]);
                }
              });
            } else { // legacy streams API
              httpResp.on('data', function onData(data) {
                resp.request.emit('httpData', [data, resp]);
              });
            }
          }
        });

        httpResp.on('end', function onEnd() {
          resp.request.emit('httpDone');
          done();
        });
      }

      function progress(httpResp) {
        httpResp.on('sendProgress', function onSendProgress(value) {
          resp.request.emit('httpUploadProgress', [value, resp]);
        });

        httpResp.on('receiveProgress', function onReceiveProgress(value) {
          resp.request.emit('httpDownloadProgress', [value, resp]);
        });
      }

      function error(err) {
        resp.error = AWS.util.error(err, {
          code: 'NetworkingError',
          region: resp.request.httpRequest.region,
          hostname: resp.request.httpRequest.endpoint.hostname,
          retryable: true
        });
        resp.request.emit('httpError', [resp.error, resp], function() {
          done();
        });
      }

      function executeSend() {
        var http = AWS.HttpClient.getInstance();
        var httpOptions = resp.request.service.config.httpOptions || {};
        try {
          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,
                                          callback, error);
          progress(stream);
        } catch (err) {
          error(err);
        }
      }

      var timeDiff = (AWS.util.date.getDate() - this.signedAt) / 1000;
      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign
        this.emit('sign', [this], function(err) {
          if (err) done(err);
          else executeSend();
        });
      } else {
        executeSend();
      }
    });

    add('HTTP_HEADERS', 'httpHeaders',
        function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {
      resp.httpResponse.statusCode = statusCode;
      resp.httpResponse.statusMessage = statusMessage;
      resp.httpResponse.headers = headers;
      resp.httpResponse.body = new AWS.util.Buffer('');
      resp.httpResponse.buffers = [];
      resp.httpResponse.numBytes = 0;
      var dateHeader = headers.date || headers.Date;
      if (dateHeader) {
        var serverTime = Date.parse(dateHeader);
        if (resp.request.service.config.correctClockSkew
            && AWS.util.isClockSkewed(serverTime)) {
          AWS.util.applyClockOffset(serverTime);
        }
      }
    });

    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {
      if (chunk) {
        if (AWS.util.isNode()) {
          resp.httpResponse.numBytes += chunk.length;

          var total = resp.httpResponse.headers['content-length'];
          var progress = { loaded: resp.httpResponse.numBytes, total: total };
          resp.request.emit('httpDownloadProgress', [progress, resp]);
        }

        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));
      }
    });

    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {
      // convert buffers array into single buffer
      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);
        resp.httpResponse.body = body;
      }
      delete resp.httpResponse.numBytes;
      delete resp.httpResponse.buffers;
    });

    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {
      if (resp.httpResponse.statusCode) {
        resp.error.statusCode = resp.httpResponse.statusCode;
        if (resp.error.retryable === undefined) {
          resp.error.retryable = this.service.retryableError(resp.error, this);
        }
      }
    });

    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {
      if (!resp.error) return;
      switch (resp.error.code) {
        case 'RequestExpired': // EC2 only
        case 'ExpiredTokenException':
        case 'ExpiredToken':
          resp.error.retryable = true;
          resp.request.service.config.credentials.expired = true;
      }
    });

    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {
      var err = resp.error;
      if (!err) return;
      if (typeof err.code === 'string' && typeof err.message === 'string') {
        if (err.code.match(/Signature/) && err.message.match(/expired/)) {
          resp.error.retryable = true;
        }
      }
    });

    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {
      if (!resp.error) return;
      if (this.service.clockSkewError(resp.error)
          && this.service.config.correctClockSkew
          && AWS.config.isClockSkewed) {
        resp.error.retryable = true;
      }
    });

    add('REDIRECT', 'retry', function REDIRECT(resp) {
      if (resp.error && resp.error.statusCode >= 300 &&
          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {
        this.httpRequest.endpoint =
          new AWS.Endpoint(resp.httpResponse.headers['location']);
        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;
        resp.error.redirect = true;
        resp.error.retryable = true;
      }
    });

    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {
      if (resp.error) {
        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
          resp.error.retryDelay = 0;
        } else if (resp.retryCount < resp.maxRetries) {
          resp.error.retryDelay = this.service.retryDelays(resp.retryCount) || 0;
        }
      }
    });

    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {
      var delay, willRetry = false;

      if (resp.error) {
        delay = resp.error.retryDelay || 0;
        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
          resp.retryCount++;
          willRetry = true;
        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
          resp.redirectCount++;
          willRetry = true;
        }
      }

      if (willRetry) {
        resp.error = null;
        setTimeout(done, delay);
      } else {
        done();
      }
    });
  }),

  CorePost: new SequentialExecutor().addNamedListeners(function(add) {
    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);
    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);

    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {
      if (err.code === 'NetworkingError' && err.errno === 'ENOTFOUND') {
        var message = 'Inaccessible host: `' + err.hostname +
          '\'. This service may not be available in the `' + err.region +
          '\' region.';
        this.response.error = AWS.util.error(new Error(message), {
          code: 'UnknownEndpoint',
          region: err.region,
          hostname: err.hostname,
          retryable: true,
          originalError: err
        });
      }
    });
  }),

  Logger: new SequentialExecutor().addNamedListeners(function(add) {
    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {
      var req = resp.request;
      var logger = req.service.config.logger;
      if (!logger) return;

      function buildMessage() {
        var time = AWS.util.date.getDate().getTime();
        var delta = (time - req.startTime.getTime()) / 1000;
        var ansi = logger.isTTY ? true : false;
        var status = resp.httpResponse.statusCode;
        var params = __webpack_require__(16).inspect(req.params, true, null);

        var message = '';
        if (ansi) message += '\x1B[33m';
        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;
        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';
        if (ansi) message += '\x1B[0;1m';
        message += ' ' + AWS.util.string.lowerFirst(req.operation);
        message += '(' + params + ')';
        if (ansi) message += '\x1B[0m';
        return message;
      }

      var line = buildMessage();
      if (typeof logger.log === 'function') {
        logger.log(line);
      } else if (typeof logger.write === 'function') {
        logger.write(line + '\n');
      }
    });
  }),

  Json: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(61);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  Rest: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(45);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  RestJson: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(105);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  RestXml: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(106);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  Query: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(104);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  })
};


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var EventEmitter = __webpack_require__(109).EventEmitter;
__webpack_require__(98);

/**
 * @api private
 */
AWS.XHRClient = AWS.util.inherit({
  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {
    var self = this;
    var endpoint = httpRequest.endpoint;
    var emitter = new EventEmitter();
    var href = endpoint.protocol + '//' + endpoint.hostname;
    if (endpoint.port !== 80 && endpoint.port !== 443) {
      href += ':' + endpoint.port;
    }
    href += httpRequest.path;

    var xhr = new XMLHttpRequest(), headersEmitted = false;
    httpRequest.stream = xhr;

    xhr.addEventListener('readystatechange', function() {
      try {
        if (xhr.status === 0) return; // 0 code is invalid
      } catch (e) { return; }

      if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {
        try { xhr.responseType = 'arraybuffer'; } catch (e) {}
        emitter.statusCode = xhr.status;
        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());
        emitter.emit(
          'headers',
          emitter.statusCode,
          emitter.headers,
          xhr.statusText
        );
        headersEmitted = true;
      }
      if (this.readyState === this.DONE) {
        self.finishRequest(xhr, emitter);
      }
    }, false);
    xhr.upload.addEventListener('progress', function (evt) {
      emitter.emit('sendProgress', evt);
    });
    xhr.addEventListener('progress', function (evt) {
      emitter.emit('receiveProgress', evt);
    }, false);
    xhr.addEventListener('timeout', function () {
      errCallback(AWS.util.error(new Error('Timeout'), {code: 'TimeoutError'}));
    }, false);
    xhr.addEventListener('error', function () {
      errCallback(AWS.util.error(new Error('Network Failure'), {
        code: 'NetworkingError'
      }));
    }, false);
    xhr.addEventListener('abort', function () {
      errCallback(AWS.util.error(new Error('Request aborted'), {
        code: 'RequestAbortedError'
      }));
    }, false);

    callback(emitter);
    xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);
    AWS.util.each(httpRequest.headers, function (key, value) {
      if (key !== 'Content-Length' && key !== 'User-Agent' && key !== 'Host') {
        xhr.setRequestHeader(key, value);
      }
    });

    if (httpOptions.timeout && httpOptions.xhrAsync !== false) {
      xhr.timeout = httpOptions.timeout;
    }

    if (httpOptions.xhrWithCredentials) {
      xhr.withCredentials = true;
    }

    try {
      xhr.send(httpRequest.body);
    } catch (err) {
      if (httpRequest.body && typeof httpRequest.body.buffer === 'object') {
        xhr.send(httpRequest.body.buffer); // send ArrayBuffer directly
      } else {
        throw err;
      }
    }

    return emitter;
  },

  parseHeaders: function parseHeaders(rawHeaders) {
    var headers = {};
    AWS.util.arrayEach(rawHeaders.split(/\r?\n/), function (line) {
      var key = line.split(':', 1)[0];
      var value = line.substring(key.length + 2);
      if (key.length > 0) headers[key.toLowerCase()] = value;
    });
    return headers;
  },

  finishRequest: function finishRequest(xhr, emitter) {
    var buffer;
    if (xhr.responseType === 'arraybuffer' && xhr.response) {
      var ab = xhr.response;
      buffer = new AWS.util.Buffer(ab.byteLength);
      var view = new Uint8Array(ab);
      for (var i = 0; i < buffer.length; ++i) {
        buffer[i] = view[i];
      }
    }

    try {
      if (!buffer && typeof xhr.responseText === 'string') {
        buffer = new AWS.util.Buffer(xhr.responseText);
      }
    } catch (e) {}

    if (buffer) emitter.emit('data', buffer);
    emitter.emit('end');
  }
});

/**
 * @api private
 */
AWS.HttpClient.prototype = AWS.XHRClient.prototype;

/**
 * @api private
 */
AWS.HttpClient.streamsApiVersion = 1;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * @api private
 */
AWS.ParamValidator = AWS.util.inherit({
  /**
   * Create a new validator object.
   *
   * @param validation [Boolean|map] whether input parameters should be
   *     validated against the operation description before sending the
   *     request. Pass a map to enable any of the following specific
   *     validation features:
   *
   *     * **min** [Boolean] &mdash; Validates that a value meets the min
   *       constraint. This is enabled by default when paramValidation is set
   *       to `true`.
   *     * **max** [Boolean] &mdash; Validates that a value meets the max
   *       constraint.
   *     * **pattern** [Boolean] &mdash; Validates that a string value matches a
   *       regular expression.
   *     * **enum** [Boolean] &mdash; Validates that a string value matches one
   *       of the allowable enum values.
   */
  constructor: function ParamValidator(validation) {
    if (validation === true || validation === undefined) {
      validation = {'min': true};
    }
    this.validation = validation;
  },

  validate: function validate(shape, params, context) {
    this.errors = [];
    this.validateMember(shape, params || {}, context || 'params');

    if (this.errors.length > 1) {
      var msg = this.errors.join('\n* ');
      msg = 'There were ' + this.errors.length +
        ' validation errors:\n* ' + msg;
      throw AWS.util.error(new Error(msg),
        {code: 'MultipleValidationErrors', errors: this.errors});
    } else if (this.errors.length === 1) {
      throw this.errors[0];
    } else {
      return true;
    }
  },

  fail: function fail(code, message) {
    this.errors.push(AWS.util.error(new Error(message), {code: code}));
  },

  validateStructure: function validateStructure(shape, params, context) {
    this.validateType(params, context, ['object'], 'structure');

    var paramName;
    for (var i = 0; shape.required && i < shape.required.length; i++) {
      paramName = shape.required[i];
      var value = params[paramName];
      if (value === undefined || value === null) {
        this.fail('MissingRequiredParameter',
          'Missing required key \'' + paramName + '\' in ' + context);
      }
    }

    // validate hash members
    for (paramName in params) {
      if (!Object.prototype.hasOwnProperty.call(params, paramName)) continue;

      var paramValue = params[paramName],
          memberShape = shape.members[paramName];

      if (memberShape !== undefined) {
        var memberContext = [context, paramName].join('.');
        this.validateMember(memberShape, paramValue, memberContext);
      } else {
        this.fail('UnexpectedParameter',
          'Unexpected key \'' + paramName + '\' found in ' + context);
      }
    }

    return true;
  },

  validateMember: function validateMember(shape, param, context) {
    switch (shape.type) {
      case 'structure':
        return this.validateStructure(shape, param, context);
      case 'list':
        return this.validateList(shape, param, context);
      case 'map':
        return this.validateMap(shape, param, context);
      default:
        return this.validateScalar(shape, param, context);
    }
  },

  validateList: function validateList(shape, params, context) {
    if (this.validateType(params, context, [Array])) {
      this.validateRange(shape, params.length, context, 'list member count');
      // validate array members
      for (var i = 0; i < params.length; i++) {
        this.validateMember(shape.member, params[i], context + '[' + i + ']');
      }
    }
  },

  validateMap: function validateMap(shape, params, context) {
    if (this.validateType(params, context, ['object'], 'map')) {
      // Build up a count of map members to validate range traits.
      var mapCount = 0;
      for (var param in params) {
        if (!Object.prototype.hasOwnProperty.call(params, param)) continue;
        // Validate any map key trait constraints
        this.validateMember(shape.key, param,
                            context + '[key=\'' + param + '\']')
        this.validateMember(shape.value, params[param],
                            context + '[\'' + param + '\']');
        mapCount++;
      }
      this.validateRange(shape, mapCount, context, 'map member count');
    }
  },

  validateScalar: function validateScalar(shape, value, context) {
    switch (shape.type) {
      case null:
      case undefined:
      case 'string':
        return this.validateString(shape, value, context);
      case 'base64':
      case 'binary':
        return this.validatePayload(value, context);
      case 'integer':
      case 'float':
        return this.validateNumber(shape, value, context);
      case 'boolean':
        return this.validateType(value, context, ['boolean']);
      case 'timestamp':
        return this.validateType(value, context, [Date,
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/, 'number'],
          'Date object, ISO-8601 string, or a UNIX timestamp');
      default:
        return this.fail('UnkownType', 'Unhandled type ' +
                         shape.type + ' for ' + context);
    }
  },

  validateString: function validateString(shape, value, context) {
    var validTypes = ['string'];
    if (shape.isJsonValue) {
      validTypes = validTypes.concat(['number', 'object', 'boolean']);
    }
    if (value !== null && this.validateType(value, context, validTypes)) {
      this.validateEnum(shape, value, context);
      this.validateRange(shape, value.length, context, 'string length');
      this.validatePattern(shape, value, context);
    }
  },

  validatePattern: function validatePattern(shape, value, context) {
    if (this.validation['pattern'] && shape['pattern'] !== undefined) {
      if (!(new RegExp(shape['pattern'])).test(value)) {
        this.fail('PatternMatchError', 'Provided value "' + value + '" '
          + 'does not match regex pattern /' + shape['pattern'] + '/ for '
          + context);
      }
    }
  },

  validateRange: function validateRange(shape, value, context, descriptor) {
    if (this.validation['min']) {
      if (shape['min'] !== undefined && value < shape['min']) {
        this.fail('MinRangeError', 'Expected ' + descriptor + ' >= '
          + shape['min'] + ', but found ' + value + ' for ' + context);
      }
    }
    if (this.validation['max']) {
      if (shape['max'] !== undefined && value > shape['max']) {
        this.fail('MaxRangeError', 'Expected ' + descriptor + ' <= '
          + shape['max'] + ', but found ' + value + ' for ' + context);
      }
    }
  },

  validateEnum: function validateRange(shape, value, context) {
    if (this.validation['enum'] && shape['enum'] !== undefined) {
      // Fail if the string value is not present in the enum list
      if (shape['enum'].indexOf(value) === -1) {
        this.fail('EnumError', 'Found string value of ' + value + ', but '
          + 'expected ' + shape['enum'].join('|') + ' for ' + context);
      }
    }
  },

  validateType: function validateType(value, context, acceptedTypes, type) {
    // We will not log an error for null or undefined, but we will return
    // false so that callers know that the expected type was not strictly met.
    if (value === null || value === undefined) return false;

    var foundInvalidType = false;
    for (var i = 0; i < acceptedTypes.length; i++) {
      if (typeof acceptedTypes[i] === 'string') {
        if (typeof value === acceptedTypes[i]) return true;
      } else if (acceptedTypes[i] instanceof RegExp) {
        if ((value || '').toString().match(acceptedTypes[i])) return true;
      } else {
        if (value instanceof acceptedTypes[i]) return true;
        if (AWS.util.isType(value, acceptedTypes[i])) return true;
        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();
        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);
      }
      foundInvalidType = true;
    }

    var acceptedType = type;
    if (!acceptedType) {
      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');
    }

    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';
    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +
              vowel + ' ' + acceptedType);
    return false;
  },

  validateNumber: function validateNumber(shape, value, context) {
    if (value === null || value === undefined) return;
    if (typeof value === 'string') {
      var castedValue = parseFloat(value);
      if (castedValue.toString() === value) value = castedValue;
    }
    if (this.validateType(value, context, ['number'])) {
      this.validateRange(shape, value, context, 'numeric value');
    }
  },

  validatePayload: function validatePayload(value, context) {
    if (value === null || value === undefined) return;
    if (typeof value === 'string') return;
    if (value && typeof value.byteLength === 'number') return; // typed arrays
    if (AWS.util.isNode()) { // special check for buffer/stream in Node.js
      var Stream = AWS.util.stream.Stream;
      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;
    }

    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];
    if (value) {
      for (var i = 0; i < types.length; i++) {
        if (AWS.util.isType(value, types[i])) return;
        if (AWS.util.typeName(value.constructor) === types[i]) return;
      }
    }

    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +
      'string, Buffer, Stream, Blob, or typed array object');
  }
});


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);

function QueryParamSerializer() {
}

QueryParamSerializer.prototype.serialize = function(params, shape, fn) {
  serializeStructure('', params, shape, fn);
};

function ucfirst(shape) {
  if (shape.isQueryName || shape.api.protocol !== 'ec2') {
    return shape.name;
  } else {
    return shape.name[0].toUpperCase() + shape.name.substr(1);
  }
}

function serializeStructure(prefix, struct, rules, fn) {
  util.each(rules.members, function(name, member) {
    var value = struct[name];
    if (value === null || value === undefined) return;

    var memberName = ucfirst(member);
    memberName = prefix ? prefix + '.' + memberName : memberName;
    serializeMember(memberName, value, member, fn);
  });
}

function serializeMap(name, map, rules, fn) {
  var i = 1;
  util.each(map, function (key, value) {
    var prefix = rules.flattened ? '.' : '.entry.';
    var position = prefix + (i++) + '.';
    var keyName = position + (rules.key.name || 'key');
    var valueName = position + (rules.value.name || 'value');
    serializeMember(name + keyName, key, rules.key, fn);
    serializeMember(name + valueName, value, rules.value, fn);
  });
}

function serializeList(name, list, rules, fn) {
  var memberRules = rules.member || {};

  if (list.length === 0) {
    fn.call(this, name, null);
    return;
  }

  util.arrayEach(list, function (v, n) {
    var suffix = '.' + (n + 1);
    if (rules.api.protocol === 'ec2') {
      // Do nothing for EC2
      suffix = suffix + ''; // make linter happy
    } else if (rules.flattened) {
      if (memberRules.name) {
        var parts = name.split('.');
        parts.pop();
        parts.push(ucfirst(memberRules));
        name = parts.join('.');
      }
    } else {
      suffix = '.' + (memberRules.name ? memberRules.name : 'member') + suffix;
    }
    serializeMember(name + suffix, v, memberRules, fn);
  });
}

function serializeMember(name, value, rules, fn) {
  if (value === null || value === undefined) return;
  if (rules.type === 'structure') {
    serializeStructure(name, value, rules, fn);
  } else if (rules.type === 'list') {
    serializeList(name, value, rules, fn);
  } else if (rules.type === 'map') {
    serializeMap(name, value, rules, fn);
  } else {
    fn(name, rules.toWireFormat(value).toString());
  }
}

module.exports = QueryParamSerializer;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var regionConfig = __webpack_require__(200);

function generateRegionPrefix(region) {
  if (!region) return null;

  var parts = region.split('-');
  if (parts.length < 3) return null;
  return parts.slice(0, parts.length - 2).join('-') + '-*';
}

function derivedKeys(service) {
  var region = service.config.region;
  var regionPrefix = generateRegionPrefix(region);
  var endpointPrefix = service.api.endpointPrefix;

  return [
    [region, endpointPrefix],
    [regionPrefix, endpointPrefix],
    [region, '*'],
    [regionPrefix, '*'],
    ['*', endpointPrefix],
    ['*', '*']
  ].map(function(item) {
    return item[0] && item[1] ? item.join('/') : null;
  });
}

function applyConfig(service, config) {
  util.each(config, function(key, value) {
    if (key === 'globalEndpoint') return;
    if (service.config[key] === undefined || service.config[key] === null) {
      service.config[key] = value;
    }
  });
}

function configureEndpoint(service) {
  var keys = derivedKeys(service);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!key) continue;

    if (Object.prototype.hasOwnProperty.call(regionConfig.rules, key)) {
      var config = regionConfig.rules[key];
      if (typeof config === 'string') {
        config = regionConfig.patterns[config];
      }

      // set dualstack endpoint
      if (service.config.useDualstack && util.isDualstackAvailable(service)) {
        config = util.copy(config);
        config.endpoint = '{service}.dualstack.{region}.amazonaws.com';
      }

      // set global endpoint
      service.isGlobalEndpoint = !!config.globalEndpoint;

      // signature version
      if (!config.signatureVersion) config.signatureVersion = 'v4';

      // merge config
      applyConfig(service, config);
      return;
    }
  }
}

module.exports = configureEndpoint;


/***/ }),
/* 200 */
/***/ (function(module, exports) {

module.exports = {
	"rules": {
		"*/*": {
			"endpoint": "{service}.{region}.amazonaws.com"
		},
		"cn-*/*": {
			"endpoint": "{service}.{region}.amazonaws.com.cn"
		},
		"*/budgets": "globalSSL",
		"*/cloudfront": "globalSSL",
		"*/iam": "globalSSL",
		"*/sts": "globalSSL",
		"*/importexport": {
			"endpoint": "{service}.amazonaws.com",
			"signatureVersion": "v2",
			"globalEndpoint": true
		},
		"*/route53": {
			"endpoint": "https://{service}.amazonaws.com",
			"signatureVersion": "v3https",
			"globalEndpoint": true
		},
		"*/waf": "globalSSL",
		"us-gov-*/iam": "globalGovCloud",
		"us-gov-*/sts": {
			"endpoint": "{service}.{region}.amazonaws.com"
		},
		"us-gov-west-1/s3": "s3dash",
		"us-west-1/s3": "s3dash",
		"us-west-2/s3": "s3dash",
		"eu-west-1/s3": "s3dash",
		"ap-southeast-1/s3": "s3dash",
		"ap-southeast-2/s3": "s3dash",
		"ap-northeast-1/s3": "s3dash",
		"sa-east-1/s3": "s3dash",
		"us-east-1/s3": {
			"endpoint": "{service}.amazonaws.com",
			"signatureVersion": "s3"
		},
		"us-east-1/sdb": {
			"endpoint": "{service}.amazonaws.com",
			"signatureVersion": "v2"
		},
		"*/sdb": {
			"endpoint": "{service}.{region}.amazonaws.com",
			"signatureVersion": "v2"
		}
	},
	"patterns": {
		"globalSSL": {
			"endpoint": "https://{service}.amazonaws.com",
			"globalEndpoint": true
		},
		"globalGovCloud": {
			"endpoint": "{service}.us-gov.amazonaws.com"
		},
		"s3dash": {
			"endpoint": "{service}-{region}.amazonaws.com",
			"signatureVersion": "s3"
		}
	}
};

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(0);
var AcceptorStateMachine = __webpack_require__(214);
var inherit = AWS.util.inherit;
var domain = AWS.util.domain;
var jmespath = __webpack_require__(78);

/**
 * @api private
 */
var hardErrorStates = {success: 1, error: 1, complete: 1};

function isTerminalState(machine) {
  return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);
}

var fsm = new AcceptorStateMachine();
fsm.setupStates = function() {
  var transition = function(_, done) {
    var self = this;
    self._haltHandlersOnError = false;

    self.emit(self._asm.currentState, function(err) {
      if (err) {
        if (isTerminalState(self)) {
          if (domain && self.domain instanceof domain.Domain) {
            err.domainEmitter = self;
            err.domain = self.domain;
            err.domainThrown = false;
            self.domain.emit('error', err);
          } else {
            throw err;
          }
        } else {
          self.response.error = err;
          done(err);
        }
      } else {
        done(self.response.error);
      }
    });

  };

  this.addState('validate', 'build', 'error', transition);
  this.addState('build', 'afterBuild', 'restart', transition);
  this.addState('afterBuild', 'sign', 'restart', transition);
  this.addState('sign', 'send', 'retry', transition);
  this.addState('retry', 'afterRetry', 'afterRetry', transition);
  this.addState('afterRetry', 'sign', 'error', transition);
  this.addState('send', 'validateResponse', 'retry', transition);
  this.addState('validateResponse', 'extractData', 'extractError', transition);
  this.addState('extractError', 'extractData', 'retry', transition);
  this.addState('extractData', 'success', 'retry', transition);
  this.addState('restart', 'build', 'error', transition);
  this.addState('success', 'complete', 'complete', transition);
  this.addState('error', 'complete', 'complete', transition);
  this.addState('complete', null, null, transition);
};
fsm.setupStates();

/**
 * ## Asynchronous Requests
 *
 * All requests made through the SDK are asynchronous and use a
 * callback interface. Each service method that kicks off a request
 * returns an `AWS.Request` object that you can use to register
 * callbacks.
 *
 * For example, the following service method returns the request
 * object as "request", which can be used to register callbacks:
 *
 * ```javascript
 * // request is an AWS.Request object
 * var request = ec2.describeInstances();
 *
 * // register callbacks on request to retrieve response data
 * request.on('success', function(response) {
 *   console.log(response.data);
 * });
 * ```
 *
 * When a request is ready to be sent, the {send} method should
 * be called:
 *
 * ```javascript
 * request.send();
 * ```
 *
 * ## Removing Default Listeners for Events
 *
 * Request objects are built with default listeners for the various events,
 * depending on the service type. In some cases, you may want to remove
 * some built-in listeners to customize behaviour. Doing this requires
 * access to the built-in listener functions, which are exposed through
 * the {AWS.EventListeners.Core} namespace. For instance, you may
 * want to customize the HTTP handler used when sending a request. In this
 * case, you can remove the built-in listener associated with the 'send'
 * event, the {AWS.EventListeners.Core.SEND} listener and add your own.
 *
 * ## Multiple Callbacks and Chaining
 *
 * You can register multiple callbacks on any request object. The
 * callbacks can be registered for different events, or all for the
 * same event. In addition, you can chain callback registration, for
 * example:
 *
 * ```javascript
 * request.
 *   on('success', function(response) {
 *     console.log("Success!");
 *   }).
 *   on('error', function(response) {
 *     console.log("Error!");
 *   }).
 *   on('complete', function(response) {
 *     console.log("Always!");
 *   }).
 *   send();
 * ```
 *
 * The above example will print either "Success! Always!", or "Error! Always!",
 * depending on whether the request succeeded or not.
 *
 * @!attribute httpRequest
 *   @readonly
 *   @!group HTTP Properties
 *   @return [AWS.HttpRequest] the raw HTTP request object
 *     containing request headers and body information
 *     sent by the service.
 *
 * @!attribute startTime
 *   @readonly
 *   @!group Operation Properties
 *   @return [Date] the time that the request started
 *
 * @!group Request Building Events
 *
 * @!event validate(request)
 *   Triggered when a request is being validated. Listeners
 *   should throw an error if the request should not be sent.
 *   @param request [Request] the request object being sent
 *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS
 *   @see AWS.EventListeners.Core.VALIDATE_REGION
 *   @example Ensuring that a certain parameter is set before sending a request
 *     var req = s3.putObject(params);
 *     req.on('validate', function() {
 *       if (!req.params.Body.match(/^Hello\s/)) {
 *         throw new Error('Body must start with "Hello "');
 *       }
 *     });
 *     req.send(function(err, data) { ... });
 *
 * @!event build(request)
 *   Triggered when the request payload is being built. Listeners
 *   should fill the necessary information to send the request
 *   over HTTP.
 *   @param (see AWS.Request~validate)
 *   @example Add a custom HTTP header to a request
 *     var req = s3.putObject(params);
 *     req.on('build', function() {
 *       req.httpRequest.headers['Custom-Header'] = 'value';
 *     });
 *     req.send(function(err, data) { ... });
 *
 * @!event sign(request)
 *   Triggered when the request is being signed. Listeners should
 *   add the correct authentication headers and/or adjust the body,
 *   depending on the authentication mechanism being used.
 *   @param (see AWS.Request~validate)
 *
 * @!group Request Sending Events
 *
 * @!event send(response)
 *   Triggered when the request is ready to be sent. Listeners
 *   should call the underlying transport layer to initiate
 *   the sending of the request.
 *   @param response [Response] the response object
 *   @context [Request] the request object that was sent
 *   @see AWS.EventListeners.Core.SEND
 *
 * @!event retry(response)
 *   Triggered when a request failed and might need to be retried or redirected.
 *   If the response is retryable, the listener should set the
 *   `response.error.retryable` property to `true`, and optionally set
 *   `response.error.retryDelay` to the millisecond delay for the next attempt.
 *   In the case of a redirect, `response.error.redirect` should be set to
 *   `true` with `retryDelay` set to an optional delay on the next request.
 *
 *   If a listener decides that a request should not be retried,
 *   it should set both `retryable` and `redirect` to false.
 *
 *   Note that a retryable error will be retried at most
 *   {AWS.Config.maxRetries} times (based on the service object's config).
 *   Similarly, a request that is redirected will only redirect at most
 *   {AWS.Config.maxRedirects} times.
 *
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @example Adding a custom retry for a 404 response
 *     request.on('retry', function(response) {
 *       // this resource is not yet available, wait 10 seconds to get it again
 *       if (response.httpResponse.statusCode === 404 && response.error) {
 *         response.error.retryable = true;   // retry this error
 *         response.error.retryDelay = 10000; // wait 10 seconds
 *       }
 *     });
 *
 * @!group Data Parsing Events
 *
 * @!event extractError(response)
 *   Triggered on all non-2xx requests so that listeners can extract
 *   error details from the response body. Listeners to this event
 *   should set the `response.error` property.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event extractData(response)
 *   Triggered in successful requests to allow listeners to
 *   de-serialize the response body into `response.data`.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!group Completion Events
 *
 * @!event success(response)
 *   Triggered when the request completed successfully.
 *   `response.data` will contain the response data and
 *   `response.error` will be null.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event error(error, response)
 *   Triggered when an error occurs at any point during the
 *   request. `response.error` will contain details about the error
 *   that occurred. `response.data` will be null.
 *   @param error [Error] the error object containing details about
 *     the error that occurred.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event complete(response)
 *   Triggered whenever a request cycle completes. `response.error`
 *   should be checked, since the request may have failed.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!group HTTP Events
 *
 * @!event httpHeaders(statusCode, headers, response, statusMessage)
 *   Triggered when headers are sent by the remote server
 *   @param statusCode [Integer] the HTTP response code
 *   @param headers [map<String,String>] the response headers
 *   @param (see AWS.Request~send)
 *   @param statusMessage [String] A status message corresponding to the HTTP
 *                                 response code
 *   @context (see AWS.Request~send)
 *
 * @!event httpData(chunk, response)
 *   Triggered when data is sent by the remote server
 *   @param chunk [Buffer] the buffer data containing the next data chunk
 *     from the server
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @see AWS.EventListeners.Core.HTTP_DATA
 *
 * @!event httpUploadProgress(progress, response)
 *   Triggered when the HTTP request has uploaded more data
 *   @param progress [map] An object containing the `loaded` and `total` bytes
 *     of the request.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @note This event will not be emitted in Node.js 0.8.x.
 *
 * @!event httpDownloadProgress(progress, response)
 *   Triggered when the HTTP request has downloaded more data
 *   @param progress [map] An object containing the `loaded` and `total` bytes
 *     of the request.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @note This event will not be emitted in Node.js 0.8.x.
 *
 * @!event httpError(error, response)
 *   Triggered when the HTTP request failed
 *   @param error [Error] the error object that was thrown
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event httpDone(response)
 *   Triggered when the server is finished sending data
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @see AWS.Response
 */
AWS.Request = inherit({

  /**
   * Creates a request for an operation on a given service with
   * a set of input parameters.
   *
   * @param service [AWS.Service] the service to perform the operation on
   * @param operation [String] the operation to perform on the service
   * @param params [Object] parameters to send to the operation.
   *   See the operation's documentation for the format of the
   *   parameters.
   */
  constructor: function Request(service, operation, params) {
    var endpoint = service.endpoint;
    var region = service.config.region;
    var customUserAgent = service.config.customUserAgent;

    // global endpoints sign as us-east-1
    if (service.isGlobalEndpoint) region = 'us-east-1';

    this.domain = domain && domain.active;
    this.service = service;
    this.operation = operation;
    this.params = params || {};
    this.httpRequest = new AWS.HttpRequest(endpoint, region);
    this.httpRequest.appendToUserAgent(customUserAgent);
    this.startTime = AWS.util.date.getDate();

    this.response = new AWS.Response(this);
    this._asm = new AcceptorStateMachine(fsm.states, 'validate');
    this._haltHandlersOnError = false;

    AWS.SequentialExecutor.call(this);
    this.emit = this.emitEvent;
  },

  /**
   * @!group Sending a Request
   */

  /**
   * @overload send(callback = null)
   *   Sends the request object.
   *
   *   @callback callback function(err, data)
   *     If a callback is supplied, it is called when a response is returned
   *     from the service.
   *     @context [AWS.Request] the request object being sent.
   *     @param err [Error] the error object returned from the request.
   *       Set to `null` if the request is successful.
   *     @param data [Object] the de-serialized data returned from
   *       the request. Set to `null` if a request error occurs.
   *   @example Sending a request with a callback
   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
   *     request.send(function(err, data) { console.log(err, data); });
   *   @example Sending a request with no callback (using event handlers)
   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
   *     request.on('complete', function(response) { ... }); // register a callback
   *     request.send();
   */
  send: function send(callback) {
    if (callback) {
      // append to user agent
      this.httpRequest.appendToUserAgent('callback');
      this.on('complete', function (resp) {
        callback.call(resp, resp.error, resp.data);
      });
    }
    this.runTo();

    return this.response;
  },

  /**
   * @!method  promise()
   *   Returns a 'thenable' promise.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function(data)
   *     Called if the promise is fulfilled.
   *     @param data [Object] the de-serialized data returned from the request.
   *   @callback rejectedCallback function(error)
   *     Called if the promise is rejected.
   *     @param error [Error] the error object returned from the request.
   *   @return [Promise] A promise that represents the state of the request.
   *   @example Sending a request using promises.
   *     var request = s3.putObject({Bucket: 'bucket', Key: 'key'});
   *     var result = request.promise();
   *     result.then(function(data) { ... }, function(error) { ... });
   */

  /**
   * @api private
   */
  build: function build(callback) {
    return this.runTo('send', callback);
  },

  /**
   * @api private
   */
  runTo: function runTo(state, done) {
    this._asm.runTo(state, done, this);
    return this;
  },

  /**
   * Aborts a request, emitting the error and complete events.
   *
   * @!macro nobrowser
   * @example Aborting a request after sending
   *   var params = {
   *     Bucket: 'bucket', Key: 'key',
   *     Body: new Buffer(1024 * 1024 * 5) // 5MB payload
   *   };
   *   var request = s3.putObject(params);
   *   request.send(function (err, data) {
   *     if (err) console.log("Error:", err.code, err.message);
   *     else console.log(data);
   *   });
   *
   *   // abort request in 1 second
   *   setTimeout(request.abort.bind(request), 1000);
   *
   *   // prints "Error: RequestAbortedError Request aborted by user"
   * @return [AWS.Request] the same request object, for chaining.
   * @since v1.4.0
   */
  abort: function abort() {
    this.removeAllListeners('validateResponse');
    this.removeAllListeners('extractError');
    this.on('validateResponse', function addAbortedError(resp) {
      resp.error = AWS.util.error(new Error('Request aborted by user'), {
         code: 'RequestAbortedError', retryable: false
      });
    });

    if (this.httpRequest.stream) { // abort HTTP stream
      this.httpRequest.stream.abort();
      if (this.httpRequest._abortCallback) {
         this.httpRequest._abortCallback();
      } else {
        this.removeAllListeners('send'); // haven't sent yet, so let's not
      }
    }

    return this;
  },

  /**
   * Iterates over each page of results given a pageable request, calling
   * the provided callback with each page of data. After all pages have been
   * retrieved, the callback is called with `null` data.
   *
   * @note This operation can generate multiple requests to a service.
   * @example Iterating over multiple pages of objects in an S3 bucket
   *   var pages = 1;
   *   s3.listObjects().eachPage(function(err, data) {
   *     if (err) return;
   *     console.log("Page", pages++);
   *     console.log(data);
   *   });
   * @example Iterating over multiple pages with an asynchronous callback
   *   s3.listObjects(params).eachPage(function(err, data, done) {
   *     doSomethingAsyncAndOrExpensive(function() {
   *       // The next page of results isn't fetched until done is called
   *       done();
   *     });
   *   });
   * @callback callback function(err, data, [doneCallback])
   *   Called with each page of resulting data from the request. If the
   *   optional `doneCallback` is provided in the function, it must be called
   *   when the callback is complete.
   *
   *   @param err [Error] an error object, if an error occurred.
   *   @param data [Object] a single page of response data. If there is no
   *     more data, this object will be `null`.
   *   @param doneCallback [Function] an optional done callback. If this
   *     argument is defined in the function declaration, it should be called
   *     when the next page is ready to be retrieved. This is useful for
   *     controlling serial pagination across asynchronous operations.
   *   @return [Boolean] if the callback returns `false`, pagination will
   *     stop.
   *
   * @see AWS.Request.eachItem
   * @see AWS.Response.nextPage
   * @since v1.4.0
   */
  eachPage: function eachPage(callback) {
    // Make all callbacks async-ish
    callback = AWS.util.fn.makeAsync(callback, 3);

    function wrappedCallback(response) {
      callback.call(response, response.error, response.data, function (result) {
        if (result === false) return;

        if (response.hasNextPage()) {
          response.nextPage().on('complete', wrappedCallback).send();
        } else {
          callback.call(response, null, null, AWS.util.fn.noop);
        }
      });
    }

    this.on('complete', wrappedCallback).send();
  },

  /**
   * Enumerates over individual items of a request, paging the responses if
   * necessary.
   *
   * @api experimental
   * @since v1.4.0
   */
  eachItem: function eachItem(callback) {
    var self = this;
    function wrappedCallback(err, data) {
      if (err) return callback(err, null);
      if (data === null) return callback(null, null);

      var config = self.service.paginationConfig(self.operation);
      var resultKey = config.resultKey;
      if (Array.isArray(resultKey)) resultKey = resultKey[0];
      var items = jmespath.search(data, resultKey);
      var continueIteration = true;
      AWS.util.arrayEach(items, function(item) {
        continueIteration = callback(null, item);
        if (continueIteration === false) {
          return AWS.util.abort;
        }
      });
      return continueIteration;
    }

    this.eachPage(wrappedCallback);
  },

  /**
   * @return [Boolean] whether the operation can return multiple pages of
   *   response data.
   * @see AWS.Response.eachPage
   * @since v1.4.0
   */
  isPageable: function isPageable() {
    return this.service.paginationConfig(this.operation) ? true : false;
  },

  /**
   * Converts the request object into a readable stream that
   * can be read from or piped into a writable stream.
   *
   * @note The data read from a readable stream contains only
   *   the raw HTTP body contents.
   * @example Manually reading from a stream
   *   request.createReadStream().on('data', function(data) {
   *     console.log("Got data:", data.toString());
   *   });
   * @example Piping a request body into a file
   *   var out = fs.createWriteStream('/path/to/outfile.jpg');
   *   s3.service.getObject(params).createReadStream().pipe(out);
   * @return [Stream] the readable stream object that can be piped
   *   or read from (by registering 'data' event listeners).
   * @!macro nobrowser
   */
  createReadStream: function createReadStream() {
    var streams = AWS.util.stream;
    var req = this;
    var stream = null;

    if (AWS.HttpClient.streamsApiVersion === 2) {
      stream = new streams.PassThrough();
      req.send();
    } else {
      stream = new streams.Stream();
      stream.readable = true;

      stream.sent = false;
      stream.on('newListener', function(event) {
        if (!stream.sent && event === 'data') {
          stream.sent = true;
          process.nextTick(function() { req.send(); });
        }
      });
    }

    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {
      if (statusCode < 300) {
        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);
        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);
        req.on('httpError', function streamHttpError(error) {
          resp.error = error;
          resp.error.retryable = false;
        });

        var shouldCheckContentLength = false;
        var expectedLen;
        if (req.httpRequest.method !== 'HEAD') {
          expectedLen = parseInt(headers['content-length'], 10);
        }
        if (expectedLen !== undefined && !isNaN(expectedLen) && expectedLen >= 0) {
          shouldCheckContentLength = true;
          var receivedLen = 0;
        }

        var checkContentLengthAndEmit = function checkContentLengthAndEmit() {
          if (shouldCheckContentLength && receivedLen !== expectedLen) {
            stream.emit('error', AWS.util.error(
              new Error('Stream content length mismatch. Received ' +
                receivedLen + ' of ' + expectedLen + ' bytes.'),
              { code: 'StreamContentLengthMismatch' }
            ));
          } else if (AWS.HttpClient.streamsApiVersion === 2) {
            stream.end();
          } else {
            stream.emit('end')
          }
        }

        var httpStream = resp.httpResponse.createUnbufferedStream();

        if (AWS.HttpClient.streamsApiVersion === 2) {
          if (shouldCheckContentLength) {
            var lengthAccumulator = new streams.PassThrough();
            lengthAccumulator._write = function(chunk) {
              if (chunk && chunk.length) {
                receivedLen += chunk.length;
              }
              return streams.PassThrough.prototype._write.apply(this, arguments);
            };

            lengthAccumulator.on('end', checkContentLengthAndEmit);
            httpStream.pipe(lengthAccumulator).pipe(stream, { end: false });
          } else {
            httpStream.pipe(stream);
          }
        } else {

          if (shouldCheckContentLength) {
            httpStream.on('data', function(arg) {
              if (arg && arg.length) {
                receivedLen += arg.length;
              }
            });
          }

          httpStream.on('data', function(arg) {
            stream.emit('data', arg);
          });
          httpStream.on('end', checkContentLengthAndEmit);
        }

        httpStream.on('error', function(err) {
          shouldCheckContentLength = false;
          stream.emit('error', err);
        });
      }
    });

    this.on('error', function(err) {
      stream.emit('error', err);
    });

    return stream;
  },

  /**
   * @param [Array,Response] args This should be the response object,
   *   or an array of args to send to the event.
   * @api private
   */
  emitEvent: function emit(eventName, args, done) {
    if (typeof args === 'function') { done = args; args = null; }
    if (!done) done = function() { };
    if (!args) args = this.eventParameters(eventName, this.response);

    var origEmit = AWS.SequentialExecutor.prototype.emit;
    origEmit.call(this, eventName, args, function (err) {
      if (err) this.response.error = err;
      done.call(this, err);
    });
  },

  /**
   * @api private
   */
  eventParameters: function eventParameters(eventName) {
    switch (eventName) {
      case 'restart':
      case 'validate':
      case 'sign':
      case 'build':
      case 'afterValidate':
      case 'afterBuild':
        return [this];
      case 'error':
        return [this.response.error, this.response];
      default:
        return [this.response];
    }
  },

  /**
   * @api private
   */
  presign: function presign(expires, callback) {
    if (!callback && typeof expires === 'function') {
      callback = expires;
      expires = null;
    }
    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);
  },

  /**
   * @api private
   */
  isPresigned: function isPresigned() {
    return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, 'presigned-expires');
  },

  /**
   * @api private
   */
  toUnauthenticated: function toUnauthenticated() {
    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);
    this.removeListener('sign', AWS.EventListeners.Core.SIGN);
    return this;
  },

  /**
   * @api private
   */
  toGet: function toGet() {
    if (this.service.api.protocol === 'query' ||
        this.service.api.protocol === 'ec2') {
      this.removeListener('build', this.buildAsGet);
      this.addListener('build', this.buildAsGet);
    }
    return this;
  },

  /**
   * @api private
   */
  buildAsGet: function buildAsGet(request) {
    request.httpRequest.method = 'GET';
    request.httpRequest.path = request.service.endpoint.path +
                               '?' + request.httpRequest.body;
    request.httpRequest.body = '';

    // don't need these headers on a GET request
    delete request.httpRequest.headers['Content-Length'];
    delete request.httpRequest.headers['Content-Type'];
  },

  /**
   * @api private
   */
  haltHandlersOnError: function haltHandlersOnError() {
    this._haltHandlersOnError = true;
  }
});

/**
 * @api private
 */
AWS.Request.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.promise = function promise() {
    var self = this;
    // append to user agent
    this.httpRequest.appendToUserAgent('promise');
    return new PromiseDependency(function(resolve, reject) {
      self.on('complete', function(resp) {
        if (resp.error) {
          reject(resp.error);
        } else {
          resolve(resp.data);
        }
      });
      self.runTo();
    });
  };
};

/**
 * @api private
 */
AWS.Request.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.promise;
};

AWS.util.addPromises(AWS.Request);

AWS.util.mixin(AWS.Request, AWS.SequentialExecutor);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;
var jmespath = __webpack_require__(78);

/**
 * @api private
 */
function CHECK_ACCEPTORS(resp) {
  var waiter = resp.request._waiter;
  var acceptors = waiter.config.acceptors;
  var acceptorMatched = false;
  var state = 'retry';

  acceptors.forEach(function(acceptor) {
    if (!acceptorMatched) {
      var matcher = waiter.matchers[acceptor.matcher];
      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {
        acceptorMatched = true;
        state = acceptor.state;
      }
    }
  });

  if (!acceptorMatched && resp.error) state = 'failure';

  if (state === 'success') {
    waiter.setSuccess(resp);
  } else {
    waiter.setError(resp, state === 'retry');
  }
}

/**
 * @api private
 */
AWS.ResourceWaiter = inherit({
  /**
   * Waits for a given state on a service object
   * @param service [Service] the service object to wait on
   * @param state [String] the state (defined in waiter configuration) to wait
   *   for.
   * @example Create a waiter for running EC2 instances
   *   var ec2 = new AWS.EC2;
   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');
   */
  constructor: function constructor(service, state) {
    this.service = service;
    this.state = state;
    this.loadWaiterConfig(this.state);
  },

  service: null,

  state: null,

  config: null,

  matchers: {
    path: function(resp, expected, argument) {
      var result = jmespath.search(resp.data, argument);
      return jmespath.strictDeepEqual(result,expected);
    },

    pathAll: function(resp, expected, argument) {
      var results = jmespath.search(resp.data, argument);
      if (!Array.isArray(results)) results = [results];
      var numResults = results.length;
      if (!numResults) return false;
      for (var ind = 0 ; ind < numResults; ind++) {
        if (!jmespath.strictDeepEqual(results[ind], expected)) {
          return false;
        }
      }
      return true;
    },

    pathAny: function(resp, expected, argument) {
      var results = jmespath.search(resp.data, argument);
      if (!Array.isArray(results)) results = [results];
      var numResults = results.length;
      for (var ind = 0 ; ind < numResults; ind++) {
        if (jmespath.strictDeepEqual(results[ind], expected)) {
          return true;
        }
      }
      return false;
    },

    status: function(resp, expected) {
      var statusCode = resp.httpResponse.statusCode;
      return (typeof statusCode === 'number') && (statusCode === expected);
    },

    error: function(resp, expected) {
      if (typeof expected === 'string' && resp.error) {
        return expected === resp.error.code;
      }
      // if expected is not string, can be boolean indicating presence of error
      return expected === !!resp.error;
    }
  },

  listeners: new AWS.SequentialExecutor().addNamedListeners(function(add) {
    add('RETRY_CHECK', 'retry', function(resp) {
      var waiter = resp.request._waiter;
      if (resp.error && resp.error.code === 'ResourceNotReady') {
        resp.error.retryDelay = (waiter.config.delay || 0) * 1000;
      }
    });

    add('CHECK_OUTPUT', 'extractData', CHECK_ACCEPTORS);

    add('CHECK_ERROR', 'extractError', CHECK_ACCEPTORS);
  }),

  /**
   * @return [AWS.Request]
   */
  wait: function wait(params, callback) {
    if (typeof params === 'function') {
      callback = params; params = undefined;
    }

    if (params && params.$waiter) {
      params = AWS.util.copy(params);
      if (typeof params.$waiter.delay === 'number') {
        this.config.delay = params.$waiter.delay;
      }
      if (typeof params.$waiter.maxAttempts === 'number') {
        this.config.maxAttempts = params.$waiter.maxAttempts;
      }
      delete params.$waiter;
    }

    var request = this.service.makeRequest(this.config.operation, params);
    request._waiter = this;
    request.response.maxRetries = this.config.maxAttempts;
    request.addListeners(this.listeners);

    if (callback) request.send(callback);
    return request;
  },

  setSuccess: function setSuccess(resp) {
    resp.error = null;
    resp.data = resp.data || {};
    resp.request.removeAllListeners('extractData');
  },

  setError: function setError(resp, retryable) {
    resp.data = null;
    resp.error = AWS.util.error(resp.error || new Error(), {
      code: 'ResourceNotReady',
      message: 'Resource is not in the state ' + this.state,
      retryable: retryable
    });
  },

  /**
   * Loads waiter configuration from API configuration
   *
   * @api private
   */
  loadWaiterConfig: function loadWaiterConfig(state) {
    if (!this.service.api.waiters[state]) {
      throw new AWS.util.error(new Error(), {
        code: 'StateNotFoundError',
        message: 'State ' + state + ' not found.'
      });
    }

    this.config = AWS.util.copy(this.service.api.waiters[state]);
  }
});


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;
var jmespath = __webpack_require__(78);

/**
 * This class encapsulates the response information
 * from a service request operation sent through {AWS.Request}.
 * The response object has two main properties for getting information
 * back from a request:
 *
 * ## The `data` property
 *
 * The `response.data` property contains the serialized object data
 * retrieved from the service request. For instance, for an
 * Amazon DynamoDB `listTables` method call, the response data might
 * look like:
 *
 * ```
 * > resp.data
 * { TableNames:
 *    [ 'table1', 'table2', ... ] }
 * ```
 *
 * The `data` property can be null if an error occurs (see below).
 *
 * ## The `error` property
 *
 * In the event of a service error (or transfer error), the
 * `response.error` property will be filled with the given
 * error data in the form:
 *
 * ```
 * { code: 'SHORT_UNIQUE_ERROR_CODE',
 *   message: 'Some human readable error message' }
 * ```
 *
 * In the case of an error, the `data` property will be `null`.
 * Note that if you handle events that can be in a failure state,
 * you should always check whether `response.error` is set
 * before attempting to access the `response.data` property.
 *
 * @!attribute data
 *   @readonly
 *   @!group Data Properties
 *   @note Inside of a {AWS.Request~httpData} event, this
 *     property contains a single raw packet instead of the
 *     full de-serialized service response.
 *   @return [Object] the de-serialized response data
 *     from the service.
 *
 * @!attribute error
 *   An structure containing information about a service
 *   or networking error.
 *   @readonly
 *   @!group Data Properties
 *   @note This attribute is only filled if a service or
 *     networking error occurs.
 *   @return [Error]
 *     * code [String] a unique short code representing the
 *       error that was emitted.
 *     * message [String] a longer human readable error message
 *     * retryable [Boolean] whether the error message is
 *       retryable.
 *     * statusCode [Numeric] in the case of a request that reached the service,
 *       this value contains the response status code.
 *     * time [Date] the date time object when the error occurred.
 *     * hostname [String] set when a networking error occurs to easily
 *       identify the endpoint of the request.
 *     * region [String] set when a networking error occurs to easily
 *       identify the region of the request.
 *
 * @!attribute requestId
 *   @readonly
 *   @!group Data Properties
 *   @return [String] the unique request ID associated with the response.
 *     Log this value when debugging requests for AWS support.
 *
 * @!attribute retryCount
 *   @readonly
 *   @!group Operation Properties
 *   @return [Integer] the number of retries that were
 *     attempted before the request was completed.
 *
 * @!attribute redirectCount
 *   @readonly
 *   @!group Operation Properties
 *   @return [Integer] the number of redirects that were
 *     followed before the request was completed.
 *
 * @!attribute httpResponse
 *   @readonly
 *   @!group HTTP Properties
 *   @return [AWS.HttpResponse] the raw HTTP response object
 *     containing the response headers and body information
 *     from the server.
 *
 * @see AWS.Request
 */
AWS.Response = inherit({

  /**
   * @api private
   */
  constructor: function Response(request) {
    this.request = request;
    this.data = null;
    this.error = null;
    this.retryCount = 0;
    this.redirectCount = 0;
    this.httpResponse = new AWS.HttpResponse();
    if (request) {
      this.maxRetries = request.service.numRetries();
      this.maxRedirects = request.service.config.maxRedirects;
    }
  },

  /**
   * Creates a new request for the next page of response data, calling the
   * callback with the page data if a callback is provided.
   *
   * @callback callback function(err, data)
   *   Called when a page of data is returned from the next request.
   *
   *   @param err [Error] an error object, if an error occurred in the request
   *   @param data [Object] the next page of data, or null, if there are no
   *     more pages left.
   * @return [AWS.Request] the request object for the next page of data
   * @return [null] if no callback is provided and there are no pages left
   *   to retrieve.
   * @since v1.4.0
   */
  nextPage: function nextPage(callback) {
    var config;
    var service = this.request.service;
    var operation = this.request.operation;
    try {
      config = service.paginationConfig(operation, true);
    } catch (e) { this.error = e; }

    if (!this.hasNextPage()) {
      if (callback) callback(this.error, null);
      else if (this.error) throw this.error;
      return null;
    }

    var params = AWS.util.copy(this.request.params);
    if (!this.nextPageTokens) {
      return callback ? callback(null, null) : null;
    } else {
      var inputTokens = config.inputToken;
      if (typeof inputTokens === 'string') inputTokens = [inputTokens];
      for (var i = 0; i < inputTokens.length; i++) {
        params[inputTokens[i]] = this.nextPageTokens[i];
      }
      return service.makeRequest(this.request.operation, params, callback);
    }
  },

  /**
   * @return [Boolean] whether more pages of data can be returned by further
   *   requests
   * @since v1.4.0
   */
  hasNextPage: function hasNextPage() {
    this.cacheNextPageTokens();
    if (this.nextPageTokens) return true;
    if (this.nextPageTokens === undefined) return undefined;
    else return false;
  },

  /**
   * @api private
   */
  cacheNextPageTokens: function cacheNextPageTokens() {
    if (Object.prototype.hasOwnProperty.call(this, 'nextPageTokens')) return this.nextPageTokens;
    this.nextPageTokens = undefined;

    var config = this.request.service.paginationConfig(this.request.operation);
    if (!config) return this.nextPageTokens;

    this.nextPageTokens = null;
    if (config.moreResults) {
      if (!jmespath.search(this.data, config.moreResults)) {
        return this.nextPageTokens;
      }
    }

    var exprs = config.outputToken;
    if (typeof exprs === 'string') exprs = [exprs];
    AWS.util.arrayEach.call(this, exprs, function (expr) {
      var output = jmespath.search(this.data, expr);
      if (output) {
        this.nextPageTokens = this.nextPageTokens || [];
        this.nextPageTokens.push(output);
      }
    });

    return this.nextPageTokens;
  }

});


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.CognitoIdentity.prototype, {
  getOpenIdToken: function getOpenIdToken(params, callback) {
    return this.makeUnauthenticatedRequest('getOpenIdToken', params, callback);
  },

  getId: function getId(params, callback) {
    return this.makeUnauthenticatedRequest('getId', params, callback);
  },

  getCredentialsForIdentity: function getCredentialsForIdentity(params, callback) {
    return this.makeUnauthenticatedRequest('getCredentialsForIdentity', params, callback);
  }
});


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.SQS.prototype, {
  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    request.addListener('build', this.buildEndpoint);

    if (request.service.config.computeChecksums) {
      if (request.operation === 'sendMessage') {
        request.addListener('extractData', this.verifySendMessageChecksum);
      } else if (request.operation === 'sendMessageBatch') {
        request.addListener('extractData', this.verifySendMessageBatchChecksum);
      } else if (request.operation === 'receiveMessage') {
        request.addListener('extractData', this.verifyReceiveMessageChecksum);
      }
    }
  },

  /**
   * @api private
   */
  verifySendMessageChecksum: function verifySendMessageChecksum(response) {
    if (!response.data) return;

    var md5 = response.data.MD5OfMessageBody;
    var body = this.params.MessageBody;
    var calculatedMd5 = this.service.calculateChecksum(body);
    if (calculatedMd5 !== md5) {
      var msg = 'Got "' + response.data.MD5OfMessageBody +
        '", expecting "' + calculatedMd5 + '".';
      this.service.throwInvalidChecksumError(response,
        [response.data.MessageId], msg);
    }
  },

  /**
   * @api private
   */
  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {
    if (!response.data) return;

    var service = this.service;
    var entries = {};
    var errors = [];
    var messageIds = [];
    AWS.util.arrayEach(response.data.Successful, function (entry) {
      entries[entry.Id] = entry;
    });
    AWS.util.arrayEach(this.params.Entries, function (entry) {
      if (entries[entry.Id]) {
        var md5 = entries[entry.Id].MD5OfMessageBody;
        var body = entry.MessageBody;
        if (!service.isChecksumValid(md5, body)) {
          errors.push(entry.Id);
          messageIds.push(entries[entry.Id].MessageId);
        }
      }
    });

    if (errors.length > 0) {
      service.throwInvalidChecksumError(response, messageIds,
        'Invalid messages: ' + errors.join(', '));
    }
  },

  /**
   * @api private
   */
  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {
    if (!response.data) return;

    var service = this.service;
    var messageIds = [];
    AWS.util.arrayEach(response.data.Messages, function(message) {
      var md5 = message.MD5OfBody;
      var body = message.Body;
      if (!service.isChecksumValid(md5, body)) {
        messageIds.push(message.MessageId);
      }
    });

    if (messageIds.length > 0) {
      service.throwInvalidChecksumError(response, messageIds,
        'Invalid messages: ' + messageIds.join(', '));
    }
  },

  /**
   * @api private
   */
  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {
    response.error = AWS.util.error(new Error(), {
      retryable: true,
      code: 'InvalidChecksum',
      messageIds: ids,
      message: response.request.operation +
               ' returned an invalid MD5 response. ' + message
    });
  },

  /**
   * @api private
   */
  isChecksumValid: function isChecksumValid(checksum, data) {
    return this.calculateChecksum(data) === checksum;
  },

  /**
   * @api private
   */
  calculateChecksum: function calculateChecksum(data) {
    return AWS.util.crypto.md5(data, 'hex');
  },

  /**
   * @api private
   */
  buildEndpoint: function buildEndpoint(request) {
    var url = request.httpRequest.params.QueueUrl;
    if (url) {
      request.httpRequest.endpoint = new AWS.Endpoint(url);

      // signature version 4 requires the region name to be set,
      // sqs queue urls contain the region name
      var matches = request.httpRequest.endpoint.host.match(/^sqs\.(.+?)\./);
      if (matches) request.httpRequest.region = matches[1];
    }
  }
});


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.STS.prototype, {
  /**
   * @overload credentialsFrom(data, credentials = null)
   *   Creates a credentials object from STS response data containing
   *   credentials information. Useful for quickly setting AWS credentials.
   *
   *   @note This is a low-level utility function. If you want to load temporary
   *     credentials into your process for subsequent requests to AWS resources,
   *     you should use {AWS.TemporaryCredentials} instead.
   *   @param data [map] data retrieved from a call to {getFederatedToken},
   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.
   *   @param credentials [AWS.Credentials] an optional credentials object to
   *     fill instead of creating a new object. Useful when modifying an
   *     existing credentials object from a refresh call.
   *   @return [AWS.TemporaryCredentials] the set of temporary credentials
   *     loaded from a raw STS operation response.
   *   @example Using credentialsFrom to load global AWS credentials
   *     var sts = new AWS.STS();
   *     sts.getSessionToken(function (err, data) {
   *       if (err) console.log("Error getting credentials");
   *       else {
   *         AWS.config.credentials = sts.credentialsFrom(data);
   *       }
   *     });
   *   @see AWS.TemporaryCredentials
   */
  credentialsFrom: function credentialsFrom(data, credentials) {
    if (!data) return null;
    if (!credentials) credentials = new AWS.TemporaryCredentials();
    credentials.expired = false;
    credentials.accessKeyId = data.Credentials.AccessKeyId;
    credentials.secretAccessKey = data.Credentials.SecretAccessKey;
    credentials.sessionToken = data.Credentials.SessionToken;
    credentials.expireTime = data.Credentials.Expiration;
    return credentials;
  },

  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {
    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);
  },

  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {
    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);
  }
});


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
var expiresHeader = 'presigned-expires';

/**
 * @api private
 */
function signedUrlBuilder(request) {
  var expires = request.httpRequest.headers[expiresHeader];
  var signerClass = request.service.getSignerClass(request);

  delete request.httpRequest.headers['User-Agent'];
  delete request.httpRequest.headers['X-Amz-User-Agent'];

  if (signerClass === AWS.Signers.V4) {
    if (expires > 604800) { // one week expiry is invalid
      var message = 'Presigning does not support expiry time greater ' +
                    'than a week with SigV4 signing.';
      throw AWS.util.error(new Error(), {
        code: 'InvalidExpiryTime', message: message, retryable: false
      });
    }
    request.httpRequest.headers[expiresHeader] = expires;
  } else if (signerClass === AWS.Signers.S3) {
    request.httpRequest.headers[expiresHeader] = parseInt(
      AWS.util.date.unixTimestamp() + expires, 10).toString();
  } else {
    throw AWS.util.error(new Error(), {
      message: 'Presigning only supports S3 or SigV4 signing.',
      code: 'UnsupportedSigner', retryable: false
    });
  }
}

/**
 * @api private
 */
function signedUrlSigner(request) {
  var endpoint = request.httpRequest.endpoint;
  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);
  var queryParams = {};

  if (parsedUrl.search) {
    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));
  }

  AWS.util.each(request.httpRequest.headers, function (key, value) {
    if (key === expiresHeader) key = 'Expires';
    if (key.indexOf('x-amz-meta-') === 0) {
      // Delete existing, potentially not normalized key
      delete queryParams[key];
      key = key.toLowerCase();
    }
    queryParams[key] = value;
  });
  delete request.httpRequest.headers[expiresHeader];

  var auth = queryParams['Authorization'].split(' ');
  if (auth[0] === 'AWS') {
    auth = auth[1].split(':');
    queryParams['AWSAccessKeyId'] = auth[0];
    queryParams['Signature'] = auth[1];
  } else if (auth[0] === 'AWS4-HMAC-SHA256') { // SigV4 signing
    auth.shift();
    var rest = auth.join(' ');
    var signature = rest.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];
    queryParams['X-Amz-Signature'] = signature;
    delete queryParams['Expires'];
  }
  delete queryParams['Authorization'];
  delete queryParams['Host'];

  // build URL
  endpoint.pathname = parsedUrl.pathname;
  endpoint.search = AWS.util.queryParamsToString(queryParams);
}

/**
 * @api private
 */
AWS.Signers.Presign = inherit({
  /**
   * @api private
   */
  sign: function sign(request, expireTime, callback) {
    request.httpRequest.headers[expiresHeader] = expireTime || 3600;
    request.on('build', signedUrlBuilder);
    request.on('sign', signedUrlSigner);
    request.removeListener('afterBuild',
      AWS.EventListeners.Core.SET_CONTENT_LENGTH);
    request.removeListener('afterBuild',
      AWS.EventListeners.Core.COMPUTE_SHA256);

    request.emit('beforePresign', [request]);

    if (callback) {
      request.build(function() {
        if (this.response.error) callback(this.response.error);
        else {
          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));
        }
      });
    } else {
      request.build();
      if (request.response.error) throw request.response.error;
      return AWS.util.urlFormat(request.httpRequest.endpoint);
    }
  }
});

module.exports = AWS.Signers.Presign;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.RequestSigner = inherit({
  constructor: function RequestSigner(request) {
    this.request = request;
  },

  setServiceClientId: function setServiceClientId(id) {
    this.serviceClientId = id;
  },

  getServiceClientId: function getServiceClientId() {
    return this.serviceClientId;
  }
});

AWS.Signers.RequestSigner.getVersion = function getVersion(version) {
  switch (version) {
    case 'v2': return AWS.Signers.V2;
    case 'v3': return AWS.Signers.V3;
    case 'v4': return AWS.Signers.V4;
    case 's3': return AWS.Signers.S3;
    case 'v3https': return AWS.Signers.V3Https;
  }
  throw new Error('Unknown signing version ' + version);
};

__webpack_require__(210);
__webpack_require__(108);
__webpack_require__(211);
__webpack_require__(212);
__webpack_require__(209);
__webpack_require__(207);


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {
  /**
   * When building the stringToSign, these sub resource params should be
   * part of the canonical resource string with their NON-decoded values
   */
  subResources: {
    'acl': 1,
    'accelerate': 1,
    'analytics': 1,
    'cors': 1,
    'lifecycle': 1,
    'delete': 1,
    'inventory': 1,
    'location': 1,
    'logging': 1,
    'metrics': 1,
    'notification': 1,
    'partNumber': 1,
    'policy': 1,
    'requestPayment': 1,
    'replication': 1,
    'restore': 1,
    'tagging': 1,
    'torrent': 1,
    'uploadId': 1,
    'uploads': 1,
    'versionId': 1,
    'versioning': 1,
    'versions': 1,
    'website': 1
  },

  // when building the stringToSign, these querystring params should be
  // part of the canonical resource string with their NON-encoded values
  responseHeaders: {
    'response-content-type': 1,
    'response-content-language': 1,
    'response-expires': 1,
    'response-cache-control': 1,
    'response-content-disposition': 1,
    'response-content-encoding': 1
  },

  addAuthorization: function addAuthorization(credentials, date) {
    if (!this.request.headers['presigned-expires']) {
      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);
    }

    if (credentials.sessionToken) {
      // presigned URLs require this header to be lowercased
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
    }

    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());
    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;

    this.request.headers['Authorization'] = auth;
  },

  stringToSign: function stringToSign() {
    var r = this.request;

    var parts = [];
    parts.push(r.method);
    parts.push(r.headers['Content-MD5'] || '');
    parts.push(r.headers['Content-Type'] || '');

    // This is the "Date" header, but we use X-Amz-Date.
    // The S3 signing mechanism requires us to pass an empty
    // string for this Date header regardless.
    parts.push(r.headers['presigned-expires'] || '');

    var headers = this.canonicalizedAmzHeaders();
    if (headers) parts.push(headers);
    parts.push(this.canonicalizedResource());

    return parts.join('\n');

  },

  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {

    var amzHeaders = [];

    AWS.util.each(this.request.headers, function (name) {
      if (name.match(/^x-amz-/i))
        amzHeaders.push(name);
    });

    amzHeaders.sort(function (a, b) {
      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
    });

    var parts = [];
    AWS.util.arrayEach.call(this, amzHeaders, function (name) {
      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));
    });

    return parts.join('\n');

  },

  canonicalizedResource: function canonicalizedResource() {

    var r = this.request;

    var parts = r.path.split('?');
    var path = parts[0];
    var querystring = parts[1];

    var resource = '';

    if (r.virtualHostedBucket)
      resource += '/' + r.virtualHostedBucket;

    resource += path;

    if (querystring) {

      // collect a list of sub resources and query params that need to be signed
      var resources = [];

      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {
        var name = param.split('=')[0];
        var value = param.split('=')[1];
        if (this.subResources[name] || this.responseHeaders[name]) {
          var subresource = { name: name };
          if (value !== undefined) {
            if (this.subResources[name]) {
              subresource.value = value;
            } else {
              subresource.value = decodeURIComponent(value);
            }
          }
          resources.push(subresource);
        }
      });

      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });

      if (resources.length) {

        querystring = [];
        AWS.util.arrayEach(resources, function (res) {
          if (res.value === undefined) {
            querystring.push(res.name);
          } else {
            querystring.push(res.name + '=' + res.value);
          }
        });

        resource += '?' + querystring.join('&');
      }

    }

    return resource;

  },

  sign: function sign(secret, string) {
    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');
  }
});

module.exports = AWS.Signers.S3;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {
  addAuthorization: function addAuthorization(credentials, date) {

    if (!date) date = AWS.util.date.getDate();

    var r = this.request;

    r.params.Timestamp = AWS.util.date.iso8601(date);
    r.params.SignatureVersion = '2';
    r.params.SignatureMethod = 'HmacSHA256';
    r.params.AWSAccessKeyId = credentials.accessKeyId;

    if (credentials.sessionToken) {
      r.params.SecurityToken = credentials.sessionToken;
    }

    delete r.params.Signature; // delete old Signature for re-signing
    r.params.Signature = this.signature(credentials);

    r.body = AWS.util.queryParamsToString(r.params);
    r.headers['Content-Length'] = r.body.length;
  },

  signature: function signature(credentials) {
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
  },

  stringToSign: function stringToSign() {
    var parts = [];
    parts.push(this.request.method);
    parts.push(this.request.endpoint.host.toLowerCase());
    parts.push(this.request.pathname());
    parts.push(AWS.util.queryParamsToString(this.request.params));
    return parts.join('\n');
  }

});

module.exports = AWS.Signers.V2;


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

__webpack_require__(108);

/**
 * @api private
 */
AWS.Signers.V3Https = inherit(AWS.Signers.V3, {
  authorization: function authorization(credentials) {
    return 'AWS3-HTTPS ' +
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
      'Algorithm=HmacSHA256,' +
      'Signature=' + this.signature(credentials);
  },

  stringToSign: function stringToSign() {
    return this.request.headers['X-Amz-Date'];
  }
});

module.exports = AWS.Signers.V3Https;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var v4Credentials = __webpack_require__(213);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
var expiresHeader = 'presigned-expires';

/**
 * @api private
 */
AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {
  constructor: function V4(request, serviceName, options) {
    AWS.Signers.RequestSigner.call(this, request);
    this.serviceName = serviceName;
    options = options || {};
    this.signatureCache = typeof options.signatureCache === 'boolean' ? options.signatureCache : true;
    this.operation = options.operation;
  },

  algorithm: 'AWS4-HMAC-SHA256',

  addAuthorization: function addAuthorization(credentials, date) {
    var datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, '');

    if (this.isPresigned()) {
      this.updateForPresigned(credentials, datetime);
    } else {
      this.addHeaders(credentials, datetime);
    }

    this.request.headers['Authorization'] =
      this.authorization(credentials, datetime);
  },

  addHeaders: function addHeaders(credentials, datetime) {
    this.request.headers['X-Amz-Date'] = datetime;
    if (credentials.sessionToken) {
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
    }
  },

  updateForPresigned: function updateForPresigned(credentials, datetime) {
    var credString = this.credentialString(datetime);
    var qs = {
      'X-Amz-Date': datetime,
      'X-Amz-Algorithm': this.algorithm,
      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,
      'X-Amz-Expires': this.request.headers[expiresHeader],
      'X-Amz-SignedHeaders': this.signedHeaders()
    };

    if (credentials.sessionToken) {
      qs['X-Amz-Security-Token'] = credentials.sessionToken;
    }

    if (this.request.headers['Content-Type']) {
      qs['Content-Type'] = this.request.headers['Content-Type'];
    }
    if (this.request.headers['Content-MD5']) {
      qs['Content-MD5'] = this.request.headers['Content-MD5'];
    }
    if (this.request.headers['Cache-Control']) {
      qs['Cache-Control'] = this.request.headers['Cache-Control'];
    }

    // need to pull in any other X-Amz-* headers
    AWS.util.each.call(this, this.request.headers, function(key, value) {
      if (key === expiresHeader) return;
      if (this.isSignableHeader(key)) {
        var lowerKey = key.toLowerCase();
        // Metadata should be normalized
        if (lowerKey.indexOf('x-amz-meta-') === 0) {
          qs[lowerKey] = value;
        } else if (lowerKey.indexOf('x-amz-') === 0) {
          qs[key] = value;
        }
      }
    });

    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';
    this.request.path += sep + AWS.util.queryParamsToString(qs);
  },

  authorization: function authorization(credentials, datetime) {
    var parts = [];
    var credString = this.credentialString(datetime);
    parts.push(this.algorithm + ' Credential=' +
      credentials.accessKeyId + '/' + credString);
    parts.push('SignedHeaders=' + this.signedHeaders());
    parts.push('Signature=' + this.signature(credentials, datetime));
    return parts.join(', ');
  },

  signature: function signature(credentials, datetime) {
    var signingKey = v4Credentials.getSigningKey(
      credentials,
      datetime.substr(0, 8),
      this.request.region,
      this.serviceName,
      this.signatureCache
    );
    return AWS.util.crypto.hmac(signingKey, this.stringToSign(datetime), 'hex');
  },

  stringToSign: function stringToSign(datetime) {
    var parts = [];
    parts.push('AWS4-HMAC-SHA256');
    parts.push(datetime);
    parts.push(this.credentialString(datetime));
    parts.push(this.hexEncodedHash(this.canonicalString()));
    return parts.join('\n');
  },

  canonicalString: function canonicalString() {
    var parts = [], pathname = this.request.pathname();
    if (this.serviceName !== 's3') pathname = AWS.util.uriEscapePath(pathname);

    parts.push(this.request.method);
    parts.push(pathname);
    parts.push(this.request.search());
    parts.push(this.canonicalHeaders() + '\n');
    parts.push(this.signedHeaders());
    parts.push(this.hexEncodedBodyHash());
    return parts.join('\n');
  },

  canonicalHeaders: function canonicalHeaders() {
    var headers = [];
    AWS.util.each.call(this, this.request.headers, function (key, item) {
      headers.push([key, item]);
    });
    headers.sort(function (a, b) {
      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;
    });
    var parts = [];
    AWS.util.arrayEach.call(this, headers, function (item) {
      var key = item[0].toLowerCase();
      if (this.isSignableHeader(key)) {
        parts.push(key + ':' +
          this.canonicalHeaderValues(item[1].toString()));
      }
    });
    return parts.join('\n');
  },

  canonicalHeaderValues: function canonicalHeaderValues(values) {
    return values.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
  },

  signedHeaders: function signedHeaders() {
    var keys = [];
    AWS.util.each.call(this, this.request.headers, function (key) {
      key = key.toLowerCase();
      if (this.isSignableHeader(key)) keys.push(key);
    });
    return keys.sort().join(';');
  },

  credentialString: function credentialString(datetime) {
    return v4Credentials.createScope(
      datetime.substr(0, 8),
      this.request.region,
      this.serviceName
    );
  },

  hexEncodedHash: function hash(string) {
    return AWS.util.crypto.sha256(string, 'hex');
  },

  hexEncodedBodyHash: function hexEncodedBodyHash() {
    var request = this.request;
    if (this.isPresigned() && this.serviceName === 's3' && !request.body) {
      return 'UNSIGNED-PAYLOAD';
    } else if (request.headers['X-Amz-Content-Sha256']) {
      return request.headers['X-Amz-Content-Sha256'];
    } else {
      return this.hexEncodedHash(this.request.body || '');
    }
  },

  unsignableHeaders: [
    'authorization',
    'content-type',
    'content-length',
    'user-agent',
    expiresHeader,
    'expect',
    'x-amzn-trace-id'
  ],

  isSignableHeader: function isSignableHeader(key) {
    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;
    return this.unsignableHeaders.indexOf(key) < 0;
  },

  isPresigned: function isPresigned() {
    return this.request.headers[expiresHeader] ? true : false;
  }

});

module.exports = AWS.Signers.V4;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * @api private
 */
var cachedSecret = {};

/**
 * @api private
 */
var cacheQueue = [];

/**
 * @api private
 */
var maxCacheEntries = 50;

/**
 * @api private
 */
var v4Identifier = 'aws4_request';

module.exports = {
  /**
   * @api private
   *
   * @param date [String]
   * @param region [String]
   * @param serviceName [String]
   * @return [String]
   */
  createScope: function createScope(date, region, serviceName) {
    return [
      date.substr(0, 8),
      region,
      serviceName,
      v4Identifier
    ].join('/');
  },

  /**
   * @api private
   *
   * @param credentials [Credentials]
   * @param date [String]
   * @param region [String]
   * @param service [String]
   * @param shouldCache [Boolean]
   * @return [String]
   */
  getSigningKey: function getSigningKey(
    credentials,
    date,
    region,
    service,
    shouldCache
  ) {
    var credsIdentifier = AWS.util.crypto
      .hmac(credentials.secretAccessKey, credentials.accessKeyId, 'base64');
    var cacheKey = [credsIdentifier, date, region, service].join('_');
    shouldCache = shouldCache !== false;
    if (shouldCache && (cacheKey in cachedSecret)) {
      return cachedSecret[cacheKey];
    }

    var kDate = AWS.util.crypto.hmac(
      'AWS4' + credentials.secretAccessKey,
      date,
      'buffer'
    );
    var kRegion = AWS.util.crypto.hmac(kDate, region, 'buffer');
    var kService = AWS.util.crypto.hmac(kRegion, service, 'buffer');

    var signingKey = AWS.util.crypto.hmac(kService, v4Identifier, 'buffer');
    if (shouldCache) {
      cachedSecret[cacheKey] = signingKey;
      cacheQueue.push(cacheKey);
      if (cacheQueue.length > maxCacheEntries) {
        // remove the oldest entry (not the least recently used)
        delete cachedSecret[cacheQueue.shift()];
      }
    }

    return signingKey;
  },

  /**
   * @api private
   *
   * Empties the derived signing key cache. Made available for testing purposes
   * only.
   */
  emptyCache: function emptyCache() {
    cachedSecret = {};
    cacheQueue = [];
  }
};


/***/ }),
/* 214 */
/***/ (function(module, exports) {

function AcceptorStateMachine(states, state) {
  this.currentState = state || null;
  this.states = states || {};
}

AcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {
  if (typeof finalState === 'function') {
    inputError = bindObject; bindObject = done;
    done = finalState; finalState = null;
  }

  var self = this;
  var state = self.states[self.currentState];
  state.fn.call(bindObject || self, inputError, function(err) {
    if (err) {
      if (state.fail) self.currentState = state.fail;
      else return done ? done.call(bindObject, err) : null;
    } else {
      if (state.accept) self.currentState = state.accept;
      else return done ? done.call(bindObject) : null;
    }
    if (self.currentState === finalState) {
      return done ? done.call(bindObject, err) : null;
    }

    self.runTo(finalState, done, bindObject, err);
  });
};

AcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {
  if (typeof acceptState === 'function') {
    fn = acceptState; acceptState = null; failState = null;
  } else if (typeof failState === 'function') {
    fn = failState; failState = null;
  }

  if (!this.currentState) this.currentState = name;
  this.states[name] = { accept: acceptState, fail: failState, fn: fn };
  return this;
};

module.exports = AcceptorStateMachine;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var Shape = __webpack_require__(32);

function DomXmlParser() { }

DomXmlParser.prototype.parse = function(xml, shape) {
  if (xml.replace(/^\s+/, '') === '') return {};

  var result, error;
  try {
    if (window.DOMParser) {
      try {
        var parser = new DOMParser();
        result = parser.parseFromString(xml, 'text/xml');
      } catch (syntaxError) {
        throw util.error(new Error('Parse error in document'),
          {
            originalError: syntaxError,
            code: 'XMLParserError',
            retryable: true
          });
      }

      if (result.documentElement === null) {
        throw util.error(new Error('Cannot parse empty document.'),
          {
            code: 'XMLParserError',
            retryable: true
          });
      }

      var isError = result.getElementsByTagName('parsererror')[0];
      if (isError && (isError.parentNode === result ||
          isError.parentNode.nodeName === 'body' ||
          isError.parentNode.parentNode === result ||
          isError.parentNode.parentNode.nodeName === 'body')) {
        var errorElement = isError.getElementsByTagName('div')[0] || isError;
        throw util.error(new Error(errorElement.textContent || 'Parser error in document'),
          {
            code: 'XMLParserError',
            retryable: true
          });
      }
    } else if (window.ActiveXObject) {
      result = new window.ActiveXObject('Microsoft.XMLDOM');
      result.async = false;

      if (!result.loadXML(xml)) {
        throw util.error(new Error('Parse error in document'),
          {
            code: 'XMLParserError',
            retryable: true
          });
      }
    } else {
      throw new Error('Cannot load XML parser');
    }
  } catch (e) {
    error = e;
  }

  if (result && result.documentElement && !error) {
    var data = parseXml(result.documentElement, shape);
    var metadata = result.getElementsByTagName('ResponseMetadata')[0];
    if (metadata) {
      data.ResponseMetadata = parseXml(metadata, {});
    }
    return data;
  } else if (error) {
    throw util.error(error || new Error(), {code: 'XMLParserError', retryable: true});
  } else { // empty xml document
    return {};
  }
};

function parseXml(xml, shape) {
  if (!shape) shape = {};
  switch (shape.type) {
    case 'structure': return parseStructure(xml, shape);
    case 'map': return parseMap(xml, shape);
    case 'list': return parseList(xml, shape);
    case undefined: case null: return parseUnknown(xml);
    default: return parseScalar(xml, shape);
  }
}

function parseStructure(xml, shape) {
  var data = {};
  if (xml === null) return data;

  util.each(shape.members, function(memberName, memberShape) {
    if (memberShape.isXmlAttribute) {
      if (Object.prototype.hasOwnProperty.call(xml.attributes, memberShape.name)) {
        var value = xml.attributes[memberShape.name].value;
        data[memberName] = parseXml({textContent: value}, memberShape);
      }
    } else {
      var xmlChild = memberShape.flattened ? xml :
        xml.getElementsByTagName(memberShape.name)[0];
      if (xmlChild) {
        data[memberName] = parseXml(xmlChild, memberShape);
      } else if (!memberShape.flattened && memberShape.type === 'list') {
        data[memberName] = memberShape.defaultValue;
      }
    }
  });

  return data;
}

function parseMap(xml, shape) {
  var data = {};
  var xmlKey = shape.key.name || 'key';
  var xmlValue = shape.value.name || 'value';
  var tagName = shape.flattened ? shape.name : 'entry';

  var child = xml.firstElementChild;
  while (child) {
    if (child.nodeName === tagName) {
      var key = child.getElementsByTagName(xmlKey)[0].textContent;
      var value = child.getElementsByTagName(xmlValue)[0];
      data[key] = parseXml(value, shape.value);
    }
    child = child.nextElementSibling;
  }
  return data;
}

function parseList(xml, shape) {
  var data = [];
  var tagName = shape.flattened ? shape.name : (shape.member.name || 'member');

  var child = xml.firstElementChild;
  while (child) {
    if (child.nodeName === tagName) {
      data.push(parseXml(child, shape.member));
    }
    child = child.nextElementSibling;
  }
  return data;
}

function parseScalar(xml, shape) {
  if (xml.getAttribute) {
    var encoding = xml.getAttribute('encoding');
    if (encoding === 'base64') {
      shape = new Shape.create({type: encoding});
    }
  }

  var text = xml.textContent;
  if (text === '') text = null;
  if (typeof shape.toType === 'function') {
    return shape.toType(text);
  } else {
    return text;
  }
}

function parseUnknown(xml) {
  if (xml === undefined || xml === null) return '';

  // empty object
  if (!xml.firstElementChild) {
    if (xml.parentNode.parentNode === null) return {};
    if (xml.childNodes.length === 0) return '';
    else return xml.textContent;
  }

  // object, parse as structure
  var shape = {type: 'structure', members: {}};
  var child = xml.firstElementChild;
  while (child) {
    var tag = child.nodeName;
    if (Object.prototype.hasOwnProperty.call(shape.members, tag)) {
      // multiple tags of the same name makes it a list
      shape.members[tag].type = 'list';
    } else {
      shape.members[tag] = {name: tag};
    }
    child = child.nextElementSibling;
  }
  return parseStructure(xml, shape);
}

module.exports = DomXmlParser;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var builder = __webpack_require__(528);

function XmlBuilder() { }

XmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {
  var xml = builder.create(rootElement);
  applyNamespaces(xml, shape);
  serialize(xml, params, shape);
  return xml.children.length > 0 || noEmpty ? xml.root().toString() : '';
};

function serialize(xml, value, shape) {
  switch (shape.type) {
    case 'structure': return serializeStructure(xml, value, shape);
    case 'map': return serializeMap(xml, value, shape);
    case 'list': return serializeList(xml, value, shape);
    default: return serializeScalar(xml, value, shape);
  }
}

function serializeStructure(xml, params, shape) {
  util.arrayEach(shape.memberNames, function(memberName) {
    var memberShape = shape.members[memberName];
    if (memberShape.location !== 'body') return;

    var value = params[memberName];
    var name = memberShape.name;
    if (value !== undefined && value !== null) {
      if (memberShape.isXmlAttribute) {
        xml.att(name, value);
      } else if (memberShape.flattened) {
        serialize(xml, value, memberShape);
      } else {
        var element = xml.ele(name);
        applyNamespaces(element, memberShape);
        serialize(element, value, memberShape);
      }
    }
  });
}

function serializeMap(xml, map, shape) {
  var xmlKey = shape.key.name || 'key';
  var xmlValue = shape.value.name || 'value';

  util.each(map, function(key, value) {
    var entry = xml.ele(shape.flattened ? shape.name : 'entry');
    serialize(entry.ele(xmlKey), key, shape.key);
    serialize(entry.ele(xmlValue), value, shape.value);
  });
}

function serializeList(xml, list, shape) {
  if (shape.flattened) {
    util.arrayEach(list, function(value) {
      var name = shape.member.name || shape.name;
      var element = xml.ele(name);
      serialize(element, value, shape.member);
    });
  } else {
    util.arrayEach(list, function(value) {
      var name = shape.member.name || 'member';
      var element = xml.ele(name);
      serialize(element, value, shape.member);
    });
  }
}

function serializeScalar(xml, value, shape) {
  xml.txt(shape.toWireFormat(value));
}

function applyNamespaces(xml, shape) {
  var uri, prefix = 'xmlns';
  if (shape.xmlNamespaceUri) {
    uri = shape.xmlNamespaceUri;
    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;
  } else if (xml.isRoot && shape.api.xmlNamespaceUri) {
    uri = shape.api.xmlNamespaceUri;
  }

  if (uri) xml.att(prefix, uri);
}

module.exports = XmlBuilder;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// This file should be ES5 compatible
/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */

module.exports = (function () {
	// Import Events
	var events = __webpack_require__(109)

	// Export Domain
	var domain = {}
	domain.createDomain = domain.create = function () {
		var d = new events.EventEmitter()

		function emitError (e) {
			d.emit('error', e)
		}

		d.add = function (emitter) {
			emitter.on('error', emitError)
		}
		d.remove = function (emitter) {
			emitter.removeListener('error', emitError)
		}
		d.bind = function (fn) {
			return function () {
				var args = Array.prototype.slice.call(arguments)
				try {
					fn.apply(null, args)
				}
				catch (err) {
					emitError(err)
				}
			}
		}
		d.intercept = function (fn) {
			return function (err) {
				if ( err ) {
					emitError(err)
				}
				else {
					var args = Array.prototype.slice.call(arguments, 1)
					try {
						fn.apply(null, args)
					}
					catch (err) {
						emitError(err)
					}
				}
			}
		}
		d.run = function (fn) {
			try {
				fn()
			}
			catch (err) {
				emitError(err)
			}
			return this
		}
		d.dispose = function () {
			this.removeAllListeners()
			return this
		}
		d.enter = d.exit = function () {
			return this
		}
		return d
	}
	return domain
}).call(this)


/***/ }),
/* 218 */
/***/ (function(module, exports) {

exports.lookup = exports.resolve4 =
exports.resolve6 = exports.resolveCname =
exports.resolveMx = exports.resolveNs =
exports.resolveTxt = exports.resolveSrv =
exports.resolveNaptr = exports.reverse =
exports.resolve =
function () {
  if (!arguments.length) return;

  var callback = arguments[arguments.length - 1];
  if (callback && typeof callback === 'function') {
    callback(null, '0.0.0.0')
  }
}



/***/ }),
/* 219 */
/***/ (function(module, exports) {



/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)(module), __webpack_require__(3)))

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"setimmediate\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 225 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 226 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 226;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 8/5/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let ContextProvider = exports.ContextProvider = function () {
  /**
   * @param {Object} runtimeContext
   */
  function ContextProvider(runtimeContext) {
    _classCallCheck(this, ContextProvider);

    this._context = runtimeContext;
  }

  /**
   * @param {Object} event
   * @returns {ContextProvider}
   */


  _createClass(ContextProvider, [{
    key: 'fillContextWithEventData',
    value: function fillContextWithEventData(event) {
      this._context[ContextProvider.FRAMEWORK_NAMESPACE_KEY] = {};
      this._context.getDeepFrameworkOption = function (option) {
        return this[ContextProvider.FRAMEWORK_NAMESPACE_KEY][option];
      };

      [ContextProvider.MAIN_REQUEST_ID, ContextProvider.LAMBDA_DEPTH_LEVEL].forEach(option => {
        if (event.hasOwnProperty(option)) {
          this._context[ContextProvider.FRAMEWORK_NAMESPACE_KEY][option] = event[option];
        }
      });

      // moving _deep_auth_context_ from event to lambda context
      if (event.hasOwnProperty(ContextProvider.DEEP_AUTH_CONTEXT_KEY) && !this._context.hasOwnProperty('identity')) {
        this._context.identity = event[ContextProvider.DEEP_AUTH_CONTEXT_KEY];

        delete event[ContextProvider.DEEP_AUTH_CONTEXT_KEY];
      }

      return this;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'context',
    get: function get() {
      return this._context;
    }

    /**
     * @returns {String}
     */

  }], [{
    key: 'FRAMEWORK_NAMESPACE_KEY',
    get: function get() {
      return 'deepFramework';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'MAIN_REQUEST_ID',
    get: function get() {
      return 'mainRequestId';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'LAMBDA_DEPTH_LEVEL',
    get: function get() {
      return 'lambdaDepthLevel';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'DEEP_AUTH_CONTEXT_KEY',
    get: function get() {
      return '_deep_auth_context_';
    }
  }]);

  return ContextProvider;
}();

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 11/5/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Framework = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepKernel = __webpack_require__(18);

var _deepKernel2 = _interopRequireDefault(_deepKernel);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _ContextProvider = __webpack_require__(227);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let Framework = exports.Framework = function () {
  /**
   * @param {Object} servicesMap
   * @param {String} context
   */
  function Framework(servicesMap, context) {
    _classCallCheck(this, Framework);

    this._context = context;
    this._services = this._resolveServicesMap(servicesMap);
    this._version = __webpack_require__(529).version;
    this._kernelsMap = {};
  }

  /**
   * @returns {string}
   */


  _createClass(Framework, [{
    key: 'LambdaHandler',


    /**
     * @param {DeepFramework.Core.AWS.Lambda.Runtime|Handler|*} Handler
     * @returns {{handler: Function}}
     */
    value: function LambdaHandler(Handler) {
      return {
        handler: (event, context, callback) => {
          this.KernelFromLambdaContext(context, event).bootstrap(deepKernel => {
            new Handler(deepKernel).run(event, context, callback);
          });
        }
      };
    }

    /**
     *
     * @todo: improve it
     *
     * @param {Object} lambdaContext
     * @param {Object} lambdaEvent
     * @returns {Kernel}
     *
     * @sample:
     * ```
     * exports.handler = function (event, context) {
     *   DeepFramework.KernelFromLambdaContext(context).loadFromFile("_config.json", function (deepKernel) {
     *     new Handler(deepKernel).run(event, context);
     *   });
     * };
     * KernelFromLambdaContext
     * ```
     */

  }, {
    key: 'KernelFromLambdaContext',
    value: function KernelFromLambdaContext(lambdaContext, lambdaEvent) {
      let contextProvider = new _ContextProvider.ContextProvider(lambdaContext).fillContextWithEventData(lambdaEvent);

      let identityId = Framework.ANONYMOUS_IDENTITY_KEY;

      if (lambdaContext.hasOwnProperty('identity') && lambdaContext.identity.cognitoIdentityPoolId && lambdaContext.identity.cognitoIdentityId) {

        identityId = lambdaContext.identity.cognitoIdentityId;
      }

      let kernel = this._kernelCached(identityId);

      kernel.runtimeContext = lambdaContext; // @todo: remove "runtimeContext" on next major release
      kernel.contextProvider = contextProvider;

      return kernel;
    }

    /**
     * @param {String} id
     * @returns {Kernel}
     * @constructor
     */

  }, {
    key: '_kernelCached',
    value: function _kernelCached(id) {
      if (this._kernelsMap.hasOwnProperty(id)) {
        return this._kernelsMap[id];
      }

      this._kernelsMap[id] = this._createKernel();

      return this._kernelsMap[id];
    }

    /**
     * @todo: remove method in next release (back compatibility)
     *
     * @returns {Kernel}
     * @constructor
     */

  }, {
    key: '_resolveServicesMap',


    /**
     * @param {Object} servicesMap
     * @returns {Object}
     * @private
     */
    value: function _resolveServicesMap(servicesMap) {
      let services = {};

      for (let serviceName in servicesMap) {
        if (!servicesMap.hasOwnProperty(serviceName)) {
          continue;
        }

        let serviceObj = servicesMap[serviceName];

        if (typeof serviceObj === 'string') {
          serviceObj = !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
        }

        services[serviceName] = serviceObj;
      }

      return services;
    }

    /**
     * @returns {Kernel}
     * @private
     */

  }, {
    key: '_createKernel',
    value: function _createKernel() {
      return new _deepKernel2.default(this._services, this._context);
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'context',


    /**
     * @returns {String}
     */
    get: function get() {
      return this._context;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'version',
    get: function get() {
      return this._version;
    }
  }, {
    key: 'Kernel',
    get: function get() {
      return this._kernelCached(Framework.ANONYMOUS_IDENTITY_KEY);
    }

    /**
     * @returns {Function}
     * @constructor
     */

  }, {
    key: 'Core',
    get: function get() {
      return _deepCore2.default;
    }
  }], [{
    key: 'ANONYMOUS_IDENTITY_KEY',
    get: function get() {
      return 'anonymous';
    }
  }, {
    key: 'BACKEND_CONTEXT',
    get: function get() {
      return _deepKernel2.default.BACKEND_CONTEXT;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'FRONTEND_CONTEXT',
    get: function get() {
      return _deepKernel2.default.FRONTEND_CONTEXT;
    }
  }]);

  return Framework;
}();

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * Created by AlexanderC on 6/11/15.
 */



window.__DEEP_DEV_SERVER = global.__DEEP_DEV_SERVER = ['localhost', '127.0.0.1', '0.0.0.0', '::1'].indexOf(window.location.hostname) !== -1;

if (/MSIE|Trident/.test(window.navigator.userAgent)) {
  __webpack_require__(174);
}

const DeepFramework = __webpack_require__(173);

module.exports = DeepFramework;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var globalScope = typeof window === 'undefined' ? global : window;
globalScope.AWS = __webpack_require__(15);

__webpack_require__(236);
__webpack_require__(231);
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(235);
__webpack_require__(237);
__webpack_require__(238);
__webpack_require__(239);
__webpack_require__(240);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 231 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

AWS = AWS || {};
AWS.CognitoSyncManager = AWS.CognitoSyncManager || {};

AWS.CognitoSyncManager.Conflict = (function() {

    /**
     * When the local and remote copies of a dataset are in conflict, this object is returned to the synchronize callback.
     * @param remoteRecord the record from remote storage
     * @param localRecord the record from local storage
     * @prop {string} key
     * @prop {CognitoSyncRecord} remoteRecord
     * @prop {CognitoSyncRecord} localRecord
     * @constructor
     */

    var CognitoSyncConflict = function(remoteRecord, localRecord) {

        if (!remoteRecord || !localRecord) { throw new Error('Remote and local records cannot be null.'); }
        if (!remoteRecord.getKey || !localRecord.getKey) { throw new Error('Records are not record objects.'); }
        if (remoteRecord.getKey() !== localRecord.getKey()) { throw new Error('Remote and local keys do not match.'); }

        this.key = remoteRecord.getKey();
        this.remoteRecord = remoteRecord;
        this.localRecord = localRecord;

    };

    /**
     * Get the key of the records in conflict.
     * @returns {string} the record's key
     */

    CognitoSyncConflict.prototype.getKey = function() {
        return this.key;
    };

    /**
     * Get the remote record that is in conflict.
     * @returns {CognitoSyncRecord} the record
     */

    CognitoSyncConflict.prototype.getRemoteRecord = function() {
        return this.remoteRecord;
    };

    /**
     * Get the local record that is in conflict.
     * @returns {CognitoSyncRecord} the record
     */

    CognitoSyncConflict.prototype.getLocalRecord = function() {
        return this.localRecord;
    };

    /**
     * Resolves conflict with remote record.
     * @returns {CognitoSyncRecord} the resulting record
     */

    CognitoSyncConflict.prototype.resolveWithRemoteRecord = function() {
        this.remoteRecord.setModified(false);
        return this.remoteRecord;
    };

    /**
     * Resolves conflict with local record.
     * @returns {CognitoSyncRecord} resolved record
     */

    CognitoSyncConflict.prototype.resolveWithLocalRecord = function() {
        this.localRecord.setSyncCount(this.remoteRecord.getSyncCount());
        this.localRecord.setModified(true);
        return this.localRecord;
    };

    /**
     * Resolves conflict with a new value.
     * @param newValue new value of the record
     * @returns {CognitoSyncRecord} resolved record
     */

    CognitoSyncConflict.prototype.resolveWithValue = function(newValue) {
        return new AWS.CognitoSyncManager.Record({
            Key: this.remoteRecord.getKey(),
            Value: newValue,
            SyncCount: this.remoteRecord.getSyncCount(),
            LastModifiedDate: new Date(),
            LastModifiedBy: this.localRecord.getLastModifiedBy(),
            DeviceLastModifiedDate: new Date(),
            Modified: true
        });
    };

    return CognitoSyncConflict;

})();

/***/ }),
/* 232 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

AWS = AWS || {};
AWS.CognitoSyncManager = AWS.CognitoSyncManager || {};

AWS.CognitoSyncManager.Dataset = (function() {

    /**
     * Constructs a new dataset class.
     * @param {string} datasetName
     * @param provider
     * @param {AWS.CognitoSyncLocalStorage} local
     * @param {AWS.CognitoSyncRemoteStorage} remote
     * @param {function} logger
     * @constructor
     */

    var CognitoSyncDataset = function(datasetName, provider, local, remote, logger) {

        this.MAX_RETRY = 3;

        this.datasetName = datasetName;
        this.provider = provider;
        this.local = local;
        this.remote = remote;
        this.logger = logger || function(){};

    };

    /**
     * Validates the record key to ensure it is not empty and shorter than 128 characters.
     * @param {String} key The key to validate.
     * @returns {boolean}
     */

    CognitoSyncDataset.prototype.validateKey = function(key) {
        var namePattern = new RegExp('^[a-zA-Z0-9_.:-]{1,128}$');
        return namePattern.test(key);
    };

    /**
     * Writes a record to local storage.
     * @param {string} key
     * @param {string} value
     * @param {function} callback Callback(Error, Record)
     */

    CognitoSyncDataset.prototype.put = function(key, value, callback) {
        var valueType = typeof value;
        if (!this.validateKey(key)) { return callback(new Error('Invalid key.')); }
        if (valueType !== 'string') {
            return callback(new Error('The value type must be a string but was ' + valueType + '.'));
        }
        this.local.putValue(this.getIdentityId(), this.datasetName, key, value, callback);
    };

    /**
     * Writes a record as null, to be cleaned up on the next synchronization.
     * @param {string} key The key to remove.
     * @param {function} callback Callback(Error, Record)
     */

    CognitoSyncDataset.prototype.remove = function(key, callback) {
        if (!this.validateKey(key)) { return callback(new Error('Invalid key.')); }
        this.local.putValue(this.getIdentityId(), this.datasetName, key, null, callback);
    };

    /**
     * Gets a record's value from local storage.
     * @param {string} key
     * @param {function} callback Callback(Error, Value)
     */

    CognitoSyncDataset.prototype.get = function(key, callback) {
        if (!this.validateKey(key)) { return callback(new Error('Invalid key.')); }
        this.local.getValue(this.getIdentityId(), this.datasetName, key, callback);
    };

    /**
     * Gets all records in a dataset from local storage.
     * @param {function} callback Callback(Error, Records)
     */

    CognitoSyncDataset.prototype.getAllRecords = function(callback) {
        this.local.getRecords(this.getIdentityId(), this.datasetName, callback);
    };

    /**
     * Returns the amount of data stored on the server.
     * @param callback
     */

    CognitoSyncDataset.prototype.getDataStorage = function(callback) {

        this.getDatasetMetadata(function(err, meta) {
            if (err) { return callback(err); }
            if (!meta) { return callback(null, 0); }
            return callback(null, meta.getDataStorage());
        });

    };

    /**
     * Returns if a specific record has changed.
     * @param key
     * @param callback
     */

    CognitoSyncDataset.prototype.isChanged = function(key, callback) {
        if (!this.validateKey(key)) { return callback(new Error('Invalid key.')); }
        this.local.getRecord(this.getIdentityId(), this.datasetName, key, function(err, record) {
            callback(null, (record && record.isModified()));
        });
    };

    /**
     * Returns the dataset metadata.
     * @param callback
     */

    CognitoSyncDataset.prototype.getDatasetMetadata = function(callback) {
        this.local.getDatasetMetadata(this.getIdentityId(), this.datasetName, callback);
    };

    /**
     * Resolves conflicts using the records provided.
     * @param resolvedRecords
     * @param callback
     */

    CognitoSyncDataset.prototype.resolve = function(resolvedRecords, callback) {
        this.local.putRecords(this.getIdentityId(), this.datasetName, resolvedRecords, callback);
    };

    /**
     * Puts all values into the dataset.
     * @param values
     * @param callback
     * @returns {*}
     */

    CognitoSyncDataset.prototype.putAll = function(values, callback) {

        var isValid = true;

        for (var key in values) {
            if (values.hasOwnProperty(key)) {
                if (!this.validateKey(key)) { isValid = false; }
            }
        }

        if (!isValid) { return callback(new Error('Object contains invalid keys.')); }

        this.local.putAllValues(this.getIdentityId(), this.datasetName, values, callback);

    };

    /**
     * Returns all records from a dataset.
     * @param callback
     */

    CognitoSyncDataset.prototype.getAll = function(callback) {

        var map = {};
        var record;

        this.local.getRecords(this.getIdentityId(), this.datasetName, function(err, records) {

            if (err) { return callback(err); }

            for (var r in records) {
                if (records.hasOwnProperty(r)) {
                    record = records[r];
                    if (!record.isDeleted()) { map[record.getKey()] = record.getValue(); }
                }
            }

            callback(null, map);

        });

    };

    /**
     * Returns the current user's identity id.
     * @returns {string};
     */

    CognitoSyncDataset.prototype.getIdentityId = function() {
        return this.provider.identityId;
    };

    /**
     * Returns the records that have been modified.
     * @param callback
     */

    CognitoSyncDataset.prototype.getModifiedRecords = function(callback) {
        this.local.getModifiedRecords(this.getIdentityId(), this.datasetName, callback);
    };

    /**
     * Returns a list of datasets that have been merged.
     * @param callback
     */

    CognitoSyncDataset.prototype.getLocalMergedDatasets = function(callback) {

        var mergedDatasets = [];
        var prefix = this.datasetName + '.';
        var dataset;

        this.local.getDatasets(this.getIdentityId(), function(err, datasets) {

            for (var d in datasets) {
                if (datasets.hasOwnProperty(d)) {

                    dataset = datasets[d];

                    if (dataset.getDatasetName().indexOf(prefix) === 0) {
                        mergedDatasets.push(dataset.getDatasetName());
                    }

                }
            }

            callback(null, mergedDatasets);

        });

    };

    /**
     * Starts the synchronization process.
     * @param callback
     * @param retry
     */

    CognitoSyncDataset.prototype.synchronize = function(callback, retry) {

        var root = this;

        // Validate callback object.
        callback = callback || {};
        callback.onSuccess = callback.onSuccess || function(dataset, updates) {};
        callback.onFailure = callback.onFailure || function(err) {};
        callback.onConflict = callback.onConflict || function(dataset, conflicts, callback) { return callback(false); };
        callback.onDatasetDeleted = callback.onDatasetDeleted || function(dataset, deletedDataset, callback) { return callback(false); };
        callback.onDatasetsMerged = callback.onDatasetsMerged || function(dataset, merges, callback) { return callback(false); };

        // Validate/initialize retry count.
        if (retry === undefined) { retry = this.MAX_RETRY; }

        root.logger('Starting synchronization... (retries: ' + retry + ')');

        if (retry < 0) {
            return callback.onFailure(new Error('Synchronize failed: exceeded maximum retry count.'));
        }

        // First check if any datasets have been merged locally.

        this.getLocalMergedDatasets(function(err, mergedDatasets) {

            if (err) { callback.onFailure(err); }

            root.logger('Checking for locally merged datasets... found ' + mergedDatasets.length + '.');

            // Detect if merged datasets.
            if (mergedDatasets.length > 0) {

                root.logger('Deferring to .onDatasetsMerged.');

                return callback.onDatasetsMerged(root, mergedDatasets, function(isContinue) {

                    if (!isContinue) {

                        // Merges were not handled by callback. Cancel sync.
                        return callback.onFailure(new Error('Synchronization cancelled by onDatasetsMerged() callback returning false.'));

                    } else {

                        // Merges are handled within callback. Restart sync.
                        return root.synchronize(callback, --retry);

                    }

                });

            } else {

                // Get the last sync count so we can tell the server what to diff.

                root.local.getLastSyncCount(root.getIdentityId(), root.datasetName, function(err, syncCount) {

                    if (err) { return callback.onFailure(err); }

                    root.logger('Detecting last sync count... ' + syncCount);

                    if (syncCount == -1) {

                        // Dataset has been deleted locally
                        root.remote.deleteDataset(root.datasetName, function(err, data) {
                            if (err) { return callback.onFailure(err); }
                            root.local.purgeDataset(root.getIdentityId(), root.datasetName, function(err) {
                               if (err) { return callback.onFailure(err); }
                               return callback.onSuccess(root);
                            });
                        });

                    } else {

                        // Get all the remote records that have changed since the latest sync count.

                        root.remote.listUpdates(root.datasetName, syncCount, function(err, remoteRecords) {

                            if (err) { return callback.onFailure(err); }

                            root.logger('Fetching remote updates... found ' + remoteRecords.records.length + '.');

                            var mergedNameList = remoteRecords.getMergedDatasetNameList();

                            root.logger('Checking for remote merged datasets... found ' + mergedNameList.length + '.');

                            if (mergedNameList.length > 0) {

                                root.logger('Deferring to .onDatasetsMerged.');

                                // Merged datasets exist. Use callback to determine action.
                                return callback.onDatasetsMerged(root, mergedNameList, function(doContinue) {
                                    if (!doContinue) { callback.onFailure(new Error('Cancelled due to .onDatasetsMerged result.')); }
                                    else { root._synchronizeInternal(callback, --retry); }
                                });
                            }

                            // Check if dataset doesn't exist or is deleted.

                            if (syncCount !== 0 && !remoteRecords || remoteRecords.isDeleted()) {

                                return callback.onDatasetDeleted(root, remoteRecords.getDatasetName(), function(doContinue) {

                                    root.logger('Dataset should be deleted. Deferring to .onDatasetDeleted.');

                                    if (doContinue) {
                                        root.logger('.onDatasetDeleted returned true, purging dataset locally.');
                                        return root.local.purgeDataset(root.getIdentityId(), root.datasetName, function(err) {
                                            if (err) { return callback.onFailure(err); }
                                            return root._synchronizeInternal(callback, --retry);
                                        });
                                    } else {
                                        root.logger('.onDatasetDeleted returned false, cancelling sync.');
                                        return callback.onFailure(new Error('Cancelled due to .onDatasetDeleted result.'));
                                    }

                                });

                            }

                            var updatedRemoteRecords = remoteRecords.getRecords();
                            var lastSyncCount = remoteRecords.getSyncCount();
                            var sessionToken = remoteRecords.getSyncSessionToken();

                            // Check if there have been any updates since the last sync count.

                            root.logger('Checking for remote updates since last sync count... found ' + updatedRemoteRecords.length + '.');

                            if (updatedRemoteRecords.length > 0) {

                                root._synchronizeResolveLocal(updatedRemoteRecords, function(err, conflicts) {

                                    if (err) { return callback.onFailure(err); }

                                    root.logger('Checking for conflicts... found ' + conflicts.length + '.');

                                    if (conflicts.length > 0) {

                                        root.logger('Conflicts detected. Deferring to .onConflict.');

                                        callback.onConflict(root, conflicts, function(isContinue) {

                                            if (!isContinue) {

                                                root.logger('.onConflict returned false. Cancelling sync.');
                                                return callback.onFailure(new Error('Sync cancelled. Conflict callback returned false.'));

                                            } else {

                                                // Update remote records or we will just hit another sync conflict next go around.

                                                root._synchronizePushRemote(sessionToken, syncCount, function(){
                                                    return root.synchronize(callback, --retry);
                                                });

                                            }

                                        });

                                    } else {

                                        // No conflicts, update local records.
                                        root.logger('No conflicts. Updating local records.');

                                        root.local.putRecords(root.getIdentityId(), root.datasetName, updatedRemoteRecords, function(err) {

                                            if (err) { return callback.onFailure(err); }

                                            // Update the local sync count to match.

                                            root.local.updateLastSyncCount(root.getIdentityId(), root.datasetName, lastSyncCount, function(err) {

                                                if (err) { return callback.onFailure(err); }

                                                root.logger('Finished resolving records. Restarting sync.');

                                                // Callback returned true, starting sync.
                                                return root.synchronize(callback, --retry);

                                            });
                                        });

                                    }

                                });


                            } else {

                                // Nothing updated remotely. Push local changes to remote.
                                root.logger('Nothing updated remotely. Pushing local changes to remote.');

                                root._synchronizePushRemote(sessionToken, lastSyncCount, function(err) {

                                    if (err) {
                                        root.logger('Remote push failed. Likely concurrent sync conflict. Retrying...');
                                        return root.synchronize(callback, --retry);
                                    }

                                    root.logger('Sync successful.');
                                    return callback.onSuccess(root, updatedRemoteRecords);

                                });

                            }
                        });

                    }

                });

            }

        });
    };

    /**
     * An internal function for helping the synchronization call to resolve local conflicts.
     * @param remoteRecords
     * @param callback
     * @private
     */

    CognitoSyncDataset.prototype._synchronizeResolveLocal = function(remoteRecords, callback) {

        // Step two of the synchronization flow.
        // The dataset exists remotely so we need to determine if there are any deletions or conflicts.
        // Once everything is resolved, we update the local records.

        var root = this;
        var conflicts = [];

        // Make sure there are remote records that need resolving.

        if (remoteRecords && remoteRecords.length > 0) {

            // Get the local records so we can compare them to the remote records.

            root.local.getRecords(root.getIdentityId(), root.datasetName, function(err, localRecords) {

                var localMap = {};
                var i, key, local;

                // Build a map of the local records array for easier key lookup.

                for (i=0; i<localRecords.length; i++) {
                    localMap[localRecords[i].getKey()] = localRecords[i];
                }

                // Compare local and remote records.

                for (i=0; i<remoteRecords.length; i++) {

                    key = remoteRecords[i].getKey();
                    local = localMap[key];

                    if (local && local.isModified() && local.getValue() !== remoteRecords[i].getValue()) {
                        conflicts.push(new AWS.CognitoSyncManager.Conflict(remoteRecords[i], local));
                    }

                }

                return callback(null, conflicts);

            });

        } else {

            // There are no remote records. Nothing to resolve.
            return callback(null, conflicts);

        }

    };

    /**
     * An internal function for helping the synchronization call to push changes to the server.
     * @param sessionToken
     * @param syncCount
     * @param callback
     * @private
     */

    CognitoSyncDataset.prototype._synchronizePushRemote = function(sessionToken, syncCount, callback) {

        // Step three of the synchronization flow.
        // The local dataset has modifications so we need to push the local changes to remote.
        // Then we need to update the local metadata and update/verify the sync count.

        var root = this;

        // Push changes to remote.

        this.getModifiedRecords(function(err, localChanges) {

            if (localChanges.length > 0) {

                root.remote.putRecords(root.datasetName, localChanges, sessionToken, function(err, records) {

                    if (err) { callback(err); }

                    // Update local metadata.
                    root.local.putRecords(root.getIdentityId(), root.datasetName, records, function(err) {

                        if (err) { return callback(err); }

                        var newSyncCount = 0;

                        // Calculate new sync count.

                        for (var r in records) {
                            if (records.hasOwnProperty(r)) {
                                newSyncCount = newSyncCount < records[r].getSyncCount() ? records[r].getSyncCount() : newSyncCount;
                            }
                        }

                        root.local.updateLastSyncCount(root.getIdentityId(), root.datasetName, newSyncCount, function(err) {
                            if (err) { return callback(err); }
                            return callback(null, true);
                        });

                    });

                });

            } else {

                // Nothing to change.
                return callback(null, true);

            }

        });

    };

    return CognitoSyncDataset;

})();


/***/ }),
/* 233 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Constructs a new CognitoSyncDatasetMetadata object.
 * @param metadata the serialized metadata
 * @constructor
 */

AWS = AWS || {};
AWS.CognitoSyncManager = AWS.CognitoSyncManager || {};

AWS.CognitoSyncManager.DatasetMetadata = (function(){

    var CognitoSyncDatasetMetadata = function(metadata) {

        metadata = metadata || {};

        // Assign object.
        this.datasetName = metadata.DatasetName || '';
        this.creationDate = new Date(metadata.CreationDate) || new Date();
        this.lastModifiedDate = new Date(metadata.LastModifiedDate) || new Date();
        this.lastModifiedBy = metadata.LastModifiedBy || '';
        this.dataStorage = metadata.DataStorage || 0;
        this.recordCount = metadata.NumRecords || 0;

        // Meta metadata.
        this.lastSyncCount = metadata.LastSyncCount || 0;
        this.lastSyncDate = metadata.LastSyncDate ? new Date(metadata.LastSyncDate) : new Date();

        // Validate object.
        if (this.dataStorage < 0) { throw new RangeError('Storage size cannot be negative.'); }
        if (this.recordCount < 0) { throw new RangeError('Record count cannot be negative.'); }

    };

    /**
     * Get the dataset name.
     * @returns {string} the dataset's name.
     */

    CognitoSyncDatasetMetadata.prototype.getDatasetName = function() {
        return this.datasetName;
    };

    /**
     * Sets the dataset name.
     * @param {string} datasetName the name of the dataset
     * @returns {CognitoSyncDatasetMetadata} the dataset object
     */

    CognitoSyncDatasetMetadata.prototype.setDatasetName = function(datasetName) {
        this.datasetName = datasetName;
        return this;
    };

    /**
     * Get the dataset's creation date.
     * @returns {Date} the creation date
     */

    CognitoSyncDatasetMetadata.prototype.getCreationDate = function() {
        return this.creationDate;
    };

    /**
     * Sets the dataset creation date.
     * @param {Date} creationDate
     * @returns {CognitoSyncDatasetMetadata}
     */

    CognitoSyncDatasetMetadata.prototype.setCreationDate = function(creationDate) {
        this.creationDate = new Date(creationDate);
        return this;
    };

    /**
     * Gets the dataset last modified date.
     * @returns {Date}
     */

    CognitoSyncDatasetMetadata.prototype.getLastModifiedDate = function() {
        return this.lastModifiedDate;
    };

    /**
     * Sets the dataset last modified date.
     * @param modifiedDate
     * @returns {CognitoSyncDatasetMetadata}
     */

    CognitoSyncDatasetMetadata.prototype.setLastModifiedDate = function(modifiedDate) {
        this.lastModifiedDate = new Date(modifiedDate);
        return this;
    };

    /**
     * Returns the user/device who last modified the dataset.
     * @returns {String}
     */

    CognitoSyncDatasetMetadata.prototype.getLastModifiedBy = function() {
        return this.lastModifiedBy;
    };

    /**
     * Sets the user/device who last modified the dataset.
     * @param {String} modifiedBy
     * @returns {CognitoSyncDatasetMetadata}
     */

    CognitoSyncDatasetMetadata.prototype.setLastModifiedBy = function(modifiedBy) {
        this.lastModifiedBy = modifiedBy;
        return this;
    };

    /**
     * Gets the data storage size.
     * @returns {number}
     */

    CognitoSyncDatasetMetadata.prototype.getDataStorage = function() {
        return this.dataStorage;
    };

    /**
     * Sets the data storage size.
     * @param {Number} storageSize
     * @returns {CognitoSyncDatasetMetadata}
     */

    CognitoSyncDatasetMetadata.prototype.setDataStorage = function(storageSize) {
        this.dataStorage = storageSize;
        return this;
    };

    /**
     * Gets the record count.
     * @returns {number}
     */

    CognitoSyncDatasetMetadata.prototype.getRecordCount = function() {
        return this.recordCount;
    };

    /**
     * Sets the record count.
     * @param {Number} recordCount
     * @returns {CognitoSyncDatasetMetadata}
     */

    CognitoSyncDatasetMetadata.prototype.setRecordCount = function(recordCount) {
        this.recordCount = recordCount;
        return this;
    };

    /**
     * Gets the last sync count.
     * @returns {number}
     */

    CognitoSyncDatasetMetadata.prototype.getLastSyncCount = function() {
        return this.lastSyncCount;
    };

    /**
     * Sets the last sync count.
     * @param {Number} syncCount
     * @returns {CognitoSyncDatasetMetadata}
     */

    CognitoSyncDatasetMetadata.prototype.setLastSyncCount = function(syncCount) {
        this.lastSyncCount = syncCount;
        return this;
    };

    /**
     * Gets the last sync date.
     * @returns {Date}
     */

    CognitoSyncDatasetMetadata.prototype.getLastSyncDate = function() {
        return this.lastSyncDate;
    };

    /**
     * Sets the last sync date.
     * @param {Date} syncDate
     * @returns {CognitoSyncDatasetMetadata}
     */

    CognitoSyncDatasetMetadata.prototype.setLastSyncDate = function(syncDate) {
        this.lastSyncDate = syncDate;
        return this;
    };

    /**
     * Returns a JSON string of the metadata object.
     * @returns {String}
     */

    CognitoSyncDatasetMetadata.prototype.toString = function() {
        return JSON.stringify(this.toJSON());
    };

    /**
     * Returns a flat object representing the metadata.
     * @returns {Object}
     */

    CognitoSyncDatasetMetadata.prototype.toJSON = function() {
        return {
            DatasetName: this.datasetName,
            CreationDate: this.creationDate,
            LastModifiedDate: this.lastModifiedDate,
            LastModifiedBy: this.lastModifiedBy,
            DataStorage: this.dataStorage,
            NumRecords: this.recordCount,
            LastSyncCount: this.lastSyncCount,
            LastSyncDate: this.lastSyncDate
        };
    };

    return CognitoSyncDatasetMetadata;

})();


/***/ }),
/* 234 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

AWS = AWS || {};
AWS.CognitoSyncManager = AWS.CognitoSyncManager || {};

AWS.CognitoSyncManager.DatasetUpdates = (function() {

    /**
     * Constructs a new dataset update class.
     * @param datasetName
     * @constructor
     */

    var CognitoSyncDatasetUpdates = function (datasetName) {

        this.datasetName = datasetName;
        this.records = [];
        this.syncCount = 0;
        this.syncSessionToken = '';
        this.exists = true;
        this.deleted = false;
        this.mergedDatasetNameList = [];

    };

    CognitoSyncDatasetUpdates.prototype.getDatasetName = function () {
        return this.datasetName;
    };

    CognitoSyncDatasetUpdates.prototype.setDatasetName = function (datasetName) {
        this.datasetName = datasetName;
        return this;
    };

    CognitoSyncDatasetUpdates.prototype.getRecords = function () {
        return this.records;
    };

    CognitoSyncDatasetUpdates.prototype.addRecord = function (record) {
        this.records.push(record);
        return this;
    };

    CognitoSyncDatasetUpdates.prototype.getSyncCount = function () {
        return this.syncCount;
    };

    CognitoSyncDatasetUpdates.prototype.setSyncCount = function (syncCount) {
        this.syncCount = syncCount;
        return this;
    };

    CognitoSyncDatasetUpdates.prototype.getSyncSessionToken = function () {
        return this.syncSessionToken;
    };

    CognitoSyncDatasetUpdates.prototype.setSyncSessionToken = function (syncToken) {
        this.syncSessionToken = syncToken;
        return this;
    };

    CognitoSyncDatasetUpdates.prototype.isExists = function () {
        return this.exists;
    };

    CognitoSyncDatasetUpdates.prototype.setExists = function (exists) {
        this.exists = exists;
        return this;
    };

    CognitoSyncDatasetUpdates.prototype.isDeleted = function () {
        return this.deleted;
    };

    CognitoSyncDatasetUpdates.prototype.setDeleted = function (deleted) {
        this.deleted = deleted;
        return this;
    };

    CognitoSyncDatasetUpdates.prototype.getMergedDatasetNameList = function () {
        return this.mergedDatasetNameList;
    };

    CognitoSyncDatasetUpdates.prototype.setMergedDatasetNameList = function (mergedList) {
        this.mergedDatasetNameList = mergedList;
        return this;
    };

    return CognitoSyncDatasetUpdates;

})();


/***/ }),
/* 235 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

AWS = AWS || {};
AWS.CognitoSyncManager = AWS.CognitoSyncManager || {};

AWS.CognitoSyncManager.LocalStorage = (function() {

    /**
     * Constructs a new local storage class.
     * @param options
     * @constructor
     */

    var CognitoSyncLocalStorage = function (options) {

        options = options || {};

        this.store = null;
        this.meta = null;

        // Choose a data store
        if (options.DataStore) { this.store = new options.DataStore(); }
        else { this.store = new AWS.CognitoSyncManager.StoreInMemory(); }

    };

    /**
     * Returns the string used to store dataset metadata.
     * @param identityId
     * @param datasetName
     * @returns {string}
     */

    CognitoSyncLocalStorage.prototype.getMetadataKey = function (identityId, datasetName) {
        return identityId + '.' + datasetName;
    };

    /**
     * Load the metadata cache from the local store.
     * @param identityId
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.loadMetadataCache = function (identityId, callback) {

        var root = this;

        this.store.get('_internal', '_metadata', identityId, function (err, data) {

            if (err) {
                return callback(err, null);
            }
            if (!data) {
                data = {};
            }

            root.meta = data;
            callback(null, data);

        });

    };

    /**
     * Save the metadata cache to the local store.
     * @param identityId
     * @param metadata
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.saveMetadataCache = function (identityId, metadata, callback) {
        this.store.set('_internal', '_metadata', identityId, metadata, function (err) {
            if (err) {
                return callback(err);
            }
            return callback(null, metadata);
        });
    };

    /**
     * Creates a new dataset.
     * @param identityId
     * @param datasetName
     * @param callback
     * @returns {CognitoSyncLocalStorage}
     */

    CognitoSyncLocalStorage.prototype.createDataset = function (identityId, datasetName, callback) {

        var root = this;

        this.getDatasetMetadata(identityId, datasetName, function (err, metadata) {

            var stamp = new Date().getTime();

            if (!metadata) {

                metadata = new AWS.CognitoSyncManager.DatasetMetadata({
                    DatasetName: datasetName,
                    CreationDate: stamp,
                    LastModifiedDate: stamp
                });

                root.setDatasetMetadata(identityId, datasetName, metadata, function (err, data) {
                    // No-op. Silent update.
                });

                callback(null, datasetName);

            } else {
                callback(null, datasetName);
            }

        });

        return this;

    };

    /**
     * Returns the dataset metadata.
     * @param identityId
     * @param datasetName
     * @param callback
     * @returns {CognitoSyncLocalStorage}
     */

    CognitoSyncLocalStorage.prototype.getDatasetMetadata = function (identityId, datasetName, callback) {

        var key = this.getMetadataKey(identityId, datasetName);

        if (this.meta !== null) {

            // Meta data is already loaded. Look it up and return.
            if (this.meta[key]) {
                callback(null, new AWS.CognitoSyncManager.DatasetMetadata(this.meta[key]));
            }
            else {
                callback(null, undefined);
            }

        } else {

            // Load metadata from cache.
            this.loadMetadataCache(identityId, function (err, cache) {
                if (cache[key]) {
                    callback(null, new AWS.CognitoSyncManager.DatasetMetadata(cache[key]));
                }
                else {
                    callback(null, undefined);
                }
            });

        }

        return this;

    };

    /**
     * Sets a dataset's metadata.
     * @param identityId
     * @param datasetName
     * @param metadata
     * @param callback
     * @returns {CognitoSyncLocalStorage}
     */

    CognitoSyncLocalStorage.prototype.setDatasetMetadata = function (identityId, datasetName, metadata, callback) {

        // Write metadata.
        this.meta[this.getMetadataKey(identityId, datasetName)] = metadata.toJSON();

        // Save metadata.
        this.saveMetadataCache(identityId, this.meta, callback);

        return this;

    };


    /**
     * Returns a record's value from the local store.
     * @param identityId
     * @param datasetName
     * @param key
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.getValue = function (identityId, datasetName, key, callback) {

        this.getRecord(identityId, datasetName, key, function (err, record) {

            if (!record) {
                return callback(null, undefined);
            }

            return callback(null, record.getValue());

        });

    };

    /**
     * Sets a record's value from the local store.
     * @param identityId
     * @param datasetName
     * @param key
     * @param value
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.putValue = function (identityId, datasetName, key, value, callback) {

        var root = this;

        this.getRecord(identityId, datasetName, key, function (err, record) {


            if (record && record.getValue() == value) {
                // Record hasn't changed. All done.
                return callback(null, record);
            }

            // If record doesn't exist, create a new instance.
            if (!record) {
                record = new AWS.CognitoSyncManager.Record();
            }

            // Update the record with the new properties.
            record.setKey(key)
                .setValue(value)
                .setModified(true)
                .setSyncCount(record ? record.getSyncCount() : 0)
                .setDeviceLastModifiedDate(new Date());

            root.store.set(identityId, datasetName, key, record.toJSON(), function (err) {

                if (err) {
                    return callback(err);
                }

                root.updateLastModifiedTimestamp(identityId, datasetName, function (err) {
                    return callback(err, record);
                });

            });

        });

    };

    /**
     * Returns a map of values for a dataset from the local store.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.getValueMap = function (identityId, datasetName, callback) {

        var values = {};
        var record;

        this.getRecords(identityId, datasetName, function (err, records) {

            for (var r in records) {
                if (records.hasOwnProperty(r)) {
                    record = records[r];
                    if (!record.isDeleted()) {
                        values[record.getKey()] = record.getValue();
                    }
                }
            }

            callback(null, values);

        });

    };

    /**
     * Sets multiple records in a dataset in the local store.
     * @param identityId
     * @param datasetName
     * @param values
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.putAllValues = function (identityId, datasetName, values, callback) {

        var root = this;

        var remain = [];

        // Build a list of each value to put.

        for (var v in values) {
            if (values.hasOwnProperty(v)) {
                remain.push(v);
            }
        }

        var request = function (err) {

            var item;

            if (err) {
                return callback(err);
            }

            if (remain.length > 0) {

                // Put each item in the request.
                item = remain.shift();
                root.putValue(identityId, datasetName, item, values[item], request);

            } else {

                // Nothing else to update. Break the loop.
                callback(null, true);

            }

        };

        request(null, null);

    };

    /**
     * Returns a list of datasets in the local store.
     * @param identityId
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.getDatasets = function (identityId, callback) {

        var datasets = [];

        if (this.meta !== null) {

            for (var m in this.meta) {
                if (this.meta.hasOwnProperty(m)) {
                    datasets.push(new AWS.CognitoSyncManager.DatasetMetadata(this.meta[m]));
                }
            }

            return callback(null, datasets);

        } else {

            // Meta data is not loaded. Load it.
            this.loadMetadataCache(identityId, function (err, metadata) {

                for (var m in metadata) {
                    if (metadata.hasOwnProperty(m)) {
                        datasets.push(new AWS.CognitoSyncManager.DatasetMetadata(metadata[m]));
                    }
                }

                return callback(null, datasets);

            });

        }

    };

    /**
     * Updates dataset metadata and saves to the cache.
     * @param identityId
     * @param metadata
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.updateDatasetMetadata = function (identityId, metadata, callback) {

        var root = this;

        this.getDatasetMetadata(identityId, metadata.getDatasetName(), function (err, local) {

            if (err) { callback(err); }

            if (!local) { local = new AWS.CognitoSyncManager.DatasetMetadata(); }

            local.setDatasetName(metadata.getDatasetName())
                .setCreationDate(metadata.getCreationDate())
                .setLastModifiedDate(metadata.getLastModifiedDate())
                .setLastModifiedBy(metadata.getLastModifiedBy())
                .setLastSyncCount(metadata.getLastSyncCount())
                .setRecordCount(metadata.getRecordCount())
                .setDataStorage(metadata.getDataStorage());

            // Save the updated metadata to the in-memory store.

            root.meta[root.getMetadataKey(identityId, metadata.getDatasetName())] = local.toJSON();

            // Save the updated metadata to the on-disk store.

            root.saveMetadataCache(identityId, root.meta, function (err) {
                if (err) { return callback(err); }
                return callback(null, local);
            });

        });

    };

    /**
     * Returns a record from the local store.
     * @param identityId
     * @param datasetName
     * @param key
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.getRecord = function (identityId, datasetName, key, callback) {
        this.store.get(identityId, datasetName, key, function (err, record) {
            if (record) { return callback(null, new AWS.CognitoSyncManager.Record(record)); }
            return callback(new Error('Key doesn\'t exist.'), null);
        });
    };

    /**
     * Returns all records from a dataset in the local store.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.getRecords = function (identityId, datasetName, callback) {

        var records = [];

        this.store.getAll(identityId, datasetName, function (err, local) {

            for (var l in local) {
                if (local.hasOwnProperty(l)) {
                    records.push(new AWS.CognitoSyncManager.Record(local[l]));
                }
            }

            callback(null, records);

        });

    };

    /**
     * Puts multiple records into a dataset in the local store.
     * @param identityId
     * @param datasetName
     * @param records
     * @param callback
     * @returns {CognitoSyncLocalStorage}
     */

    CognitoSyncLocalStorage.prototype.putRecords = function (identityId, datasetName, records, callback) {

        var root = this;
        records = records || [];
        records = records.slice();

        var request = function () {

            if (records.length > 0) {

                root.updateAndClearRecord(identityId, datasetName, records.shift(), function (err) {

                    if (err) { return callback(err); }
                    if (records.length === 0) { return callback(null, true); }

                    request();

                });

            }

        };

        request();

    };

    /**
     * Deletes a dataset from the local store.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.deleteDataset = function (identityId, datasetName, callback) {

        var root = this;

        // Delete the records.

        this.store.removeAll(identityId, datasetName, function (err) {

            if (err) { return callback(err); }

            // Update dataset metadata.

            root.getDatasetMetadata(identityId, datasetName, function (err, metadata) {

                if (err) { return callback(err); }

                metadata.setLastModifiedDate(new Date());
                metadata.setLastSyncCount(-1);

                root.updateDatasetMetadata(identityId, metadata, function (err) {
                    if (err) { return callback(err); }
                    return callback(null, true);
                });

            });

        });

    };

    /**
     * Removes dataset from local storage. Does not remove dataset from remote storage.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.purgeDataset = function (identityId, datasetName, callback) {

        var root = this;

        // Delete records.
        this.deleteDataset(identityId, datasetName, function (err) {

            if (err) { callback(err); }

            // Delete metadata.
            delete(root.meta[root.getMetadataKey(identityId, datasetName)]);

            // Save metadata.
            root.saveMetadataCache(identityId, root.meta, callback);

        });

    };

    /**
     * Returns the last sync count for a dataset in the local store.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.getLastSyncCount = function (identityId, datasetName, callback) {

        this.getDatasetMetadata(identityId, datasetName, function (err, metadata) {

            if (metadata) { return callback(null, metadata.getLastSyncCount()); }

            callback(new Error('Dataset doesn\'t exist.'), null);

        });

    };

    /**
     * Returns the modified records in a dataset from the local store.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.getModifiedRecords = function (identityId, datasetName, callback) {

        var modified = [];

        this.getRecords(identityId, datasetName, function (err, records) {

            for (var i = 0; i < records.length; i++) {

                if (records[i].isModified()) {
                    modified.push(records[i]);
                }

            }

            callback(null, modified);

        });

    };

    /**
     * Updates the last sync count for a dataset in the local store.
     * @param identityId
     * @param datasetName
     * @param lastSyncCount
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.updateLastSyncCount = function (identityId, datasetName, lastSyncCount, callback) {

        var root = this;

        this.getDatasetMetadata(identityId, datasetName, function (err, meta) {

            if (err) {
                callback(err);
            }

            meta.setLastSyncCount(lastSyncCount).setLastSyncDate(new Date());

            root.updateDatasetMetadata(identityId, meta, function (err) {
                if (err) {
                    callback(err);
                }
                callback(null, true);
            });

        });

    };

    /**
     * Removes all data from the local store.
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.wipeData = function (callback) {
        this.store.wipe(callback);
    };

    /**
     * Modifies the date a dataset was last modified in the local store.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.updateLastModifiedTimestamp = function (identityId, datasetName, callback) {

        var root = this;

        this.getDatasetMetadata(identityId, datasetName, function (err, meta) {

            if (err) {
                return callback(err);
            }

            meta.setLastModifiedDate(new Date());

            root.updateDatasetMetadata(identityId, meta, function (err) {
                if (err) {
                    return callback(err);
                }
                return callback(null, true);
            });

        });

    };

    /**
     * Removes a record from the local store.
     * @param identityId
     * @param datasetName
     * @param record
     */

    CognitoSyncLocalStorage.prototype.removeRecord = function (identityId, datasetName, record) {
        this.store.remove(identityId, datasetName, record, function (err) {
            if (err) { return callback(err); }
            return callback(null, true);
        });
    };

    /**
     * Saves a record to the local store.
     * @param identityId
     * @param datasetName
     * @param record
     * @param callback
     */

    CognitoSyncLocalStorage.prototype.updateAndClearRecord = function (identityId, datasetName, record, callback) {
        this.store.set(identityId, datasetName, record.getKey(), record.toJSON(), function (err) {
            if (err) { return callback(err); }
            return callback(null, true);
        });
    };

    return CognitoSyncLocalStorage;

})();


/***/ }),
/* 236 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

if (AWS === undefined) {
    throw new Error("AWS SDK must be loaded before loading the Sync Manager.");
} else {

    /**
     * Constructs a new Cognito Sync Manager class.
     * @constructor
     */


    AWS.CognitoSyncManager = function (options) {

        options = options || {};

        var USER_AGENT = 'CognitoJavaScriptSDK/1';

        this.provider = AWS.config.credentials;
        this.identityPoolId = this.provider.params.IdentityPoolId;
        this.region = AWS.config.region;

        // Hook to set identityId from cache if it's null in AWS credentials
        if (!this.provider.identityId && this.provider.params.IdentityId) {
            this.provider.identityId = this.provider.params.IdentityId;
        }

        // Setup logger.
        this.logger = options.log;
        if (typeof this.logger !== 'function') {
            this.logger = function () {
            };
        }

        // Initialize local store.
        this.local = new AWS.CognitoSyncManager.LocalStorage({DataStore: options.DataStore ? options.DataStore : AWS.CognitoSyncManager.StoreLocalStorage});

        // Initialize remote store.
        this.remote = new AWS.CognitoSyncManager.RemoteStorage(this.identityPoolId, this.provider);
        this.remote.setUserAgent(USER_AGENT);

    };

    /**
     * Returns a dataset object, creating it if it doesn't already exist.
     * @param {string} datasetName
     * @param {function} callback
     */

    AWS.CognitoSyncManager.prototype.openOrCreateDataset = function (datasetName, callback) {

        var root = this;
        var namePattern = new RegExp('^[a-zA-Z0-9_.:-]{1,128}$');

        // Validate the proposed dataset name.

        if (namePattern.test(datasetName)) {

            this.local.createDataset(this.getIdentityId(), datasetName, function (err, data) {
                if (err) {
                    return callback(err, null);
                }
                callback(null, new AWS.CognitoSyncManager.Dataset(data, root.provider, root.local, root.remote, root.logger));
            });

        } else {

            callback(new Error('Dataset name must match the pattern ' + namePattern.toString()));

        }

    };

    /**
     * Returns a list of datasets.
     * @param {function} callback
     */

    AWS.CognitoSyncManager.prototype.listDatasets = function (callback) {
        this.local.getDatasets(this.getIdentityId(), callback);
    };

    /**
     * Replaces the local dataset metadata with the latest remote metadata.
     * @param callback
     */

    AWS.CognitoSyncManager.prototype.refreshDatasetMetadata = function (callback) {

        var root = this;

        this.remote.getDatasets(function (err, datasets) {

            var metadata = [];

            var request = function (ds) {
                root.local.updateDatasetMetadata(root.getIdentityId(), ds, response);
            };

            var response = function (err, md) {
                metadata.push(md);
                if (datasets.length > 0) {
                    request(datasets.shift());
                }
                else {
                    callback(null, metadata);
                }
            };

            if (datasets.length > 0) {
                request(datasets.shift(), callback);
            } else {
                callback(null, []);
            }

        });
    };

    /**
     * Removes the local storage and invalidates the cached identity id.
     */

    AWS.CognitoSyncManager.prototype.wipeData = function () {
        this.provider.clearCachedId();
        this.local.wipeData();
    };

    /**
     * Returns the cached identity id.
     * @returns {string}
     */

    AWS.CognitoSyncManager.prototype.getIdentityId = function () {
        return this.provider.identityId;
    };

}

/***/ }),
/* 237 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

AWS = AWS || {};
AWS.CognitoSyncManager = AWS.CognitoSyncManager || {};

AWS.CognitoSyncManager.Record = (function() {

    /**
     * Constructs a new remote storage class.
     * @param {Object} data
     * @param {string} data.Key - The record's key
     * @param {string} data.Value - The record's key
     * @param {number} data.SyncCount
     * @param {Date} data.LastModifiedDate
     * @param {string} data.LastModifiedBy
     * @param {Date} data.DeviceLastModifiedDate
     * @param {boolean} data.Modified
     * @constructor
     */

    var CognitoSyncRecord = function (data) {

        data = data || {};

        // Assign object
        this.key = data.Key || '';
        this.value = data.Value || '';
        this.syncCount = data.SyncCount || 0;
        this.lastModifiedDate = data.LastModifiedDate ? new Date(data.LastModifiedDate) : new Date();
        this.lastModifiedBy = data.LastModifiedBy || '';
        this.deviceLastModifiedDate = data.DeviceLastModifiedDate ? new Date(data.DeviceLastModifiedDate) : new Date();
        this.modified = data.Modified || false;

    };

    /**
     * Returns the record's key.
     * @returns {string}
     */

    CognitoSyncRecord.prototype.getKey = function () {
        return this.key;
    };

    /**
     * Sets the record's key.
     * @param key
     * @returns {CognitoSyncRecord}
     */

    CognitoSyncRecord.prototype.setKey = function (key) {
        this.key = key;
        return this;
    };

    /**
     * Returns the record's value.
     * @returns {string}
     */

    CognitoSyncRecord.prototype.getValue = function () {
        return this.value;
    };

    /**
     * Sets the record's value.
     * @param value
     * @returns {CognitoSyncRecord}
     */

    CognitoSyncRecord.prototype.setValue = function (value) {
        this.value = value;
        return this;
    };

    /**
     * Returns the current sync count.
     * @returns {number}
     */

    CognitoSyncRecord.prototype.getSyncCount = function () {
        return this.syncCount;
    };

    /**
     * Sets the current sync count.
     * @param syncCount
     * @returns {CognitoSyncRecord}
     */

    CognitoSyncRecord.prototype.setSyncCount = function (syncCount) {
        this.syncCount = syncCount;
        return this;
    };

    /**
     * Returns the date the record was last modified.
     * @returns {Date}
     */

    CognitoSyncRecord.prototype.getLastModifiedDate = function () {
        return new Date(this.lastModifiedDate);
    };

    /**
     * Sets the date the record was last modified.
     * @param modifiedDate
     * @returns {CognitoSyncRecord}
     */

    CognitoSyncRecord.prototype.setLastModifiedDate = function (modifiedDate) {
        this.lastModifiedDate = new Date(modifiedDate);
        return this;
    };

    /**
     * Returns the user/device who last modified the record.
     * @returns {string}
     */

    CognitoSyncRecord.prototype.getLastModifiedBy = function () {
        return this.lastModifiedBy;
    };

    /**
     * Sets the user/device who last modified the record.
     * @param modifiedBy
     * @returns {CognitoSyncRecord}
     */

    CognitoSyncRecord.prototype.setLastModifiedBy = function (modifiedBy) {
        this.lastModifiedBy = modifiedBy;
        return this;
    };

    /**
     * Returns the date when the record was last modified on the local device.
     * @returns {Date}
     */

    CognitoSyncRecord.prototype.getDeviceLastModifiedDate = function () {
        return new Date(this.deviceLastModifiedDate);
    };

    /**
     * Sets the date when the record was last modified on the local device.
     * @param modifiedDate
     * @returns {CognitoSyncRecord}
     */

    CognitoSyncRecord.prototype.setDeviceLastModifiedDate = function (modifiedDate) {
        this.deviceLastModifiedDate = new Date(modifiedDate);
        return this;
    };

    /**
     * Returns if the record has been modified.
     * @returns {boolean}
     */

    CognitoSyncRecord.prototype.isModified = function () {
        return this.modified;
    };

    /**
     * Sets if the record has been modified.
     * @param modified
     * @returns {CognitoSyncRecord}
     */

    CognitoSyncRecord.prototype.setModified = function (modified) {
        this.modified = modified;
        return this;
    };

    /**
     * Returns if the record has been deleted locally.
     * @returns {boolean}
     */

    CognitoSyncRecord.prototype.isDeleted = function () {
        return this.value === null;
    };

    /**
     * Returns a string representation of the record.
     * @returns {string}
     */

    CognitoSyncRecord.prototype.toString = function () {
        return JSON.stringify(this);
    };

    /**
     * Returns a flat object representing the record.
     * @returns {object}
     */

    CognitoSyncRecord.prototype.toJSON = function () {
        return {
            Key: this.key,
            Value: this.value,
            SyncCount: this.syncCount,
            LastModifiedDate: this.lastModifiedDate,
            LastModifiedBy: this.lastModifiedBy,
            DeviceLastModifiedDate: this.deviceLastModifiedDate,
            Modified: this.modified
        };
    };

    return CognitoSyncRecord;

})();


/***/ }),
/* 238 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

AWS = AWS || {};
AWS.CognitoSyncManager = AWS.CognitoSyncManager || {};

AWS.CognitoSyncManager.RemoteStorage = (function() {

    /**
     * Constructs a new remote storage class.
     * @param {string} identityPoolId
     * @param provider
     * @constructor
     */

    var CognitoSyncRemoteStorage = function (identityPoolId, provider) {

        this.identityPoolId = identityPoolId;
        this.provider = provider;
        this.client = new AWS.CognitoSync();

    };

    CognitoSyncRemoteStorage.prototype.userAgent = '';

    /**
     * Gets the current identity ID from the AWS credentials provider.
     * @returns {string}
     */

    CognitoSyncRemoteStorage.prototype.getIdentityId = function () {
        return this.provider.identityId;
    };

    /**
     * Returns a list of datasets.
     * @param {function} callback Callback(Error, Datasets)
     */

    CognitoSyncRemoteStorage.prototype.getDatasets = function (callback) {

        var root = this;
        var datasets = [];
        var nextToken = null;

        // Define the request function. Will be called once per page of results.

        var fetch = function (token, cb) {
            root.client.listDatasets({
                IdentityId: root.getIdentityId(),
                IdentityPoolId: root.identityPoolId,
                MaxResults: 64,
                NextToken: token
            }, cb);
        };

        // Define the response function. Will be called after each request returns.

        var process = function (err, data) {

            var results = data.Datasets || [];

            // Add the new page of results to the list of datasets.

            for (var i = 0; i < results.length; i++) {
                datasets.push(new AWS.CognitoSyncManager.DatasetMetadata(results[i]));
            }

            // Get the NextToken. If it exists, fetch the next page of results, otherwise callback.

            nextToken = data.NextToken;

            if (nextToken) {
                fetch(nextToken, process);
            }
            else {
                callback(null, datasets);
            }

        };

        // Start the first fetch.

        fetch(nextToken, process);

    };

    /**
     * Lists all updates on the remote store since the given sync count.
     * @param {string} datasetName
     * @param {number} lastSyncCount
     * @param {function} callback Callback(Error, Updates)
     */

    CognitoSyncRemoteStorage.prototype.listUpdates = function (datasetName, lastSyncCount, callback) {

        var root = this;
        var nextToken = null;
        var updatedRecords = new AWS.CognitoSyncManager.DatasetUpdates(datasetName);

        var request = function (token, cb) {
            root.client.listRecords({
                DatasetName: datasetName,
                IdentityId: root.getIdentityId(),
                IdentityPoolId: root.identityPoolId,
                LastSyncCount: lastSyncCount,
                MaxResults: 1024,
                NextToken: token
            }, cb);
        };

        var response = function (err, data) {

            if (err) { return callback(err); }

            data = data || {};

            var results = data.Records || [], r;

            for (var i = 0; i < results.length; i++) {
                r = new AWS.CognitoSyncManager.Record(results[i]);
                r.setModified(false);
                updatedRecords.addRecord(r);
            }

            updatedRecords.setSyncSessionToken(data.SyncSessionToken)
                .setSyncCount(data.DatasetSyncCount)
                .setExists(data.DatasetExists)
                .setDeleted(data.DatasetDeletedAfterRequestedSyncCount);

            if (data.MergedDatasetNames) {
                updatedRecords.setMergedDatasetNameList(data.MergedDatasetNames);
            }

            nextToken = data.NextToken;

            if (nextToken) {
                request(nextToken, response);
            } else {
                callback(null, updatedRecords);
            }

        };


        request(null, response);

    };

    /**
     * Write records to the remote data store.
     * @param {string} datasetName
     * @param {array} records
     * @param {string} syncSessionToken
     * @param {function} callback
     */

    CognitoSyncRemoteStorage.prototype.putRecords = function (datasetName, records, syncSessionToken, callback) {

        var root = this;

        var patches = [];
        var record;

        for (var r in records) {
            if (records.hasOwnProperty(r)) {

                record = records[r];

                patches.push({
                    Key: record.getKey(),
                    Op: record.getValue() ? 'replace' : 'remove',
                    SyncCount: record.getSyncCount(),
                    DeviceLastModifiedDate: record.getDeviceLastModifiedDate(),
                    Value: record.getValue()
                });

            }
        }

        this.client.updateRecords({
            DatasetName: datasetName,
            IdentityId: root.getIdentityId(),
            IdentityPoolId: root.identityPoolId,
            SyncSessionToken: syncSessionToken,
            RecordPatches: patches
        }, function (err, data) {

            var dsName = typeof datasetName === 'string' ? datasetName : '(invalid dataset name)';

            if (err) {
                return callback(new Error('Failed to update records in dataset: ' + dsName + ' (' + err.message + ')'), null);
            }

            var records = [], r;

            for (var i = 0; i < data.Records.length; i++) {
                r = new AWS.CognitoSyncManager.Record(data.Records[i]);
                r.setModified(false);
                records.push(r);
            }

            return callback(null, records);

        });

    };

    /**
     * Delete the dataset from the remote data store.
     * @param {string} datasetName
     * @param {function} callback Callback(Error, IsSuccessful)
     */

    CognitoSyncRemoteStorage.prototype.deleteDataset = function (datasetName, callback) {

        this.client.deleteDataset({
            DatasetName: datasetName,
            IdentityId: this.getIdentityId(),
            IdentityPoolId: this.identityPoolId
        }, function (err, data) {

            if (err) {
                return callback(new Error('Failed to delete dataset.'), null);
            }

            return callback(null, data);

        });

    };

    /**
     * Gets the dataset metdata from the remote data store.
     * @param {string} datasetName
     * @param {function} callback Callback(Error, Metadata)
     */

    CognitoSyncRemoteStorage.prototype.getDatasetMetadata = function (datasetName, callback) {

        this.client.describeDataset({
            DatasetName: datasetName,
            IdentityId: this.getIdentityId(),
            IdentityPoolId: this.identityPoolId
        }, function (err, data) {

            if (err) {
                return callback(new Error('Failed to get dataset metadata.'), null);
            }

            return callback(null, new AWS.CognitoSyncManager.DatasetMetadata(data.Dataset));

        });

    };

    CognitoSyncRemoteStorage.prototype.setUserAgent = function (userAgent) {
        this.userAgent = userAgent;
    };

    return CognitoSyncRemoteStorage;

})();

/***/ }),
/* 239 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

AWS = AWS || {};
AWS.CognitoSyncManager = AWS.CognitoSyncManager || {};

AWS.CognitoSyncManager.StoreInMemory = (function() {

    /**
     * Storage adapter for using the browser's memory as the Cognito Sync data cache.
     * @prop {object} store A reference to an object in memory.
     * @constructor
     */

    var CognitoSyncStoreInMemory = function () {
        this.store = {};
    };

    /**
     * Constructs the key by combining the identity ID and the dataset name.
     * @param identityId
     * @param datasetName
     * @returns {string}
     */

    CognitoSyncStoreInMemory.prototype.makeKey = function (identityId, datasetName) {
        return identityId + '.' + datasetName;
    };

    /**
     * Gets an item from the local store.
     * @param identityId
     * @param datasetName
     * @param key
     * @param callback
     */

    CognitoSyncStoreInMemory.prototype.get = function (identityId, datasetName, key, callback) {

        var k = this.makeKey(identityId, datasetName);

        if (!identityId || !datasetName) {
            return callback(new Error('You must provide an identity id and dataset name.'), null);
        }

        if (this.store[k] && this.store[k][key]) {
            return callback(null, this.store[k][key]);
        }

        return callback(null, undefined);

    };

    /**
     * Gets a dataset from the local store.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncStoreInMemory.prototype.getAll = function (identityId, datasetName, callback) {

        var k = this.makeKey(identityId, datasetName);

        if (!identityId || !datasetName) {
            return callback(new Error('You must provide an identity id and dataset name.'), null);
        }

        return callback(null, this.store[k]);

    };

    /**
     * Sets a record in the local store.
     * @param identityId
     * @param datasetName
     * @param key
     * @param value
     * @param callback
     */

    CognitoSyncStoreInMemory.prototype.set = function (identityId, datasetName, key, value, callback) {

        var k = this.makeKey(identityId, datasetName);

        var entry = this.store[k] || {};
        entry[key] = value;

        this.store[k] = entry;

        return callback(null, entry);

    };

    /**
     * Sets an entire dataset in the local store.
     * @param identityId
     * @param datasetName
     * @param obj
     * @param callback
     */

    CognitoSyncStoreInMemory.prototype.setAll = function (identityId, datasetName, obj, callback) {

        var k = this.makeKey(identityId, datasetName);
        this.store[k] = obj;

        return callback(null, obj);

    };

    /**
     * Removes a record from the local store.
     * @param identityId
     * @param datasetName
     * @param key
     * @param callback
     */

    CognitoSyncStoreInMemory.prototype.remove = function (identityId, datasetName, key, callback) {

        var k = this.makeKey(identityId, datasetName);

        var records = JSON.parse(this.store[k]);
        if (!records) {
            records = {};
        }

        delete(records[key]);

        this.store[k] = JSON.stringify(records);

        return callback(null, true);

    };

    /**
     * Removes dataset from local store.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncStoreInMemory.prototype.removeAll = function (identityId, datasetName, callback) {

        var k = this.makeKey(identityId, datasetName);
        delete(this.store[k]);

        return callback(null, true);

    };

    /**
     * Clears the local store, including cached values.
     * @param callback
     */

    CognitoSyncStoreInMemory.prototype.wipe = function (callback) {
        this.store = {};
        return callback(null, true);
    };

    return CognitoSyncStoreInMemory;

})();

/***/ }),
/* 240 */
/***/ (function(module, exports) {

/**
 * Copyright 2014 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */

AWS = AWS || {};
AWS.CognitoSyncManager = AWS.CognitoSyncManager || {};

AWS.CognitoSyncManager.StoreLocalStorage = (function() {

    /**
     * Storage adapter for using the browser's local storage as the Cognito Sync data cache.
     * @prop {window.localStorage} store A reference to the browser's local storage API.
     * @constructor
     */

    var CognitoSyncStoreLocalStorage = function () {
        this.store = this._isAvailable() ? window.localStorage : new AWS.CognitoSyncManager.StoreInMemory();
    };

    /**
     * Constructs the key by combining the identity ID and the dataset name.
     * @param {string} identityId
     * @param {string} datasetName
     * @returns {string}
     */

    CognitoSyncStoreLocalStorage.prototype.makeKey = function (identityId, datasetName) {
        return identityId + '.' + datasetName;
    };

    /**
     * Returns a value from local storage.
     * @param {string} identityId The identity that owns the dataset.
     * @param {string} datasetName The name of the dataset.
     * @param {string} key The key of the record to return.
     * @param {function} callback
     */

    CognitoSyncStoreLocalStorage.prototype.get = function (identityId, datasetName, key, callback) {

        var k = this.makeKey(identityId, datasetName);

        if (!identityId || !datasetName) {
            return callback(new Error('You must provide an identity id and dataset name.'), null);
        }

        var records = JSON.parse(this.store.getItem(k));

        if (records && records[key]) {
            return callback(null, records[key]);
        }

        return callback(null, undefined);

    };

    /**
     * Gets all records from local storage.
     * @param identityId
     * @param datasetName
     * @param callback Callback(Error, Items)
     */

    CognitoSyncStoreLocalStorage.prototype.getAll = function (identityId, datasetName, callback) {

        var k = this.makeKey(identityId, datasetName);

        if (!identityId || !datasetName) {
            return callback(new Error('You must provide an identity id and dataset name.'), null);
        }

        return callback(null, JSON.parse(this.store.getItem(k)));

    };

    /**
     * Sets a value in local storage.
     * @param identityId
     * @param datasetName
     * @param key
     * @param value
     * @param callback Callback(Error, Records)
     */

    CognitoSyncStoreLocalStorage.prototype.set = function (identityId, datasetName, key, value, callback) {

        var k = this.makeKey(identityId, datasetName);

        var records = JSON.parse(this.store.getItem(k));
        if (!records) {
            records = {};
        }

        records[key] = value;

        this.store.setItem(k, JSON.stringify(records));

        callback(null, records);

        return this;

    };

    /**
     * Sets all values of a dataset.
     * @param identityId
     * @param datasetName
     * @param obj
     * @param callback Callback(Error, Object)
     */

    CognitoSyncStoreLocalStorage.prototype.setAll = function (identityId, datasetName, obj, callback) {

        var k = this.makeKey(identityId, datasetName);

        this.store.setItem(k, JSON.stringify(obj));

        return callback(null, obj);

    };

    /**
     * Removes an item from local storage.
     * @param identityId
     * @param datasetName
     * @param key
     * @param callback
     */

    CognitoSyncStoreLocalStorage.prototype.remove = function (identityId, datasetName, key, callback) {

        var k = this.makeKey(identityId, datasetName);

        var records = JSON.parse(this.store.getItem(k));
        if (!records) {
            records = {};
        }

        delete(records[key]);

        this.store.setItem(k, JSON.stringify(records));

        return callback(null, true);

    };

    /**
     * Removes dataset from local storage.
     * @param identityId
     * @param datasetName
     * @param callback
     */

    CognitoSyncStoreLocalStorage.prototype.removeAll = function (identityId, datasetName, callback) {

        var k = this.makeKey(identityId, datasetName);
        this.store.removeItem(k);

        return callback(null, true);

    };

    /**
     * Clears local storage, including cached values.
     * @param callback
     */

    CognitoSyncStoreLocalStorage.prototype.wipe = function (callback) {

        // We don't want to remove the cached identity id. Remove all other keys.
        // Remove own keys only

        var ownKeysRegExp = /^[\w-]+:[0-9a-f-]+\..+$/;

        for (var prop in this.store) {
            if (this.store.hasOwnProperty(prop)) {
                if (ownKeysRegExp.test(prop)) {
                    this.store.removeItem(prop);
                }
            }
        }

        // exception from ownKeysRegExp
        this.store.removeItem(this.makeKey('_internal', '_metadata'));

        if (callback) {
            return callback(null, true);
        }
        return this;

    };

    /**
     * Checks for localStorage availability.
     */

    CognitoSyncStoreLocalStorage.prototype._isAvailable = function () {
        var uid = new Date();
        var result;

        try {
            window.localStorage.setItem(uid, uid);
            result = window.localStorage.getItem(uid) == uid;
            window.localStorage.removeItem(uid);
        } catch (exception) {
            result = false;
        }

        return result;
    };

    return CognitoSyncStoreLocalStorage;

})();

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aws4 = exports,
    url = __webpack_require__(63),
    querystring = __webpack_require__(62),
    crypto = __webpack_require__(19),
    lru = __webpack_require__(242),
    credentialsCache = lru(1000)

// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html

function hmac(key, string, encoding) {
  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding)
}

function hash(string, encoding) {
  return crypto.createHash('sha256').update(string, 'utf8').digest(encoding)
}

// This function assumes the string has already been percent encoded
function encodeRfc3986(urlEncodedString) {
  return urlEncodedString.replace(/[!'()*]/g, function(c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

// request: { path | body, [host], [method], [headers], [service], [region] }
// credentials: { accessKeyId, secretAccessKey, [sessionToken] }
function RequestSigner(request, credentials) {

  if (typeof request === 'string') request = url.parse(request)

  var headers = request.headers = (request.headers || {}),
      hostParts = this.matchHost(request.hostname || request.host || headers.Host || headers.host)

  this.request = request
  this.credentials = credentials || this.defaultCredentials()

  this.service = request.service || hostParts[0] || ''
  this.region = request.region || hostParts[1] || 'us-east-1'

  // SES uses a different domain from the service name
  if (this.service === 'email') this.service = 'ses'

  if (!request.method && request.body)
    request.method = 'POST'

  if (!headers.Host && !headers.host) {
    headers.Host = request.hostname || request.host || this.createHost()

    // If a port is specified explicitly, use it as is
    if (request.port)
      headers.Host += ':' + request.port
  }
  if (!request.hostname && !request.host)
    request.hostname = headers.Host || headers.host

  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT'
}

RequestSigner.prototype.matchHost = function(host) {
  var match = (host || '').match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com$/)
  var hostParts = (match || []).slice(1, 3)

  // ES's hostParts are sometimes the other way round, if the value that is expected
  // to be region equals ‘es’ switch them back
  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com
  if (hostParts[1] === 'es')
    hostParts = hostParts.reverse()

  return hostParts
}

// http://docs.aws.amazon.com/general/latest/gr/rande.html
RequestSigner.prototype.isSingleRegion = function() {
  // Special case for S3 and SimpleDB in us-east-1
  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true

  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts']
    .indexOf(this.service) >= 0
}

RequestSigner.prototype.createHost = function() {
  var region = this.isSingleRegion() ? '' :
        (this.service === 's3' && this.region !== 'us-east-1' ? '-' : '.') + this.region,
      service = this.service === 'ses' ? 'email' : this.service
  return service + region + '.amazonaws.com'
}

RequestSigner.prototype.prepareRequest = function() {
  this.parsePath()

  var request = this.request, headers = request.headers, query

  if (request.signQuery) {

    this.parsedPath.query = query = this.parsedPath.query || {}

    if (this.credentials.sessionToken)
      query['X-Amz-Security-Token'] = this.credentials.sessionToken

    if (this.service === 's3' && !query['X-Amz-Expires'])
      query['X-Amz-Expires'] = 86400

    if (query['X-Amz-Date'])
      this.datetime = query['X-Amz-Date']
    else
      query['X-Amz-Date'] = this.getDateTime()

    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256'
    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString()
    query['X-Amz-SignedHeaders'] = this.signedHeaders()

  } else {

    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {
      if (request.body && !headers['Content-Type'] && !headers['content-type'])
        headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8'

      if (request.body && !headers['Content-Length'] && !headers['content-length'])
        headers['Content-Length'] = Buffer.byteLength(request.body)

      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])
        headers['X-Amz-Security-Token'] = this.credentials.sessionToken

      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])
        headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex')

      if (headers['X-Amz-Date'] || headers['x-amz-date'])
        this.datetime = headers['X-Amz-Date'] || headers['x-amz-date']
      else
        headers['X-Amz-Date'] = this.getDateTime()
    }

    delete headers.Authorization
    delete headers.authorization
  }
}

RequestSigner.prototype.sign = function() {
  if (!this.parsedPath) this.prepareRequest()

  if (this.request.signQuery) {
    this.parsedPath.query['X-Amz-Signature'] = this.signature()
  } else {
    this.request.headers.Authorization = this.authHeader()
  }

  this.request.path = this.formatPath()

  return this.request
}

RequestSigner.prototype.getDateTime = function() {
  if (!this.datetime) {
    var headers = this.request.headers,
      date = new Date(headers.Date || headers.date || new Date)

    this.datetime = date.toISOString().replace(/[:\-]|\.\d{3}/g, '')

    // Remove the trailing 'Z' on the timestamp string for CodeCommit git access
    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1)
  }
  return this.datetime
}

RequestSigner.prototype.getDate = function() {
  return this.getDateTime().substr(0, 8)
}

RequestSigner.prototype.authHeader = function() {
  return [
    'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),
    'SignedHeaders=' + this.signedHeaders(),
    'Signature=' + this.signature(),
  ].join(', ')
}

RequestSigner.prototype.signature = function() {
  var date = this.getDate(),
      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),
      kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey)
  if (!kCredentials) {
    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date)
    kRegion = hmac(kDate, this.region)
    kService = hmac(kRegion, this.service)
    kCredentials = hmac(kService, 'aws4_request')
    credentialsCache.set(cacheKey, kCredentials)
  }
  return hmac(kCredentials, this.stringToSign(), 'hex')
}

RequestSigner.prototype.stringToSign = function() {
  return [
    'AWS4-HMAC-SHA256',
    this.getDateTime(),
    this.credentialString(),
    hash(this.canonicalString(), 'hex'),
  ].join('\n')
}

RequestSigner.prototype.canonicalString = function() {
  if (!this.parsedPath) this.prepareRequest()

  var pathStr = this.parsedPath.path,
      query = this.parsedPath.query,
      headers = this.request.headers,
      queryStr = '',
      normalizePath = this.service !== 's3',
      decodePath = this.service === 's3' || this.request.doNotEncodePath,
      decodeSlashesInPath = this.service === 's3',
      firstValOnly = this.service === 's3',
      bodyHash

  if (this.service === 's3' && this.request.signQuery) {
    bodyHash = 'UNSIGNED-PAYLOAD'
  } else if (this.isCodeCommitGit) {
    bodyHash = ''
  } else {
    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] ||
      hash(this.request.body || '', 'hex')
  }

  if (query) {
    queryStr = encodeRfc3986(querystring.stringify(Object.keys(query).sort().reduce(function(obj, key) {
      if (!key) return obj
      obj[key] = !Array.isArray(query[key]) ? query[key] :
        (firstValOnly ? query[key][0] : query[key].slice().sort())
      return obj
    }, {})))
  }
  if (pathStr !== '/') {
    if (normalizePath) pathStr = pathStr.replace(/\/{2,}/g, '/')
    pathStr = pathStr.split('/').reduce(function(path, piece) {
      if (normalizePath && piece === '..') {
        path.pop()
      } else if (!normalizePath || piece !== '.') {
        if (decodePath) piece = unescape(piece)
        path.push(encodeRfc3986(escape(piece)))
      }
      return path
    }, []).join('/')
    if (pathStr[0] !== '/') pathStr = '/' + pathStr
    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/')
  }

  return [
    this.request.method || 'GET',
    pathStr,
    queryStr,
    this.canonicalHeaders() + '\n',
    this.signedHeaders(),
    bodyHash,
  ].join('\n')
}

RequestSigner.prototype.canonicalHeaders = function() {
  var headers = this.request.headers
  function trimAll(header) {
    return header.toString().trim().replace(/\s+/g, ' ')
  }
  return Object.keys(headers)
    .sort(function(a, b) { return a.toLowerCase() < b.toLowerCase() ? -1 : 1 })
    .map(function(key) { return key.toLowerCase() + ':' + trimAll(headers[key]) })
    .join('\n')
}

RequestSigner.prototype.signedHeaders = function() {
  return Object.keys(this.request.headers)
    .map(function(key) { return key.toLowerCase() })
    .sort()
    .join(';')
}

RequestSigner.prototype.credentialString = function() {
  return [
    this.getDate(),
    this.region,
    this.service,
    'aws4_request',
  ].join('/')
}

RequestSigner.prototype.defaultCredentials = function() {
  var env = __webpack_require__.i({"AWS_SERVICES":"lambda,cognitoidentity,cognitosync,sqs","NODE_ENV":"production"})
  return {
    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,
    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,
    sessionToken: env.AWS_SESSION_TOKEN,
  }
}

RequestSigner.prototype.parsePath = function() {
  var path = this.request.path || '/',
      queryIx = path.indexOf('?'),
      query = null

  if (queryIx >= 0) {
    query = querystring.parse(path.slice(queryIx + 1))
    path = path.slice(0, queryIx)
  }

  // S3 doesn't always encode characters > 127 correctly and
  // all services don't encode characters > 255 correctly
  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all
  if (/[^0-9A-Za-z!'()*\-._~%/]/.test(path)) {
    path = path.split('/').map(function(piece) {
      return escape(unescape(piece))
    }).join('/')
  }

  this.parsedPath = {
    path: path,
    query: query,
  }
}

RequestSigner.prototype.formatPath = function() {
  var path = this.parsedPath.path,
      query = this.parsedPath.query

  if (!query) return path

  // Services don't support empty query string keys
  if (query[''] != null) delete query['']

  return path + '?' + encodeRfc3986(querystring.stringify(query))
}

aws4.RequestSigner = RequestSigner

aws4.sign = function(request, credentials) {
  return new RequestSigner(request, credentials).sign()
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer))

/***/ }),
/* 242 */
/***/ (function(module, exports) {

module.exports = function(size) {
  return new LruCache(size)
}

function LruCache(size) {
  this.capacity = size | 0
  this.map = Object.create(null)
  this.list = new DoublyLinkedList()
}

LruCache.prototype.get = function(key) {
  var node = this.map[key]
  if (node == null) return undefined
  this.used(node)
  return node.val
}

LruCache.prototype.set = function(key, val) {
  var node = this.map[key]
  if (node != null) {
    node.val = val
  } else {
    if (!this.capacity) this.prune()
    if (!this.capacity) return false
    node = new DoublyLinkedNode(key, val)
    this.map[key] = node
    this.capacity--
  }
  this.used(node)
  return true
}

LruCache.prototype.used = function(node) {
  this.list.moveToFront(node)
}

LruCache.prototype.prune = function() {
  var node = this.list.pop()
  if (node != null) {
    delete this.map[node.key]
    this.capacity++
  }
}


function DoublyLinkedList() {
  this.firstNode = null
  this.lastNode = null
}

DoublyLinkedList.prototype.moveToFront = function(node) {
  if (this.firstNode == node) return

  this.remove(node)

  if (this.firstNode == null) {
    this.firstNode = node
    this.lastNode = node
    node.prev = null
    node.next = null
  } else {
    node.prev = null
    node.next = this.firstNode
    node.next.prev = node
    this.firstNode = node
  }
}

DoublyLinkedList.prototype.pop = function() {
  var lastNode = this.lastNode
  if (lastNode != null) {
    this.remove(lastNode)
  }
  return lastNode
}

DoublyLinkedList.prototype.remove = function(node) {
  if (this.firstNode == node) {
    this.firstNode = node.next
  } else if (node.prev != null) {
    node.prev.next = node.next
  }
  if (this.lastNode == node) {
    this.lastNode = node.prev
  } else if (node.next != null) {
    node.next.prev = node.prev
  }
}


function DoublyLinkedNode(key, val) {
  this.key = key
  this.val = val
  this.prev = null
  this.next = null
}


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;;(function(undefined) {
    'use strict';
    /**
     * BottleJS v1.6.0 - 2017-02-22
     * A powerful dependency injection micro container
     *
     * Copyright (c) 2017 Stephen Young
     * Licensed MIT
     */
    
    /**
     * Unique id counter;
     *
     * @type Number
     */
    var id = 0;
    
    /**
     * Local slice alias
     *
     * @type Functions
     */
    var slice = Array.prototype.slice;
    
    /**
     * Iterator used to walk down a nested object.
     *
     * If Bottle.config.strict is true, this method will throw an exception if it encounters an
     * undefined path
     *
     * @param Object obj
     * @param String prop
     * @return mixed
     * @throws Error if Bottle is unable to resolve the requested service.
     */
    var getNested = function getNested(obj, prop) {
        var service = obj[prop];
        if (service === undefined && globalConfig.strict) {
            throw new Error('Bottle was unable to resolve a service.  `' + prop + '` is undefined.');
        }
        return service;
    };
    
    /**
     * Get a nested bottle. Will set and return if not set.
     *
     * @param String name
     * @return Bottle
     */
    var getNestedBottle = function getNestedBottle(name) {
        return this.nested[name] || (this.nested[name] = Bottle.pop());
    };
    
    /**
     * Get a service stored under a nested key
     *
     * @param String fullname
     * @return Service
     */
    var getNestedService = function getNestedService(fullname) {
        return fullname.split('.').reduce(getNested, this);
    };
    
    /**
     * Register a constant
     *
     * @param String name
     * @param mixed value
     * @return Bottle
     */
    var constant = function constant(name, value) {
        var parts = name.split('.');
        name = parts.pop();
        defineConstant.call(parts.reduce(setValueObject, this.container), name, value);
        return this;
    };
    
    var defineConstant = function defineConstant(name, value) {
        Object.defineProperty(this, name, {
            configurable : false,
            enumerable : true,
            value : value,
            writable : false
        });
    };
    
    /**
     * Register decorator.
     *
     * @param String fullname
     * @param Function func
     * @return Bottle
     */
    var decorator = function decorator(fullname, func) {
        var parts, name;
        if (typeof fullname === 'function') {
            func = fullname;
            fullname = '__global__';
        }
    
        parts = fullname.split('.');
        name = parts.shift();
        if (parts.length) {
            getNestedBottle.call(this, name).decorator(parts.join('.'), func);
        } else {
            if (!this.decorators[name]) {
                this.decorators[name] = [];
            }
            this.decorators[name].push(func);
        }
        return this;
    };
    
    /**
     * Register a function that will be executed when Bottle#resolve is called.
     *
     * @param Function func
     * @return Bottle
     */
    var defer = function defer(func) {
        this.deferred.push(func);
        return this;
    };
    
    
    /**
     * Immediately instantiates the provided list of services and returns them.
     *
     * @param Array services
     * @return Array Array of instances (in the order they were provided)
     */
    var digest = function digest(services) {
        return (services || []).map(getNestedService, this.container);
    };
    
    /**
     * Register a factory inside a generic provider.
     *
     * @param String name
     * @param Function Factory
     * @return Bottle
     */
    var factory = function factory(name, Factory) {
        return provider.call(this, name, function GenericProvider() {
            this.$get = Factory;
        });
    };
    
    /**
     * Register an instance factory inside a generic factory.
     *
     * @param {String} name - The name of the service
     * @param {Function} Factory - The factory function, matches the signature required for the
     * `factory` method
     * @return Bottle
     */
    var instanceFactory = function instanceFactory(name, Factory) {
        return factory.call(this, name, function GenericInstanceFactory(container) {
            return {
                instance : Factory.bind(Factory, container)
            };
        });
    };
    
    /**
     * A filter function for removing bottle container methods and providers from a list of keys
     */
    var byMethod = function byMethod(name) {
        return !/^\$(?:decorator|register|list)$|Provider$/.test(name);
    };
    
    /**
     * List the services registered on the container.
     *
     * @param Object container
     * @return Array
     */
    var list = function list(container) {
        return Object.keys(container || this.container || {}).filter(byMethod);
    };
    
    /**
     * Function used by provider to set up middleware for each request.
     *
     * @param Number id
     * @param String name
     * @param Object instance
     * @param Object container
     * @return void
     */
    var applyMiddleware = function applyMiddleware(middleware, name, instance, container) {
        var descriptor = {
            configurable : true,
            enumerable : true
        };
        if (middleware.length) {
            descriptor.get = function getWithMiddlewear() {
                var index = 0;
                var next = function nextMiddleware(err) {
                    if (err) {
                        throw err;
                    }
                    if (middleware[index]) {
                        middleware[index++](instance, next);
                    }
                };
                next();
                return instance;
            };
        } else {
            descriptor.value = instance;
            descriptor.writable = true;
        }
    
        Object.defineProperty(container, name, descriptor);
    
        return container[name];
    };
    
    /**
     * Register middleware.
     *
     * @param String name
     * @param Function func
     * @return Bottle
     */
    var middleware = function middleware(fullname, func) {
        var parts, name;
        if (typeof fullname === 'function') {
            func = fullname;
            fullname = '__global__';
        }
    
        parts = fullname.split('.');
        name = parts.shift();
        if (parts.length) {
            getNestedBottle.call(this, name).middleware(parts.join('.'), func);
        } else {
            if (!this.middlewares[name]) {
                this.middlewares[name] = [];
            }
            this.middlewares[name].push(func);
        }
        return this;
    };
    
    /**
     * Named bottle instances
     *
     * @type Object
     */
    var bottles = {};
    
    /**
     * Get an instance of bottle.
     *
     * If a name is provided the instance will be stored in a local hash.  Calling Bottle.pop multiple
     * times with the same name will return the same instance.
     *
     * @param String name
     * @return Bottle
     */
    var pop = function pop(name) {
        var instance;
        if (typeof name === 'string') {
            instance = bottles[name];
            if (!instance) {
                bottles[name] = instance = new Bottle();
                instance.constant('BOTTLE_NAME', name);
            }
            return instance;
        }
        return new Bottle();
    };
    
    /**
     * Clear all named bottles.
     */
    var clear = function clear(name) {
        if (typeof name === 'string') {
            delete bottles[name];
        } else {
            bottles = {};
        }
    };
    
    /**
     * Used to process decorators in the provider
     *
     * @param Object instance
     * @param Function func
     * @return Mixed
     */
    var reducer = function reducer(instance, func) {
        return func(instance);
    };
    
    /**
     * Register a provider.
     *
     * @param String fullname
     * @param Function Provider
     * @return Bottle
     */
    var provider = function provider(fullname, Provider) {
        var parts, name;
        parts = fullname.split('.');
        if (this.providerMap[fullname] && parts.length === 1 && !this.container[fullname + 'Provider']) {
            return console.error(fullname + ' provider already instantiated.');
        }
        this.originalProviders[fullname] = Provider;
        this.providerMap[fullname] = true;
    
        name = parts.shift();
    
        if (parts.length) {
            createSubProvider.call(this, name, Provider, parts);
            return this;
        }
        return createProvider.call(this, name, Provider);
    };
    
    /**
     * Get decorators and middleware including globals
     *
     * @return array
     */
    var getWithGlobal = function getWithGlobal(collection, name) {
        return (collection[name] || []).concat(collection.__global__ || []);
    };
    
    /**
     * Create the provider properties on the container
     *
     * @param String name
     * @param Function Provider
     * @return Bottle
     */
    var createProvider = function createProvider(name, Provider) {
        var providerName, properties, container, id, decorators, middlewares;
    
        id = this.id;
        container = this.container;
        decorators = this.decorators;
        middlewares = this.middlewares;
        providerName = name + 'Provider';
    
        properties = Object.create(null);
        properties[providerName] = {
            configurable : true,
            enumerable : true,
            get : function getProvider() {
                var instance = new Provider();
                delete container[providerName];
                container[providerName] = instance;
                return instance;
            }
        };
    
        properties[name] = {
            configurable : true,
            enumerable : true,
            get : function getService() {
                var provider = container[providerName];
                var instance;
                if (provider) {
                    // filter through decorators
                    instance = getWithGlobal(decorators, name).reduce(reducer, provider.$get(container));
    
                    delete container[providerName];
                    delete container[name];
                }
                return instance === undefined ? instance : applyMiddleware(getWithGlobal(middlewares, name),
                    name, instance, container);
            }
        };
    
        Object.defineProperties(container, properties);
        return this;
    };
    
    /**
     * Creates a bottle container on the current bottle container, and registers
     * the provider under the sub container.
     *
     * @param String name
     * @param Function Provider
     * @param Array parts
     * @return Bottle
     */
    var createSubProvider = function createSubProvider(name, Provider, parts) {
        var bottle;
        bottle = getNestedBottle.call(this, name);
        this.factory(name, function SubProviderFactory() {
            return bottle.container;
        });
        return bottle.provider(parts.join('.'), Provider);
    };
    
    /**
     * Register a service, factory, provider, or value based on properties on the object.
     *
     * properties:
     *  * Obj.$name   String required ex: `'Thing'`
     *  * Obj.$type   String optional 'service', 'factory', 'provider', 'value'.  Default: 'service'
     *  * Obj.$inject Mixed  optional only useful with $type 'service' name or array of names
     *  * Obj.$value  Mixed  optional Normally Obj is registered on the container.  However, if this
     *                       property is included, it's value will be registered on the container
     *                       instead of the object itsself.  Useful for registering objects on the
     *                       bottle container without modifying those objects with bottle specific keys.
     *
     * @param Function Obj
     * @return Bottle
     */
    var register = function register(Obj) {
        var value = Obj.$value === undefined ? Obj : Obj.$value;
        return this[Obj.$type || 'service'].apply(this, [Obj.$name, value].concat(Obj.$inject || []));
    };
    
    /**
     * Deletes providers from the map and container.
     *
     * @param String name
     * @return void
     */
    var removeProviderMap = function resetProvider(name) {
        delete this.providerMap[name];
        delete this.container[name];
        delete this.container[name + 'Provider'];
    };
    
    /**
     * Resets all providers on a bottle instance.
     *
     * @return void
     */
    var resetProviders = function resetProviders() {
        var providers = this.originalProviders;
        Object.keys(this.originalProviders).forEach(function resetPrvider(provider) {
            var parts = provider.split('.');
            if (parts.length > 1) {
                removeProviderMap.call(this, parts[0]);
                parts.forEach(removeProviderMap, getNestedBottle.call(this, parts[0]));
            }
            removeProviderMap.call(this, provider);
            this.provider(provider, providers[provider]);
        }, this);
    };
    
    
    /**
     * Execute any deferred functions
     *
     * @param Mixed data
     * @return Bottle
     */
    var resolve = function resolve(data) {
        this.deferred.forEach(function deferredIterator(func) {
            func(data);
        });
    
        return this;
    };
    
    /**
     * Register a service inside a generic factory.
     *
     * @param String name
     * @param Function Service
     * @return Bottle
     */
    var service = function service(name, Service) {
        var deps = arguments.length > 2 ? slice.call(arguments, 2) : null;
        var bottle = this;
        return factory.call(this, name, function GenericFactory() {
            if (deps) {
                deps = deps.map(getNestedService, bottle.container);
                deps.unshift(Service);
                Service = Service.bind.apply(Service, deps);
            }
            return new Service();
        });
    };
    
    /**
     * Register a value
     *
     * @param String name
     * @param mixed val
     * @return Bottle
     */
    var value = function value(name, val) {
        var parts;
        parts = name.split('.');
        name = parts.pop();
        defineValue.call(parts.reduce(setValueObject, this.container), name, val);
        return this;
    };
    
    /**
     * Iterator for setting a plain object literal via defineValue
     *
     * @param Object container
     * @param string name
     */
    var setValueObject = function setValueObject(container, name) {
        var nestedContainer = container[name];
        if (!nestedContainer) {
            nestedContainer = {};
            defineValue.call(container, name, nestedContainer);
        }
        return nestedContainer;
    };
    
    /**
     * Define a mutable property on the container.
     *
     * @param String name
     * @param mixed val
     * @return void
     * @scope container
     */
    var defineValue = function defineValue(name, val) {
        Object.defineProperty(this, name, {
            configurable : true,
            enumerable : true,
            value : val,
            writable : true
        });
    };
    
    
    /**
     * Bottle constructor
     *
     * @param String name Optional name for functional construction
     */
    var Bottle = function Bottle(name) {
        if (!(this instanceof Bottle)) {
            return Bottle.pop(name);
        }
    
        this.id = id++;
    
        this.decorators = {};
        this.middlewares = {};
        this.nested = {};
        this.providerMap = {};
        this.originalProviders = {};
        this.deferred = [];
        this.container = {
            $decorator : decorator.bind(this),
            $register : register.bind(this),
            $list : list.bind(this)
        };
    };
    
    /**
     * Bottle prototype
     */
    Bottle.prototype = {
        constant : constant,
        decorator : decorator,
        defer : defer,
        digest : digest,
        factory : factory,
        instanceFactory: instanceFactory,
        list : list,
        middleware : middleware,
        provider : provider,
        resetProviders : resetProviders,
        register : register,
        resolve : resolve,
        service : service,
        value : value
    };
    
    /**
     * Bottle static
     */
    Bottle.pop = pop;
    Bottle.clear = clear;
    Bottle.list = list;
    
    /**
     * Global config
     */
    var globalConfig = Bottle.config = {
        strict : false
    };
    
    /**
     * Exports script adapted from lodash v2.4.1 Modern Build
     *
     * @see http://lodash.com/
     */
    
    /**
     * Valid object type map
     *
     * @type Object
     */
    var objectTypes = {
        'function' : true,
        'object' : true
    };
    
    (function exportBottle(root) {
    
        /**
         * Free variable exports
         *
         * @type Function
         */
        var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
    
        /**
         * Free variable module
         *
         * @type Object
         */
        var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
    
        /**
         * CommonJS module.exports
         *
         * @type Function
         */
        var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
    
        /**
         * Free variable `global`
         *
         * @type Object
         */
        var freeGlobal = objectTypes[typeof global] && global;
        if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
            root = freeGlobal;
        }
    
        /**
         * Export
         */
        if (true) {
            root.Bottle = Bottle;
            !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return Bottle; }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (freeExports && freeModule) {
            if (moduleExports) {
                (freeModule.exports = Bottle).Bottle = Bottle;
            } else {
                freeExports.Bottle = Bottle;
            }
        } else {
            root.Bottle = Bottle;
        }
    }((objectTypes[typeof window] && window) || this));
    
}.call(this));
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)(module), __webpack_require__(3)))

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {(function(e){var b=function(){this._version="v1.0.0-rc.1";this._parser=(new (window.UAParser||exports.UAParser)).getResult();this._fontDetective=new Detector;this.options=this.getDefaultOptions();return this};b.prototype.getDefaultOptions=function(){return{getUserAgent:!0,getCPU:!0,getCurrentResolution:!0,getAvailableResolution:!0,getColorDepth:!0,getDeviceXDPI:!0,getDeviceYDPI:!0,getPlugins:!0,getFonts:!0,hasCookies:!0,hasLocalStorage:!0,hasSessionStorage:!0,getTimeZone:!0,getLanguage:!0,getSystemLanguage:!0,
getCanvasPrint:!0,getIPAddresses:!1,getGraphicsDriverInfo:!0,getMediaDevices:!1}};b.prototype.extendOptions=function(a,b){for(var c in b)a[c]=b[c];return a};b.prototype.getVersion=function(){return this._version};b.prototype.getParser=function(){return this._parser};b.prototype.getFingerprint=function(){var a=this._parser.ua,b=this.getScreenPrint(),c=this.getPlugins(),d=this.getFonts(),f=this.hasLocalStorage(),k=this.hasSessionStorage(),p=this.getTimeZone(),q=this.getLanguage(),h=this.getSystemLanguage(),
g=this.hasCookies(),l=this.getCanvasPrint();return murmurhash3_32_gc(a+"|"+b+"|"+c+"|"+d+"|"+f+"|"+k+"|"+p+"|"+q+"|"+h+"|"+g+"|"+l,256)};b.prototype.getFingerprintAsync=function(a,b){var c="",d=this,f={},k=this.options,k=this.extendOptions(k,a);this.getAsyncOptions(f,function(a){c+=a;for(var q in k)!0===k[q]&&"getIPAddresses"!==q&&"getMediaDevices"!==q&&(a=d[q](),c+=a+"|",f[q]=a);b(ctph.digest(c),f)})};b.prototype.getCustomFingerprint=function(a){for(var b="",c=Array.prototype.slice.call(arguments),
d=0;d<c.length;d++)b+=c[d]+"|";return murmurhash3_32_gc(b,256)};b.prototype.getAsyncOptions=function(a,b){var c="",d=this;this.getIPAddressesOption(function(f){void 0!==f&&(c+=f.localAddr+"|"+f.publicAddr+"|",a.getIPAddresses=f);d.getMediaDevicesOption(function(f){void 0!==f&&(c+=f,a.getMediaDevices=f);b(c)})})};b.prototype.getIPAddressesOption=function(a){1==this.options.getIPAddresses?this.getIPAddresses(function(b){a(b)}):a()};b.prototype.getMediaDevicesOption=function(a){!0===this.options.getMediaDevices?
this.getMediaDevices(function(b){a(b)}):a()};b.prototype.getUserAgent=function(){return this._parser.ua};b.prototype.getUserAgentLowerCase=function(){return this._parser.ua.toLowerCase()};b.prototype.getBrowser=function(){return this._parser.browser.name};b.prototype.getBrowserVersion=function(){return this._parser.browser.version};b.prototype.getBrowserMajorVersion=function(){return this._parser.browser.major};b.prototype.getIPAddresses=function(a){function b(a){a=/([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/.exec(JSON.stringify(a))[1];
void 0===f[a]&&(f[a]=!0,a.match(/^(192\.168\.|169\.254\.|10\.|172\.(1[6-9]|2\d|3[01]))/)?d.localAddr=a:a.match(/^[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7}$/)?d.ipv6=a:d.publicAddr=a)}function c(){w=null;h.localDescription.sdp.split("\n").forEach(function(a){0===a.indexOf("a=candidate:")?(l++,b(a)):0===a.indexOf("a=fingerprint:")&&(d.fingerprint=a.substring(14,a.length))});a&&a(d)}var d={},f={},k=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection;if(k){try{if(!k){this._makeWebRTCFrame("webRTC_iframe");
var p=f.contentWindow,k=p.RTCPeerConnection||p.mozRTCPeerConnection||p.webkitRTCPeerConnection}}catch(e){a&&a("")}var p={optional:[{RtpDataChannels:!0}]},q={iceServers:[{urls:"stun:stun.services.mozilla.com"}]};try{var h=new k(q,p)}catch(e){a&&a("")}var g=0,l=0,w;h.onicecandidate=function(a){if(a.candidate){g++;b(a.candidate.candidate);try{clearTimeout(w)}catch(f){}w=setTimeout(c,150)}};h.createDataChannel(null);h.createOffer(function(a){h.setLocalDescription(a,function(){},function(){})},function(){})}else a&&
a("")};b.prototype._makeWebRTCFrame=function(a){var b=document.createElement("iframe");b.setAttribute("id",a);b.setAttribute("sandbox","allow-same-origin");b.setAttribute("style","display: none");document.getElementsByTagName("body")[0].appendChild(b)};b.prototype.isIE=function(){return/IE/i.test(this._parser.browser.name)};b.prototype.isChrome=function(){return/Chrome/i.test(this._parser.browser.name)};b.prototype.isFirefox=function(){return/Firefox/i.test(this._parser.browser.name)};b.prototype.isSafari=
function(){return/Safari/i.test(this._parser.browser.name)};b.prototype.isMobileSafari=function(){return/Mobile\sSafari/i.test(this._parser.browser.name)};b.prototype.isOpera=function(){return/Opera/i.test(this._parser.browser.name)};b.prototype.getEngine=function(){return this._parser.engine.name};b.prototype.getEngineVersion=function(){return this._parser.engine.version};b.prototype.getOS=function(){return this._parser.os.name};b.prototype.getOSVersion=function(){return this._parser.os.version};
b.prototype.isWindows=function(){return/Windows/i.test(this._parser.os.name)};b.prototype.isMac=function(){return/Mac/i.test(this._parser.os.name)};b.prototype.isLinux=function(){return/Linux/i.test(this._parser.os.name)};b.prototype.isUbuntu=function(){return/Ubuntu/i.test(this._parser.os.name)};b.prototype.isSolaris=function(){return/Solaris/i.test(this._parser.os.name)};b.prototype.getDevice=function(){return this._parser.device.model};b.prototype.getDeviceType=function(){return this._parser.device.type};
b.prototype.getDeviceVendor=function(){return this._parser.device.vendor};b.prototype.getCPU=function(){return this._parser.cpu.architecture};b.prototype.isMobile=function(){var a=this._parser.ua||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||
/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,
4))};b.prototype.isMobileMajor=function(){return this.isMobileAndroid()||this.isMobileBlackBerry()||this.isMobileIOS()||this.isMobileOpera()||this.isMobileWindows()};b.prototype.isMobileAndroid=function(){return this._parser.ua.match(/Android/i)?!0:!1};b.prototype.isMobileOpera=function(){return this._parser.ua.match(/Opera Mini/i)?!0:!1};b.prototype.isMobileWindows=function(){return this._parser.ua.match(/IEMobile/i)?!0:!1};b.prototype.isMobileBlackBerry=function(){return this._parser.ua.match(/BlackBerry/i)?
!0:!1};b.prototype.isMobileIOS=function(){return this._parser.ua.match(/iPhone|iPad|iPod/i)?!0:!1};b.prototype.isIphone=function(){return this._parser.ua.match(/iPhone/i)?!0:!1};b.prototype.isIpad=function(){return this._parser.ua.match(/iPad/i)?!0:!1};b.prototype.isIpod=function(){return this._parser.ua.match(/iPod/i)?!0:!1};b.prototype.getScreenPrint=function(){return"Current Resolution: "+this.getCurrentResolution()+", Available Resolution: "+this.getAvailableResolution()+", Color Depth: "+this.getColorDepth()+
", Device XDPI: "+this.getDeviceXDPI()+", Device YDPI: "+this.getDeviceYDPI()};b.prototype.getColorDepth=function(){return screen.colorDepth};b.prototype.getCurrentResolution=function(){return screen.width+"x"+screen.height};b.prototype.getAvailableResolution=function(){return screen.availWidth+"x"+screen.availHeight};b.prototype.getDeviceXDPI=function(){return screen.deviceXDPI};b.prototype.getDeviceYDPI=function(){return screen.deviceYDPI};b.prototype.getPlugins=function(){for(var a="",b=0;b<navigator.plugins.length;b++)a=
b==navigator.plugins.length-1?a+navigator.plugins[b].name:a+(navigator.plugins[b].name+", ");return a};b.prototype.hasJava=function(){return navigator.javaEnabled()};b.prototype.getJavaVersion=function(){return deployJava.getJREs().toString()};b.prototype.hasFlash=function(){return navigator.plugins["Shockwave Flash"]?!0:!1};b.prototype.getFlashVersion=function(){return this.isFlash()?(objPlayerVersion=swfobject.getFlashPlayerVersion(),objPlayerVersion.major+"."+objPlayerVersion.minor+"."+objPlayerVersion.release):
""};b.prototype.hasSilverlight=function(){return navigator.plugins["Silverlight Plug-In"]?!0:!1};b.prototype.getSilverlightVersion=function(){return this.isSilverlight()?navigator.plugins["Silverlight Plug-In"].description:""};b.prototype.hasMimeTypes=function(){return navigator.mimeTypes.length?!0:!1};b.prototype.getMimeTypes=function(){for(var a="",b=0;b<navigator.mimeTypes.length;b++)a=b==navigator.mimeTypes.length-1?a+navigator.mimeTypes[b].description:a+(navigator.mimeTypes[b].description+", ");
return a};b.prototype.hasFonts=function(a){return this._fontDetective.detect(a)};b.prototype.getFonts=function(){for(var a="Abadi MT Condensed Light;Adobe Fangsong Std;Adobe Hebrew;Adobe Ming Std;Agency FB;Aharoni;Andalus;Angsana New;AngsanaUPC;Aparajita;Arab;Arabic Transparent;Arabic Typesetting;Arial Baltic;Arial Black;Arial CE;Arial CYR;Arial Greek;Arial TUR;Arial;Batang;BatangChe;Bauhaus 93;Bell MT;Bitstream Vera Serif;Bodoni MT;Bookman Old Style;Braggadocio;Broadway;Browallia New;BrowalliaUPC;Calibri Light;Calibri;Californian FB;Cambria Math;Cambria;Candara;Castellar;Casual;Centaur;Century Gothic;Chalkduster;Colonna MT;Comic Sans MS;Consolas;Constantia;Copperplate Gothic Light;Corbel;Cordia New;CordiaUPC;Courier New Baltic;Courier New CE;Courier New CYR;Courier New Greek;Courier New TUR;Courier New;DFKai-SB;DaunPenh;David;DejaVu LGC Sans Mono;Desdemona;DilleniaUPC;DokChampa;Dotum;DotumChe;Ebrima;Engravers MT;Eras Bold ITC;Estrangelo Edessa;EucrosiaUPC;Euphemia;Eurostile;FangSong;Forte;FrankRuehl;Franklin Gothic Heavy;Franklin Gothic Medium;FreesiaUPC;French Script MT;Gabriola;Gautami;Georgia;Gigi;Gisha;Goudy Old Style;Gulim;GulimChe;GungSeo;Gungsuh;GungsuhChe;Haettenschweiler;Harrington;Hei S;HeiT;Heisei Kaku Gothic;Hiragino Sans GB;Impact;Informal Roman;IrisUPC;Iskoola Pota;JasmineUPC;KacstOne;KaiTi;Kalinga;Kartika;Khmer UI;Kino MT;KodchiangUPC;Kokila;Kozuka Gothic Pr6N;Lao UI;Latha;Leelawadee;Levenim MT;LilyUPC;Lohit Gujarati;Loma;Lucida Bright;Lucida Console;Lucida Fax;Lucida Sans Unicode;MS Gothic;MS Mincho;MS PGothic;MS PMincho;MS Reference Sans Serif;MS UI Gothic;MV Boli;Magneto;Malgun Gothic;Mangal;Marlett;Matura MT Script Capitals;Meiryo UI;Meiryo;Menlo;Microsoft Himalaya;Microsoft JhengHei;Microsoft New Tai Lue;Microsoft PhagsPa;Microsoft Sans Serif;Microsoft Tai Le;Microsoft Uighur;Microsoft YaHei;Microsoft Yi Baiti;MingLiU;MingLiU-ExtB;MingLiU_HKSCS;MingLiU_HKSCS-ExtB;Miriam Fixed;Miriam;Mongolian Baiti;MoolBoran;NSimSun;Narkisim;News Gothic MT;Niagara Solid;Nyala;PMingLiU;PMingLiU-ExtB;Palace Script MT;Palatino Linotype;Papyrus;Perpetua;Plantagenet Cherokee;Playbill;Prelude Bold;Prelude Condensed Bold;Prelude Condensed Medium;Prelude Medium;PreludeCompressedWGL Black;PreludeCompressedWGL Bold;PreludeCompressedWGL Light;PreludeCompressedWGL Medium;PreludeCondensedWGL Black;PreludeCondensedWGL Bold;PreludeCondensedWGL Light;PreludeCondensedWGL Medium;PreludeWGL Black;PreludeWGL Bold;PreludeWGL Light;PreludeWGL Medium;Raavi;Rachana;Rockwell;Rod;Sakkal Majalla;Sawasdee;Script MT Bold;Segoe Print;Segoe Script;Segoe UI Light;Segoe UI Semibold;Segoe UI Symbol;Segoe UI;Shonar Bangla;Showcard Gothic;Shruti;SimHei;SimSun;SimSun-ExtB;Simplified Arabic Fixed;Simplified Arabic;Snap ITC;Sylfaen;Symbol;Tahoma;Times New Roman Baltic;Times New Roman CE;Times New Roman CYR;Times New Roman Greek;Times New Roman TUR;Times New Roman;TlwgMono;Traditional Arabic;Trebuchet MS;Tunga;Tw Cen MT Condensed Extra Bold;Ubuntu;Umpush;Univers;Utopia;Utsaah;Vani;Verdana;Vijaya;Vladimir Script;Vrinda;Webdings;Wide Latin;Wingdings".split(";"),
b="",c=0;c<a.length;c++)this._fontDetective.detect(a[c])&&(b=c==a.length-1?b+a[c]:b+(a[c]+", "));return b};b.prototype.hasLocalStorage=function(){try{return!!e.localStorage}catch(a){return!0}};b.prototype.hasSessionStorage=function(){try{return!!e.sessionStorage}catch(a){return!0}};b.prototype.hasCookies=function(){return navigator.cookieEnabled};b.prototype.getTimeZone=function(){return String(String(new Date).split("(")[1]).split(")")[0]};b.prototype.getLanguage=function(){return navigator.language};
b.prototype.getSystemLanguage=function(){return navigator.systemLanguage};b.prototype.hasCanvas=function(){var a=document.createElement("canvas");try{return!(!a.getContext||!a.getContext("2d"))}catch(b){return!1}};b.prototype.getCanvasPrint=function(a){var b=document.createElement("canvas"),c;try{c=b.getContext("2d")}catch(d){return""}a=a?a:"ClientJS,org <canvas> 1.0";c.textBaseline="top";c.font="14px 'Arial'";c.textBaseline="alphabetic";c.fillStyle="#f60";c.fillRect(125,1,62,20);c.fillStyle="#069";
c.fillText(a,2,15);c.fillStyle="rgba(102, 204, 0, 0.7)";c.fillText(a,4,17);return b.toDataURL()};b.prototype.getWebGLFingerprint=function(){var a,b=function(f){a.clearColor(0,0,0,1);a.enable(a.DEPTH_TEST);a.depthFunc(a.LEQUAL);a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT);return"["+f[0]+", "+f[1]+"]"};a=this.createWebGLCanvas();if(!a)return"";var c=[],d=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,d);var f=new Float32Array([-.2,-.9,0,.4,-.26,0,0,.732134444,0]);a.bufferData(a.ARRAY_BUFFER,f,a.STATIC_DRAW);
d.itemSize=3;d.numItems=3;var f=a.createProgram(),k=a.createShader(a.VERTEX_SHADER);a.shaderSource(k,"attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}");a.compileShader(k);var p=a.createShader(a.FRAGMENT_SHADER);a.shaderSource(p,"precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}");a.compileShader(p);a.attachShader(f,
k);a.attachShader(f,p);a.linkProgram(f);a.useProgram(f);f.vertexPosAttrib=a.getAttribLocation(f,"attrVertex");f.offsetUniform=a.getUniformLocation(f,"uniformOffset");a.enableVertexAttribArray(f.vertexPosArray);a.vertexAttribPointer(f.vertexPosAttrib,d.itemSize,a.FLOAT,!1,0,0);a.uniform2f(f.offsetUniform,1,1);a.drawArrays(a.TRIANGLE_STRIP,0,d.numItems);null!=a.canvas&&c.push(a.canvas.toDataURL());c.push("extensions:"+a.getSupportedExtensions().join(";"));c.push("webgl aliased line width range:"+b(a.getParameter(a.ALIASED_LINE_WIDTH_RANGE)));
c.push("webgl aliased point size range:"+b(a.getParameter(a.ALIASED_POINT_SIZE_RANGE)));c.push("webgl alpha bits:"+a.getParameter(a.ALPHA_BITS));c.push("webgl antialiasing:"+(a.getContextAttributes().antialias?"yes":"no"));c.push("webgl blue bits:"+a.getParameter(a.BLUE_BITS));c.push("webgl depth bits:"+a.getParameter(a.DEPTH_BITS));c.push("webgl green bits:"+a.getParameter(a.GREEN_BITS));c.push("webgl max anisotropy:"+function(a){var f,k=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||
a.getExtension("MOZ_EXT_texture_filter_anisotropic");return k?(f=a.getParameter(k.MAX_TEXTURE_MAX_ANISOTROPY_EXT),0===f&&(f=2),f):null}(a));c.push("webgl max combined texture image units:"+a.getParameter(a.MAX_COMBINED_TEXTURE_IMAGE_UNITS));c.push("webgl max cube map texture size:"+a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE));c.push("webgl max fragment uniform vectors:"+a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS));c.push("webgl max render buffer size:"+a.getParameter(a.MAX_RENDERBUFFER_SIZE));
c.push("webgl max texture image units:"+a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS));c.push("webgl max texture size:"+a.getParameter(a.MAX_TEXTURE_SIZE));c.push("webgl max varying vectors:"+a.getParameter(a.MAX_VARYING_VECTORS));c.push("webgl max vertex attribs:"+a.getParameter(a.MAX_VERTEX_ATTRIBS));c.push("webgl max vertex texture image units:"+a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS));c.push("webgl max vertex uniform vectors:"+a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS));c.push("webgl max viewport dims:"+
b(a.getParameter(a.MAX_VIEWPORT_DIMS)));c.push("webgl red bits:"+a.getParameter(a.RED_BITS));c.push("webgl renderer:"+a.getParameter(a.RENDERER));c.push("webgl shading language version:"+a.getParameter(a.SHADING_LANGUAGE_VERSION));c.push("webgl stencil bits:"+a.getParameter(a.STENCIL_BITS));c.push("webgl vendor:"+a.getParameter(a.VENDOR));c.push("webgl version:"+a.getParameter(a.VERSION));a.getShaderPrecisionFormat?(c.push("webgl vertex shader high float precision:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,
a.HIGH_FLOAT).precision),c.push("webgl vertex shader high float precision rangeMin:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).rangeMin),c.push("webgl vertex shader high float precision rangeMax:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).rangeMax),c.push("webgl vertex shader medium float precision:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision),c.push("webgl vertex shader medium float precision rangeMin:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,
a.MEDIUM_FLOAT).rangeMin),c.push("webgl vertex shader medium float precision rangeMax:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).rangeMax),c.push("webgl vertex shader low float precision:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.LOW_FLOAT).precision),c.push("webgl vertex shader low float precision rangeMin:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.LOW_FLOAT).rangeMin),c.push("webgl vertex shader low float precision rangeMax:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,
a.LOW_FLOAT).rangeMax),c.push("webgl fragment shader high float precision:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision),c.push("webgl fragment shader high float precision rangeMin:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).rangeMin),c.push("webgl fragment shader high float precision rangeMax:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).rangeMax),c.push("webgl fragment shader medium float precision:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,
a.MEDIUM_FLOAT).precision),c.push("webgl fragment shader medium float precision rangeMin:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).rangeMin),c.push("webgl fragment shader medium float precision rangeMax:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).rangeMax),c.push("webgl fragment shader low float precision:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.LOW_FLOAT).precision),c.push("webgl fragment shader low float precision rangeMin:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,
a.LOW_FLOAT).rangeMin),c.push("webgl fragment shader low float precision rangeMax:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.LOW_FLOAT).rangeMax),c.push("webgl vertex shader high int precision:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_INT).precision),c.push("webgl vertex shader high int precision rangeMin:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_INT).rangeMin),c.push("webgl vertex shader high int precision rangeMax:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_INT).rangeMax),
c.push("webgl vertex shader medium int precision:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_INT).precision),c.push("webgl vertex shader medium int precision rangeMin:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_INT).rangeMin),c.push("webgl vertex shader medium int precision rangeMax:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_INT).rangeMax),c.push("webgl vertex shader low int precision:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.LOW_INT).precision),c.push("webgl vertex shader low int precision rangeMin:"+
a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.LOW_INT).rangeMin),c.push("webgl vertex shader low int precision rangeMax:"+a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.LOW_INT).rangeMax),c.push("webgl fragment shader high int precision:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_INT).precision),c.push("webgl fragment shader high int precision rangeMin:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_INT).rangeMin),c.push("webgl fragment shader high int precision rangeMax:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,
a.HIGH_INT).rangeMax),c.push("webgl fragment shader medium int precision:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_INT).precision),c.push("webgl fragment shader medium int precision rangeMin:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_INT).rangeMin),c.push("webgl fragment shader medium int precision rangeMax:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_INT).rangeMax),c.push("webgl fragment shader low int precision:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,
a.LOW_INT).precision),c.push("webgl fragment shader low int precision rangeMin:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.LOW_INT).rangeMin),c.push("webgl fragment shader low int precision rangeMax:"+a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.LOW_INT).rangeMax)):"undefined"===typeof NODEBUG&&console.log("This browser does not support getShaderPrecisionFormat. Ignoring it.");return c.join("|")};b.prototype.getGraphicsDriverInfo=function(){return this.getGraphicsDriverVendor()+" "+this.getGraphicsDriverRenderer()};
b.prototype.getGraphicsDriverVendor=function(){var a=this.createWebglCanvas();if(!a)return"";var b=a.getExtension("WEBGL_debug_renderer_info");return b?a.getParameter(b.UNMASKED_VENDOR_WEBGL):""};b.prototype.getGraphicsDriverRenderer=function(){var a=this.createWebglCanvas();if(!a)return"";var b=a.getExtension("WEBGL_debug_renderer_info");return b?a.getParameter(b.UNMASKED_RENDERER_WEBGL):""};b.prototype.createWebGLCanvas=function(){var a=document.createElement("canvas"),b=null;try{b=a.getContext("webgl")||
a.getContext("experimental-webgl")}catch(c){}b||(b=null);return b};b.prototype.getMediaDevices=function(a){var b="";navigator.mediaDevices&&navigator.mediaDevices.enumerateDevices?navigator.mediaDevices.enumerateDevices().then(function(c){c.forEach(function(a){b+=a.kind+":"+a.label+a.groudId+"#"+a.deviceId+";"});a(b)}).catch(function(a){console.log(a.name+": "+error.message)}):a(b)};b.prototype._ipAddressesFilter=function(a){0==this.filters.ipAddresses?a(""):this.getIPAddresses(function(b){b?a(b.publicAddr+
"|"+b.localAddr+"|"+b.ipv6+"|"):a(null)})};e.ClientJS=b})(window);(function(){function e(a,b){if(a===b)return 0;if(0===a.length)return b.length;if(0===b.length)return a.length;var c=Array(b.length+1),d,h,g,l,e;for(g=0;g<c.length;++g)c[g]=g;for(g=0;g<a.length;++g){h=g+1;for(l=0;l<b.length;++l)d=h,h=c[l]+(a.charAt(g)===b.charAt(l)?0:1),e=d+1,h>e&&(h=e),e=c[l+1]+1,h>e&&(h=e),c[l]=d;c[l]=h}return h}function b(){this.c=this.z=this.y=this.x=0;this.window=Array(7)}function a(a,c){for(var p=["",""],d=671226215,h=671226215,g=new b,l=0,e=a.length;l<e;l++){d=(16777619*d^a[l])>>>
0;h=(16777619*h^a[l])>>>0;g.update(a[l]);if(l===e-1||g.sum()%c===c-1)p[0]+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(d&63),d=671226215;if(l===e-1||g.sum()%(2*c)===2*c-1)p[1]+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(h&63),h=671226215}return p}function r(a,b){return 100*(1-e(a,b)/Math.max(a.length,b.length))}var c={},d=!1;"undefined"!==typeof module&&module.exports?exports=module.exports=c:(this.ctph=c,d=!0);b.prototype.update=function(a){this.y-=
this.x;this.y+=7*a;this.x+=a;this.x-=this.window[this.c%7]||0;this.window[this.c%7]=a;this.c++;this.z=this.z<<5>>>0;this.z=(this.z^a)>>>0};b.prototype.sum=function(){return this.x+this.y+this.z>>>0};c.digest=function(f){if("string"===typeof f)if(d){f=unescape(encodeURIComponent(f));for(var b=[],c=0;c<f.length;c++)b.push(f.charCodeAt(c));f=b}else f=(new Buffer(f)).toJSON();b=Math.ceil(Math.log(f.length/192)/Math.log(2));b=Math.max(3,b);for(c=a(f,3<<b);0<b&&32>c[0].length;)c=a(f,3<<--b);return"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(b)+
":"+c[0]+":"+c[1]};c.similarity=function(a,b){var c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(0)),d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(b.charAt(0));return c>d?arguments.callee(b,a):1<Math.abs(c-d)?0:c===d?r(a.split(":")[1],b.split(":")[1]):r(a.split(":")[2],b.split(":")[1])}})();var deployJava=function(){function e(a){d.debug&&(console.log?console.log(a):alert(a))}function b(a){if(null==a||0==a.length)return"http://java.com/dt-redirect";"&"==a.charAt(0)&&(a=a.substring(1,a.length));return"http://java.com/dt-redirect?"+a}var a=["id","class","title","style"];"classid codebase codetype data type archive declare standby height width usemap name tabindex align border hspace vspace".split(" ").concat(a,["lang","dir"],"onclick ondblclick onmousedown onmouseup onmouseover onmousemove onmouseout onkeypress onkeydown onkeyup".split(" "));
var r="codebase code name archive object width height alt align hspace vspace".split(" ").concat(a),c;try{c=-1!=document.location.protocol.indexOf("http")?"//java.com/js/webstart.png":"http://java.com/js/webstart.png"}catch(f){c="http://java.com/js/webstart.png"}var d={debug:null,version:"20120801",firefoxJavaVersion:null,myInterval:null,preInstallJREList:null,returnPage:null,brand:null,locale:null,installType:null,EAInstallEnabled:!1,EarlyAccessURL:null,oldMimeType:"application/npruntime-scriptable-plugin;DeploymentToolkit",
mimeType:"application/java-deployment-toolkit",launchButtonPNG:c,browserName:null,browserName2:null,getJREs:function(){var a=[];if(this.isPluginInstalled())for(var b=this.getPlugin().jvms,c=0;c<b.getLength();c++)a[c]=b.get(c).version;else b=this.getBrowser(),"MSIE"==b?this.testUsingActiveX("1.7.0")?a[0]="1.7.0":this.testUsingActiveX("1.6.0")?a[0]="1.6.0":this.testUsingActiveX("1.5.0")?a[0]="1.5.0":this.testUsingActiveX("1.4.2")?a[0]="1.4.2":this.testForMSVM()&&(a[0]="1.1"):"Netscape Family"==b&&(this.getJPIVersionUsingMimeType(),
null!=this.firefoxJavaVersion?a[0]=this.firefoxJavaVersion:this.testUsingMimeTypes("1.7")?a[0]="1.7.0":this.testUsingMimeTypes("1.6")?a[0]="1.6.0":this.testUsingMimeTypes("1.5")?a[0]="1.5.0":this.testUsingMimeTypes("1.4.2")?a[0]="1.4.2":"Safari"==this.browserName2&&(this.testUsingPluginsArray("1.7.0")?a[0]="1.7.0":this.testUsingPluginsArray("1.6")?a[0]="1.6.0":this.testUsingPluginsArray("1.5")?a[0]="1.5.0":this.testUsingPluginsArray("1.4.2")&&(a[0]="1.4.2")));if(this.debug)for(c=0;c<a.length;++c)e("[getJREs()] We claim to have detected Java SE "+
a[c]);return a},installJRE:function(a,b){if(this.isPluginInstalled()&&this.isAutoInstallEnabled(a)){var c=!1;if(c=this.isCallbackSupported()?this.getPlugin().installJRE(a,b):this.getPlugin().installJRE(a))this.refresh(),null!=this.returnPage&&(document.location=this.returnPage);return c}return this.installLatestJRE()},isAutoInstallEnabled:function(a){if(!this.isPluginInstalled())return!1;"undefined"==typeof a&&(a=null);if("MSIE"!=deployJava.browserName||deployJava.compareVersionToPattern(deployJava.getPlugin().version,
["10","0","0"],!1,!0))a=!0;else if(null==a)a=!1;else{var b="1.6.0_33+";if(null==b||0==b.length)a=!0;else{var c=b.charAt(b.length-1);"+"!=c&&"*"!=c&&-1!=b.indexOf("_")&&"_"!=c&&(b+="*",c="*");b=b.substring(0,b.length-1);if(0<b.length){var d=b.charAt(b.length-1);if("."==d||"_"==d)b=b.substring(0,b.length-1)}a="*"==c?0==a.indexOf(b):"+"==c?b<=a:!1}a=!a}return a},isCallbackSupported:function(){return this.isPluginInstalled()&&this.compareVersionToPattern(this.getPlugin().version,["10","2","0"],!1,!0)},
installLatestJRE:function(a){if(this.isPluginInstalled()&&this.isAutoInstallEnabled()){var c=!1;if(c=this.isCallbackSupported()?this.getPlugin().installLatestJRE(a):this.getPlugin().installLatestJRE())this.refresh(),null!=this.returnPage&&(document.location=this.returnPage);return c}a=this.getBrowser();c=navigator.platform.toLowerCase();if("true"==this.EAInstallEnabled&&-1!=c.indexOf("win")&&null!=this.EarlyAccessURL)this.preInstallJREList=this.getJREs(),null!=this.returnPage&&(this.myInterval=setInterval("deployJava.poll()",
3E3)),location.href=this.EarlyAccessURL;else{if("MSIE"==a)return this.IEInstall();if("Netscape Family"==a&&-1!=c.indexOf("win32"))return this.FFInstall();location.href=b((null!=this.returnPage?"&returnPage="+this.returnPage:"")+(null!=this.locale?"&locale="+this.locale:"")+(null!=this.brand?"&brand="+this.brand:""))}return!1},runApplet:function(a,b,c){if("undefined"==c||null==c)c="1.1";var d=c.match("^(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)(?:_(\\d+))?)?)?$");null==this.returnPage&&(this.returnPage=document.location);
null!=d?"?"!=this.getBrowser()?this.versionCheck(c+"+")?this.writeAppletTag(a,b):this.installJRE(c+"+")&&(this.refresh(),location.href=document.location,this.writeAppletTag(a,b)):this.writeAppletTag(a,b):e("[runApplet()] Invalid minimumVersion argument to runApplet():"+c)},writeAppletTag:function(a,b){var c="<applet ",d="",h=!0;if(null==b||"object"!=typeof b)b={};for(var g in a){var l;a:{l=g.toLowerCase();for(var e=r.length,y=0;y<e;y++)if(r[y]===l){l=!0;break a}l=!1}l?(c+=" "+g+'="'+a[g]+'"',"code"==
g&&(h=!1)):b[g]=a[g]}g=!1;for(var t in b){"codebase_lookup"==t&&(g=!0);if("object"==t||"java_object"==t||"java_code"==t)h=!1;d+='<param name="'+t+'" value="'+b[t]+'"/>'}g||(d+='<param name="codebase_lookup" value="false"/>');h&&(c+=' code="dummy"');document.write(c+">\n"+d+"\n</applet>")},versionCheck:function(a){var b=0,c=a.match("^(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)(?:_(\\d+))?)?)?(\\*|\\+)?$");if(null!=c){for(var d=a=!1,h=[],g=1;g<c.length;++g)"string"==typeof c[g]&&""!=c[g]&&(h[b]=c[g],b++);"+"==h[h.length-
1]?(d=!0,a=!1,h.length--):"*"==h[h.length-1]?(d=!1,a=!0,h.length--):4>h.length&&(d=!1,a=!0);b=this.getJREs();for(g=0;g<b.length;++g)if(this.compareVersionToPattern(b[g],h,a,d))return!0}else b="Invalid versionPattern passed to versionCheck: "+a,e("[versionCheck()] "+b),alert(b);return!1},isWebStartInstalled:function(a){if("?"==this.getBrowser())return!0;if("undefined"==a||null==a)a="1.4.2";var b=!1;null!=a.match("^(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)(?:_(\\d+))?)?)?$")?b=this.versionCheck(a+"+"):(e("[isWebStartInstaller()] Invalid minimumVersion argument to isWebStartInstalled(): "+
a),b=this.versionCheck("1.4.2+"));return b},getJPIVersionUsingMimeType:function(){for(var a=0;a<navigator.mimeTypes.length;++a){var b=navigator.mimeTypes[a].type.match(/^application\/x-java-applet;jpi-version=(.*)$/);if(null!=b&&(this.firefoxJavaVersion=b[1],"Opera"!=this.browserName2))break}},launchWebStartApplication:function(a){navigator.userAgent.toLowerCase();this.getJPIVersionUsingMimeType();if(0==this.isWebStartInstalled("1.7.0")&&(0==this.installJRE("1.7.0+")||0==this.isWebStartInstalled("1.7.0")))return!1;
var b=null;document.documentURI&&(b=document.documentURI);null==b&&(b=document.URL);var c=this.getBrowser(),d;"MSIE"==c?d='<object classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93" width="0" height="0"><PARAM name="launchjnlp" value="'+a+'"><PARAM name="docbase" value="'+b+'"></object>':"Netscape Family"==c&&(d='<embed type="application/x-java-applet;jpi-version='+this.firefoxJavaVersion+'" width="0" height="0" launchjnlp="'+a+'"docbase="'+b+'" />');"undefined"==document.body||null==document.body?
(document.write(d),document.location=b):(a=document.createElement("div"),a.id="div1",a.style.position="relative",a.style.left="-10000px",a.style.margin="0px auto",a.className="dynamicDiv",a.innerHTML=d,document.body.appendChild(a))},createWebStartLaunchButtonEx:function(a,b){null==this.returnPage&&(this.returnPage=a);document.write('<a href="'+("javascript:deployJava.launchWebStartApplication('"+a+"');")+'" onMouseOver="window.status=\'\'; return true;"><img src="'+this.launchButtonPNG+'" border="0" /></a>')},
createWebStartLaunchButton:function(a,b){null==this.returnPage&&(this.returnPage=a);document.write('<a href="'+("javascript:if (!deployJava.isWebStartInstalled(&quot;"+b+"&quot;)) {if (deployJava.installLatestJRE()) {if (deployJava.launch(&quot;"+a+"&quot;)) {}}} else {if (deployJava.launch(&quot;"+a+"&quot;)) {}}")+'" onMouseOver="window.status=\'\'; return true;"><img src="'+this.launchButtonPNG+'" border="0" /></a>')},launch:function(a){document.location=a;return!0},isPluginInstalled:function(){var a=
this.getPlugin();return a&&a.jvms?!0:!1},isAutoUpdateEnabled:function(){return this.isPluginInstalled()?this.getPlugin().isAutoUpdateEnabled():!1},setAutoUpdateEnabled:function(){return this.isPluginInstalled()?this.getPlugin().setAutoUpdateEnabled():!1},setInstallerType:function(a){this.installType=a;return this.isPluginInstalled()?this.getPlugin().setInstallerType(a):!1},setAdditionalPackages:function(a){return this.isPluginInstalled()?this.getPlugin().setAdditionalPackages(a):!1},setEarlyAccess:function(a){this.EAInstallEnabled=
a},isPlugin2:function(){if(this.isPluginInstalled()&&this.versionCheck("1.6.0_10+"))try{return this.getPlugin().isPlugin2()}catch(a){}return!1},allowPlugin:function(){this.getBrowser();return"Safari"!=this.browserName2&&"Opera"!=this.browserName2},getPlugin:function(){this.refresh();var a=null;this.allowPlugin()&&(a=document.getElementById("deployJavaPlugin"));return a},compareVersionToPattern:function(a,b,c,d){if(void 0==a||void 0==b)return!1;var h=a.match("^(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)(?:_(\\d+))?)?)?$");
if(null!=h){var g=0;a=[];for(var l=1;l<h.length;++l)"string"==typeof h[l]&&""!=h[l]&&(a[g]=h[l],g++);h=Math.min(a.length,b.length);if(d){for(l=0;l<h;++l){if(a[l]<b[l])return!1;if(a[l]>b[l])break}return!0}for(l=0;l<h;++l)if(a[l]!=b[l])return!1;return c?!0:a.length==b.length}return!1},getBrowser:function(){if(null==this.browserName){var a=navigator.userAgent.toLowerCase();e("[getBrowser()] navigator.userAgent.toLowerCase() -> "+a);-1!=a.indexOf("msie")&&-1==a.indexOf("opera")?this.browserName2=this.browserName=
"MSIE":-1!=a.indexOf("iphone")?(this.browserName="Netscape Family",this.browserName2="iPhone"):-1!=a.indexOf("firefox")&&-1==a.indexOf("opera")?(this.browserName="Netscape Family",this.browserName2="Firefox"):-1!=a.indexOf("chrome")?(this.browserName="Netscape Family",this.browserName2="Chrome"):-1!=a.indexOf("safari")?(this.browserName="Netscape Family",this.browserName2="Safari"):-1!=a.indexOf("mozilla")&&-1==a.indexOf("opera")?(this.browserName="Netscape Family",this.browserName2="Other"):-1!=
a.indexOf("opera")?(this.browserName="Netscape Family",this.browserName2="Opera"):(this.browserName="?",this.browserName2="unknown");e("[getBrowser()] Detected browser name:"+this.browserName+", "+this.browserName2)}return this.browserName},testUsingActiveX:function(a){a="JavaWebStart.isInstalled."+a+".0";if("undefined"==typeof ActiveXObject||!ActiveXObject)return e("[testUsingActiveX()] Browser claims to be IE, but no ActiveXObject object?"),!1;try{return null!=new ActiveXObject(a)}catch(b){return!1}},
testForMSVM:function(){if("undefined"!=typeof oClientCaps){var a=oClientCaps.getComponentVersion("{08B0E5C0-4FCB-11CF-AAA5-00401C608500}","ComponentID");return""==a||"5,0,5000,0"==a?!1:!0}return!1},testUsingMimeTypes:function(a){if(!navigator.mimeTypes)return e("[testUsingMimeTypes()] Browser claims to be Netscape family, but no mimeTypes[] array?"),!1;for(var b=0;b<navigator.mimeTypes.length;++b){s=navigator.mimeTypes[b].type;var c=s.match(/^application\/x-java-applet\x3Bversion=(1\.8|1\.7|1\.6|1\.5|1\.4\.2)$/);
if(null!=c&&this.compareVersions(c[1],a))return!0}return!1},testUsingPluginsArray:function(a){if(!navigator.plugins||!navigator.plugins.length)return!1;for(var b=navigator.platform.toLowerCase(),c=0;c<navigator.plugins.length;++c)if(s=navigator.plugins[c].description,-1!=s.search(/^Java Switchable Plug-in (Cocoa)/)){if(this.compareVersions("1.5.0",a))return!0}else if(-1!=s.search(/^Java/)&&-1!=b.indexOf("win")&&(this.compareVersions("1.5.0",a)||this.compareVersions("1.6.0",a)))return!0;return this.compareVersions("1.5.0",
a)?!0:!1},IEInstall:function(){location.href=b((null!=this.returnPage?"&returnPage="+this.returnPage:"")+(null!=this.locale?"&locale="+this.locale:"")+(null!=this.brand?"&brand="+this.brand:""));return!1},done:function(a,b){},FFInstall:function(){location.href=b((null!=this.returnPage?"&returnPage="+this.returnPage:"")+(null!=this.locale?"&locale="+this.locale:"")+(null!=this.brand?"&brand="+this.brand:"")+(null!=this.installType?"&type="+this.installType:""));return!1},compareVersions:function(a,
b){for(var c=a.split("."),d=b.split("."),h=0;h<c.length;++h)c[h]=Number(c[h]);for(h=0;h<d.length;++h)d[h]=Number(d[h]);2==c.length&&(c[2]=0);return c[0]>d[0]?!0:c[0]<d[0]?!1:c[1]>d[1]?!0:c[1]<d[1]?!1:c[2]>d[2]?!0:c[2]<d[2]?!1:!0},enableAlerts:function(){this.browserName=null;this.debug=!0},poll:function(){this.refresh();var a=this.getJREs();0==this.preInstallJREList.length&&0!=a.length&&(clearInterval(this.myInterval),null!=this.returnPage&&(location.href=this.returnPage));0!=this.preInstallJREList.length&&
0!=a.length&&this.preInstallJREList[0]!=a[0]&&(clearInterval(this.myInterval),null!=this.returnPage&&(location.href=this.returnPage))},writePluginTag:function(){var a=this.getBrowser();"MSIE"==a?document.write('<object classid="clsid:CAFEEFAC-DEC7-0000-0001-ABCDEFFEDCBA" id="deployJavaPlugin" width="0" height="0"></object>'):"Netscape Family"==a&&this.allowPlugin()&&this.writeEmbedTag()},refresh:function(){navigator.plugins.refresh(!1);"Netscape Family"==this.getBrowser()&&this.allowPlugin()&&null==
document.getElementById("deployJavaPlugin")&&this.writeEmbedTag()},writeEmbedTag:function(){var a=!1;if(null!=navigator.mimeTypes){for(var b=0;b<navigator.mimeTypes.length;b++)navigator.mimeTypes[b].type==this.mimeType&&navigator.mimeTypes[b].enabledPlugin&&(document.write('<embed id="deployJavaPlugin" type="'+this.mimeType+'" hidden="true" />'),a=!0);if(!a)for(b=0;b<navigator.mimeTypes.length;b++)navigator.mimeTypes[b].type==this.oldMimeType&&navigator.mimeTypes[b].enabledPlugin&&document.write('<embed id="deployJavaPlugin" type="'+
this.oldMimeType+'" hidden="true" />')}}};d.writePluginTag();if(null==d.locale){a=null;if(null==a)try{a=navigator.userLanguage}catch(f){}if(null==a)try{a=navigator.systemLanguage}catch(f){}if(null==a)try{a=navigator.language}catch(f){}null!=a&&(a.replace("-","_"),d.locale=a)}return d}();var Detector=function(){var e=["monospace","sans-serif","serif"],b=document.getElementsByTagName("body")[0],a=document.createElement("span");a.style.fontSize="72px";a.innerHTML="mmmmmmmmmmlli";var r={},c={},d;for(d in e)a.style.fontFamily=e[d],b.appendChild(a),r[e[d]]=a.offsetWidth,c[e[d]]=a.offsetHeight,b.removeChild(a);this.detect=function(d){var k=!1,p;for(p in e){a.style.fontFamily=d+","+e[p];b.appendChild(a);var q=a.offsetWidth!=r[e[p]]||a.offsetHeight!=c[e[p]];b.removeChild(a);k=k||q}return k}};function murmurhash3_32_gc(e,b){var a,r,c,d,f;a=e.length&3;r=e.length-a;c=b;for(f=0;f<r;)d=e.charCodeAt(f)&255|(e.charCodeAt(++f)&255)<<8|(e.charCodeAt(++f)&255)<<16|(e.charCodeAt(++f)&255)<<24,++f,d=3432918353*(d&65535)+((3432918353*(d>>>16)&65535)<<16)&4294967295,d=d<<15|d>>>17,d=461845907*(d&65535)+((461845907*(d>>>16)&65535)<<16)&4294967295,c^=d,c=c<<13|c>>>19,c=5*(c&65535)+((5*(c>>>16)&65535)<<16)&4294967295,c=(c&65535)+27492+(((c>>>16)+58964&65535)<<16);d=0;switch(a){case 3:d^=(e.charCodeAt(f+
2)&255)<<16;case 2:d^=(e.charCodeAt(f+1)&255)<<8;case 1:d^=e.charCodeAt(f)&255,d=3432918353*(d&65535)+((3432918353*(d>>>16)&65535)<<16)&4294967295,d=d<<15|d>>>17,c^=461845907*(d&65535)+((461845907*(d>>>16)&65535)<<16)&4294967295}c^=e.length;c^=c>>>16;c=2246822507*(c&65535)+((2246822507*(c>>>16)&65535)<<16)&4294967295;c^=c>>>13;c=3266489909*(c&65535)+((3266489909*(c>>>16)&65535)<<16)&4294967295;return(c^c>>>16)>>>0};var swfobject=function(){function e(){if(!A){try{var a=n.getElementsByTagName("body")[0].appendChild(n.createElement("span"));a.parentNode.removeChild(a)}catch(b){return}A=!0;for(var a=F.length,c=0;c<a;c++)F[c]()}}function b(a){A?a():F[F.length]=a}function a(a){if("undefined"!=typeof u.addEventListener)u.addEventListener("load",a,!1);else if("undefined"!=typeof n.addEventListener)n.addEventListener("load",a,!1);else if("undefined"!=typeof u.attachEvent)w(u,"onload",a);else if("function"==typeof u.onload){var b=
u.onload;u.onload=function(){b();a()}}else u.onload=a}function r(){var a=n.getElementsByTagName("body")[0],b=n.createElement("object");b.setAttribute("type","application/x-shockwave-flash");var d=a.appendChild(b);if(d){var h=0;(function(){if("undefined"!=typeof d.GetVariable){var l=d.GetVariable("$version");l&&(l=l.split(" ")[1].split(","),m.pv=[parseInt(l[0],10),parseInt(l[1],10),parseInt(l[2],10)])}else if(10>h){h++;setTimeout(arguments.callee,10);return}a.removeChild(b);d=null;c()})()}else c()}
function c(){var a=z.length;if(0<a)for(var b=0;b<a;b++){var c=z[b].id,h=z[b].callbackFn,g={success:!1,id:c};if(0<m.pv[0]){var e=l(c);if(e)if(!y(z[b].swfVersion)||m.wk&&312>m.wk)if(z[b].expressInstall&&f()){g={};g.data=z[b].expressInstall;g.width=e.getAttribute("width")||"0";g.height=e.getAttribute("height")||"0";e.getAttribute("class")&&(g.styleclass=e.getAttribute("class"));e.getAttribute("align")&&(g.align=e.getAttribute("align"));for(var n={},e=e.getElementsByTagName("param"),t=e.length,D=0;D<
t;D++)"movie"!=e[D].getAttribute("name").toLowerCase()&&(n[e[D].getAttribute("name")]=e[D].getAttribute("value"));k(g,n,c,h)}else p(e),h&&h(g);else B(c,!0),h&&(g.success=!0,g.ref=d(c),h(g))}else B(c,!0),h&&((c=d(c))&&"undefined"!=typeof c.SetVariable&&(g.success=!0,g.ref=c),h(g))}}function d(a){var b=null;(a=l(a))&&"OBJECT"==a.nodeName&&("undefined"!=typeof a.SetVariable?b=a:(a=a.getElementsByTagName("object")[0])&&(b=a));return b}function f(){return!G&&y("6.0.65")&&(m.win||m.mac)&&!(m.wk&&312>m.wk)}
function k(a,b,c,d){G=!0;J=d||null;L={success:!1,id:c};var g=l(c);if(g){"OBJECT"==g.nodeName?(E=q(g),H=null):(E=g,H=c);a.id="SWFObjectExprInst";if("undefined"==typeof a.width||!/%$/.test(a.width)&&310>parseInt(a.width,10))a.width="310";if("undefined"==typeof a.height||!/%$/.test(a.height)&&137>parseInt(a.height,10))a.height="137";n.title=n.title.slice(0,47)+" - Flash Player Installation";d=m.ie&&m.win?"ActiveX":"PlugIn";d="MMredirectURL="+u.location.toString().replace(/&/g,"%26")+"&MMplayerType="+
d+"&MMdoctitle="+n.title;b.flashvars="undefined"!=typeof b.flashvars?b.flashvars+("&"+d):d;m.ie&&m.win&&4!=g.readyState&&(d=n.createElement("div"),c+="SWFObjectNew",d.setAttribute("id",c),g.parentNode.insertBefore(d,g),g.style.display="none",function(){4==g.readyState?g.parentNode.removeChild(g):setTimeout(arguments.callee,10)}());h(a,b,c)}}function p(a){if(m.ie&&m.win&&4!=a.readyState){var b=n.createElement("div");a.parentNode.insertBefore(b,a);b.parentNode.replaceChild(q(a),b);a.style.display="none";
(function(){4==a.readyState?a.parentNode.removeChild(a):setTimeout(arguments.callee,10)})()}else a.parentNode.replaceChild(q(a),a)}function q(a){var b=n.createElement("div");if(m.win&&m.ie)b.innerHTML=a.innerHTML;else if(a=a.getElementsByTagName("object")[0])if(a=a.childNodes)for(var c=a.length,d=0;d<c;d++)1==a[d].nodeType&&"PARAM"==a[d].nodeName||8==a[d].nodeType||b.appendChild(a[d].cloneNode(!0));return b}function h(a,b,c){var d,h=l(c);if(m.wk&&312>m.wk)return d;if(h)if("undefined"==typeof a.id&&
(a.id=c),m.ie&&m.win){var g="",e;for(e in a)a[e]!=Object.prototype[e]&&("data"==e.toLowerCase()?b.movie=a[e]:"styleclass"==e.toLowerCase()?g+=' class="'+a[e]+'"':"classid"!=e.toLowerCase()&&(g+=" "+e+'="'+a[e]+'"'));e="";for(var f in b)b[f]!=Object.prototype[f]&&(e+='<param name="'+f+'" value="'+b[f]+'" />');h.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+g+">"+e+"</object>";I[I.length]=a.id;d=l(a.id)}else{f=n.createElement("object");f.setAttribute("type","application/x-shockwave-flash");
for(var k in a)a[k]!=Object.prototype[k]&&("styleclass"==k.toLowerCase()?f.setAttribute("class",a[k]):"classid"!=k.toLowerCase()&&f.setAttribute(k,a[k]));for(g in b)b[g]!=Object.prototype[g]&&"movie"!=g.toLowerCase()&&(a=f,e=g,k=b[g],c=n.createElement("param"),c.setAttribute("name",e),c.setAttribute("value",k),a.appendChild(c));h.parentNode.replaceChild(f,h);d=f}return d}function g(a){var b=l(a);b&&"OBJECT"==b.nodeName&&(m.ie&&m.win?(b.style.display="none",function(){if(4==b.readyState){var c=l(a);
if(c){for(var d in c)"function"==typeof c[d]&&(c[d]=null);c.parentNode.removeChild(c)}}else setTimeout(arguments.callee,10)}()):b.parentNode.removeChild(b))}function l(a){var b=null;try{b=n.getElementById(a)}catch(c){}return b}function w(a,b,c){a.attachEvent(b,c);C[C.length]=[a,b,c]}function y(a){var b=m.pv;a=a.split(".");a[0]=parseInt(a[0],10);a[1]=parseInt(a[1],10)||0;a[2]=parseInt(a[2],10)||0;return b[0]>a[0]||b[0]==a[0]&&b[1]>a[1]||b[0]==a[0]&&b[1]==a[1]&&b[2]>=a[2]?!0:!1}function t(a,b,c,d){if(!m.ie||
!m.mac){var h=n.getElementsByTagName("head")[0];h&&(c=c&&"string"==typeof c?c:"screen",d&&(K=x=null),x&&K==c||(d=n.createElement("style"),d.setAttribute("type","text/css"),d.setAttribute("media",c),x=h.appendChild(d),m.ie&&m.win&&"undefined"!=typeof n.styleSheets&&0<n.styleSheets.length&&(x=n.styleSheets[n.styleSheets.length-1]),K=c),m.ie&&m.win?x&&"object"==typeof x.addRule&&x.addRule(a,b):x&&"undefined"!=typeof n.createTextNode&&x.appendChild(n.createTextNode(a+" {"+b+"}")))}}function B(a,b){if(M){var c=
b?"visible":"hidden";A&&l(a)?l(a).style.visibility=c:t("#"+a,"visibility:"+c)}}function N(a){return null!=/[\\\"<>\.;]/.exec(a)&&"undefined"!=typeof encodeURIComponent?encodeURIComponent(a):a}var u=window,n=document,v=navigator,O=!1,F=[function(){O?r():c()}],z=[],I=[],C=[],E,H,J,L,A=!1,G=!1,x,K,M=!0,m=function(){var a="undefined"!=typeof n.getElementById&&"undefined"!=typeof n.getElementsByTagName&&"undefined"!=typeof n.createElement,b=v.userAgent.toLowerCase(),c=v.platform.toLowerCase(),d=c?/win/.test(c):
/win/.test(b),c=c?/mac/.test(c):/mac/.test(b),b=/webkit/.test(b)?parseFloat(b.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):!1,h=!+"\v1",g=[0,0,0],e=null;if("undefined"!=typeof v.plugins&&"object"==typeof v.plugins["Shockwave Flash"])!(e=v.plugins["Shockwave Flash"].description)||"undefined"!=typeof v.mimeTypes&&v.mimeTypes["application/x-shockwave-flash"]&&!v.mimeTypes["application/x-shockwave-flash"].enabledPlugin||(O=!0,h=!1,e=e.replace(/^.*\s+(\S+\s+\S+$)/,"$1"),g[0]=parseInt(e.replace(/^(.*)\..*$/,
"$1"),10),g[1]=parseInt(e.replace(/^.*\.(.*)\s.*$/,"$1"),10),g[2]=/[a-zA-Z]/.test(e)?parseInt(e.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0);else if("undefined"!=typeof u.ActiveXObject)try{var f=new ActiveXObject("ShockwaveFlash.ShockwaveFlash");f&&(e=f.GetVariable("$version"))&&(h=!0,e=e.split(" ")[1].split(","),g=[parseInt(e[0],10),parseInt(e[1],10),parseInt(e[2],10)])}catch(l){}return{w3:a,pv:g,wk:b,ie:h,win:d,mac:c}}();(function(){m.w3&&(("undefined"!=typeof n.readyState&&"complete"==n.readyState||
"undefined"==typeof n.readyState&&(n.getElementsByTagName("body")[0]||n.body))&&e(),A||("undefined"!=typeof n.addEventListener&&n.addEventListener("DOMContentLoaded",e,!1),m.ie&&m.win&&(n.attachEvent("onreadystatechange",function(){"complete"==n.readyState&&(n.detachEvent("onreadystatechange",arguments.callee),e())}),u==top&&function(){if(!A){try{n.documentElement.doScroll("left")}catch(a){setTimeout(arguments.callee,0);return}e()}}()),m.wk&&function(){A||(/loaded|complete/.test(n.readyState)?e():
setTimeout(arguments.callee,0))}(),a(e)))})();(function(){m.ie&&m.win&&window.attachEvent("onunload",function(){for(var a=C.length,b=0;b<a;b++)C[b][0].detachEvent(C[b][1],C[b][2]);a=I.length;for(b=0;b<a;b++)g(I[b]);for(var c in m)m[c]=null;m=null;for(var d in swfobject)swfobject[d]=null;swfobject=null})})();return{registerObject:function(a,b,c,d){if(m.w3&&a&&b){var h={};h.id=a;h.swfVersion=b;h.expressInstall=c;h.callbackFn=d;z[z.length]=h;B(a,!1)}else d&&d({success:!1,id:a})},getObjectById:function(a){if(m.w3)return d(a)},
embedSWF:function(a,c,d,g,e,l,n,t,p,q){var r={success:!1,id:c};m.w3&&!(m.wk&&312>m.wk)&&a&&c&&d&&g&&e?(B(c,!1),b(function(){d+="";g+="";var b={};if(p&&"object"===typeof p)for(var m in p)b[m]=p[m];b.data=a;b.width=d;b.height=g;m={};if(t&&"object"===typeof t)for(var w in t)m[w]=t[w];if(n&&"object"===typeof n)for(var u in n)m.flashvars="undefined"!=typeof m.flashvars?m.flashvars+("&"+u+"="+n[u]):u+"="+n[u];if(y(e))w=h(b,m,c),b.id==c&&B(c,!0),r.success=!0,r.ref=w;else{if(l&&f()){b.data=l;k(b,m,c,q);return}B(c,
!0)}q&&q(r)})):q&&q(r)},switchOffAutoHideShow:function(){M=!1},ua:m,getFlashPlayerVersion:function(){return{major:m.pv[0],minor:m.pv[1],release:m.pv[2]}},hasFlashPlayerVersion:y,createSWF:function(a,b,c){if(m.w3)return h(a,b,c)},showExpressInstall:function(a,b,c,d){m.w3&&f()&&k(a,b,c,d)},removeSWF:function(a){m.w3&&g(a)},createCSS:function(a,b,c,d){m.w3&&t(a,b,c,d)},addDomLoadEvent:b,addLoadEvent:a,getQueryParamValue:function(a){var b=n.location.search||n.location.hash;if(b){/\?/.test(b)&&(b=b.split("?")[1]);
if(null==a)return N(b);for(var b=b.split("&"),c=0;c<b.length;c++)if(b[c].substring(0,b[c].indexOf("="))==a)return N(b[c].substring(b[c].indexOf("=")+1))}return""},expressInstallCallback:function(){if(G){var a=l("SWFObjectExprInst");a&&E&&(a.parentNode.replaceChild(E,a),H&&(B(H,!0),m.ie&&m.win&&(E.style.display="block")),J&&J(L));G=!1}}}}();(function(e,b){var a={extend:function(a,b){for(var c in b)-1!=="browser cpu device engine os".indexOf(c)&&0===b[c].length%2&&(a[c]=b[c].concat(a[c]));return a},has:function(a,b){return"string"===typeof a?-1!==b.toLowerCase().indexOf(a.toLowerCase()):!1},lowerize:function(a){return a.toLowerCase()},major:function(a){return"string"===typeof a?a.split(".")[0]:b}},r=function(){for(var a,c=0,d,e,f,k,p,q,r=arguments;c<r.length&&!p;){var n=r[c],v=r[c+1];if("undefined"===typeof a)for(f in a={},v)v.hasOwnProperty(f)&&
(k=v[f],"object"===typeof k?a[k[0]]=b:a[k]=b);for(d=e=0;d<n.length&&!p;)if(p=n[d++].exec(this.getUA()))for(f=0;f<v.length;f++)q=p[++e],k=v[f],"object"===typeof k&&0<k.length?2==k.length?a[k[0]]="function"==typeof k[1]?k[1].call(this,q):k[1]:3==k.length?a[k[0]]="function"!==typeof k[1]||k[1].exec&&k[1].test?q?q.replace(k[1],k[2]):b:q?k[1].call(this,q,k[2]):b:4==k.length&&(a[k[0]]=q?k[3].call(this,q.replace(k[1],k[2])):b):a[k]=q?q:b;c+=2}return a},c=function(c,d){for(var e in d)if("object"===typeof d[e]&&
0<d[e].length)for(var f=0;f<d[e].length;f++){if(a.has(d[e][f],c))return"?"===e?b:e}else if(a.has(d[e],c))return"?"===e?b:e;return c},d={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2E3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2","8.1":"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},f={browser:[[/(opera\smini)\/([\w\.-]+)/i,/(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,/(opera).+version\/([\w\.]+)/i,/(opera)[\/\s]+([\w\.]+)/i],["name","version"],[/(OPiOS)[\/\s]+([\w\.]+)/i],[["name",
"Opera Mini"],"version"],[/\s(opr)\/([\w\.]+)/i],[["name","Opera"],"version"],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i,/(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,/(?:ms|\()(ie)\s([\w\.]+)/i,/(rekonq)\/([\w\.]+)*/i,/(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs)\/([\w\.-]+)/i],["name","version"],[/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i],[["name","IE"],"version"],[/(edge)\/((\d+)?[\w\.]+)/i],
["name","version"],[/(yabrowser)\/([\w\.]+)/i],[["name","Yandex"],"version"],[/(comodo_dragon)\/([\w\.]+)/i],[["name",/_/g," "],"version"],[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i,/(qqbrowser)[\/\s]?([\w\.]+)/i],["name","version"],[/(uc\s?browser)[\/\s]?([\w\.]+)/i,/ucweb.+(ucbrowser)[\/\s]?([\w\.]+)/i,/JUC.+(ucweb)[\/\s]?([\w\.]+)/i],[["name","UCBrowser"],"version"],[/(dolfin)\/([\w\.]+)/i],[["name","Dolphin"],"version"],[/((?:android.+)crmo|crios)\/([\w\.]+)/i],[["name","Chrome"],
"version"],[/XiaoMi\/MiuiBrowser\/([\w\.]+)/i],["version",["name","MIUI Browser"]],[/android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)/i],["version",["name","Android Browser"]],[/FBAV\/([\w\.]+);/i],["version",["name","Facebook"]],[/fxios\/([\w\.-]+)/i],["version",["name","Firefox"]],[/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i],["version",["name","Mobile Safari"]],[/version\/([\w\.]+).+?(mobile\s?safari|safari)/i],["version","name"],[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],["name",
["version",c,{"1.0":"/8","1.2":"/1","1.3":"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(konqueror)\/([\w\.]+)/i,/(webkit|khtml)\/([\w\.]+)/i],["name","version"],[/(navigator|netscape)\/([\w\.-]+)/i],[["name","Netscape"],"version"],[/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i,/(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
/(links)\s\(([\w\.]+)/i,/(gobrowser)\/?([\w\.]+)*/i,/(ice\s?browser)\/v?([\w\._]+)/i,/(mosaic)[\/\s]([\w\.]+)/i],["name","version"]],cpu:[[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],[["architecture","amd64"]],[/(ia32(?=;))/i],[["architecture",a.lowerize]],[/((?:i[346]|x)86)[;\)]/i],[["architecture","ia32"]],[/windows\s(ce|mobile);\sppc;/i],[["architecture","arm"]],[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],[["architecture",/ower/,"",a.lowerize]],[/(sun4\w)[;\)]/i],[["architecture","sparc"]],
[/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i],[["architecture",a.lowerize]]],device:[[/\((ipad|playbook);[\w\s\);-]+(rim|apple)/i],["model","vendor",["type","tablet"]],[/applecoremedia\/[\w\.]+ \((ipad)/],["model",["vendor","Apple"],["type","tablet"]],[/(apple\s{0,1}tv)/i],[["model","Apple TV"],["vendor","Apple"]],[/(archos)\s(gamepad2?)/i,/(hp).+(touchpad)/i,/(kindle)\/([\w\.]+)/i,/\s(nook)[\w\s]+build\/(\w+)/i,/(dell)\s(strea[kpr\s\d]*[\dko])/i],
["vendor","model",["type","tablet"]],[/(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i],["model",["vendor","Amazon"],["type","tablet"]],[/(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i],[["model",c,{"Fire Phone":["SD","KF"]}],["vendor","Amazon"],["type","mobile"]],[/\((ip[honed|\s\w*]+);.+(apple)/i],["model","vendor",["type","mobile"]],[/\((ip[honed|\s\w*]+);/i],["model",["vendor","Apple"],["type","mobile"]],[/(blackberry)[\s-]?(\w+)/i,/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i,
/(hp)\s([\w\s]+\w)/i,/(asus)-?(\w+)/i],["vendor","model",["type","mobile"]],[/\(bb10;\s(\w+)/i],["model",["vendor","BlackBerry"],["type","mobile"]],[/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7)/i],["model",["vendor","Asus"],["type","tablet"]],[/(sony)\s(tablet\s[ps])\sbuild\//i,/(sony)?(?:sgp.+)\sbuild\//i],[["vendor","Sony"],["model","Xperia Tablet"],["type","tablet"]],[/(?:sony)?(?:(?:(?:c|d)\d{4})|(?:so[-l].+))\sbuild\//i],[["vendor","Sony"],["model","Xperia Phone"],["type",
"mobile"]],[/\s(ouya)\s/i,/(nintendo)\s([wids3u]+)/i],["vendor","model",["type","console"]],[/android.+;\s(shield)\sbuild/i],["model",["vendor","Nvidia"],["type","console"]],[/(playstation\s[34portablevi]+)/i],["model",["vendor","Sony"],["type","console"]],[/(sprint\s(\w+))/i],[["vendor",c,{HTC:"APA",Sprint:"Sprint"}],["model",c,{"Evo Shift 4G":"7373KT"}],["type","mobile"]],[/(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i],["vendor","model",["type","tablet"]],[/(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,/(zte)-(\w+)*/i,
/(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i],["vendor",["model",/_/g," "],["type","mobile"]],[/(nexus\s9)/i],["model",["vendor","HTC"],["type","tablet"]],[/[\s\(;](xbox(?:\sone)?)[\s\);]/i],["model",["vendor","Microsoft"],["type","console"]],[/(kin\.[onetw]{3})/i],[["model",/\./g," "],["vendor","Microsoft"],["type","mobile"]],[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i,/mot[\s-]?(\w+)*/i,/(XT\d{3,4}) build\//i,/(nexus\s[6])/i],
["model",["vendor","Motorola"],["type","mobile"]],[/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],["model",["vendor","Motorola"],["type","tablet"]],[/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n8000|sgh-t8[56]9|nexus 10))/i,/((SM-T\w+))/i],[["vendor","Samsung"],"model",["type","tablet"]],[/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-n900))/i,/(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,/sec-((sgh\w+))/i],[["vendor","Samsung"],"model",["type","mobile"]],[/(samsung);smarttv/i],["vendor","model",["type","smarttv"]],
[/\(dtv[\);].+(aquos)/i],["model",["vendor","Sharp"],["type","smarttv"]],[/sie-(\w+)*/i],["model",["vendor","Siemens"],["type","mobile"]],[/(maemo|nokia).*(n900|lumia\s\d+)/i,/(nokia)[\s_-]?([\w-]+)*/i],[["vendor","Nokia"],"model",["type","mobile"]],[/android\s3\.[\s\w;-]{10}(a\d{3})/i],["model",["vendor","Acer"],["type","tablet"]],[/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i],[["vendor","LG"],"model",["type","tablet"]],[/(lg) netcast\.tv/i],["vendor","model",["type","smarttv"]],[/(nexus\s[45])/i,
/lg[e;\s\/-]+(\w+)*/i],["model",["vendor","LG"],["type","mobile"]],[/android.+(ideatab[a-z0-9\-\s]+)/i],["model",["vendor","Lenovo"],["type","tablet"]],[/linux;.+((jolla));/i],["vendor","model",["type","mobile"]],[/((pebble))app\/[\d\.]+\s/i],["vendor","model",["type","wearable"]],[/android.+;\s(glass)\s\d/i],["model",["vendor","Google"],["type","wearable"]],[/android.+(\w+)\s+build\/hm\1/i,/android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,/android.+(mi[\s\-_]*(?:one|one[\s_]plus)?[\s_]*(?:\d\w)?)\s+build/i],
[["model",/_/g," "],["vendor","Xiaomi"],["type","mobile"]],[/\s(tablet)[;\/\s]/i,/\s(mobile)[;\/\s]/i],[["type",a.lowerize],"vendor","model"]],engine:[[/windows.+\sedge\/([\w\.]+)/i],["version",["name","EdgeHTML"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,/(icab)[\/\s]([23]\.[\d\.]+)/i],["name","version"],[/rv\:([\w\.]+).*(gecko)/i],["version","name"]],os:[[/microsoft\s(windows)\s(vista|xp)/i],["name","version"],
[/(windows)\snt\s6\.2;\s(arm)/i,/(windows\sphone(?:\sos)*|windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],["name",["version",c,d]],[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],[["name","Windows"],["version",c,d]],[/\((bb)(10);/i],[["name","BlackBerry"],"version"],[/(blackberry)\w*\/?([\w\.]+)*/i,/(tizen)[\/\s]([\w\.]+)/i,/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i,/linux;.+(sailfish);/i],["name","version"],[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i],
[["name","Symbian"],"version"],[/\((series40);/i],["name"],[/mozilla.+\(mobile;.+gecko.+firefox/i],[["name","Firefox OS"],"version"],[/(nintendo|playstation)\s([wids34portablevu]+)/i,/(mint)[\/\s\(]?(\w+)*/i,/(mageia|vectorlinux)[;\s]/i,/(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?([\w\.-]+)*/i,/(hurd|linux)\s?([\w\.]+)*/i,/(gnu)\s?([\w\.]+)*/i],["name","version"],[/(cros)\s[\w]+\s([\w\.]+\w)/i],[["name","Chromium OS"],
"version"],[/(sunos)\s?([\w\.]+\d)*/i],[["name","Solaris"],"version"],[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i],["name","version"],[/(ip[honead]+)(?:.*os\s([\w]+)*\slike\smac|;\sopera)/i],[["name","iOS"],["version",/_/g,"."]],[/(mac\sos\sx)\s?([\w\s\.]+\w)*/i,/(macintosh|mac(?=_powerpc)\s)/i],[["name","Mac OS"],["version",/_/g,"."]],[/((?:open)?solaris)[\/\s-]?([\w\.]+)*/i,/(haiku)\s(\w+)/i,/(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i,/(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,
/(unix)\s?([\w\.]+)*/i],["name","version"]]},k=function(b,c){if(!(this instanceof k))return(new k(b,c)).getResult();var d=b||(e&&e.navigator&&e.navigator.userAgent?e.navigator.userAgent:""),p=c?a.extend(f,c):f;this.getBrowser=function(){var b=r.apply(this,p.browser);b.major=a.major(b.version);return b};this.getCPU=function(){return r.apply(this,p.cpu)};this.getDevice=function(){return r.apply(this,p.device)};this.getEngine=function(){return r.apply(this,p.engine)};this.getOS=function(){return r.apply(this,
p.os)};this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}};this.getUA=function(){return d};this.setUA=function(a){d=a;return this};this.setUA(d);return this};k.VERSION="0.7.10";k.BROWSER={NAME:"name",MAJOR:"major",VERSION:"version"};k.CPU={ARCHITECTURE:"architecture"};k.DEVICE={MODEL:"model",VENDOR:"vendor",TYPE:"type",CONSOLE:"console",MOBILE:"mobile",SMARTTV:"smarttv",TABLET:"tablet",WEARABLE:"wearable",
EMBEDDED:"embedded"};k.ENGINE={NAME:"name",VERSION:"version"};k.OS={NAME:"name",VERSION:"version"}; true?("undefined"!==typeof module&&module.exports&&(exports=module.exports=k),exports.UAParser=k):"function"===typeof define&&define.amd?define(function(){return k}):e.UAParser=k;var p=e.jQuery||e.Zepto;if("undefined"!==typeof p){var q=new k;p.ua=q.getResult();p.ua.get=function(){return q.getUA()};p.ua.set=function(a){q.setUA(a);a=q.getResult();for(var b in a)p.ua[b]=a[b]}}})("object"===
typeof window?window:this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer))

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(9).Buffer
var sha = __webpack_require__(250)
var sha256 = __webpack_require__(251)
var rng = __webpack_require__(249)
var md5 = __webpack_require__(248)

var algorithms = {
  sha1: sha,
  sha256: sha256,
  md5: md5
}

var blocksize = 64
var zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)
function hmac(fn, key, data) {
  if(!Buffer.isBuffer(key)) key = new Buffer(key)
  if(!Buffer.isBuffer(data)) data = new Buffer(data)

  if(key.length > blocksize) {
    key = fn(key)
  } else if(key.length < blocksize) {
    key = Buffer.concat([key, zeroBuffer], blocksize)
  }

  var ipad = new Buffer(blocksize), opad = new Buffer(blocksize)
  for(var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var hash = fn(Buffer.concat([ipad, data]))
  return fn(Buffer.concat([opad, hash]))
}

function hash(alg, key) {
  alg = alg || 'sha1'
  var fn = algorithms[alg]
  var bufs = []
  var length = 0
  if(!fn) error('algorithm:', alg, 'is not yet supported')
  return {
    update: function (data) {
      if(!Buffer.isBuffer(data)) data = new Buffer(data)
        
      bufs.push(data)
      length += data.length
      return this
    },
    digest: function (enc) {
      var buf = Buffer.concat(bufs)
      var r = key ? hmac(fn, key, buf) : fn(buf)
      bufs = null
      return enc ? r.toString(enc) : r
    }
  }
}

function error () {
  var m = [].slice.call(arguments).join(' ')
  throw new Error([
    m,
    'we accept pull requests',
    'http://github.com/dominictarr/crypto-browserify'
    ].join('\n'))
}

exports.createHash = function (alg) { return hash(alg) }
exports.createHmac = function (alg, key) { return hash(alg, key) }
exports.randomBytes = function(size, callback) {
  if (callback && callback.call) {
    try {
      callback.call(this, undefined, new Buffer(rng(size)))
    } catch (err) { callback(err) }
  } else {
    return new Buffer(rng(size))
  }
}

function each(a, f) {
  for(var i in a)
    f(a[i], i)
}

// the least I can do is make error messages for the rest of the node.js/crypto api.
each(['createCredentials'
, 'createCipher'
, 'createCipheriv'
, 'createDecipher'
, 'createDecipheriv'
, 'createSign'
, 'createVerify'
, 'createDiffieHellman'
, 'pbkdf2'], function (name) {
  exports[name] = function () {
    error('sorry,', name, 'is not implemented yet')
  }
})


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = __webpack_require__(64);

/*
 * Perform a simple self-test to see if the VM is working
 */
function md5_vm_test()
{
  return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72";
}

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};


/***/ }),
/* 249 */
/***/ (function(module, exports) {

// Original code adapted from Robert Kieffer.
// details at https://github.com/broofa/node-uuid
(function() {
  var _global = this;

  var mathRNG, whatwgRNG;

  // NOTE: Math.random() does not guarantee "cryptographic quality"
  mathRNG = function(size) {
    var bytes = new Array(size);
    var r;

    for (var i = 0, r; i < size; i++) {
      if ((i & 0x03) == 0) r = Math.random() * 0x100000000;
      bytes[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return bytes;
  }

  if (_global.crypto && crypto.getRandomValues) {
    whatwgRNG = function(size) {
      var bytes = new Uint8Array(size);
      crypto.getRandomValues(bytes);
      return bytes;
    }
  }

  module.exports = whatwgRNG || mathRNG;

}())


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var helpers = __webpack_require__(64);

/*
 * Calculate the SHA-1 of an array of big-endian words, and a bit length
 */
function core_sha1(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << (24 - len % 32);
  x[((len + 64 >> 9) << 4) + 15] = len;

  var w = Array(80);
  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;
  var e = -1009589776;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    var olde = e;

    for(var j = 0; j < 80; j++)
    {
      if(j < 16) w[j] = x[i + j];
      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),
                       safe_add(safe_add(e, w[j]), sha1_kt(j)));
      e = d;
      d = c;
      c = rol(b, 30);
      b = a;
      a = t;
    }

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
    e = safe_add(e, olde);
  }
  return Array(a, b, c, d, e);

}

/*
 * Perform the appropriate triplet combination function for the current
 * iteration
 */
function sha1_ft(t, b, c, d)
{
  if(t < 20) return (b & c) | ((~b) & d);
  if(t < 40) return b ^ c ^ d;
  if(t < 60) return (b & c) | (b & d) | (c & d);
  return b ^ c ^ d;
}

/*
 * Determine the appropriate additive constant for the current iteration
 */
function sha1_kt(t)
{
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
         (t < 60) ? -1894007588 : -899497514;
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function sha1(buf) {
  return helpers.hash(buf, core_sha1, 20, true);
};


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var helpers = __webpack_require__(64);

var safe_add = function(x, y) {
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
};

var S = function(X, n) {
  return (X >>> n) | (X << (32 - n));
};

var R = function(X, n) {
  return (X >>> n);
};

var Ch = function(x, y, z) {
  return ((x & y) ^ ((~x) & z));
};

var Maj = function(x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z));
};

var Sigma0256 = function(x) {
  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
};

var Sigma1256 = function(x) {
  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
};

var Gamma0256 = function(x) {
  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
};

var Gamma1256 = function(x) {
  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
};

var core_sha256 = function(m, l) {
  var K = new Array(0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0xFC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x6CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2);
  var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
    var W = new Array(64);
    var a, b, c, d, e, f, g, h, i, j;
    var T1, T2;
  /* append padding */
  m[l >> 5] |= 0x80 << (24 - l % 32);
  m[((l + 64 >> 9) << 4) + 15] = l;
  for (var i = 0; i < m.length; i += 16) {
    a = HASH[0]; b = HASH[1]; c = HASH[2]; d = HASH[3]; e = HASH[4]; f = HASH[5]; g = HASH[6]; h = HASH[7];
    for (var j = 0; j < 64; j++) {
      if (j < 16) {
        W[j] = m[j + i];
      } else {
        W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);
      }
      T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);
      T2 = safe_add(Sigma0256(a), Maj(a, b, c));
      h = g; g = f; f = e; e = safe_add(d, T1); d = c; c = b; b = a; a = safe_add(T1, T2);
    }
    HASH[0] = safe_add(a, HASH[0]); HASH[1] = safe_add(b, HASH[1]); HASH[2] = safe_add(c, HASH[2]); HASH[3] = safe_add(d, HASH[3]);
    HASH[4] = safe_add(e, HASH[4]); HASH[5] = safe_add(f, HASH[5]); HASH[6] = safe_add(g, HASH[6]); HASH[7] = safe_add(h, HASH[7]);
  }
  return HASH;
};

module.exports = function sha256(buf) {
  return helpers.hash(buf, core_sha256, 32, true);
};


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 5/28/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Asset = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepKernel = __webpack_require__(18);

var _deepKernel2 = _interopRequireDefault(_deepKernel);

var _path = __webpack_require__(33);

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @temp Asset class definition
 */
let Asset = exports.Asset = function (_Kernel$ContainerAwar) {
  _inherits(Asset, _Kernel$ContainerAwar);

  function Asset() {
    _classCallCheck(this, Asset);

    var _this = _possibleConstructorReturn(this, (Asset.__proto__ || Object.getPrototypeOf(Asset)).call(this));

    _this._injectBuildId = Asset.INJECT_BUILD_ID_STATE;
    _this._buildId = null;
    return _this;
  }

  /**
   * @returns {Boolean}
   */


  _createClass(Asset, [{
    key: 'boot',


    /**
     * Booting a certain service
     *
     * @param {Kernel} kernel
     * @param {Function} callback
     */
    value: function boot(kernel, callback) {
      this._buildId = kernel.buildId;

      if (kernel.isFrontend) {
        let loadVector = [];
        let microservices = kernel.microservices;

        for (let microserviceKey in microservices) {
          if (!microservices.hasOwnProperty(microserviceKey)) {
            continue;
          }

          let microservice = microservices[microserviceKey];

          if (microservice.isRoot) {
            continue;
          }

          loadVector.push(this.locate(`@${microservice.identifier}:bootstrap.js`));
        }

        kernel.container.addParameter(_deepKernel2.default.FRONTEND_BOOTSTRAP_VECTOR, loadVector);
      }

      callback();
    }

    /**
     * @param {String} assetIdentifier (e.g. @microservice_identifier:asset_path)
     * @param {String} suffix
     * @param {Boolean} skipVersioning
     * @returns {*}
     */

  }, {
    key: 'locate',
    value: function locate(assetIdentifier) {
      let suffix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      let skipVersioning = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      let path = this._resolveIdentifier(assetIdentifier);

      let basePath = this.microservice.isRoot ? _path2.default.join(path) : _path2.default.join(this.microservice.toString(), path);

      let internalSuffix = this._injectBuildId && this._buildId && !skipVersioning ? `?_v=${this._buildId}` : '';

      return `${basePath}${suffix}${internalSuffix}`;
    }

    /**
     * @param {String} assetIdentifier (e.g. @microservice_identifier:asset_path)
     * @param {String} suffix
     * @returns {String}
     */

  }, {
    key: 'locateAbsolute',
    value: function locateAbsolute() {
      return Asset._baseUrl + _path2.default.join('/', this.locate.apply(this, arguments));
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'injectBuildId',
    get: function get() {
      return this._injectBuildId;
    }

    /**
     * @param {Boolean} state
     */
    ,
    set: function set(state) {
      this._injectBuildId = state;
    }
  }], [{
    key: '_baseUrl',
    get: function get() {
      if (!window || !window.location) {
        return '';
      }

      let loc = window.location;

      return loc.origin || `${loc.protocol}://${loc.hostname}${loc.port ? ':' + loc.port : ''}`;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'INJECT_BUILD_ID_STATE',
    get: function get() {
      return true;
    }
  }]);

  return Asset;
}(_deepKernel2.default.ContainerAware);

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 5/27/2015
 */



var _Asset = __webpack_require__(252);

module.exports = _Asset.Asset;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cache = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepKernel = __webpack_require__(18);

var _deepKernel2 = _interopRequireDefault(_deepKernel);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _Exception = __webpack_require__(113);

var _SharedCache = __webpack_require__(264);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Cache manager
 */
let Cache = exports.Cache = function (_Kernel$ContainerAwar) {
  _inherits(Cache, _Kernel$ContainerAwar);

  /**
   * @param {AbstractDriver} driver
   * @param {AbstractDriver} systemDriver
   */
  function Cache() {
    let driver = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let systemDriver = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, Cache);

    var _this = _possibleConstructorReturn(this, (Cache.__proto__ || Object.getPrototypeOf(Cache)).call(this));

    _this._driver = driver;
    _this._systemDriver = systemDriver;
    return _this;
  }

  /**
   * @param {String} name
   * @param {*} args
   * @returns {AbstractDriver}
   */


  _createClass(Cache, [{
    key: 'boot',


    /**
     * Booting a certain service
     *
     * @param {Kernel} kernel
     * @param {Function} callback
     */
    value: function boot(kernel, callback) {
      this._driver = this._createCacheDriver(kernel);
      this._systemDriver = this._createCacheDriver(kernel);

      let sharedCacheDriver = kernel.isFrontend ? Cache.createDriver('cloud-front', this) : Cache.createDriver('s3fs', this);

      this._shared = new _SharedCache.SharedCache(sharedCacheDriver);

      [this._driver, this._systemDriver, sharedCacheDriver].forEach(driver => {
        driver.buildId = kernel.buildId;
      });

      this._systemDriver.namespace = Cache.SYSTEM_NAMESPACE;

      callback();
    }

    /**
     * @returns {SharedCache|*}
     */

  }, {
    key: '_createCacheDriver',


    /**
     * @todo: remove in memory fallback for backend?
     *
     * @param {Kernel} kernel
     * @returns {AbstractDriver}
     * @private
     */
    value: function _createCacheDriver(kernel) {
      return kernel.isFrontend ? Cache.createDriver('local-storage') : kernel.config.cacheDsn ? Cache.createDriver('redis', kernel.config.cacheDsn) : Cache.createDriver('memory');
    }

    /**
     * @param {AbstractDriver|*} target
     * @param {*} args
     * @returns {*}
     */

  }, {
    key: 'apply',
    value: function apply(target) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return target.apply(undefined, args);
    }

    /**
     * DO NOT REMOVE THIS!
     * It's used while kernel boot
     *
     * @returns {Object}
     */

  }, {
    key: 'shared',
    get: function get() {
      return this._shared;
    }

    /**
     * @returns {AbstractDriver|*}
     */

  }, {
    key: 'system',
    get: function get() {
      return this._systemDriver || this._driver;
    }
  }, {
    key: 'service',
    get: function get() {
      return new _deepCore2.default.Generic.MethodsProxy(this).proxyOverride(this._driver, 'has', 'get', 'set', 'invalidate', 'flush', 'type');
    }

    /**
     * @param {AbstractDriver} driver
     */

  }, {
    key: 'driver',
    set: function set(driver) {
      this._driver = driver;
    }

    /**
     * @returns {AbstractDriver}
     */
    ,
    get: function get() {
      return this._driver;
    }

    /**
     * @param {AbstractDriver} driver
     */

  }, {
    key: 'systemDriver',
    set: function set(driver) {
      this._systemDriver = driver;
    }

    /**
     * @returns {AbstractDriver}
     */
    ,
    get: function get() {
      return this._systemDriver;
    }

    /**
     * @returns {String}
     */

  }], [{
    key: 'createDriver',
    value: function createDriver(name) {
      let DriverPrototype = null;

      switch (name) {
        case 'memory':
          DriverPrototype = __webpack_require__(112).InMemoryDriver;
          break;
        case 'redis':
          DriverPrototype = __webpack_require__(262).RedisDriver;
          break;
        case 'local-storage':
          DriverPrototype = __webpack_require__(261).LocalStorageDriver;

          // fallback to in-memory driver if localStorage is not available
          if (!DriverPrototype.isAvailable()) {
            DriverPrototype = __webpack_require__(112).InMemoryDriver;
          }
          break;
        case 's3fs':
          DriverPrototype = __webpack_require__(263).S3FSDriver;
          break;
        case 'cloud-front':
          DriverPrototype = __webpack_require__(255).CloudFrontDriver;
          break;
        default:
          throw new _Exception.Exception(`Missing driver ${name}`);
      }

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return new (Function.prototype.bind.apply(DriverPrototype, [null].concat(args)))();
    }
  }, {
    key: 'SYSTEM_NAMESPACE',
    get: function get() {
      return 'system';
    }
  }]);

  return Cache;
}(_deepKernel2.default.ContainerAware);

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 12/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CloudFrontDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get2 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _AbstractFsDriver2 = __webpack_require__(111);

var _MethodNotAvailableException = __webpack_require__(257);

var _SharedKey = __webpack_require__(114);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CloudFront Cache Driver
 */
let CloudFrontDriver = exports.CloudFrontDriver = function (_AbstractFsDriver) {
  _inherits(CloudFrontDriver, _AbstractFsDriver);

  /**
   * @todo: Find better way to extract the working microservice identifier
   *
   * @param {ContainerAware} containerAware
   * @param {String} directory
   */
  function CloudFrontDriver(containerAware) {
    let directory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _AbstractFsDriver2.AbstractFsDriver.DEFAULT_DIRECTORY;

    _classCallCheck(this, CloudFrontDriver);

    var _this = _possibleConstructorReturn(this, (CloudFrontDriver.__proto__ || Object.getPrototypeOf(CloudFrontDriver)).call(this, directory));

    _this._containerAware = containerAware;
    _this._cache = {};
    return _this;
  }

  /**
   * @returns {String}
   * @private
   */


  _createClass(CloudFrontDriver, [{
    key: '_type',
    value: function _type() {
      return 'CloudFront';
    }

    /**
     * @param {String} key
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_has',
    value: function _has(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      this._get(key, (err, data) => {
        callback(err, data !== null);
      });
    }

    /**
     * @todo: Find a way to invalidate broken or expired keys
     *
     * @param {String} key
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_get',
    value: function _get(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      // @todo: get rid of this cache?
      if (this._cache.hasOwnProperty(key)) {
        let parsedData = this._cache[key];

        if (parsedData.expires && parsedData.expires < _AbstractFsDriver2.AbstractFsDriver._now || parsedData.buildId !== this._buildId) {
          delete this._cache[key];
        } else {
          callback(null, this._cache[key].value);
          return;
        }
      }

      this._request(key, (err, data) => {
        if (err) {
          return callback(err, null);
        }

        try {
          let parsedData = JSON.parse(data);

          if (parsedData.expires && parsedData.expires < _AbstractFsDriver2.AbstractFsDriver._now || parsedData.buildId !== this._buildId) {
            callback(null, null);

            return;
          }

          this._cache[key] = parsedData;

          callback(null, parsedData.value);
        } catch (e) {
          // avoid parse error on missing or broken object in S3
          callback(null, null);
        }
      });
    }

    /**
     * Throw MethodNotAvailableException
     *
     * @private
     */

  }, {
    key: '_set',
    value: function _set() {
      throw new _MethodNotAvailableException.MethodNotAvailableException('set');
    }

    /**
     * Throw MethodNotAvailableException
     *
     * @private
     */

  }, {
    key: '_invalidate',
    value: function _invalidate() {
      throw new _MethodNotAvailableException.MethodNotAvailableException('invalidate');
    }

    /**
     * @param {String|Key} key
     * @returns {String}
     * @private
     */

  }, {
    key: '_buildKey',
    value: function _buildKey(key) {
      return key instanceof _SharedKey.SharedKey ? this._asset.locate(`@${key.microservice}:${_get2(CloudFrontDriver.prototype.__proto__ || Object.getPrototypeOf(CloudFrontDriver.prototype), '_buildKey', this).call(this, key.toString())}`) : this._asset.locate(`@${this._microservice}:${_get2(CloudFrontDriver.prototype.__proto__ || Object.getPrototypeOf(CloudFrontDriver.prototype), '_buildKey', this).call(this, key)}`);
    }

    /**
     * @param {String} url
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_request',
    value: function _request(url, callback) {
      var client = new XMLHttpRequest();

      client.onreadystatechange = function () {
        if (client.readyState === 4) {
          if (client.status !== 200) {
            return callback(client.statusText, null);
          }

          callback(null, client.responseText);
        }
      };

      client.open('GET', url);
      client.send();
    }

    /**
     * Returns the microservice binded to `resource` service
     *
     * @returns {Instance}
     * @private
     */

  }, {
    key: '_microservice',
    get: function get() {
      return this._containerAware.container.get('resource').microservice;
    }

    /**
     * @returns {Asset}
     * @private
     */

  }, {
    key: '_asset',
    get: function get() {
      return this._containerAware.container.get('asset');
    }
  }]);

  return CloudFrontDriver;
}(_AbstractFsDriver2.AbstractFsDriver);

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DriverException = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Exception2 = __webpack_require__(34);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Base exception
 */
let DriverException = exports.DriverException = function (_Exception) {
  _inherits(DriverException, _Exception);

  /**
   * @param {Error} originalException
   */
  function DriverException(originalException) {
    _classCallCheck(this, DriverException);

    var _this = _possibleConstructorReturn(this, (DriverException.__proto__ || Object.getPrototypeOf(DriverException)).call(this, originalException));

    _this._originalException = originalException instanceof Error ? originalException : new Error(originalException);
    return _this;
  }

  /**
   * @returns {Error}
   */


  _createClass(DriverException, [{
    key: 'originalException',
    get: function get() {
      return this._originalException;
    }
  }]);

  return DriverException;
}(_Exception2.Exception);

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 12/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MethodNotAvailableException = undefined;

var _Exception2 = __webpack_require__(34);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when a method is not available
 */
let MethodNotAvailableException = exports.MethodNotAvailableException = function (_Exception) {
  _inherits(MethodNotAvailableException, _Exception);

  /**
   * @param {String} name
   */
  function MethodNotAvailableException(name) {
    _classCallCheck(this, MethodNotAvailableException);

    return _possibleConstructorReturn(this, (MethodNotAvailableException.__proto__ || Object.getPrototypeOf(MethodNotAvailableException)).call(this, `Method '${name}' is not available`));
  }

  return MethodNotAvailableException;
}(_Exception2.Exception);

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingCacheException = undefined;

var _Exception2 = __webpack_require__(34);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when missing an item from cache
 */
let MissingCacheException = exports.MissingCacheException = function (_Exception) {
  _inherits(MissingCacheException, _Exception);

  /**
   * @param {String} cacheKey
   */
  function MissingCacheException(cacheKey) {
    _classCallCheck(this, MissingCacheException);

    return _possibleConstructorReturn(this, (MissingCacheException.__proto__ || Object.getPrototypeOf(MissingCacheException)).call(this, `Missing key ${cacheKey} from cache`));
  }

  return MissingCacheException;
}(_Exception2.Exception);

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoFlushException = undefined;

var _Exception2 = __webpack_require__(34);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown if flush() is not implemented
 */
let NoFlushException = exports.NoFlushException = function (_Exception) {
  _inherits(NoFlushException, _Exception);

  function NoFlushException() {
    _classCallCheck(this, NoFlushException);

    return _possibleConstructorReturn(this, (NoFlushException.__proto__ || Object.getPrototypeOf(NoFlushException)).call(this, 'Flush is not implemented for this driver'));
  }

  return NoFlushException;
}(_Exception2.Exception);

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedisClusterException = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Exception2 = __webpack_require__(34);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when redis cluster returned an error
 */
let RedisClusterException = exports.RedisClusterException = function (_Exception) {
  _inherits(RedisClusterException, _Exception);

  /**
   * @param {String} error
   */
  function RedisClusterException(error) {
    _classCallCheck(this, RedisClusterException);

    let originalException = error instanceof Error ? error : null;
    let errorPlain = originalException !== null ? originalException.message : error.toString();

    var _this = _possibleConstructorReturn(this, (RedisClusterException.__proto__ || Object.getPrototypeOf(RedisClusterException)).call(this, `Redis cluster operation failed: ${errorPlain}`));

    _this._originalException = originalException;
    return _this;
  }

  /**
   * @returns {Error}
   */


  _createClass(RedisClusterException, [{
    key: 'originalException',
    get: function get() {
      return this._originalException;
    }
  }]);

  return RedisClusterException;
}(_Exception2.Exception);

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalStorageDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(46);

var _store = __webpack_require__(497);

var _store2 = _interopRequireDefault(_store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * In memory driver implementation
 */
let LocalStorageDriver = exports.LocalStorageDriver = function (_AbstractDriver) {
  _inherits(LocalStorageDriver, _AbstractDriver);

  function LocalStorageDriver() {
    _classCallCheck(this, LocalStorageDriver);

    return _possibleConstructorReturn(this, (LocalStorageDriver.__proto__ || Object.getPrototypeOf(LocalStorageDriver)).call(this));
  }

  /**
   * @returns {String}
   * @private
   */


  _createClass(LocalStorageDriver, [{
    key: '_type',
    value: function _type() {
      return 'LocalStorage';
    }

    /**
     * @param {String} key
     * @param {Function} callback
     */

  }, {
    key: '_has',
    value: function _has(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      callback(null, LocalStorageDriver._isAlive(_store2.default.get(key), key));
    }

    /**
     * @param {String} key
     * @param {Function} callback
     */

  }, {
    key: '_get',
    value: function _get(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      let record = _store2.default.get(key);

      callback(null, LocalStorageDriver._isAlive(record, key) ? record.value : null);
    }

    /**
     * @param {String} key
     * @param {*} value
     * @param {Number} ttl
     * @param {Function} callback
     */

  }, {
    key: '_set',
    value: function _set(key, value) {
      let ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      let callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};

      let exd = ttl > 0 ? LocalStorageDriver._now + ttl : null;

      try {
        _store2.default.set(key, { value: value, exd: exd });
        callback(null, true);
      } catch (error) {
        if (this._isQuotaExceededError(error) && this._flushStale()) {
          this._set(key, value, ttl, callback);
        }

        callback(error, false);
      }
    }

    /**
     * @param {String} key
     * @param {Number} timeout
     * @param {Function} callback
     */

  }, {
    key: '_invalidate',
    value: function _invalidate(key) {
      let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};

      if (timeout <= 0) {
        _store2.default.remove(key);

        callback(null, true);

        return;
      }

      try {
        let record = _store2.default.get(key);

        record.exd = LocalStorageDriver._now + timeout;

        _store2.default.set(key, record);
      } catch (e) {
        // do nothing...
      }

      callback(null, true);
    }

    /**
     * @param {Function} callback
     */

  }, {
    key: '_flush',
    value: function _flush() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      _store2.default.clear();

      callback(null, true);
    }

    /**
     * @returns {boolean}
     * @private
     */

  }, {
    key: '_flushStale',
    value: function _flushStale() {
      let keysToRemove = [];

      _store2.default.forEach((key, val) => {
        // @note - do not remove keys from cache at iteration time, it breaks the loop
        if (this.isDeepKey(key) && !LocalStorageDriver._isAlive(val, key, false) || this._getKeyBuildId(key) !== this._buildId) {
          keysToRemove.push(key);
        }
      });

      keysToRemove.forEach(key => {
        _store2.default.remove(key);
      });

      return keysToRemove.length > 0;
    }

    /**
     * @see http://chrisberkhout.com/blog/localstorage-errors/
     *
     * @param {Object} error
     * @returns {Boolean}
     * @private
     */

  }, {
    key: '_isQuotaExceededError',
    value: function _isQuotaExceededError(error) {
      let quotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR', 'NS_ERROR_DOM_QUOTA_REACHED'];

      return quotaExceededErrors.indexOf(error.name) !== -1;
    }

    /**
     * @returns {Number}
     * @private
     */

  }], [{
    key: '_isAlive',


    /**
     *
     * @param {Object} response
     * @param {String} key
     * @param {Boolean} removeStale
     * @returns {Boolean}
     * @private
     */
    value: function _isAlive(response, key) {
      let removeStale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (!response) {
        return false;
      }

      if (response.exd && response.exd <= LocalStorageDriver._now) {
        if (removeStale) {
          _store2.default.remove(key);
        }
        return false;
      }

      return true;
    }

    /**
     * Checks for browser local storage availability
     *
     * @returns {boolean}
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable() {
      return _store2.default.enabled;
    }
  }, {
    key: '_now',
    get: function get() {
      return parseInt(new Date().getTime() / 1000);
    }
  }]);

  return LocalStorageDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Created by AlexanderC on 6/16/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedisDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(46);

var _RedisClusterException = __webpack_require__(260);

var _ioredis = __webpack_require__(530);

var _ioredis2 = _interopRequireDefault(_ioredis);

var _ecad = __webpack_require__(375);

var _ecad2 = _interopRequireDefault(_ecad);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Redis/Elasticache driver implementation
 */
let RedisDriver = exports.RedisDriver = function (_AbstractDriver) {
  _inherits(RedisDriver, _AbstractDriver);

  /**
   * @param {String} dsn
   */
  function RedisDriver(dsn) {
    _classCallCheck(this, RedisDriver);

    var _this = _possibleConstructorReturn(this, (RedisDriver.__proto__ || Object.getPrototypeOf(RedisDriver)).call(this));

    _this._autoDiscoveryError = null;
    _this._client = null;

    _this._autoDiscover(dsn);
    return _this;
  }

  /**
   * @param {String} dsn
   * @private
   */


  _createClass(RedisDriver, [{
    key: '_autoDiscover',
    value: function _autoDiscover(dsn) {
      let payload = {
        endpoints: [dsn],
        timeout: RedisDriver.DEFAULT_AUTO_DISCOVERY_TIMEOUT
      };

      let client = new _ecad2.default(payload);

      client.fetch((error, hosts) => {
        if (error) {
          this._autoDiscoveryError = error;
        } else {
          let options = {
            sentinels: [],
            name: dsn
          };

          hosts.forEach(host => {
            options.sentinels.push(`redis://${host}/`);
          });

          this._client = new this.NATIVE_DRIVER(options);
        }
      });
    }

    /**
     * @param {Function} cb
     * @private
     */

  }, {
    key: 'clientWait',
    value: function clientWait(cb) {
      if (this._client) {
        cb(null, this._client);
      } else if (this._autoDiscoveryError) {
        cb(this._autoDiscoveryError, null);
      } else {
        setTimeout(() => {
          process.nextTick(() => {
            this.clientWait(cb);
          });
        }, RedisDriver.CLIENT_WAIT_MS_INTERVAL);
      }
    }

    /**
     * @returns {String}
     * @private
     */

  }, {
    key: '_type',
    value: function _type() {
      return 'Redis';
    }

    /**
     * @returns {Error|String|null}
     */

  }, {
    key: '_has',


    /**
     * @param {String} key
     * @param {Function} callback
     */
    value: function _has(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      this.clientWait((error, client) => {
        if (error) {
          callback(new _RedisClusterException.RedisClusterException(error), null);
          return;
        }

        client.exists(key, (error, results) => {
          if (error) {
            callback(new _RedisClusterException.RedisClusterException(error), null);
            return;
          }

          callback(null, results);
        });
      });
    }

    /**
     * @param {String} key
     * @param {Function} callback
     */

  }, {
    key: '_get',
    value: function _get(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      this.clientWait((error, client) => {
        if (error) {
          callback(new _RedisClusterException.RedisClusterException(error), null);
          return;
        }

        client.get(key, (error, results) => {
          if (error) {
            callback(new _RedisClusterException.RedisClusterException(error), null);

            return;
          }

          callback(null, results);
        });
      });
    }

    /**
     * @param {String} key
     * @param {*} value
     * @param {Number} ttl
     * @param {Function} callback
     */

  }, {
    key: '_set',
    value: function _set(key, value) {
      let ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      let callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};

      this.clientWait((error, client) => {
        if (error) {
          callback(new _RedisClusterException.RedisClusterException(error), null);
          return;
        }

        client.set(key, value, ttl, error => {
          if (error) {
            callback(new _RedisClusterException.RedisClusterException(error), null);

            return;
          }

          callback(null, true);
        });
      });
    }

    /**
     * @param {String} key
     * @param {Number} timeout
     * @param {Function} callback
     */

  }, {
    key: '_invalidate',
    value: function _invalidate(key) {
      let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};

      this.clientWait((error, client) => {
        if (error) {
          callback(new _RedisClusterException.RedisClusterException(error), null);
          return;
        }

        client.del(key, timeout, error => {
          if (error) {
            callback(new _RedisClusterException.RedisClusterException(error), null);

            return;
          }

          callback(null, true);
        });
      });
    }

    /**
     * @param {Function} callback
     */

  }, {
    key: '_flush',
    value: function _flush() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      this.clientWait((error, client) => {
        if (error) {
          callback(new _RedisClusterException.RedisClusterException(error), null);
          return;
        }

        client.flushall(error => {
          if (error) {
            callback(new _RedisClusterException.RedisClusterException(error), null);

            return;
          }

          callback(null, true);
        });
      });
    }

    /**
     * @returns {*|exports|module.exports}
     * @constructor
     */

  }, {
    key: 'autoDiscoveryError',
    get: function get() {
      return this._autoDiscoveryError;
    }

    /**
     * @returns {Redis}
     */

  }, {
    key: 'client',
    get: function get() {
      return this._client;
    }
  }, {
    key: 'NATIVE_DRIVER',
    get: function get() {
      return _ioredis2.default;
    }

    /**
     * @returns {Number}
     */

  }], [{
    key: 'CLIENT_WAIT_MS_INTERVAL',
    get: function get() {
      return 5;
    }

    /**
     * @returns {Number}
     */

  }, {
    key: 'DEFAULT_AUTO_DISCOVERY_TIMEOUT',
    get: function get() {
      return 700;
    }
  }]);

  return RedisDriver;
}(_AbstractDriver2.AbstractDriver);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 12/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.S3FSDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractFsDriver2 = __webpack_require__(111);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * S3FS Cache Driver
 */
let S3FSDriver = exports.S3FSDriver = function (_AbstractFsDriver) {
  _inherits(S3FSDriver, _AbstractFsDriver);

  /**
   * @param {ContainerAware} containerAware
   * @param {String} directory
   */
  function S3FSDriver(containerAware) {
    let directory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _AbstractFsDriver2.AbstractFsDriver.DEFAULT_DIRECTORY;

    _classCallCheck(this, S3FSDriver);

    var _this = _possibleConstructorReturn(this, (S3FSDriver.__proto__ || Object.getPrototypeOf(S3FSDriver)).call(this, directory));

    _this._containerAware = containerAware;
    return _this;
  }

  /**
   * @returns {String}
   * @private
   */


  _createClass(S3FSDriver, [{
    key: '_type',
    value: function _type() {
      return 'S3FS';
    }

    /**
     * @param {String} key
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_has',
    value: function _has(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      this._get(key, (err, data) => {
        callback(err, data !== null);
      });
    }

    /**
     * @param {String} key
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_get',
    value: function _get(key) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      this._fs.readFile(key, (err, data) => {
        if (err) {
          callback(err, null);

          return;
        }

        try {
          var parsedData = JSON.parse(data);

          if (parsedData.expires && parsedData.expires < _AbstractFsDriver2.AbstractFsDriver._now || parsedData.buildId !== this._buildId) {
            this._invalidate(key);

            callback(null, null);

            return;
          }

          callback(null, parsedData.value);
        } catch (e) {
          // avoid parse error on missing or broken object in S3
          this._invalidate(key);

          callback(null, null);
        }
      });
    }

    /**
     * @param {String} key
     * @param {Object} value
     * @param {Number} ttl
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_set',
    value: function _set(key, value) {
      let ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      let callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};

      let strObject = JSON.stringify({
        expires: ttl > 0 ? _AbstractFsDriver2.AbstractFsDriver._now + ttl : null,
        value: value,
        buildId: this._buildId
      });

      this._fs.mkdirp(this._directory, () => {
        this._fs.writeFile(key, strObject, err => {
          callback(err, !err);
        });
      });
    }

    /**
     * @param {String} key
     * @param {Number} timeout
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_invalidate',
    value: function _invalidate(key) {
      let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};

      if (timeout <= 0) {
        this._fs.unlink(key, err => {
          callback(err, !err);
        });

        return;
      }

      this._get(key, (err, data) => {
        if (err) {
          callback(err, null);

          return;
        }

        this._set(key, data.value, timeout, callback);
      });
    }

    /**
     * @returns {s3fs}
     * @private
     */

  }, {
    key: '_fs',
    get: function get() {
      return this._containerAware.container.get('fs').public;
    }
  }]);

  return S3FSDriver;
}(_AbstractFsDriver2.AbstractFsDriver);

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 12/10/15.
 */

/*eslint handle-callback-err: 0*/



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SharedCache = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _util = __webpack_require__(16);

var _util2 = _interopRequireDefault(_util);

var _crypto = __webpack_require__(19);

var _crypto2 = _interopRequireDefault(_crypto);

var _SharedKey = __webpack_require__(114);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Shared Cache
 */
let SharedCache = exports.SharedCache = function () {
  /**
   * @param {AbstractDriver} driver
   */
  function SharedCache(driver) {
    _classCallCheck(this, SharedCache);

    this._driver = driver;

    new _deepCore2.default.Generic.MethodsProxy(this).proxyOverride(this._driver, 'has', 'get', 'set', 'invalidate', 'flush', 'type');
  }

  /**
   * @param {Request} request
   * @returns {Key}
   */


  _createClass(SharedCache, [{
    key: 'buildKeyFromRequest',
    value: function buildKeyFromRequest(request) {
      let action = request.action;
      let microservice = action.resource.microservice;
      let requestIdentifier = action.source[request.isLambda ? 'original' : 'api'];
      let keyString = `${requestIdentifier}#${SharedCache._stringifyPayload(request.payload)}`;

      return new _SharedKey.SharedKey(keyString, microservice);
    }

    /**
     * @param {Runtime} runtime
     * @returns {String}
     */

  }, {
    key: 'buildKeyFromLambdaRuntime',
    value: function buildKeyFromLambdaRuntime(runtime) {
      return runtime.context && runtime.context.has('invokedFunctionArn') ? `${runtime.context.getOption('invokedFunctionArn')}#${SharedCache._stringifyPayload(runtime.request.data)}` : null;
    }

    /**
     * @param {Object} payload
     * @return {String}
     * @private
     */

  }, {
    key: 'assure',


    /**
     * If key exists do nothing, else create it with specified parameters
     *
     * @param {String} key
     * @param {Object} value
     * @param {Number} ttl
     * @param {Function} callback
     */
    value: function assure(key, value) {
      let ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      let callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};

      this._driver.has(key, (err, has) => {
        if (!has) {
          this._driver.set(key, value, ttl, callback);

          return;
        }

        callback(null, true);
      });
    }
  }], [{
    key: '_stringifyPayload',
    value: function _stringifyPayload(payload) {
      return JSON.stringify(SharedCache._normalizeObject(payload));
    }

    /**
     * @param {String} text
     * @param {String} alg
     * @returns {String}
     * @private
     */

  }, {
    key: '_hash',
    value: function _hash(text) {
      let alg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'sha1';

      return _crypto2.default.createHash(alg).update(text).digest('hex');
    }

    /**
     * @param {Object} data
     * @returns {Object}
     * @private
     */

  }, {
    key: '_normalizeObject',
    value: function _normalizeObject(data) {
      let normalizedData = {};

      Object.keys(data).sort().forEach(key => {
        let value = data[key];

        if (_util2.default.isArray(value)) {
          value = value.sort();
        } else if (value !== null && typeof value === 'object') {
          value = SharedCache._normalizeObject(value);
        }

        normalizedData[key] = value;
      });

      return normalizedData;
    }
  }]);

  return SharedCache;
}();

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/22/15.
 *
 * Bootstrap file loaded by npm as main
 */



var _Cache = __webpack_require__(254);

module.exports = _Cache.Cache;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/12/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidArnException = undefined;

var _Exception2 = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when ARN is invalid
 */
let InvalidArnException = exports.InvalidArnException = function (_Exception) {
  _inherits(InvalidArnException, _Exception);

  /**
   * @param {String} arn
   */
  function InvalidArnException(arn) {
    _classCallCheck(this, InvalidArnException);

    return _possibleConstructorReturn(this, (InvalidArnException.__proto__ || Object.getPrototypeOf(InvalidArnException)).call(this, `Invalid arn string "${arn}".`));
  }

  return InvalidArnException;
}(_Exception2.Exception);

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/2/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Factory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Resource = __webpack_require__(116);

var _Collection = __webpack_require__(65);

var _Action = __webpack_require__(115);

var _Policy = __webpack_require__(47);

var _Statement = __webpack_require__(117);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 *  AWS IAM factory
 */
let Factory = exports.Factory = function () {
  function Factory() {
    _classCallCheck(this, Factory);
  }

  _createClass(Factory, null, [{
    key: 'create',

    /**
     * @param {Function|*} Prototype
     * @param {Array} args
     * @returns {Object}
     */
    value: function create(Prototype) {
      Prototype = Factory._assurePrototype(Prototype);

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return new (Function.prototype.bind.apply(Prototype, [null].concat(args)))();
    }

    /**
     * @param {Function|*} Prototype
     * @returns {Collection}
     */

  }, {
    key: 'createCollection',
    value: function createCollection(Prototype) {
      Prototype = Factory._assurePrototype(Prototype);

      return new _Collection.Collection(Prototype);
    }

    /**
     * @param {Function|*} Prototype
     * @returns {Function}
     * @private
     */

  }, {
    key: '_assurePrototype',
    value: function _assurePrototype(Prototype) {
      if (typeof Prototype === 'string') {
        Prototype = Factory[Prototype.toUpperCase()];
      }

      return Prototype;
    }

    /**
     * @returns {Policy}
     * @constructor
     */

  }, {
    key: 'POLICY',
    get: function get() {
      return _Policy.Policy;
    }

    /**
     * @returns {Action}
     * @constructor
     */

  }, {
    key: 'RESOURCE',
    get: function get() {
      return _Resource.Resource;
    }

    /**
     * @returns {Resource}
     * @constructor
     */

  }, {
    key: 'ACTION',
    get: function get() {
      return _Action.Action;
    }

    /**
     * @returns {Statement}
     * @constructor
     */

  }, {
    key: 'STATEMENT',
    get: function get() {
      return _Statement.Statement;
    }
  }]);

  return Factory;
}();

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 12/10/15.
 */

/*eslint no-undefined: 0*/



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let Context = exports.Context = function () {
  /**
   * @param {Object} lambdaContext
   */
  function Context(lambdaContext) {
    _classCallCheck(this, Context);

    this._lambdaContext = lambdaContext;

    this._registerDataAsOptions();
  }

  /**
   * @returns {Object}
   */


  _createClass(Context, [{
    key: '_registerDataAsOptions',


    /**
     * @private
     */
    value: function _registerDataAsOptions() {
      for (let key in this._lambdaContext) {
        if (!this._lambdaContext.hasOwnProperty(key)) {
          continue;
        }

        Object.defineProperty(this, key, {
          value: this._lambdaContext[key],
          writable: false,
          configurable: false,
          enumerable: true
        });
      }

      // Avoid _data key listing on Object.keys(request)
      Object.defineProperty(this, '_options', {
        configurable: false,
        enumerable: false
      });
    }

    /**
     * @param {String} option
     * @returns {boolean}
     */

  }, {
    key: 'has',
    value: function has(option) {
      return this._lambdaContext.hasOwnProperty(option);
    }

    /**
     * @param {String} option
     * @param {*} defaultValue
     * @returns {*}
     */

  }, {
    key: 'getOption',
    value: function getOption(option) {
      let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      return this._lambdaContext.hasOwnProperty(option) ? this._lambdaContext[option] : defaultValue;
    }

    /**
     * Enables Callback wait for empty event loop
     */

  }, {
    key: 'waitForEmptyEventLoop',
    value: function waitForEmptyEventLoop() {
      this._lambdaContext.callbackWaitsForEmptyEventLoop = true;
    }
  }, {
    key: 'options',
    get: function get() {
      return this._lambdaContext;
    }
  }]);

  return Context;
}();

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/25/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorResponse = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Response2 = __webpack_require__(118);

var _Exception = __webpack_require__(11);

var _Helper = __webpack_require__(121);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Error response sent to the lambda context
 */
let ErrorResponse = exports.ErrorResponse = function (_Response) {
  _inherits(ErrorResponse, _Response);

  /**
   * @param {Runtime} runtime
   * @param {Error|String|*} error
   */
  function ErrorResponse(runtime, error) {
    _classCallCheck(this, ErrorResponse);

    return _possibleConstructorReturn(this, (ErrorResponse.__proto__ || Object.getPrototypeOf(ErrorResponse)).call(this, runtime, ErrorResponse.createErrorObject(error)));
  }

  /**
   * @param {Error|String|*} error
   * @returns {Object}
   */


  _createClass(ErrorResponse, [{
    key: 'data',


    /**
     *
     * @returns {Object}
     * @private
     */
    get: function get() {
      return JSON.stringify(this._data);
    }

    /**
     * @returns {String}
     */

  }], [{
    key: 'createErrorObject',
    value: function createErrorObject(error) {
      let errorObj = {};
      let errorCode = _Exception.Exception.DEFAULT_CODE;

      if (error.name === 'ValidationError') {
        // we assume it's a joi validation error
        errorCode = 400;
        errorObj = {
          errorType: error.name,
          errorMessage: error.annotate(),
          errorStack: error.stack || new Error(error.message).stack,
          validationErrors: error.details
        };
      } else if (error instanceof Error) {
        errorObj = {
          errorType: error.name,
          errorMessage: error.message,
          errorStack: error.stack || new Error(error.message).stack
        };
      } else {
        let plainError = (error || 'Unexpected error occurred.').toString();

        errorObj = {
          errorType: 'Error',
          errorMessage: plainError,
          errorStack: new Error(plainError).stack
        };
      }

      errorObj[_Exception.Exception.CODE_KEY] = _Helper.Helper.assureDefinedCode(error.code || errorCode);

      return errorObj;
    }
  }, {
    key: 'contextMethod',
    get: function get() {
      return 'fail';
    }
  }]);

  return ErrorResponse;
}(_Response2.Response);

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 10/31/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidCognitoIdentityException = undefined;

var _Exception2 = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when context identity pool id does not much identity pool id from security service
 */
let InvalidCognitoIdentityException = exports.InvalidCognitoIdentityException = function (_Exception) {
  _inherits(InvalidCognitoIdentityException, _Exception);

  /**
   * @param {String} identityPoolId
   */
  function InvalidCognitoIdentityException(identityPoolId) {
    _classCallCheck(this, InvalidCognitoIdentityException);

    return _possibleConstructorReturn(this, (InvalidCognitoIdentityException.__proto__ || Object.getPrototypeOf(InvalidCognitoIdentityException)).call(this, `Invalid cognito identity pool "${identityPoolId}".`, 403));
  }

  return InvalidCognitoIdentityException;
}(_Exception2.Exception);

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/12/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingRuntimeContextException = undefined;

var _Exception2 = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when missing runtime lambda context
 */
let MissingRuntimeContextException = exports.MissingRuntimeContextException = function (_Exception) {
  _inherits(MissingRuntimeContextException, _Exception);

  function MissingRuntimeContextException() {
    _classCallCheck(this, MissingRuntimeContextException);

    return _possibleConstructorReturn(this, (MissingRuntimeContextException.__proto__ || Object.getPrototypeOf(MissingRuntimeContextException)).call(this, 'Missing Lambda runtime context', 400));
  }

  return MissingRuntimeContextException;
}(_Exception2.Exception);

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 10/31/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingUserContextException = undefined;

var _Exception2 = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let MissingUserContextException = exports.MissingUserContextException = function (_Exception) {
  _inherits(MissingUserContextException, _Exception);

  function MissingUserContextException() {
    _classCallCheck(this, MissingUserContextException);

    return _possibleConstructorReturn(this, (MissingUserContextException.__proto__ || Object.getPrototypeOf(MissingUserContextException)).call(this, 'Missing user context in the Lambda runtime', 403));
  }

  return MissingUserContextException;
}(_Exception2.Exception);

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/25/15.
 */

/*eslint no-undefined: 0*/



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Request = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _qs = __webpack_require__(160);

var _qs2 = _interopRequireDefault(_qs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Request received by the lambda context
 */
let Request = exports.Request = function () {
  /**
   * @param {*} data
   */
  function Request() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Request);

    this._data = !Array.isArray(data) ? _qs2.default.parse(data) : data;

    this._registerDataAsParams();
  }

  /**
   * @private
   */


  _createClass(Request, [{
    key: '_registerDataAsParams',
    value: function _registerDataAsParams() {
      for (let key in this._data) {
        if (!this._data.hasOwnProperty(key)) {
          continue;
        }

        Object.defineProperty(this, key, {
          value: this._data[key],
          writable: false,
          configurable: false,
          enumerable: true
        });
      }

      // Avoid _data key listing on Object.keys(request)
      Object.defineProperty(this, '_data', {
        configurable: false
      });
    }

    /**
     * @returns {*}
     */

  }, {
    key: 'getParam',


    /**
     * @param {String} name
     * @param {String|Object|null} defaultValue
     *
     * @returns {String|Object|null}
     */
    value: function getParam(name) {
      let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      return this._data.hasOwnProperty(name) ? this._data[name] : defaultValue;
    }
  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }
  }]);

  return Request;
}();

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 4/21/16.
 */



/**
 * Resolves lambda response
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let Resolver = exports.Resolver = function () {
  /**
   * @param {Function} lambdaCallback
   */
  function Resolver(lambdaCallback) {
    _classCallCheck(this, Resolver);

    this._lambdaCallback = lambdaCallback;
    this._onSucceed = [];
  }

  /**
   * @param {Object} object
   */


  _createClass(Resolver, [{
    key: 'succeed',
    value: function succeed(object) {
      this._onSucceed.forEach(cb => cb(object));

      this._lambdaCallback(null, object);
    }

    /**
     * @param {Object} object
     */

  }, {
    key: 'fail',
    value: function fail(object) {
      this._lambdaCallback(object, null);
    }

    /**
     * @param {Function} cb;
     */

  }, {
    key: 'registerSucceedCallback',
    value: function registerSucceedCallback(cb) {
      this._onSucceed.push(cb);
    }
  }]);

  return Resolver;
}();

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/25/15.
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Runtime = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Interface2 = __webpack_require__(67);

var _Response = __webpack_require__(118);

var _ErrorResponse = __webpack_require__(269);

var _Request = __webpack_require__(273);

var _InvalidCognitoIdentityException = __webpack_require__(270);

var _MissingUserContextException = __webpack_require__(272);

var _Context = __webpack_require__(268);

var _Sandbox = __webpack_require__(122);

var _Resolver = __webpack_require__(274);

var _awsSdk = __webpack_require__(15);

var _awsSdk2 = _interopRequireDefault(_awsSdk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Lambda runtime context
 */
let Runtime = exports.Runtime = function (_Interface) {
  _inherits(Runtime, _Interface);

  /**
   * @param {Object} kernel
   */
  function Runtime(kernel) {
    _classCallCheck(this, Runtime);

    var _this2 = _possibleConstructorReturn(this, (Runtime.__proto__ || Object.getPrototypeOf(Runtime)).call(this, ['handle']));

    _this2._kernel = kernel;
    _this2._request = null;
    _this2._context = null;
    _this2._resolver = null;

    _this2._loggedUserId = null;
    _this2._forceUserIdentity = false;
    _this2._contextSent = false;

    _this2._calleeConfig = null;

    _this2._fillDenyMissingUserContextOption();
    return _this2;
  }

  /**
   * @returns {null|Context}
   */


  _createClass(Runtime, [{
    key: 'validateInput',


    /**
     * @param {String} schemaName
     * @param {Function} cb
     * @returns {Runtime}
     */
    value: function validateInput(schemaName, cb) {
      let validation = this._kernel.get('validation');

      validation.validateRuntimeInput(this, schemaName, cb);

      return this;
    }

    /**
     * @param {Object} event
     * @param {Object} context
     * @param {Function} lambdaCallback
     * @returns {Runtime}
     */

  }, {
    key: 'run',
    value: function run(event, context) {
      let lambdaCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      this._context = new _Context.Context(context);
      this._request = new _Request.Request(event);

      if (lambdaCallback) {
        this._resolver = new _Resolver.Resolver(lambdaCallback);

        this._resolver.registerSucceedCallback(this.kernel.kernelCleanup.bind(this.kernel));
      }

      this._context.waitForEmptyEventLoop();

      this.logService.rumLog({
        service: 'deep-core',
        resourceType: 'Lambda',
        resourceId: this._context.invokedFunctionArn,
        eventName: 'Run'
      });

      new _Sandbox.Sandbox(() => {
        this._fillUserContext().then(() => {
          if (!this._loggedUserId && this._forceUserIdentity) {
            throw new _MissingUserContextException.MissingUserContextException();
          }

          this._initDBPartitionKey();

          let validationSchema = this.validationSchema;

          if (validationSchema) {
            this._runValidate(validationSchema);
          } else {
            this.handle(this._request);
          }
        }).catch(e => this.createError(e).send());
      }).fail(error => {
        this.createError(error).send();
      }).run();

      return this;
    }

    /**
     * @param {String} validationSchema
     * @private
     */

  }, {
    key: '_runValidate',
    value: function _runValidate(validationSchema) {
      let validationSchemaName = validationSchema;

      if (typeof validationSchema !== 'string') {
        validationSchemaName = this._injectValidationSchema(validationSchema);
      }

      this.validateInput(validationSchemaName, validatedData => {
        this.handle(validatedData);
      });
    }

    /**
     * @param {Object} schema
     * @param {String|null} name
     * @returns {String}
     * @private
     */

  }, {
    key: '_injectValidationSchema',
    value: function _injectValidationSchema(schema) {
      let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      let validation = this._kernel.get('validation');

      name = name || `DeepHandlerValidation_${new Date().getTime()}`;

      validation.setGuessSchema(name, schema);

      return name;
    }

    /**
     * @param {String|Error|*} error
     * @returns {ErrorResponse}
     */

  }, {
    key: 'createError',
    value: function createError(error) {
      return new _ErrorResponse.ErrorResponse(this, error);
    }

    /**
     * @param {Object} data
     * @returns {Response}
     */

  }, {
    key: 'createResponse',
    value: function createResponse(data) {
      return new _Response.Response(this, data);
    }

    /**
     * @param {Object} data
     * @param {Number} ttl
     * @param {Function} callback
     */

  }, {
    key: 'createCachedResponse',
    value: function createCachedResponse(data) {
      let ttl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : response => response.send();

      let publicCache = this._kernel.get('cache').shared;
      let publicCacheKey = publicCache.buildKeyFromLambdaRuntime(this);
      let response = new _Response.Response(this, data);

      publicCache.assure(publicCacheKey, { body: data }, ttl, () => {
        callback(response);
      });
    }

    /**
     * @returns {String}
     */

  }, {
    key: '_fillDenyMissingUserContextOption',


    /**
     * @private
     */
    value: function _fillDenyMissingUserContextOption() {
      if (this._kernel.config.hasOwnProperty('forceUserIdentity')) {
        this._forceUserIdentity = this._kernel.config.forceUserIdentity;
      }
    }

    /**
     * @returns {Runtime}
     * @private
     */

  }, {
    key: '_initDBPartitionKey',
    value: function _initDBPartitionKey() {
      if (!this.kernel.accountMicroservice || !this.forceUserIdentity) {
        return this;
      }

      let db = this.dbService;
      let user = this.securityService.token && this.securityService.token.user;
      let partitionKey = Runtime.DB_ANONYMOUS_PARTITION;

      if (user && user.ActiveAccount) {
        partitionKey = user.ActiveAccount.Id;
      }

      db.setDynamoDBPartitionKey(partitionKey);

      return this;
    }

    /**
     * Retrieves logged user id from lambda context
     *
     * @private
     * @returns {Promise}
     */

  }, {
    key: '_fillUserContext',
    value: function _fillUserContext() {
      if (this._context && this._context.identity && this._context.identity.cognitoIdentityPoolId && this._context.identity.cognitoIdentityId) {
        let identityPoolId = this._context.identity.cognitoIdentityPoolId;

        if (this.securityService.identityPoolId !== identityPoolId && !this._kernel.container.localBackend) {

          return Promise.reject(new _InvalidCognitoIdentityException.InvalidCognitoIdentityException(identityPoolId));
        }

        // inject lambda context into security service
        // and instantiate security token without loading user credentials
        return this.securityService.warmupBackendLogin(this._context).then(credentials => {
          let dbService = this.dbService;

          _awsSdk2.default.config.credentials = credentials;
          credentials && dbService.overwriteCredentials(credentials);

          this._loggedUserId = this._context.identity.cognitoIdentityId;
        });
      }

      return Promise.resolve(null);
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'context',
    get: function get() {
      return this._context;
    }

    /**
     * @returns {null|Resolver}
     */

  }, {
    key: 'resolver',
    get: function get() {
      return this._resolver;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'contextSent',
    get: function get() {
      return this._contextSent;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'loggedUserId',
    get: function get() {
      return this._loggedUserId;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'forceUserIdentity',
    get: function get() {
      return this._forceUserIdentity;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'kernel',
    get: function get() {
      return this._kernel;
    }

    /**
     * @returns {Function}
     */

  }, {
    key: 'lambda',
    get: function get() {
      let _this = this;

      return function (event, context) {
        _this.run(event, context);
      };
    }
  }, {
    key: 'calleeName',
    get: function get() {
      if (this._context && this._context.has('invokedFunctionArn')) {
        let calleeArn = this._context.getOption('invokedFunctionArn');

        return calleeArn.replace(/^.+:function:/i, '');
      }

      return null;
    }

    /**
     * @returns {null|Object}
     */

  }, {
    key: 'calleeConfig',
    get: function get() {
      if (!this._calleeConfig && this._context && this._kernel && this._context.has('invokedFunctionArn')) {

        let resource = this._kernel.get('resource');
        let calleeArn = this._context.getOption('invokedFunctionArn');

        this._calleeConfig = resource.getActionConfig(calleeArn);
      }

      return this._calleeConfig;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'validationSchema',
    get: function get() {
      return this.calleeConfig ? this.calleeConfig.validationSchema || null : null;
    }

    /**
     * @returns {Request}
     */

  }, {
    key: 'request',
    get: function get() {
      return this._request;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'securityService',
    get: function get() {
      return this.kernel.get('security');
    }

    /**
     * @returns {DB}
     */

  }, {
    key: 'dbService',
    get: function get() {
      return this.kernel.get('db');
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'logService',
    get: function get() {
      return this.kernel.get('log');
    }
  }], [{
    key: 'DB_ANONYMOUS_PARTITION',
    get: function get() {
      return 'anonymous';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'VALIDATION_SCHEMAS_DIR',
    get: function get() {
      return '__deep_validation_schemas__';
    }
  }]);

  return Runtime;
}(_Interface2.Interface);

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatabaseOperationException = undefined;

var _Exception2 = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when operation on the database failed
 */
let DatabaseOperationException = exports.DatabaseOperationException = function (_Exception) {
  _inherits(DatabaseOperationException, _Exception);

  /**
   * @param {String} error
   */
  function DatabaseOperationException(error) {
    _classCallCheck(this, DatabaseOperationException);

    return _possibleConstructorReturn(this, (DatabaseOperationException.__proto__ || Object.getPrototypeOf(DatabaseOperationException)).call(this, `Database operation failed. ${error}`, 500));
  }

  return DatabaseOperationException;
}(_Exception2.Exception);

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 7/28/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResourceNotFoundException = undefined;

var _Exception2 = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when resource not found
 */
let ResourceNotFoundException = exports.ResourceNotFoundException = function (_Exception) {
  _inherits(ResourceNotFoundException, _Exception);

  /**
   * @param {String|Number|null} resourceName
   */
  function ResourceNotFoundException() {
    let resourceName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, ResourceNotFoundException);

    let message = resourceName ? `Resource "${resourceName}" was not found.` : 'Resource not found.';

    return _possibleConstructorReturn(this, (ResourceNotFoundException.__proto__ || Object.getPrototypeOf(ResourceNotFoundException)).call(this, message, 404));
  }

  return ResourceNotFoundException;
}(_Exception2.Exception);

/***/ }),
/* 278 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 278;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 11/10/15.
 */

//https://github.com/eslint/eslint/issues/5150
/*eslint no-return-assign: 0*/



/**
 * @todo: Rename to Proxy
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let MethodsProxy = exports.MethodsProxy = function () {
  /**
   * @param {Object} target
   */
  function MethodsProxy(target) {
    _classCallCheck(this, MethodsProxy);

    this._target = target;
    this._decorator = null;
  }

  /**
   * @returns {Object}
   */


  _createClass(MethodsProxy, [{
    key: 'decorate',


    /**
     * @param {Function} decorator
     * @returns {MethodsProxy}
     */
    value: function decorate(decorator) {
      this._decorator = decorator;

      return this;
    }

    /**
     * @param {Object} handler
     * @param {String|String[]} explMethods
     * @returns {Object}
     */

  }, {
    key: 'proxyOverride',
    value: function proxyOverride(handler) {
      var _this = this;

      for (var _len = arguments.length, explMethods = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        explMethods[_key - 1] = arguments[_key];
      }

      let methods = Object.keys(handler).concat(explMethods);

      for (let i in methods) {
        if (!methods.hasOwnProperty(i)) {
          continue;
        }

        let prop = methods[i];

        if (!handler.hasOwnProperty(prop) && explMethods.indexOf(prop) === -1) {
          continue;
        }

        if (typeof handler[prop] === 'function') {
          Object.defineProperty(this._target, prop, {
            value: function value() {
              for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              return typeof _this._decorator === 'function' ? _this._decorator.apply(_this, [handler, prop].concat(args)) : handler[prop].apply(handler, args);
            }
          });
        }
      }

      return this._target;
    }

    /**
    * @param {String} handler
    * @param {Object[]} explProps
    * @returns {Object|*}
    */

  }, {
    key: 'proxyProperties',
    value: function proxyProperties(handler) {
      for (var _len3 = arguments.length, explProps = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        explProps[_key3 - 1] = arguments[_key3];
      }

      let propList = Object.keys(handler).concat(explProps);

      for (let prop of propList) {
        if (typeof handler[prop] === 'function') {
          continue;
        }

        let descriptor = Object.getOwnPropertyDescriptor(handler, prop);
        let targetDescriptor = {
          enumerable: descriptor.enumerable,
          configurable: descriptor.configurable,
          get: () => handler[prop]
        };

        if (descriptor.writable) {
          targetDescriptor.set = value => handler[prop] = value;
        }

        Object.defineProperty(this._target, prop, targetDescriptor);
      }

      return this._target;
    }

    /**
     * @param {Object} handler
     * @param {String|String[]} explMethods
     * @returns {Object}
     *
     * @todo Replace typeof hook with hasOwnProperty() when get rid of babel
     */

  }, {
    key: 'proxy',
    value: function proxy(handler) {
      for (var _len4 = arguments.length, explMethods = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        explMethods[_key4 - 1] = arguments[_key4];
      }

      return this.proxyOverride.apply(this, [handler].concat(_toConsumableArray(explMethods.filter(prop => typeof this._target[prop] === 'undefined'))));
    }
  }, {
    key: 'target',
    get: function get() {
      return this._target;
    }
  }]);

  return MethodsProxy;
}();

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */



/**
 * Simple object storage implementation
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let ObjectStorage = exports.ObjectStorage = function () {
  /**
   * @param {Array} objects
   */
  function ObjectStorage() {
    for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {
      objects[_key] = arguments[_key];
    }

    _classCallCheck(this, ObjectStorage);

    if (objects.length === 1 && objects[0] instanceof Array) {
      objects = objects[0];
    }

    this._vector = objects;
  }

  /**
   * @param {*} object
   * @returns {ObjectStorage}
   */


  _createClass(ObjectStorage, [{
    key: 'add',
    value: function add(object) {
      this._vector.push(object);

      return this;
    }

    /**
     * @param {Function|Object} thing
     * @param {Boolean} strict
     * @returns {Object|null}
     */

  }, {
    key: 'find',
    value: function find(thing) {
      let strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      for (let objectKey in this._vector) {
        if (!this._vector.hasOwnProperty(objectKey)) {
          continue;
        }

        let object = this._vector[objectKey];

        if (strict && object === thing || !strict && object instanceof thing) {
          return object;
        }
      }

      return null;
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'iterator',
    get: function get() {
      return this._vector;
    }
  }]);

  return ObjectStorage;
}();

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let ObjectVector = exports.ObjectVector = function () {

  /**
   * @param {Function} proto
   * @param {Object[]|*} instances
   */
  function ObjectVector(proto) {
    _classCallCheck(this, ObjectVector);

    this._proto = proto;
    this._vector = [];

    for (var _len = arguments.length, instances = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      instances[_key - 1] = arguments[_key];
    }

    this.add.apply(this, instances);
  }

  /**
   * Add new instances to collection
   * @param {Object[]|*} instances
   * @returns {ObjectVector}
   */


  _createClass(ObjectVector, [{
    key: 'add',
    value: function add() {
      for (var _len2 = arguments.length, instances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        instances[_key2] = arguments[_key2];
      }

      for (let i in instances) {
        if (!instances.hasOwnProperty(i)) {
          continue;
        }

        let instance = instances[i];

        if (!(instance instanceof this._proto)) {
          throw new Error(`The object ${instance.constructor.name} is not an instance of ${this._proto.name}`);
        }

        this._vector.push(instance);
      }

      return this;
    }

    /**
     * Get collection of instances
     * @returns {Object[]}
     */

  }, {
    key: 'collection',
    get: function get() {
      return this._vector;
    }
  }]);

  return ObjectVector;
}();

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/27/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniversalRequire = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = __webpack_require__(33);

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let UniversalRequire = exports.UniversalRequire = function () {
  function UniversalRequire() {
    _classCallCheck(this, UniversalRequire);

    this._require = this._guessRequireFunc();
  }

  /**
   * @param {String} module
   * @param {Function} cb
   * @returns {*}
   */


  _createClass(UniversalRequire, [{
    key: 'require',
    value: function require(module, cb) {
      if (UniversalRequire._isFrontend) {
        module = _path2.default.normalize(module); // avoid './' or '../'
      }

      return this._require(module, cb);
    }

    /**
     * @returns {Boolean}
     * @private
     */

  }, {
    key: '_guessRequireFunc',


    /**
     * @returns {Function}
     * @private
     */
    value: function _guessRequireFunc() {
      if (!UniversalRequire._isFrontend) {
        return (module, cb) => {
          try {
            cb(null, !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
          } catch (e) {
            cb(e, null);
          }
        };
      }

      __webpack_require__(283);

      return window.__deepRequireBrowser__;
    }
  }], [{
    key: '_isFrontend',
    get: function get() {
      return typeof window !== 'undefined' && typeof document !== 'undefined';
    }
  }]);

  return UniversalRequire;
}();

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by AlexanderC on 1/29/16.
 *
 * @ref https://github.com/Stuk/require1k/blob/master/require1k.js
 *
 * This is a tweaked version of the require1k library
 * in order to work with deep
 *
 * Thanks to the author!
 */

window.__deepRequireBrowser__ = window.__deepRequireBrowser__ || function (document, undefined) {
  // Each module has the following properties (shorted to one letter to aid compression)
  // - g: booleany, loadinG, truthy if this module has been requested for loading
  //      before. Used to prevent the same module being loaded twice
  // - l: string, Location, the url location of this module
  // - t: string, Text, the text content of the module
  // - e: booleany, Error, truthy if there was an error (probably a 404) loading the module
  // - n: module object, Next, instead of using this module, use the object
  //      pointed to by this property. Used for dependencies in other packages
  // - f: function, Factory, a function to use instead of eval'ing module.t
  // - exports, object, the exports of the module!
  var MODULES = {};

  // By using a named "eval" most browsers will execute in the global scope.
  // http://www.davidflanagan.com/2010/12/global-eval-in.html
  var globalEval = eval;

  // this variable is reused for a number of things to reduce the repetition
  // of strings. In the end is becomes "exports"
  var tmp = "createElement",
      baseElement = document[tmp]("base"),
      relativeElement = document[tmp]("a");
  document.head.appendChild(baseElement);

  // Loads the given module and all of it dependencies, recursively
  // - module         The module object
  // - callback       Called when everything has been loaded
  // - parentLocation Location of the parent directory to look in. Only given
  // for non-relative dependencies
  // - id             The name of the dependency. Only used for non-relative
  // dependencies
  function deepLoad(module, callback, parentLocation, id) {
    // If this module is already loading then don't proceed.
    // This is a bug.
    // If a module is requested but not loaded then the module isn't ready,
    // but we callback as if it is. Oh well, 1k!
    if (module.g) {
      return callback(module.e, module);
    }

    var location = module.g = module.l;

    var request = new XMLHttpRequest();
    request.onload = function (deps, count) {
      if (request.status == 200 || module.t) {
        // Should really use an object and then Object.keys to avoid
        // duplicate dependencies. But that costs bytes.
        deps = [];
        (module.t = module.t || request.response).replace(/(?:^|[^\w\$_.])require\s*\(\s*["']([^"']*)["']\s*\)/g, function (_, id) {
          deps.push(id);
        });
        count = deps.length;
        function loaded() {
          // We call loaded straight away below in case there
          // are no dependencies. Putting this check first
          // and the decrement after saves us an `if` for that
          // special case
          if (!count--) {
            callback(undefined, module);
          }
        }
        deps.map(function (dep) {
          deepLoad(resolveModuleOrGetExports(module.l, dep), loaded,
          // If it doesn't begin with a ".", then we're searching
          // node_modules, so pass in the info to make this
          // possible
          dep[0] != "." ? location + "/../" : undefined, dep);
        });
        loaded();
      } else {
        // parentLocation is only given if we're searching in node_modules
        if (parentLocation) {
          // Recurse up the tree trying to find the dependency
          // (generating 404s on the way)
          deepLoad(module.n = resolveModuleOrGetExports(parentLocation += "../", id), callback, parentLocation, id);
        } else {
          module.e = request;
          callback(request, module);
        }
      }
    };

    // If the module already has text because we're using a factory
    // function, then there's no need to load the file!
    if (module.t) {
      request.onload();
    } else {
      request.open("GET", location, true);
      request.send();
    }
  }

  // Save bytes by combining two functions
  // - resolveModule which resolves a given relative path against the given
  //   base, and returns an existing or new module object
  // - getExports which returns the existing exports or runs the factory to
  //   create the exports for a module
  function resolveModuleOrGetExports(baseOrModule, relative, resolved) {
    // This should really be after the relative check, but because we are
    // `throw`ing, it messes up the optimizations. If we are being called
    // as resolveModule then the string `base` won't have the `e` property,
    // so we're fine.
    if (baseOrModule.e) {
      throw baseOrModule.e;
    }

    // If 2 arguments are given, then we are resolving modules...
    if (relative) {
      baseElement.href = baseOrModule;
      // If the relative url doesn't begin with a "." or a "/", then it's
      // in node_modules
      relativeElement.href = relative[0] != "." && relative[0] != "/" ? "./node_modules/" + relative : relative;

      resolved = relativeElement.href.substr(-3).toLowerCase() == ".js" ? relativeElement.href : relativeElement.href + ".js";

      baseElement.href = "";
      return MODULES[resolved] = MODULES[resolved] || { l: resolved };
    }

    // ...otherwise we are getting the exports

    // Is this module a redirect to another one?
    if (baseOrModule.n) {
      return resolveModuleOrGetExports(baseOrModule.n);
    }

    if (!baseOrModule[tmp]) {
      (baseOrModule.f || globalEval("(function(require," + tmp + ",module){" + baseOrModule.t + "\n})//# sourceURL=" + baseOrModule.l))(function require(id) {
        return resolveModuleOrGetExports(resolveModuleOrGetExports(baseOrModule.l, id));
      }, // require
      baseOrModule[tmp] = {}, // exports
      baseOrModule // module
      );
    }

    return baseOrModule[tmp];
  }

  function R(id, callback) {
    // If id has a `call` property it is a function, so make a module with
    // a factory
    deepLoad(id.call ? { l: "", t: "" + id, f: id } : resolveModuleOrGetExports("", id), function (err, module) {
      try {
        id = resolveModuleOrGetExports(module);
      } catch (_err) {
        err = _err;
      }
      if (callback) {
        callback(err, id);
      }
    });
  }

  tmp = document.querySelector("script[data-main]");
  if (tmp) {
    R(tmp.dataset.main);
  }
  tmp = "exports";

  return R;
}(document);

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 5/26/2015
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DI = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _bottlejs = __webpack_require__(244);

var _bottlejs2 = _interopRequireDefault(_bottlejs);

var _MissingServiceException = __webpack_require__(286);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Deep dependency injection module
 */
let DI = exports.DI = function () {
  function DI() {
    _classCallCheck(this, DI);

    this._bottle = new _bottlejs2.default();
    this._localBackend = false;
  }

  /**
   * Registers a service to container
   *
   * @param {String} serviceName
   * @param {Object} serviceClass
   * @param {String[]} dependencies
   */


  _createClass(DI, [{
    key: 'register',
    value: function register(serviceName, serviceClass, dependencies) {
      var args = [serviceName, serviceClass];

      if (dependencies) {
        args = args.concat(dependencies);
      }

      this._bottle.service.apply(this._bottle, args);
    }

    /**
     * Defines a factory method to create a service
     *
     * @param {String} serviceName
     * @param {Object} factoryClass
     */

  }, {
    key: 'factory',
    value: function factory(serviceName, factoryClass) {
      this._bottle.factory(serviceName, factoryClass);
    }

    /**
     * Adds a parameter into container
     *
     * @param {String} name
     * @param {*} value
     */

  }, {
    key: 'addParameter',
    value: function addParameter(name, value) {
      this._bottle.value(name, value);
    }

    /**
     * Adds an instantiated service into container
     *
     * @param {String} name
     * @param {Object} value
     */

  }, {
    key: 'addService',
    value: function addService(name, value) {
      if (!(value instanceof Object)) {
        throw new _deepCore2.default.Exception.InvalidArgumentException(value, 'Object');
      }

      this._bottle.value(name, value);
    }

    /**
     * Returns a service / parameter from container
     * @param {String} key
     * @returns {Object}
     */

  }, {
    key: 'get',
    value: function get(key) {
      if (typeof this._bottle.container[key] === 'undefined') {
        throw new _MissingServiceException.MissingServiceException(`Unregistered service or parameter "${key}"`);
      }

      return this._bottle.container[key];
    }

    /**
     * Checks if service / parameter exists in container
     * @param {String} key
     * @returns {Boolean}
     */

  }, {
    key: 'has',
    value: function has(key) {
      return this._bottle.container.hasOwnProperty(key);
    }

    /**
     * @param {Boolean} localBackend
     */

  }, {
    key: 'cleanup',
    value: function cleanup() {}
  }, {
    key: 'localBackend',
    set: function set(localBackend) {
      this._localBackend = localBackend;
    }

    /**
     * @returns {Boolean}
     */
    ,
    get: function get() {
      return this._localBackend;
    }
  }]);

  return DI;
}();

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Exception = undefined;

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when any exception occurs
 */
let Exception = exports.Exception = function (_Core$Exception$Excep) {
  _inherits(Exception, _Core$Exception$Excep);

  /**
   * @param {Array} args
   */
  function Exception() {
    var _ref;

    _classCallCheck(this, Exception);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = Exception.__proto__ || Object.getPrototypeOf(Exception)).call.apply(_ref, [this].concat(args)));
  }

  return Exception;
}(_deepCore2.default.Exception.Exception);

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingServiceException = undefined;

var _Exception2 = __webpack_require__(285);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when requested service is missing
 */
let MissingServiceException = exports.MissingServiceException = function (_Exception) {
  _inherits(MissingServiceException, _Exception);

  /**
   * @param {String} serviceName
   */
  function MissingServiceException(serviceName) {
    _classCallCheck(this, MissingServiceException);

    return _possibleConstructorReturn(this, (MissingServiceException.__proto__ || Object.getPrototypeOf(MissingServiceException)).call(this, `Missing service ${serviceName} in deep-kernel`));
  }

  return MissingServiceException;
}(_Exception2.Exception);

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/22/15.
 *
 * Bootstrap file loaded by npm as main
 */



var _DI = __webpack_require__(284);

module.exports = _DI.DI;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 2/22/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let AbstractContext = exports.AbstractContext = function () {
  /**
   * @param {*} context
   */
  function AbstractContext() {
    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AbstractContext);

    this._context = {};

    this.addObj(context);
  }

  /**
   * @param {Kernel|*} kernel
   */


  _createClass(AbstractContext, [{
    key: 'addObj',


    /**
     * @param {*} obj
     *
     * @returns {AbstractContext|*}
     */
    value: function addObj(obj) {
      this._context = Object.assign(this._context, obj);

      return this;
    }

    /**
     * @param {String} key
     * @param {*} value
     *
     * @returns {AbstractContext|*}
     */

  }, {
    key: 'add',
    value: function add(key, value) {
      this._context[key] = value;

      return this;
    }

    /**
     * @returns {*}
     */

  }, {
    key: 'get',
    value: function get() {
      return this._context;
    }

    /**
     * @param {*} originalContext
     *
     * @returns {*}
     */

  }, {
    key: 'enrichEventContext',
    value: function enrichEventContext(originalContext) {
      originalContext = this.extend(originalContext);
      originalContext.timestamp = Date.now();

      return originalContext;
    }

    /**
     * @param {*} context
     *
     * @returns {*}
     */

  }, {
    key: 'extend',
    value: function extend(context) {
      return Object.assign({}, this.get(), context);
    }
  }], [{
    key: 'fromKernel',
    value: function fromKernel(kernel) {
      throw new Error('Context.fromKernel() not implemented!');
    }
  }]);

  return AbstractContext;
}();

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 01/25/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let ClientJS = function ClientJS() {};

if (typeof window !== 'undefined') {
  __webpack_require__(245);
  ClientJS = window.ClientJS;
}

const singletonInstance = Symbol();
const singletonEnforcer = Symbol();

let ClientSession = exports.ClientSession = function (_ClientJS) {
  _inherits(ClientSession, _ClientJS);

  /**
   * @param {Symbol} enforcer
   */
  function ClientSession(enforcer) {
    _classCallCheck(this, ClientSession);

    if (enforcer !== singletonEnforcer) {
      throw new Error('Cannot construct new ClientSession instance');
    }

    var _this = _possibleConstructorReturn(this, (ClientSession.__proto__ || Object.getPrototypeOf(ClientSession)).call(this));

    _this._sessionId = _this._buildSessionId();
    return _this;
  }

  /**
   * @param {String} defaultValue
   *
   * @returns {String}
   */


  _createClass(ClientSession, [{
    key: 'getSitePlatform',
    value: function getSitePlatform() {
      let defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'custom';

      const metaGenerator = this._findMetaContent('generator');

      if (metaGenerator.length <= 0) {
        return defaultValue;
      }

      for (let meta of metaGenerator) {
        for (let name in this._cmsMapping) {
          if (!this._cmsMapping.hasOwnProperty(name)) {
            continue;
          } else if (this._cmsMapping[name].test(meta)) {
            return name;
          }
        }
      }

      return defaultValue;
    }

    /**
     * @returns {*}
     *
     * @private
     */

  }, {
    key: '_findMetaContent',


    /**
     * @param {String} name
     * @param {Boolean} lowercase
     *
     * @returns {String[]}
     * 
     * @private
     */
    value: function _findMetaContent(name) {
      let lowercase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (!document || typeof document.getElementsByTagName !== 'function') {
        return [];
      }

      name = (name || '').toLowerCase();

      return this._htmlCollectionToArray(document.getElementsByTagName('meta')).filter(meta => {
        return (meta.getAttribute('name') || '').toLowerCase() === name || (meta.getAttribute('property') || '').toLowerCase() === name;
      }).map(meta => {
        const content = meta.getAttribute('content') || '';

        return lowercase ? content.toLowerCase() : content;
      });
    }

    /**
     * @param {HTMLCollection|*} collection
     *
     * @returns {Array}
     * 
     * @private
     */

  }, {
    key: '_htmlCollectionToArray',
    value: function _htmlCollectionToArray(collection) {
      let result = [];

      for (let i = 0; i < collection.length; i++) {
        result.push(collection[i]);
      }

      return result;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'getSessionId',
    value: function getSessionId() {
      return this._sessionId;
    }

    /**
     * @returns {ClientSession|*} singletonInstance
     */

  }, {
    key: '_buildSessionId',


    /**
     * @returns {String}
     *
     * @private
     */
    value: function _buildSessionId() {
      const fp = this.getFingerprint();

      return `${fp}${Date.now()}`.match(/.{1,6}/g).join('-');
    }
  }, {
    key: '_cmsMapping',
    get: function get() {
      return {
        'contao': /Contao/i,
        'wordpress': /WordPress/i,
        'joomla': /Joomla/i,
        'drupal': /Drupal/i,
        'typo3': /TYPO3/i
      };
    }
  }], [{
    key: 'instance',
    get: function get() {
      if (!this[singletonInstance]) {
        this[singletonInstance] = new ClientSession(singletonEnforcer);
      }

      return this[singletonInstance];
    }
  }]);

  return ClientSession;
}(ClientJS);

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 2/22/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FrontendContext = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _BackendContext2 = __webpack_require__(123);

var _ClientSession = __webpack_require__(289);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let FrontendContext = exports.FrontendContext = function (_BackendContext) {
  _inherits(FrontendContext, _BackendContext);

  function FrontendContext() {
    _classCallCheck(this, FrontendContext);

    return _possibleConstructorReturn(this, (FrontendContext.__proto__ || Object.getPrototypeOf(FrontendContext)).apply(this, arguments));
  }

  _createClass(FrontendContext, null, [{
    key: 'fromKernel',

    /**
     * @param {Kernel|*} kernel
     *
     * @returns {AbstractContext|*}
     */
    value: function fromKernel(kernel) {
      return _get(FrontendContext.__proto__ || Object.getPrototypeOf(FrontendContext), 'fromKernel', this).call(this, kernel).addObj(FrontendContext.clientData).addObj(FrontendContext.envData);
    }

    /**
     * @returns {*}
     */

  }, {
    key: 'clientData',
    get: function get() {
      return {
        sessionId: _ClientSession.ClientSession.instance.getSessionId(),
        fingerprint: _ClientSession.ClientSession.instance.getFingerprint(),
        browser: _ClientSession.ClientSession.instance.getBrowser(),
        browserVersion: _ClientSession.ClientSession.instance.getBrowserVersion(),
        os: _ClientSession.ClientSession.instance.getOS(),
        osVersion: _ClientSession.ClientSession.instance.getOSVersion(),
        resolution: _ClientSession.ClientSession.instance.getCurrentResolution(),
        timezone: _ClientSession.ClientSession.instance.getTimeZone(),
        language: _ClientSession.ClientSession.instance.getLanguage()
      };
    }

    /**
     * @returns {*}
     */

  }, {
    key: 'envData',
    get: function get() {
      return {
        location: {
          hash: window.location.hash,
          host: window.location.host,
          href: window.location.href,
          origin: window.location.origin,
          pathname: window.location.pathname,
          port: window.location.port,
          protocol: window.location.protocol,
          search: window.location.search
        },
        propertyId: window.location.host, // @todo read from env?
        platform: _ClientSession.ClientSession.instance.getSitePlatform()
      };
    }
  }]);

  return FrontendContext;
}(_BackendContext2.BackendContext);

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 2/22/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConsoleDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(124);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let ConsoleDriver = exports.ConsoleDriver = function (_AbstractDriver) {
  _inherits(ConsoleDriver, _AbstractDriver);

  function ConsoleDriver() {
    _classCallCheck(this, ConsoleDriver);

    return _possibleConstructorReturn(this, (ConsoleDriver.__proto__ || Object.getPrototypeOf(ConsoleDriver)).apply(this, arguments));
  }

  _createClass(ConsoleDriver, [{
    key: '_log',

    /**
     * @param   {String} name
     * @param   {*} data
     * @param   {Object} context
     *
     * @returns {Promise|*}
     *
     * @private
     */
    value: function _log(name, data, context) {
      return this._printEvent(name, data, context);
    }
  }]);

  return ConsoleDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on Fri Jul 01 2016.
 */

/*eslint no-loop-func: 0, no-bitwise: 0, eqeqeq: 0 */



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let UUID = exports.UUID = function () {
  function UUID() {
    _classCallCheck(this, UUID);
  }

  _createClass(UUID, null, [{
    key: 'generate',

    /**
     * Generates an RFC4122 v4 compliant UUID
     *
     * If ensureUnique=true it ensures
     * an unique UUID across the current runtime
     *
     * IMPORTANT! This solution is not crypto-secure!
     *
     * @param {Boolean} ensureUnique = true
     * @returns {String}
     */
    value: function generate() {
      let ensureUnique = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this._uuids = this._uuids || [];

      let date = new Date().getTime();

      if (window && window.performance && typeof window.performance.now === 'function') {

        date += performance.now();
      }

      let uuid = null;

      do {
        uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, char => {
          date = Math.floor(date / 16);
          let rand = (date + Math.random() * 16) % 16 | 0;

          return (char == 'x' ? rand : rand & 0x3 | 0x8).toString(16);
        });
      } while (!ensureUnique || this._uuids.indexOf(uuid) !== -1);

      if (this._uuids.indexOf(uuid) === -1) {
        this._uuids.push(uuid);
      }

      return uuid;
    }
  }]);

  return UUID;
}();

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 2/22/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KinesisDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(124);

var _UUID = __webpack_require__(292);

var _awsSdk = __webpack_require__(15);

var _awsSdk2 = _interopRequireDefault(_awsSdk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let KinesisDriver = exports.KinesisDriver = function (_AbstractDriver) {
  _inherits(KinesisDriver, _AbstractDriver);

  /**
   * @param   {String}    kinesisEventStream
   * @param   {*} args
   */
  function KinesisDriver(kinesisEventStream) {
    var _ref;

    _classCallCheck(this, KinesisDriver);

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = KinesisDriver.__proto__ || Object.getPrototypeOf(KinesisDriver)).call.apply(_ref, [this].concat(args)));

    _this._partitionKey = null;
    _this._kinesisEventStream = _this._normalizeStreamName(kinesisEventStream);
    _this._kinesis = new _awsSdk2.default.Kinesis(_this._serviceOptionsFromStreamArn(kinesisEventStream));
    return _this;
  }

  /**
   * @returns {AWS.Kinesis|*} 
   */


  _createClass(KinesisDriver, [{
    key: '_serviceOptionsFromStreamArn',


    /**
     * @param {String} kinesisEventStream
     *
     * @returns {*}
     *
     * @private
     */
    value: function _serviceOptionsFromStreamArn(kinesisEventStream) {
      const matches = kinesisEventStream.match(/^arn:aws:kinesis:([^:]+):([^:]+):stream\//i);

      if (!matches || matches.length < 3) {
        return {};
      }

      return {
        region: matches[1]
      };
    }

    /**
     * @param {String} kinesisEventStream
     *
     * @returns {String}
     *
     * @private
     */

  }, {
    key: '_normalizeStreamName',
    value: function _normalizeStreamName(kinesisEventStream) {
      return kinesisEventStream.replace(/^.+\/([^\/]+)$/i, '$1');
    }

    /**
     * @param   {String} name
     * @param   {*} data
     * @param   {Object} context
     *
     * @returns {Promise|*}
     *
     * @private
     */

  }, {
    key: '_log',
    value: function _log(name, data, context) {
      return this._push([{ name: name, data: data, context: context }]);
    }

    /**
     * @param   {Array} events
     *
     * @returns {Promise|*}
     *
     * @private
     */

  }, {
    key: '_push',
    value: function _push(events) {
      if (events.length <= 0) {
        return Promise.resolve();
      } else if (events.length > KinesisDriver.MAX_PUT_LENGTH) {
        return Promise.all(this._chunks(events, KinesisDriver.MAX_PUT_LENGTH).map(chunk => this._push(chunk)));
      }

      return new Promise((resolve, reject) => {
        const payload = {
          StreamName: this.kinesisEventStream,
          Records: events.map(event => {
            return {
              Data: JSON.stringify(event),
              PartitionKey: this.partitionKey
            };
          })
        };

        this.kinesis.putRecords(payload, (error, data) => {
          if (error) {
            return reject(error);
          }

          resolve(data);
        });
      });
    }

    /**
     * @param   {Array} arr
     * @param   {Number} pieces
     *
     * @returns {Array[]}
     *
     * @private
     */

  }, {
    key: '_chunks',
    value: function _chunks(arr, pieces) {
      const len = arr.length;

      let mid = len / pieces;
      let chunks = [];
      let start = 0;

      for (let i = 0; i < pieces; i++) {
        let last = start + mid;

        if (!len % pieces >= i) {
          last = last - 1;
        }

        chunks.push(arr.slice(start, last + 1) || []);

        start = last + 1;
      }

      return chunks;
    }

    /**
     * @see http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Kinesis.html#putRecord-property
     * 
     * @returns {String}
     */

  }, {
    key: 'kinesis',
    get: function get() {
      return this._kinesis;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'partitionKey',
    get: function get() {
      this._partitionKey = this._partitionKey || _UUID.UUID.generate();

      return this._partitionKey;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'kinesisEventStream',
    get: function get() {
      return this._kinesisEventStream;
    }
  }], [{
    key: 'MAX_PUT_LENGTH',
    get: function get() {
      return 500;
    }
  }]);

  return KinesisDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/15/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Event = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepKernel = __webpack_require__(18);

var _deepKernel2 = _interopRequireDefault(_deepKernel);

var _ConsoleDriver = __webpack_require__(291);

var _KinesisDriver = __webpack_require__(293);

var _BackendContext = __webpack_require__(123);

var _FrontendContext = __webpack_require__(290);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Event manager
 */
let Event = exports.Event = function (_Kernel$ContainerAwar) {
  _inherits(Event, _Kernel$ContainerAwar);

  /**
   * @param {Object} drivers
   */
  function Event() {
    let drivers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Event);

    var _this = _possibleConstructorReturn(this, (Event.__proto__ || Object.getPrototypeOf(Event)).call(this));

    _this._driver = null;
    return _this;
  }

  /**
   * @returns {ConsoleDriver|KinesisDriver|*}
   */


  _createClass(Event, [{
    key: 'log',


    /**
     * @param {*} args
     *
     * @returns {Promise|*}
     */
    value: function log() {
      var _driver;

      return (_driver = this.driver).log.apply(_driver, arguments);
    }

    /**
     * @param {String} kinesisStreamArn
     *
     * @returns {Event|*}
     */

  }, {
    key: 'ensureKinesisDriver',
    value: function ensureKinesisDriver() {
      let kinesisStreamArn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (this._driver && this._driver instanceof _KinesisDriver.KinesisDriver) {
        return this;
      }

      kinesisStreamArn = kinesisStreamArn || this.kernel.config.globals.kinesisEventStream;

      this._driver = new _KinesisDriver.KinesisDriver(kinesisStreamArn, this._driver.context);

      return this;
    }

    /**
     * Booting a certain service
     *
     * @param {Kernel} kernel
     * @param {Function} callback
     */

  }, {
    key: 'boot',
    value: function boot(kernel, callback) {
      const kinesisStreamArn = kernel.config.globals.kinesisEventStream;
      const context = (kernel.isFrontend ? _FrontendContext.FrontendContext : _BackendContext.BackendContext).fromKernel(kernel);

      if (kernel.env !== _deepKernel2.default.PROD_ENVIRONMENT || !kinesisStreamArn) {
        this._driver = new _ConsoleDriver.ConsoleDriver(context);
      } else {
        this._driver = new _KinesisDriver.KinesisDriver(kinesisStreamArn, context);
      }

      callback();
    }
  }, {
    key: 'driver',
    get: function get() {
      return this._driver;
    }
  }]);

  return Event;
}(_deepKernel2.default.ContainerAware);

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/22/15.
 *
 * Bootstrap file loaded by npm as main
 */



var _Event = __webpack_require__(294);

module.exports = _Event.Event;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 3/7/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComplexDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(28);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let ComplexDriver = exports.ComplexDriver = function (_AbstractDriver) {
  _inherits(ComplexDriver, _AbstractDriver);

  /**
   * @param {AbstractDriver|*} drivers
   */
  function ComplexDriver() {
    _classCallCheck(this, ComplexDriver);

    var _this = _possibleConstructorReturn(this, (ComplexDriver.__proto__ || Object.getPrototypeOf(ComplexDriver)).call(this));

    for (var _len = arguments.length, drivers = Array(_len), _key = 0; _key < _len; _key++) {
      drivers[_key] = arguments[_key];
    }

    _this._drivers = drivers;
    return _this;
  }

  /**
   * @returns {AbstractDriver[]|*[]|*}
   */


  _createClass(ComplexDriver, [{
    key: 'add',


    /**
     * @param {AbstractDriver|*} driver
     * @returns {ComplexDriver}
     */
    value: function add(driver) {
      this._drivers.push(driver);

      return this;
    }

    /**
     * @private
     */

  }, {
    key: '_load',
    value: function _load() {
      for (var _len2 = arguments.length, drivers = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        drivers[_key2] = arguments[_key2];
      }

      this._drivers = this._drivers.concat(drivers);

      this._loadDriversQueue([].concat(this._drivers));
    }

    /**
     * @param {AbstractDriver[]|*[]} drivers
     * @param {Error[]|String[]|*[]} errors
     * @private
     */

  }, {
    key: '_loadDriversQueue',
    value: function _loadDriversQueue(drivers) {
      let errors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (drivers.length <= 0) {
        this.fail(`All drivers failed to load: ${errors.join('; ')}`);

        return;
      }

      let driver = drivers.shift();

      driver.onLoadedCb(config => {
        this.loaded(config);
      });

      driver.onFailCb(error => {
        errors.push(error.toString());

        this._loadDriversQueue(drivers, errors);
      });

      driver.load();
    }
  }, {
    key: 'drivers',
    get: function get() {
      return this._drivers;
    }
  }]);

  return ComplexDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * Created by AlexanderC on 3/7/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KernelDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(28);

var _ComplexDriver = __webpack_require__(296);

var _ScopeDriver = __webpack_require__(298);

var _FsDriver = __webpack_require__(126);

var _HttpDriver = __webpack_require__(127);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let KernelDriver = exports.KernelDriver = function (_AbstractDriver) {
  _inherits(KernelDriver, _AbstractDriver);

  /**
   * @param {Kernel|*} kernel
   * @param {String} scopeKey
   * @param {String} configFile
   */
  function KernelDriver(kernel) {
    let scopeKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : KernelDriver.SCOPE_KEY;
    let configFile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : KernelDriver.DEFAULT_CONFIG_FILE;

    _classCallCheck(this, KernelDriver);

    var _this = _possibleConstructorReturn(this, (KernelDriver.__proto__ || Object.getPrototypeOf(KernelDriver)).call(this));

    _this._kernel = kernel;
    _this._scopeKey = scopeKey;
    _this._configFile = configFile;
    return _this;
  }

  /**
   * @returns {String|*}
   */


  _createClass(KernelDriver, [{
    key: '_load',


    /**
     * @param {String} scopeKey
     * @param {String} configFile
     * @private
     */
    value: function _load() {
      let scopeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      let configFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      this._scopeKey = scopeKey || this._scopeKey;
      this._configFile = configFile || this._configFile;

      new _ComplexDriver.ComplexDriver().inherit(this).add(new _ScopeDriver.ScopeDriver(this._scopeKey).setScope(this._globalScope)).add(this._kernel.isBackend ? new _FsDriver.FsDriver(this._configFile) : new _HttpDriver.HttpDriver(this._configFile, true)).load();
    }

    /**
     * @returns {Object}
     * @private
     */

  }, {
    key: 'scopeKey',
    get: function get() {
      return this._scopeKey;
    }

    /**
     * @returns {String|*}
     */

  }, {
    key: 'configFile',
    get: function get() {
      return this._configFile;
    }

    /**
     * @returns {Kernel|*}
     */

  }, {
    key: 'kernel',
    get: function get() {
      return this._kernel;
    }
  }, {
    key: '_globalScope',
    get: function get() {
      return this._kernel.isBackend ? global : window || {};
    }

    /**
     * @returns {String}
     */

  }], [{
    key: 'SCOPE_KEY',
    get: function get() {
      return '__DEEP_CFG__';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'DEFAULT_CONFIG_FILE',
    get: function get() {
      return '_config.json';
    }
  }]);

  return KernelDriver;
}(_AbstractDriver2.AbstractDriver);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * Created by AlexanderC on 3/7/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScopeDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(28);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let ScopeDriver = exports.ScopeDriver = function (_AbstractDriver) {
  _inherits(ScopeDriver, _AbstractDriver);

  /**
   * @param {String} key
   */
  function ScopeDriver(key) {
    _classCallCheck(this, ScopeDriver);

    var _this = _possibleConstructorReturn(this, (ScopeDriver.__proto__ || Object.getPrototypeOf(ScopeDriver)).call(this));

    _this._scope = global || {};
    _this._key = key;
    return _this;
  }

  /**
   * @returns {Object|*}
   */


  _createClass(ScopeDriver, [{
    key: 'setScope',


    /**
     * @param {Object} scope
     * @returns {ScopeDriver}
     */
    value: function setScope(scope) {
      this._scope = scope;

      return this;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'setKey',


    /**
     * @param {String} key
     * @returns {ScopeDriver}
     */
    value: function setKey(key) {
      this._key = key;

      return this;
    }

    /**
     * @param {String} key
     * @private
     */

  }, {
    key: '_load',
    value: function _load() {
      let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      this._key = key || this._key;

      this._scope.hasOwnProperty(this._key) ? this.loaded(this._scope[this._key]) : this.fail(`Unable to load configuration from scope: No such key '${this._key}' exists`);
    }
  }, {
    key: 'scope',
    get: function get() {
      return this._scope;
    }
  }, {
    key: 'key',
    get: function get() {
      return this._key;
    }
  }]);

  return ScopeDriver;
}(_AbstractDriver2.AbstractDriver);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 3/7/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Loader = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _KernelDriver = __webpack_require__(297);

var _AsyncConfig = __webpack_require__(125);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let Loader = exports.Loader = function () {
  /**
   * @param {AbstractDriver|FsDriver|HttpDriver|KernelDriver|ComplexDriver|*} driver
   */
  function Loader() {
    let driver = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, Loader);

    this._driver = driver;
  }

  /**
   * @param {Kernel|*} kernel
   * @returns {Loader}
   */


  _createClass(Loader, [{
    key: 'setDriver',


    /**
     * @param {AbstractDriver|FsDriver|HttpDriver|KernelDriver|ComplexDriver|*} driver
     * @returns {Loader}
     */
    value: function setDriver(driver) {
      this._driver = driver;

      return this;
    }

    /**
     * @param {Function} onLoaded
     * @param {Function} onFail
     */

  }, {
    key: 'load',
    value: function load() {
      let onLoaded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};
      let onFail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};

      onLoaded && this._driver.onLoadedCb(onLoaded);
      onFail && this._driver.onFailCb(onFail);

      this._driver.load();
    }
  }, {
    key: 'driver',


    /**
     * @returns {AbstractDriver|FsDriver|HttpDriver|KernelDriver|ComplexDriver|*}
     */
    get: function get() {
      return this._driver;
    }
  }], [{
    key: 'asyncConfigLoader',
    value: function asyncConfigLoader(kernel) {
      return new Loader(new _AsyncConfig.AsyncConfig(kernel));
    }

    /**
     * @param {Kernel|*} kernel
     * @returns {Loader}
     */

  }, {
    key: 'kernelLoader',
    value: function kernelLoader(kernel) {
      return new Loader(new _KernelDriver.KernelDriver(kernel));
    }
  }]);

  return Loader;
}();

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContainerAware = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Injectable = __webpack_require__(68);

var _InvalidDeepIdentifierException = __webpack_require__(301);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @todo - rename it to AbstractService (ContainerAware doesn't make sense anymore)
 *
 * Container aware instance
 */
let ContainerAware = exports.ContainerAware = function (_MicroserviceInjectab) {
  _inherits(ContainerAware, _MicroserviceInjectab);

  function ContainerAware() {
    _classCallCheck(this, ContainerAware);

    var _this = _possibleConstructorReturn(this, (ContainerAware.__proto__ || Object.getPrototypeOf(ContainerAware)).call(this));

    _this._kernel = null;
    _this._localBackend = false;
    return _this;
  }

  /**
   * @returns {Boolean}
   */


  _createClass(ContainerAware, [{
    key: 'boot',


    /**
     * Booting a certain service
     *
     * @param {Kernel} kernel
     * @param {Function} callback
     */
    value: function boot(kernel, callback) {
      // @todo: override in child service
      callback();
    }

    /**
     * Cleanup a certain service
     */

  }, {
    key: 'cleanup',
    value: function cleanup() {}
    // @todo: override in child service


    /**
     * @param {Object|String} microservice
     * @returns {Injectable}
     */

  }, {
    key: 'bind',
    value: function bind(microservice) {

      // @todo: find more smart way of doing this...
      if (typeof microservice === 'string') {
        microservice = this.kernel.microservice(microservice);
      }

      return _get(ContainerAware.prototype.__proto__ || Object.getPrototypeOf(ContainerAware.prototype), 'bind', this).call(this, microservice);
    }

    /**
     * @param {String} identifier (e.g. @microservice_identifier:resource[:action])
     * @returns {String}
     *
     * @private
     */

  }, {
    key: '_resolveIdentifier',
    value: function _resolveIdentifier(identifier) {
      let regExp = /^@\s*([^:]+)\s*:\s*([^\s]+)\s*$/;

      if (typeof identifier === 'string' && regExp.test(identifier)) {
        let parts = identifier.match(regExp);

        this.bind(parts[1]); // microservice identifier

        return parts[2]; // resource identifier
      } else {
        throw new _InvalidDeepIdentifierException.InvalidDeepIdentifierException(identifier);
      }
    }

    /**
     * @returns {DI|null}
     */

  }, {
    key: 'get',


    /**
     * @param {Array} args
     * @returns {*}
     */
    value: function get() {
      var _container;

      return (_container = this.container).get.apply(_container, arguments);
    }
  }, {
    key: 'localBackend',
    get: function get() {
      return this._localBackend;
    }

    /**
     * @param {Boolean} state
     */
    ,
    set: function set(state) {
      this._localBackend = state;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'name',
    get: function get() {
      return this.constructor.name.toLowerCase();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'service',
    get: function get() {
      return this;
    }
  }, {
    key: 'container',
    get: function get() {
      return this._kernel ? this._kernel.container : null;
    }

    /**
     * @param {Kernel} kernel
     */

  }, {
    key: 'kernel',
    set: function set(kernel) {
      this._kernel = kernel;
    }

    /**
     * @returns {Kernel}
     */
    ,
    get: function get() {
      return this._kernel;
    }
  }]);

  return ContainerAware;
}(_Injectable.Injectable);

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */

/*eslint max-len: 0*/



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidDeepIdentifierException = undefined;

var _Exception2 = __webpack_require__(36);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when trying to parse an invalid deep identifier
 */
let InvalidDeepIdentifierException = exports.InvalidDeepIdentifierException = function (_Exception) {
  _inherits(InvalidDeepIdentifierException, _Exception);

  /**
   * @param {String} identifier
   */
  function InvalidDeepIdentifierException(identifier) {
    _classCallCheck(this, InvalidDeepIdentifierException);

    return _possibleConstructorReturn(this, (InvalidDeepIdentifierException.__proto__ || Object.getPrototypeOf(InvalidDeepIdentifierException)).call(this, `Invalid deep identifier "${identifier}". It should conform to the following format: @microservice_identifier:resource_identifier.`));
  }

  return InvalidDeepIdentifierException;
}(_Exception2.Exception);

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingMicroserviceException = undefined;

var _Exception2 = __webpack_require__(36);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when missing requested microservice
 */
let MissingMicroserviceException = exports.MissingMicroserviceException = function (_Exception) {
  _inherits(MissingMicroserviceException, _Exception);

  /**
   * @param {String} microserviceIdentifier
   */
  function MissingMicroserviceException(microserviceIdentifier) {
    _classCallCheck(this, MissingMicroserviceException);

    return _possibleConstructorReturn(this, (MissingMicroserviceException.__proto__ || Object.getPrototypeOf(MissingMicroserviceException)).call(this, `Missing microservice ${microserviceIdentifier} in Kernel container`));
  }

  return MissingMicroserviceException;
}(_Exception2.Exception);

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Created by mgoria on 5/26/15.
 */

/*eslint no-proto: 0*/



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Kernel = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _deepDi = __webpack_require__(287);

var _deepDi2 = _interopRequireDefault(_deepDi);

var _Exception = __webpack_require__(36);

var _Instance = __webpack_require__(128);

var _MissingMicroserviceException = __webpack_require__(302);

var _Injectable = __webpack_require__(68);

var _ContainerAware = __webpack_require__(300);

var _waitUntil = __webpack_require__(518);

var _waitUntil2 = _interopRequireDefault(_waitUntil);

var _util = __webpack_require__(16);

var _util2 = _interopRequireDefault(_util);

var _Loader = __webpack_require__(299);

var _AsyncConfig = __webpack_require__(125);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Deep application kernel
 */
let Kernel = exports.Kernel = function () {
  /**
   * @param {Array} deepServices
   * @param {String} context
   */
  function Kernel(deepServices, context) {
    _classCallCheck(this, Kernel);

    if (Kernel.ALL_CONTEXTS.indexOf(context) === -1) {
      throw new _Exception.Exception(`Undefined context "${context}"`);
    }

    this._config = {};
    this._services = deepServices;
    this._context = context;
    this._runtimeContext = {};
    this._contextProvider = null;
    this._env = null;
    this._container = new _deepDi2.default();
    this._isLoaded = false;

    this._asyncConfigCache = null;
  }

  /**
   * @returns {Boolean}
   */


  _createClass(Kernel, [{
    key: 'microservice',


    /**
     * @param {String|null} identifier
     * @returns {Microservice|*}
     */
    value: function microservice() {
      let identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (!identifier) {
        identifier = this._config.microserviceIdentifier;
      }

      for (let microserviceKey in this.microservices) {
        if (!this.microservices.hasOwnProperty(microserviceKey)) {
          continue;
        }

        let microservice = this.microservices[microserviceKey];

        if (microservice.identifier === identifier) {
          return microservice;
        }
      }

      throw new _MissingMicroserviceException.MissingMicroserviceException(identifier);
    }

    /**
     *
     * @param {Function} cb
     * @returns {Kernel}
     */

  }, {
    key: 'loadAsyncConfig',
    value: function loadAsyncConfig(cb) {
      if (this._asyncConfigCache) {
        cb(this._asyncConfigCache);

        return this;
      }

      let cache = this.get('cache').system;
      let cacheKey = Kernel.ASYNC_CONFIG_CACHE_KEY;

      cache.has(cacheKey, (error, exists) => {
        this._logErrorIfExistsAndNotProd(error);

        if (exists) {
          cache.get(cacheKey, (error, rawConfig) => {
            this._logErrorIfExistsAndNotProd(error);

            if (rawConfig) {
              try {
                this._asyncConfigCache = JSON.parse(rawConfig);

                cb(this._asyncConfigCache);

                return;
              } catch (error) {
                this._logErrorIfExistsAndNotProd(error);
              }
            }

            this._loadAsyncConfig(cache, cacheKey, cb);
          });

          return;
        }

        this._loadAsyncConfig(cache, cacheKey, cb);
      });

      return this;
    }

    /**
     * @param {Cache|*} cache
     * @param {String} cacheKey
     * @param {Function} cb
     * @private
     */

  }, {
    key: '_loadAsyncConfig',
    value: function _loadAsyncConfig(cache, cacheKey, cb) {
      _Loader.Loader.asyncConfigLoader(this).load(config => {
        cache.set(cacheKey, JSON.stringify(config), 0, error => {
          this._logErrorIfExistsAndNotProd(error);

          this._asyncConfigCache = config;

          cb(config);
        });
      }, error => {
        this._logErrorIfExistsAndNotProd(error);

        cb(null);
      });
    }

    /**
     * @todo: get rid of this?
     *
     * @param {Error|String|*} error
     * @private
     */

  }, {
    key: '_logErrorIfExistsAndNotProd',
    value: function _logErrorIfExistsAndNotProd(error) {
      if (error && this.env !== Kernel.PROD_ENVIRONMENT) {
        console.error(error);
      }
    }

    /**
     * @param {Function} callback
     * @returns {Kernel}
     *
     * @todo: put config file name into a constant?
     */

  }, {
    key: 'bootstrap',
    value: function bootstrap(callback) {
      let rumEvent = {
        service: 'deep-kernel',
        resourceType: 'Lambda',
        eventName: 'KernelLoad',
        time: new Date().getTime()
      };

      // @todo: remove AWS changes the way the things run
      // This is used because of AWS Lambda
      // context sharing after a cold start
      if (this._isLoaded) {
        if (this.isBackend) {
          rumEvent.eventName = 'KernelLoadFromCache';
          rumEvent.resourceId = this.runtimeContext.invokedFunctionArn;
          rumEvent.payload = this.config;

          this.get('log').rumLog(rumEvent);
        }

        callback(this);

        return this;
      }

      _Loader.Loader.kernelLoader(this).load(config => {
        this.load(config, kernel => {
          if (this.isBackend) {
            // Log event 'start' time
            rumEvent.resourceId = this.runtimeContext.invokedFunctionArn;

            this.get('log').rumLog(rumEvent);

            // log event 'stop' time
            let event = _util2.default._extend({}, rumEvent);
            event.payload = kernel.config;
            event.time = new Date().getTime();

            this.get('log').rumLog(event);
          }

          callback(kernel);
        });
      }, error => {
        throw new _Exception.Exception(`Error loading kernel: ${error}`);
      });

      return this;
    }

    /**
     * @returns {Kernel}
     */

  }, {
    key: 'kernelCleanup',
    value: function kernelCleanup() {
      let serviceNames = Object.keys(this.services);

      for (let serviceName of serviceNames) {
        let serviceInstance = this.get(serviceName.toLowerCase());

        serviceInstance.cleanup();
      }

      return this;
    }

    /**
     * Loads all Kernel dependencies
     *
     * @param {Object} config
     * @param {Function} callback
     *
     * @returns {Kernel}
     */

  }, {
    key: 'load',
    value: function load(config, callback) {

      // @todo: remove AWS changes the way the things run
      // This is used because of AWS Lambda
      // context sharing after a cold start
      if (this._isLoaded) {
        callback(this);
        return this;
      }

      let originalCallback = callback;

      callback = kernel => {
        this._isLoaded = true;

        originalCallback(kernel);
      };

      this._config = config;

      this._buildContainer(callback);

      return this;
    }

    /**
     * @param {*} args
     * @returns {*}
     */

  }, {
    key: 'get',
    value: function get() {
      var _container;

      return (_container = this._container).get.apply(_container, arguments);
    }

    /**
     * @param {Array} args
     * @returns {Boolean}
     */

  }, {
    key: 'has',
    value: function has() {
      var _container2;

      return (_container2 = this._container).has.apply(_container2, arguments);
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'getMsParam',


    /**
     * @param {String} msIdentifier
     * @param {String} paramPath
     * @param {*} defaultValue
     *
     * @returns {*}
     */
    value: function getMsParam(msIdentifier, paramPath) {
      let defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (!this._config.microservices.hasOwnProperty(msIdentifier)) {
        throw new Error(`Unknown microservice identifier "${msIdentifier}".`);
      }

      return this._findParam(this._config.microservices[msIdentifier].parameters, paramPath, defaultValue);
    }

    /**
     * @param {String} paramPath
     * @param {*} defaultValue
     *
     * @returns {*}
     */

  }, {
    key: 'getParam',
    value: function getParam(paramPath) {
      let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return this._findParam(this._config.globals, paramPath, defaultValue);
    }

    /**
     * @param {*} params
     * @param {String} paramPath
     * @param {*} defaultValue
     *
     * @returns {*}
     *
     * @private
     */

  }, {
    key: '_findParam',
    value: function _findParam(params, paramPath, defaultValue) {
      let paramParts = paramPath.split('|').map(x => x.trim());
      let result = params;

      for (let i = 0; i < paramParts.length; i++) {
        let param = paramParts[i];

        if (!result || typeof result !== 'object' && !result.hasOwnProperty(param)) {
          return defaultValue;
        }

        result = result[param];
      }

      return result;
    }

    /**
     * @returns {Microservice[]}
     */

  }, {
    key: '_buildContainer',


    /**
     * Loads all parameters and services into DI container
     *
     * @param {Function} callback
     */
    value: function _buildContainer(callback) {
      this._env = this._config.env;

      this._container.addParameter(Kernel.KERNEL, this);

      this._container.addParameter(Kernel.CONTEXT, {
        environment: this._env,
        isFrontend: this.isFrontend,
        isBackend: this.isBackend
      });

      this._container.addParameter(Kernel.MICROSERVICES, _Instance.Instance.createVector(this._config));

      this._container.addParameter(Kernel.CONFIG, this._config);

      this._container.localBackend = _deepCore2.default.IS_DEV_SERVER;

      let bootingServices = 0;

      for (let serviceKey in this._services) {
        if (!this._services.hasOwnProperty(serviceKey)) {
          continue;
        }

        let serviceInstance = new this._services[serviceKey]();

        bootingServices++;

        serviceInstance.kernel = this;
        serviceInstance.localBackend = _deepCore2.default.IS_DEV_SERVER;
        serviceInstance.boot(this, () => {
          bootingServices--;
        });

        this._container.addService(serviceInstance.name, Kernel._createProxyIfNeeded(serviceInstance));
      }

      (0, _waitUntil2.default)().interval(10).times(999999) // @todo: get rid of magic here...
      .condition(cb => {
        process.nextTick(() => {
          cb(bootingServices <= 0);
        });
      }).done(() => {
        callback(this);
      });
    }

    /**
     * @param {ContainerAware|Object} serviceObj
     * @returns {ContainerAware|Proxy|Object}
     * @private
     */

  }, {
    key: 'isLoaded',
    get: function get() {
      return this._isLoaded;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'runtimeContext',
    get: function get() {
      return this._runtimeContext;
    }

    /**
     * @param {Object} runtimeContext
     */
    ,
    set: function set(runtimeContext) {
      this._runtimeContext = runtimeContext;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'contextProvider',
    get: function get() {
      return this._contextProvider;
    }

    /**
     * @param {Object} contextProvider
     */
    ,
    set: function set(contextProvider) {
      this._contextProvider = contextProvider;
    }

    /**
     * @returns {Microservice|*}
     */

  }, {
    key: 'rootMicroservice',
    get: function get() {
      for (let microserviceKey in this.microservices) {
        if (!this.microservices.hasOwnProperty(microserviceKey)) {
          continue;
        }

        let microservice = this.microservices[microserviceKey];

        if (microservice.isRoot) {
          return microservice;
        }
      }

      // this should never happen...
      throw new _MissingMicroserviceException.MissingMicroserviceException('ROOT');
    }

    /**
     * @todo: add advanced criteria for account microservice
     * @returns {Microservice|null}
     */

  }, {
    key: 'accountMicroservice',
    get: function get() {
      for (let microserviceKey in this.microservices) {
        if (!this.microservices.hasOwnProperty(microserviceKey)) {
          continue;
        }

        let microservice = this.microservices[microserviceKey];

        if (microservice.identifier === Kernel.ACCOUNT_MICROSERVICE_IDENTIFIER) {
          return microservice;
        }
      }

      return null;
    }
  }, {
    key: 'services',
    get: function get() {
      return this._services;
    }

    /**
     * @returns {DI}
     */

  }, {
    key: 'container',
    get: function get() {
      return this._container;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isRumEnabled',
    get: function get() {
      return this.has('log') && this.get('log').isRumEnabled();
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isFrontend',
    get: function get() {
      return this._context === Kernel.FRONTEND_CONTEXT;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isLocalhost',
    get: function get() {
      return this.isFrontend && ['localhost', '127.0.0.1', '0.0.0.0', '::1'].indexOf(window.location.hostname) !== -1;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isBackend',
    get: function get() {
      return this._context === Kernel.BACKEND_CONTEXT;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'buildId',
    get: function get() {
      return this._config.deployId || '';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'context',
    get: function get() {
      return this._context;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'env',
    get: function get() {
      return this._env;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'config',
    get: function get() {

      // @todo - create a class DeepConfig or smth, that will hold global config and expose shortcuts to different options
      return this._config;
    }
  }, {
    key: 'microservices',
    get: function get() {
      return this._container.get(Kernel.MICROSERVICES);
    }
  }], [{
    key: '_createProxyIfNeeded',
    value: function _createProxyIfNeeded(serviceObj) {
      if (serviceObj === serviceObj.service) {
        return serviceObj;
      } else if (!serviceObj.hasOwnProperty('apply')) {
        return serviceObj.service;
      }

      let proxy = new Proxy(serviceObj, serviceObj.service);

      proxy.__proto__ = this.__proto__;
      proxy.constructor.prototype = this.constructor.prototype;

      return proxy;
    }

    /**
     * @returns {MicroserviceInjectable}
     */

  }, {
    key: 'MicroserviceInjectable',
    get: function get() {
      return _Injectable.Injectable;
    }

    /**
     * @returns {ContainerAware}
     */

  }, {
    key: 'ContainerAware',
    get: function get() {
      return _ContainerAware.ContainerAware;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'FRONTEND_BOOTSTRAP_VECTOR',
    get: function get() {
      return 'deep_frontend_bootstrap_vector';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'CONFIG',
    get: function get() {
      return 'deep_config';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'KERNEL',
    get: function get() {
      return 'deep_kernel';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'CONTEXT',
    get: function get() {
      return 'deep_context';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'MICROSERVICES',
    get: function get() {
      return 'deep_microservices';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'FRONTEND_CONTEXT',
    get: function get() {
      return 'frontend-ctx';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'BACKEND_CONTEXT',
    get: function get() {
      return 'backend-ctx';
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'ALL_CONTEXTS',
    get: function get() {
      return [Kernel.FRONTEND_CONTEXT, Kernel.BACKEND_CONTEXT];
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'PROD_ENVIRONMENT',
    get: function get() {
      return 'prod';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'STAGE_ENVIRONMENT',
    get: function get() {
      return 'stage';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'TEST_ENVIRONMENT',
    get: function get() {
      return 'test';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'DEV_ENVIRONMENT',
    get: function get() {
      return 'dev';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ASYNC_CONFIG_FILE',
    get: function get() {
      return _AsyncConfig.AsyncConfig.DEFAULT_CONFIG_FILE;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ASYNC_CONFIG_CACHE_KEY',
    get: function get() {
      return 'asyncConfig';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ACCOUNT_MICROSERVICE_IDENTIFIER',
    get: function get() {
      return 'deep-account';
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'ALL_ENVIRONMENTS',
    get: function get() {
      return [Kernel.PROD_ENVIRONMENT, Kernel.STAGE_ENVIRONMENT, Kernel.TEST_ENVIRONMENT, Kernel.DEV_ENVIRONMENT];
    }
  }]);

  return Kernel;
}();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingWorkingMicroserviceException = undefined;

var _Exception2 = __webpack_require__(36);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when no working microservice set
 */
let MissingWorkingMicroserviceException = exports.MissingWorkingMicroserviceException = function (_Exception) {
  _inherits(MissingWorkingMicroserviceException, _Exception);

  function MissingWorkingMicroserviceException() {
    _classCallCheck(this, MissingWorkingMicroserviceException);

    return _possibleConstructorReturn(this, (MissingWorkingMicroserviceException.__proto__ || Object.getPrototypeOf(MissingWorkingMicroserviceException)).call(this, 'Missing working microservice from Kernel.MicroserviceInjectable'));
  }

  return MissingWorkingMicroserviceException;
}(_Exception2.Exception);

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/15/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConsoleDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(37);

var _Log = __webpack_require__(48);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Console native logging
 */
let ConsoleDriver = exports.ConsoleDriver = function (_AbstractDriver) {
  _inherits(ConsoleDriver, _AbstractDriver);

  function ConsoleDriver() {
    _classCallCheck(this, ConsoleDriver);

    var _this = _possibleConstructorReturn(this, (ConsoleDriver.__proto__ || Object.getPrototypeOf(ConsoleDriver)).call(this));

    _this._console = ConsoleDriver._buildConsole();
    return _this;
  }

  /**
   * @returns {Object}
   * @private
   */


  _createClass(ConsoleDriver, [{
    key: 'log',


    /**
     * @param {String} msg
     * @param {String} level
     * @param {*} context
     */
    value: function log(msg, level, context) {
      let nativeMethod = 'log';

      switch (level) {
        case _Log.Log.EMERGENCY:
        case _Log.Log.ERROR:
        case _Log.Log.CRITICAL:
          nativeMethod = 'error';
          break;
        case _Log.Log.ALERT:
        case _Log.Log.WARNING:
          nativeMethod = 'warn';
          break;
        case _Log.Log.NOTICE:
          nativeMethod = 'log';
          break;
        case _Log.Log.INFO:
          nativeMethod = 'info';
          break;
        case _Log.Log.DEBUG:
          nativeMethod = 'debug';
          break;
      }

      // Fixes issue with node env
      let logMethod = this._console[nativeMethod] || this._console.log;
      logMethod.call(ConsoleDriver.nativeConsole, _AbstractDriver2.AbstractDriver.timeString, msg);

      // @todo: figure out a better way of dumping context
      if (context) {

        // Fixes issue with node env
        let debugMethod = this._console.debug || this._console.log;
        debugMethod.call(ConsoleDriver.nativeConsole, '[DEBUG]', context);
      }
    }

    /**
     * @param {Boolean} logTime
     * @param {Boolean} coloredOutput
     * @param {Boolean} turnOff
     * @returns {ConsoleDriver}
     */

  }, {
    key: 'overrideNative',
    value: function overrideNative() {
      let logTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      var _this2 = this;

      let coloredOutput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      let turnOff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      let nativeConsole = ConsoleDriver.nativeConsole;

      for (let i in ConsoleDriver.METHODS_TO_OVERRIDE) {
        if (!ConsoleDriver.METHODS_TO_OVERRIDE.hasOwnProperty(i)) {
          continue;
        }

        let method = ConsoleDriver.METHODS_TO_OVERRIDE[i];

        if (!ConsoleDriver._isLogLevelEnabled(method)) {
          nativeConsole[method] = () => {};
          continue;
        }

        // Fixes issue with node env
        this._console[method] = this._console[method] || this._console.log;

        nativeConsole[method] = function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (!turnOff) {
            var _console;

            let nativeArgs = args;

            if (coloredOutput) {
              nativeArgs = ConsoleDriver._colorOutput(method, nativeArgs);
            }

            if (logTime) {
              nativeArgs.unshift(_AbstractDriver2.AbstractDriver.timeString);
            }

            (_console = _this2._console)[method].apply(_console, _toConsumableArray(nativeArgs));
          }
        };
      }

      return this;
    }

    /**
     * @param {String} method
     * @returns {Boolean}
     */

  }], [{
    key: '_buildConsole',
    value: function _buildConsole() {
      let nativeConsole = ConsoleDriver.nativeConsole;
      let console = {};

      for (let i in ConsoleDriver.METHODS_TO_OVERRIDE) {
        if (!ConsoleDriver.METHODS_TO_OVERRIDE.hasOwnProperty(i)) {
          continue;
        }

        let method = ConsoleDriver.METHODS_TO_OVERRIDE[i];

        // Fixes issue with node env
        if (method === 'debug' && typeof nativeConsole[method] === 'undefined') {
          method = 'log';
        }

        console[method] = nativeConsole[method];

        console[method].bind(nativeConsole);
      }

      return console;
    }
  }, {
    key: '_isLogLevelEnabled',
    value: function _isLogLevelEnabled(method) {
      return ConsoleDriver.ERROR_LEVELS_MAPPING[ConsoleDriver.ENV_LOG_LEVEL].indexOf(method) !== -1;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: '_colorOutput',


    /**
     * @param {String} type
     * @param {Array} args
     * @returns {Array}
     * @private
     */
    value: function _colorOutput(type, args) {
      let color = null;

      switch (type.toLowerCase()) {
        case 'error':
          color = 31; // red
          break;
        case 'warn':
          color = 33; // yellow
          break;
        default:
          color = 32; // green
      }

      args.unshift(`\x1b[${color}m`);
      args.push('\x1b[0m');

      return args;
    }

    /**
     * @example `export DEEP_LOG_LEVEL=error|warn|debug|info|silent`
     * @returns {String}
     */

  }, {
    key: 'ERROR_LEVELS_MAPPING',
    get: function get() {
      return {
        silent: ['log'],
        error: ['error', 'log'],
        warn: ['warn', 'log', 'error'],
        info: ['warn', 'log', 'error', 'info'],
        debug: ['debug', 'warn', 'log', 'info', 'error']
      };
    }
  }, {
    key: 'ENV_LOG_LEVEL',
    get: function get() {
      let envLevel = typeof window === 'undefined' ? __webpack_require__.i({"AWS_SERVICES":"lambda,cognitoidentity,cognitosync,sqs","NODE_ENV":"production"}).DEEP_LOG_LEVEL : window.DEEP_LOG_LEVEL;

      envLevel = envLevel || 'info';
      envLevel = envLevel === 'undefined' ? 'info' : envLevel; // o_O

      return envLevel.toLowerCase();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'nativeConsole',
    get: function get() {
      return typeof window === 'undefined' ? console : window.console;
    }

    /**
     * @returns {String[]}
     */

  }, {
    key: 'METHODS_TO_OVERRIDE',
    get: function get() {
      return ['error', 'log', 'warn', 'info', 'debug'];
    }
  }]);

  return ConsoleDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 03/03/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FailedToDeleteSqsMessagesException = undefined;

var _LogDriverException2 = __webpack_require__(20);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when failed to delete sqs messages
 */
let FailedToDeleteSqsMessagesException = exports.FailedToDeleteSqsMessagesException = function (_LogDriverException) {
  _inherits(FailedToDeleteSqsMessagesException, _LogDriverException);

  /**
   * @param {String} sqsQueueUrl
   * @param {Object} error
   */
  function FailedToDeleteSqsMessagesException(sqsQueueUrl, error) {
    _classCallCheck(this, FailedToDeleteSqsMessagesException);

    return _possibleConstructorReturn(this, (FailedToDeleteSqsMessagesException.__proto__ || Object.getPrototypeOf(FailedToDeleteSqsMessagesException)).call(this, `Failed to delete batch messages from "${sqsQueueUrl}" SQS queue. ${error}`));
  }

  return FailedToDeleteSqsMessagesException;
}(_LogDriverException2.LogDriverException);

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 03/03/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FailedToReceiveSqsMessageException = undefined;

var _LogDriverException2 = __webpack_require__(20);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when failed to receive sqs messages
 */
let FailedToReceiveSqsMessageException = exports.FailedToReceiveSqsMessageException = function (_LogDriverException) {
  _inherits(FailedToReceiveSqsMessageException, _LogDriverException);

  /**
   * @param {String} sqsQueueUrl
   * @param {Object} error
   */
  function FailedToReceiveSqsMessageException(sqsQueueUrl, error) {
    _classCallCheck(this, FailedToReceiveSqsMessageException);

    return _possibleConstructorReturn(this, (FailedToReceiveSqsMessageException.__proto__ || Object.getPrototypeOf(FailedToReceiveSqsMessageException)).call(this, `Failed to receive messages from "${sqsQueueUrl}" SQS queue. ${error}`));
  }

  return FailedToReceiveSqsMessageException;
}(_LogDriverException2.LogDriverException);

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 1/20/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FailedToSendBatchSqsMessageException = undefined;

var _LogDriverException2 = __webpack_require__(20);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when failed to send sqs message
 */
let FailedToSendBatchSqsMessageException = exports.FailedToSendBatchSqsMessageException = function (_LogDriverException) {
  _inherits(FailedToSendBatchSqsMessageException, _LogDriverException);

  /**
   * @param {String} sqsQueueUrl
   * @param {Object} error
   */
  function FailedToSendBatchSqsMessageException(sqsQueueUrl, error) {
    _classCallCheck(this, FailedToSendBatchSqsMessageException);

    return _possibleConstructorReturn(this, (FailedToSendBatchSqsMessageException.__proto__ || Object.getPrototypeOf(FailedToSendBatchSqsMessageException)).call(this, `Failed to send batch messages to ${sqsQueueUrl} SQS queue. ${error}`));
  }

  return FailedToSendBatchSqsMessageException;
}(_LogDriverException2.LogDriverException);

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 1/20/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FailedToSendSqsMessageException = undefined;

var _LogDriverException2 = __webpack_require__(20);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when failed to send sqs message
 */
let FailedToSendSqsMessageException = exports.FailedToSendSqsMessageException = function (_LogDriverException) {
  _inherits(FailedToSendSqsMessageException, _LogDriverException);

  /**
   * @param {String} sqsQueueUrl
   * @param {String} message
   * @param {Object} error
   */
  function FailedToSendSqsMessageException(sqsQueueUrl, message, error) {
    _classCallCheck(this, FailedToSendSqsMessageException);

    return _possibleConstructorReturn(this, (FailedToSendSqsMessageException.__proto__ || Object.getPrototypeOf(FailedToSendSqsMessageException)).call(this, `Failed to send "${message}" message to ${sqsQueueUrl} SQS queue. ${error}`));
  }

  return FailedToSendSqsMessageException;
}(_LogDriverException2.LogDriverException);

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 1/21/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidSqsQueueUrlException = undefined;

var _LogDriverException2 = __webpack_require__(20);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when SQS queue url is invalid
 */
let InvalidSqsQueueUrlException = exports.InvalidSqsQueueUrlException = function (_LogDriverException) {
  _inherits(InvalidSqsQueueUrlException, _LogDriverException);

  /**
   * @param {String} sqsQueueUrl
   * @param {Object|String} error
   */
  function InvalidSqsQueueUrlException(sqsQueueUrl, error) {
    _classCallCheck(this, InvalidSqsQueueUrlException);

    return _possibleConstructorReturn(this, (InvalidSqsQueueUrlException.__proto__ || Object.getPrototypeOf(InvalidSqsQueueUrlException)).call(this, `Invalid SQS queue url "${sqsQueueUrl}". ${error}`));
  }

  return InvalidSqsQueueUrlException;
}(_LogDriverException2.LogDriverException);

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 1/29/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RumEventValidationException = undefined;

var _LogDriverException2 = __webpack_require__(20);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when RUM event is invalid
 */
let RumEventValidationException = exports.RumEventValidationException = function (_LogDriverException) {
  _inherits(RumEventValidationException, _LogDriverException);

  /**
   * @param {String} eventLevel
   * @param {Object} error
   */
  function RumEventValidationException(eventLevel, error) {
    _classCallCheck(this, RumEventValidationException);

    return _possibleConstructorReturn(this, (RumEventValidationException.__proto__ || Object.getPrototypeOf(RumEventValidationException)).call(this, `Failed to validate "${eventLevel}" event: ${error}`));
  }

  return RumEventValidationException;
}(_LogDriverException2.LogDriverException);

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 02/01/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnknownRumEventException = undefined;

var _LogDriverException2 = __webpack_require__(20);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when failed to 'guess' RUM event 'type'
 */
let UnknownRumEventException = exports.UnknownRumEventException = function (_LogDriverException) {
  _inherits(UnknownRumEventException, _LogDriverException);

  /**
   * @param {Object} event
   */
  function UnknownRumEventException(event) {
    _classCallCheck(this, UnknownRumEventException);

    return _possibleConstructorReturn(this, (UnknownRumEventException.__proto__ || Object.getPrototypeOf(UnknownRumEventException)).call(this, `Failed to 'guess' event type for ${JSON.stringify(event)} event.`));
  }

  return UnknownRumEventException;
}(_LogDriverException2.LogDriverException);

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 4/19/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventFactory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FrameworkEvent = __webpack_require__(314);

var _FrontendEvent = __webpack_require__(315);

var _AbstractEvent = __webpack_require__(69);

var _UnknownRumEventException = __webpack_require__(312);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Event Factory
 */
let EventFactory = exports.EventFactory = function () {
  function EventFactory() {
    _classCallCheck(this, EventFactory);
  }

  _createClass(EventFactory, null, [{
    key: 'create',

    /**
     * @param {Object} kernel
     * @param {Object} rawData
     * @returns {EventClass}
     */
    value: function create(kernel, rawData) {
      let EventClass = null;

      // @note - For the time being event type is guessed by event.service
      // (it'll be changed once we'll have other types of events)
      if (rawData.service && _AbstractEvent.AbstractEvent.SERVICES.indexOf(rawData.service) !== -1) {
        EventClass = _FrameworkEvent.FrameworkEvent;
      } else if (rawData.engine) {
        EventClass = _FrontendEvent.FrontendEvent;
      } else {
        throw new _UnknownRumEventException.UnknownRumEventException(rawData);
      }

      return new EventClass(kernel, rawData);
    }
  }]);

  return EventFactory;
}();

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 1/29/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FrameworkEvent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _joi = __webpack_require__(21);

var _joi2 = _interopRequireDefault(_joi);

var _AbstractEvent2 = __webpack_require__(69);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Framework event level
 */
let FrameworkEvent = exports.FrameworkEvent = function (_AbstractEvent) {
  _inherits(FrameworkEvent, _AbstractEvent);

  /**
   * @param {Array} args
   */
  function FrameworkEvent() {
    var _ref;

    _classCallCheck(this, FrameworkEvent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = FrameworkEvent.__proto__ || Object.getPrototypeOf(FrameworkEvent)).call.apply(_ref, [this].concat(args)));
  }

  /**
   * @returns {String}
   */


  _createClass(FrameworkEvent, [{
    key: 'getEventLevel',
    value: function getEventLevel() {
      return _AbstractEvent2.AbstractEvent.FRAMEWORK_EVENT_LEVEL;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this._data;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'getValidationSchema',
    value: function getValidationSchema() {
      return _joi2.default.object().keys({
        depthLevel: _joi2.default.number().integer().optional(),
        eventLevel: _joi2.default.string().required().allow([_AbstractEvent2.AbstractEvent.FRAMEWORK_EVENT_LEVEL]),
        service: _joi2.default.string().required().allow(_AbstractEvent2.AbstractEvent.SERVICES),
        resourceType: _joi2.default.string().required().allow(_AbstractEvent2.AbstractEvent.RESOURCE_TYPES),
        resourceId: _joi2.default.string().required(),
        eventName: _joi2.default.string().required(),
        eventId: _joi2.default.string().alphanum().optional(),
        time: _joi2.default.number().integer().required(),
        context: _joi2.default.string().required().allow(_AbstractEvent2.AbstractEvent.CONTEXTS),
        memoryUsage: _joi2.default.object().unknown().optional().default({}),
        payload: _joi2.default.object().unknown().optional().default({}),
        metadata: _joi2.default.object().unknown().optional().default({}),
        environment: _joi2.default.object().unknown().optional().default({}),
        requestId: _joi2.default.string(),
        mainRequestId: _joi2.default.string().optional(),
        identityId: _joi2.default.string().required()
      });
    }
  }]);

  return FrameworkEvent;
}(_AbstractEvent2.AbstractEvent);

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi <ccovali@mitocgroup.com> on 4/19/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FrontendEvent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _joi = __webpack_require__(21);

var _joi2 = _interopRequireDefault(_joi);

var _AbstractEvent2 = __webpack_require__(69);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Frontend Event
 */
let FrontendEvent = exports.FrontendEvent = function (_AbstractEvent) {
  _inherits(FrontendEvent, _AbstractEvent);

  /**
   * @param {String} args
   */
  function FrontendEvent() {
    var _ref;

    _classCallCheck(this, FrontendEvent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = FrontendEvent.__proto__ || Object.getPrototypeOf(FrontendEvent)).call.apply(_ref, [this].concat(args)));
  }

  /**
   * @returns {String}
   */


  _createClass(FrontendEvent, [{
    key: 'getEventLevel',
    value: function getEventLevel() {
      return _AbstractEvent2.AbstractEvent.FRONTEND_EVENT_LEVEL;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this._data;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'getValidationSchema',
    value: function getValidationSchema() {
      return _joi2.default.object().keys({
        eventLevel: _joi2.default.string().required().allow([_AbstractEvent2.AbstractEvent.FRONTEND_EVENT_LEVEL]),
        engine: _joi2.default.string().required().allow(FrontendEvent.ENGINES),
        time: _joi2.default.number().integer().required(),
        context: _joi2.default.string().required().allow([_AbstractEvent2.AbstractEvent.FRONTEND_CONTEXT]),
        environment: _joi2.default.object().unknown().optional().default({}),
        identityId: _joi2.default.string().required(),
        memoryUsage: _joi2.default.object().unknown().optional().default({}),
        metadata: _joi2.default.object().unknown().optional().default({}),
        location: _joi2.default.string().optional()
      });
    }

    /**
     * @param {Object} event
     * @returns {Object}
     * @private
     */

  }, {
    key: '_enrichWithContextData',
    value: function _enrichWithContextData(event) {
      event = _get(FrontendEvent.prototype.__proto__ || Object.getPrototypeOf(FrontendEvent.prototype), '_enrichWithContextData', this).call(this, event);
      event.location = typeof window !== 'undefined' ? `${window.location.pathname}${window.location.hash}` : null;

      return event;
    }

    /**
     * @returns {String[]}
     */

  }], [{
    key: 'ENGINES',
    get: function get() {
      return ['angular', 'vanilla'];
    }
  }]);

  return FrontendEvent;
}(_AbstractEvent2.AbstractEvent);

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/15/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RavenBrowserDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(37);

var _Log = __webpack_require__(48);

var _raven = __webpack_require__(162);

var _raven2 = _interopRequireDefault(_raven);

var _url = __webpack_require__(63);

var _url2 = _interopRequireDefault(_url);

var _util = __webpack_require__(16);

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Raven/Sentry logging for browser
 *
 * @todo replace it on compile time rather than runtime!
 */
let RavenBrowserDriver = exports.RavenBrowserDriver = function (_AbstractDriver) {
  _inherits(RavenBrowserDriver, _AbstractDriver);

  /**
   * @param {String} dsn
   * @param {Object} options
   */
  function RavenBrowserDriver(dsn) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, RavenBrowserDriver);

    var _this = _possibleConstructorReturn(this, (RavenBrowserDriver.__proto__ || Object.getPrototypeOf(RavenBrowserDriver)).call(this));

    options = _util2.default._extend(options, {
      maxMessageLength: 256
    });

    _raven2.default.config(RavenBrowserDriver._prepareDsn(dsn), options).install();
    return _this;
  }

  /**
   * @todo: tmp hook, remove it before persisting frontend config
   *
   * Remove password from url to not expose it into browser
   *
   * @param {String} dsn
   * @returns {String}
   */


  _createClass(RavenBrowserDriver, [{
    key: 'log',


    /**
     * @param {String} msg
     * @param {String} level
     * @param {*} context
     */
    value: function log(msg, level, context) {
      let nativeLevel = RavenBrowserDriver._mapLevel(level);

      _raven2.default.captureMessage(msg, {
        level: nativeLevel,
        extra: context,
        tags: {
          originalLevel: level
        }
      });
    }

    /**
     * @param {String} level
     * @returns {string}
     * @private
     */

  }], [{
    key: '_prepareDsn',
    value: function _prepareDsn(dsn) {
      let parsedDsn = _url2.default.parse(dsn);
      parsedDsn.auth = parsedDsn.auth.split(':')[0];

      return _url2.default.format(parsedDsn);
    }
  }, {
    key: '_mapLevel',
    value: function _mapLevel(level) {
      let nativeLevel = 'info';

      switch (level) {
        case _Log.Log.EMERGENCY:
        case _Log.Log.CRITICAL:
          nativeLevel = 'fatal';
          break;
        case _Log.Log.ALERT:
        case _Log.Log.WARNING:
        case _Log.Log.NOTICE:
          nativeLevel = 'warning';
          break;
        case _Log.Log.ERROR:
          nativeLevel = 'error';
          break;
        case _Log.Log.INFO:
          nativeLevel = 'info';
          break;
        case _Log.Log.DEBUG:
          nativeLevel = 'debug';
          break;
      }

      return nativeLevel;
    }
  }]);

  return RavenBrowserDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/15/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RavenDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractDriver2 = __webpack_require__(37);

var _Log = __webpack_require__(48);

var _raven = __webpack_require__(162);

var _raven2 = _interopRequireDefault(_raven);

var _util = __webpack_require__(16);

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Raven/Sentry logging
 */
let RavenDriver = exports.RavenDriver = function (_AbstractDriver) {
  _inherits(RavenDriver, _AbstractDriver);

  /**
   * @param {String} dsn
   * @param {Object} options
   */
  function RavenDriver(dsn) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, RavenDriver);

    var _this = _possibleConstructorReturn(this, (RavenDriver.__proto__ || Object.getPrototypeOf(RavenDriver)).call(this));

    options = _util2.default._extend(options, {
      maxMessageLength: 256
    });

    _this._clients = {};

    for (let levelKey in _Log.Log.LEVELS) {
      if (!_Log.Log.LEVELS.hasOwnProperty(levelKey)) {
        continue;
      }

      let nativeLevel = RavenDriver._mapLevel(_Log.Log.LEVELS[levelKey]);

      options.level = nativeLevel;

      _this._clients[nativeLevel] = new _raven2.default.Client(dsn, options);
    }
    return _this;
  }

  /**
   * @returns {Raven.Client[]}
   */


  _createClass(RavenDriver, [{
    key: 'log',


    /**
     * @param {String} msg
     * @param {String} level
     * @param {*} context
     */
    value: function log(msg, level, context) {
      let nativeLevel = RavenDriver._mapLevel(level);

      this._clients[nativeLevel].captureMessage(msg, {
        extra: context,
        tags: {
          originalLevel: level
        }
      });
    }

    /**
     * @param {String} level
     * @returns {string}
     * @private
     */

  }, {
    key: 'clients',
    get: function get() {
      return this._clients;
    }
  }], [{
    key: '_mapLevel',
    value: function _mapLevel(level) {
      let nativeLevel = 'info';

      switch (level) {
        case _Log.Log.EMERGENCY:
        case _Log.Log.CRITICAL:
          nativeLevel = 'fatal';
          break;
        case _Log.Log.ALERT:
        case _Log.Log.WARNING:
        case _Log.Log.NOTICE:
          nativeLevel = 'warning';
          break;
        case _Log.Log.ERROR:
          nativeLevel = 'error';
          break;
        case _Log.Log.INFO:
          nativeLevel = 'info';
          break;
        case _Log.Log.DEBUG:
          nativeLevel = 'debug';
          break;
      }

      return nativeLevel;
    }
  }]);

  return RavenDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 1/19/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RumSqsDriver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _awsSdk = __webpack_require__(15);

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _AbstractDriver2 = __webpack_require__(37);

var _FailedToSendSqsMessageException = __webpack_require__(309);

var _FailedToSendBatchSqsMessageException = __webpack_require__(308);

var _FailedToReceiveSqsMessageException = __webpack_require__(307);

var _FailedToDeleteSqsMessagesException = __webpack_require__(306);

var _InvalidSqsQueueUrlException = __webpack_require__(310);

var _RumEventValidationException = __webpack_require__(311);

var _EventFactory = __webpack_require__(313);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * SQS logging driver
 */
let RumSqsDriver = exports.RumSqsDriver = function (_AbstractDriver) {
  _inherits(RumSqsDriver, _AbstractDriver);

  /**
   * @param {String} queueUrl
   * @param {Object} kernel
   * @param {Boolean} enabled
   */
  function RumSqsDriver(queueUrl, kernel) {
    let enabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, RumSqsDriver);

    var _this = _possibleConstructorReturn(this, (RumSqsDriver.__proto__ || Object.getPrototypeOf(RumSqsDriver)).call(this));

    _this._queueUrl = queueUrl;
    _this._kernel = kernel;
    _this._enabled = enabled;

    _this._messagesBatch = [];
    _this._runningBatches = 0;
    _this._sqs = null;
    return _this;
  }

  /**
   * @returns {Number}
   */


  _createClass(RumSqsDriver, [{
    key: 'log',


    /**
     * @param {Object} message
     * @param {Function} callback
     */
    value: function log(message, callback) {
      if (!this.enabled) {
        callback(null, null);
        return;
      }

      let event = _EventFactory.EventFactory.create(this.kernel, message);

      // @todo - check message size, max is 256 KB (262,144 bytes)
      if (!event.isValid()) {
        callback(new _RumEventValidationException.RumEventValidationException(event.getEventLevel(), event.validationError), null);
        return;
      }

      if (this.kernel.isBackend) {
        if (this._messagesBatch.length < RumSqsDriver.BATCH_SIZE) {
          this._messagesBatch.push(event);
        }

        if (this._messagesBatch.length === RumSqsDriver.BATCH_SIZE) {
          let batch = this._messagesBatch.slice();
          this._messagesBatch = [];

          this._sendMessageBatch(batch, callback);
        } else {
          callback(null, null);
        }
      } else {
        this._sendMessage(event, callback);
      }
    }

    /**
     * @param {Function} callback
     */

  }, {
    key: 'flush',
    value: function flush(callback) {
      if (!this.enabled || this._messagesBatch.length === 0 && this._runningBatches === 0) {
        callback(null, null);
        return;
      }

      this._sendMessageBatch(this._messagesBatch, (error, data) => {
        this._messagesBatch = [];

        if (this._runningBatches > 0) {
          // wait for all batches to be pushed into SQS
          var intervalID = setInterval(() => {
            if (this._runningBatches === 0) {
              clearInterval(intervalID);
              return callback(error, data);
            }
          }, 50);
        } else {
          callback(error, data);
        }
      });
    }

    /**
     * @param {AbstractEvent} event
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_sendMessage',
    value: function _sendMessage(event, callback) {
      let params = {
        MessageBody: JSON.stringify(event),
        QueueUrl: this.queueUrl
      };

      this.sqs.sendMessage(params, (error, data) => {
        if (error) {
          error = new _FailedToSendSqsMessageException.FailedToSendSqsMessageException(params.QueueUrl, params.MessageBody, error);
        }

        callback(error, data);
      });
    }

    /**
     * @param {Array} messages
     * @param {Function} callback
     * @private
     */

  }, {
    key: '_sendMessageBatch',
    value: function _sendMessageBatch(messages, callback) {
      if (messages.length === 0) {
        callback(null, null);
        return;
      }

      this._runningBatches++;

      let entries = [];
      messages.forEach((event, index) => {
        event = JSON.stringify(event);
        let id = `${_AbstractDriver2.AbstractDriver._md5(event)}-${new Date().getTime()}-${index}`;

        entries.push({
          Id: id,
          MessageBody: event
        });
      });

      var params = {
        QueueUrl: this.queueUrl,
        Entries: entries
      };

      this.sqs.sendMessageBatch(params, (error, data) => {
        this._runningBatches--;

        if (error) {
          error = new _FailedToSendBatchSqsMessageException.FailedToSendBatchSqsMessageException(params.QueueUrl, error);
        }

        callback(error, data);
      });
    }

    /**
     * @param {Function} callback
     */

  }, {
    key: 'receiveMessages',
    value: function receiveMessages(callback) {
      let params = {
        QueueUrl: this.queueUrl,
        MaxNumberOfMessages: 10,
        VisibilityTimeout: 20,
        WaitTimeSeconds: 0
      };

      this.sqs.receiveMessage(params, (error, data) => {
        if (error) {
          error = new _FailedToReceiveSqsMessageException.FailedToReceiveSqsMessageException(params.QueueUrl, error);
        }

        callback(error, data);
      });
    }

    /**
     * @param {Array} messages
     * @param {Function} callback
     */

  }, {
    key: 'deleteMessages',
    value: function deleteMessages(messages, callback) {
      if (messages.length === 0) {
        callback(null, null);
        return;
      }

      let params = {
        QueueUrl: this.queueUrl,
        Entries: []
      };

      messages.forEach(message => {
        params.Entries.push({
          Id: message.MessageId,
          ReceiptHandle: message.ReceiptHandle
        });
      });

      this.sqs.deleteMessageBatch(params, (error, data) => {
        if (error) {
          error = new _FailedToDeleteSqsMessagesException.FailedToDeleteSqsMessagesException(params.QueueUrl, error);
        }

        callback(error, data);
      });
    }

    /**
     * @param {Function} callback
     * @param {Object[]} additionalAttributes
     */

  }, {
    key: 'getQueueAttributes',
    value: function getQueueAttributes(callback) {
      let additionalAttributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      let defaultAttributes = ['ApproximateNumberOfMessages', 'ApproximateNumberOfMessagesNotVisible', 'ApproximateNumberOfMessagesDelayed'];

      let attributes = defaultAttributes.concat(additionalAttributes.filter(attr => defaultAttributes.indexOf(attr) === -1));

      let params = {
        QueueUrl: this.queueUrl,
        AttributeNames: attributes
      };

      this.sqs.getQueueAttributes(params, callback);
    }

    /**
     * @param {String} queueUrl
     * @returns {String}
     */

  }, {
    key: 'queueUrl',


    /**
     * @returns {String}
     */
    get: function get() {
      return this._queueUrl;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'kernel',
    get: function get() {
      return this._kernel;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'enabled',
    get: function get() {
      return this._enabled;
    }

    /**
     * @returns {AWS.SQS}
     */

  }, {
    key: 'sqs',
    get: function get() {
      if (!this._sqs) {
        this._sqs = new _awsSdk2.default.SQS({
          region: RumSqsDriver.getRegionFromSqsQueueUrl(this.queueUrl)
        });
      }

      return this._sqs;
    }
  }], [{
    key: 'getRegionFromSqsQueueUrl',
    value: function getRegionFromSqsQueueUrl(queueUrl) {
      let regionParts = queueUrl.match(/\.([^\.]+)\.amazonaws\.com\/.*/i);

      if (!regionParts || regionParts.length === 0) {
        throw new _InvalidSqsQueueUrlException.InvalidSqsQueueUrlException(queueUrl, 'Unable to extract AWS region.');
      }

      return regionParts[1];
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'BATCH_SIZE',
    get: function get() {
      return 10;
    }
  }, {
    key: 'ES_LOGS_INDEX',
    get: function get() {
      return 'rum';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'ES_LOGS_TYPE',
    get: function get() {
      return 'logs';
    }
  }]);

  return RumSqsDriver;
}(_AbstractDriver2.AbstractDriver);

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Exception = undefined;

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when any exception occurs
 */
let Exception = exports.Exception = function (_Core$Exception$Excep) {
  _inherits(Exception, _Core$Exception$Excep);

  /**
   * @param {Array} args
   */
  function Exception() {
    var _ref;

    _classCallCheck(this, Exception);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = Exception.__proto__ || Object.getPrototypeOf(Exception)).call.apply(_ref, [this].concat(args)));
  }

  return Exception;
}(_deepCore2.default.Exception.Exception);

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/22/15.
 *
 * Bootstrap file loaded by npm as main
 */



var _Log = __webpack_require__(48);

module.exports = _Log.Log;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingResourceException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when requested resource not found
 */
let MissingResourceException = exports.MissingResourceException = function (_Exception) {
  _inherits(MissingResourceException, _Exception);

  /**
   * @param {String} microserviceIdentifier
   * @param {String} resourceIdentifier
   */
  function MissingResourceException(microserviceIdentifier, resourceIdentifier) {
    _classCallCheck(this, MissingResourceException);

    return _possibleConstructorReturn(this, (MissingResourceException.__proto__ || Object.getPrototypeOf(MissingResourceException)).call(this, `Missing resource ${resourceIdentifier} in ${microserviceIdentifier}`));
  }

  return MissingResourceException;
}(_Exception2.Exception);

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resource = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepKernel = __webpack_require__(18);

var _deepKernel2 = _interopRequireDefault(_deepKernel);

var _Instance = __webpack_require__(336);

var _MissingResourceException = __webpack_require__(321);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Bundle resource
 */
let Resource = exports.Resource = function (_Kernel$ContainerAwar) {
  _inherits(Resource, _Kernel$ContainerAwar);

  /**
   * @param {Object} resources
   */
  function Resource() {
    let resources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Resource);

    var _this = _possibleConstructorReturn(this, (Resource.__proto__ || Object.getPrototypeOf(Resource)).call(this));

    _this._resources = resources;
    _this._actionsConfig = {};

    _this._baseUrl = null;
    return _this;
  }

  /**
   * @param {String} url
   * @returns {Resource}
   */


  _createClass(Resource, [{
    key: 'baseUrl',
    value: function baseUrl(url) {
      this._baseUrl = url;

      return this;
    }

    /**
     * @param {String} sourceId
     * @returns {Object|null}
     */

  }, {
    key: 'getActionConfig',
    value: function getActionConfig(sourceId) {
      return this._actionsConfig.hasOwnProperty(sourceId) ? this._actionsConfig[sourceId] : null;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'has',


    /**
     * @param {String} identifier
     * @returns {Boolean}
     */
    value: function has(identifier) {
      return this._resources[this.microservice.identifier].hasOwnProperty(identifier);
    }

    /**
     * @param {String} identifier (e.g @microservice_identifier:resource_name[:action_name])
     * @returns {ResourceInstance}
     */

  }, {
    key: 'get',
    value: function get(identifier) {
      let parsedIdentifier = this._parseResourceIdentifier(this._resolveIdentifier(identifier) // it also binds 'working' microservice to this instance
      );

      let resourceIdentifier = parsedIdentifier.resource;
      let actionIdentifier = parsedIdentifier.action;

      let microserviceIdentifier = this.microservice.identifier;

      if (!this.has(resourceIdentifier)) {
        throw new _MissingResourceException.MissingResourceException(microserviceIdentifier, resourceIdentifier);
      }

      let resource = this._resources[microserviceIdentifier][resourceIdentifier];

      // inject dependencies (@todo - inject kernel instance instead)
      resource.cache = this.container.get('cache');
      resource.security = this.container.get('security');
      resource.validation = this.container.get('validation');
      resource.log = this.container.get('log');
      resource.contextProvider = this.kernel.contextProvider;
      resource.baseUrl = this._baseUrl;

      return actionIdentifier ? resource.action(actionIdentifier) : resource;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: '_parseResourceIdentifier',


    /**
     * @param {String} identifier
     * @returns {Object}
     * @private
     */
    value: function _parseResourceIdentifier(identifier) {
      let parts = identifier.split(':').map(part => {
        return part.trim();
      });

      return {
        resource: parts.shift(),
        action: parts.length > 0 ? parts.join(':') : null
      };
    }

    /**
     * Booting a certain service
     *
     * @param {Kernel} kernel
     * @param {Function} callback
     */

  }, {
    key: 'boot',
    value: function boot(kernel, callback) {
      let resourcesVector = [];

      for (let microserviceKey in kernel.microservices) {
        if (!kernel.microservices.hasOwnProperty(microserviceKey)) {
          continue;
        }

        let microservice = kernel.microservices[microserviceKey];

        this._resources[microservice.identifier] = {};

        for (let resourceName in microservice.rawResources) {
          if (!microservice.rawResources.hasOwnProperty(resourceName)) {
            continue;
          }

          let resource = new _Instance.Instance(resourceName, microservice);

          resource.localBackend = this.localBackend;
          resource.isBackend = kernel.isBackend;

          this._resources[microservice.identifier][resourceName] = resource;

          resourcesVector.push(resource);

          let actionsConfig = resource.actionsConfig;

          for (let actionSourceId in actionsConfig) {
            if (!actionsConfig.hasOwnProperty(actionSourceId)) {
              continue;
            }

            this._actionsConfig[actionSourceId] = actionsConfig[actionSourceId];
          }
        }
      }

      callback();
    }
  }, {
    key: 'actionsConfig',
    get: function get() {
      return this._actionsConfig;
    }
  }, {
    key: 'list',
    get: function get() {
      let map = {};

      for (let microservice in this._resources) {
        if (!this._resources.hasOwnProperty(microservice)) {
          continue;
        }

        map[microservice] = Object.keys(this._resources[microservice]);
      }

      return map;
    }
  }]);

  return Resource;
}(_deepKernel2.default.ContainerAware);

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/03/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsyncCallNotAvailableException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let AsyncCallNotAvailableException = exports.AsyncCallNotAvailableException = function (_Exception) {
  _inherits(AsyncCallNotAvailableException, _Exception);

  /**
   * @param {String} type
   */
  function AsyncCallNotAvailableException(type) {
    _classCallCheck(this, AsyncCallNotAvailableException);

    return _possibleConstructorReturn(this, (AsyncCallNotAvailableException.__proto__ || Object.getPrototypeOf(AsyncCallNotAvailableException)).call(this, `Async calls are available for lambdas only (${type} type provided)`));
  }

  return AsyncCallNotAvailableException;
}(_Exception2.Exception);

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 8/21/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CachedRequestException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let CachedRequestException = exports.CachedRequestException = function (_Exception) {
  _inherits(CachedRequestException, _Exception);

  /**
   * @param {String} exception
   */
  function CachedRequestException(exception) {
    _classCallCheck(this, CachedRequestException);

    return _possibleConstructorReturn(this, (CachedRequestException.__proto__ || Object.getPrototypeOf(CachedRequestException)).call(this, `Error while working with cached response: ${exception}`));
  }

  return CachedRequestException;
}(_Exception2.Exception);

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 12/03/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LambdaParamsCompatibilityException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let LambdaParamsCompatibilityException = exports.LambdaParamsCompatibilityException = function (_Exception) {
  _inherits(LambdaParamsCompatibilityException, _Exception);

  /**
   * @param {Object} params
   * @param {String} message
   */
  function LambdaParamsCompatibilityException(params) {
    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    _classCallCheck(this, LambdaParamsCompatibilityException);

    return _possibleConstructorReturn(this, (LambdaParamsCompatibilityException.__proto__ || Object.getPrototypeOf(LambdaParamsCompatibilityException)).call(this, `Lambda parameters "${JSON.stringify(params)}" are incompatible. ${message}`));
  }

  return LambdaParamsCompatibilityException;
}(_Exception2.Exception);

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/12/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadCredentialsException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let LoadCredentialsException = exports.LoadCredentialsException = function (_Exception) {
  _inherits(LoadCredentialsException, _Exception);

  /**
   * @param {String} exception
   */
  function LoadCredentialsException(exception) {
    _classCallCheck(this, LoadCredentialsException);

    return _possibleConstructorReturn(this, (LoadCredentialsException.__proto__ || Object.getPrototypeOf(LoadCredentialsException)).call(this, `Error on loading security credentials in deep-resource -> request. ${exception}`));
  }

  return LoadCredentialsException;
}(_Exception2.Exception);

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 8/04/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingActionException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when requested resource action not found
 */
let MissingActionException = exports.MissingActionException = function (_Exception) {
  _inherits(MissingActionException, _Exception);

  /**
   * @param {String} resourceName
   * @param {String} actionName
   */
  function MissingActionException(resourceName, actionName) {
    _classCallCheck(this, MissingActionException);

    return _possibleConstructorReturn(this, (MissingActionException.__proto__ || Object.getPrototypeOf(MissingActionException)).call(this, `Missing action ${actionName} in ${resourceName} resource.`));
  }

  return MissingActionException;
}(_Exception2.Exception);

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingCacheImplementationException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let MissingCacheImplementationException = exports.MissingCacheImplementationException = function (_Exception) {
  _inherits(MissingCacheImplementationException, _Exception);

  function MissingCacheImplementationException() {
    _classCallCheck(this, MissingCacheImplementationException);

    return _possibleConstructorReturn(this, (MissingCacheImplementationException.__proto__ || Object.getPrototypeOf(MissingCacheImplementationException)).call(this, 'Missing cache implementation in Request object'));
  }

  return MissingCacheImplementationException;
}(_Exception2.Exception);

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/03/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingLambdaLocalPathException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let MissingLambdaLocalPathException = exports.MissingLambdaLocalPathException = function (_Exception) {
  _inherits(MissingLambdaLocalPathException, _Exception);

  /**
   * @param {String} lambdaArn
   */
  function MissingLambdaLocalPathException(lambdaArn) {
    _classCallCheck(this, MissingLambdaLocalPathException);

    return _possibleConstructorReturn(this, (MissingLambdaLocalPathException.__proto__ || Object.getPrototypeOf(MissingLambdaLocalPathException)).call(this, `Missing local path for Lambda ${lambdaArn}`));
  }

  return MissingLambdaLocalPathException;
}(_Exception2.Exception);

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/03/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingLocalLambdaExecWrapperException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let MissingLocalLambdaExecWrapperException = exports.MissingLocalLambdaExecWrapperException = function (_Exception) {
  _inherits(MissingLocalLambdaExecWrapperException, _Exception);

  /**
   * @param {String} execWrapperKey
   */
  function MissingLocalLambdaExecWrapperException(execWrapperKey) {
    _classCallCheck(this, MissingLocalLambdaExecWrapperException);

    return _possibleConstructorReturn(this, (MissingLocalLambdaExecWrapperException.__proto__ || Object.getPrototypeOf(MissingLocalLambdaExecWrapperException)).call(this, `Missing local lambda execution wrapper in global.${execWrapperKey}`));
  }

  return MissingLocalLambdaExecWrapperException;
}(_Exception2.Exception);

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/03/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingSecurityServiceException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let MissingSecurityServiceException = exports.MissingSecurityServiceException = function (_Exception) {
  _inherits(MissingSecurityServiceException, _Exception);

  function MissingSecurityServiceException() {
    _classCallCheck(this, MissingSecurityServiceException);

    return _possibleConstructorReturn(this, (MissingSecurityServiceException.__proto__ || Object.getPrototypeOf(MissingSecurityServiceException)).call(this, 'Missing security service in Request instance.'));
  }

  return MissingSecurityServiceException;
}(_Exception2.Exception);

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/03/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotAuthenticatedException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let NotAuthenticatedException = exports.NotAuthenticatedException = function (_Exception) {
  _inherits(NotAuthenticatedException, _Exception);

  function NotAuthenticatedException() {
    _classCallCheck(this, NotAuthenticatedException);

    return _possibleConstructorReturn(this, (NotAuthenticatedException.__proto__ || Object.getPrototypeOf(NotAuthenticatedException)).call(this, 'Missing authentication token! You may want to authenticate the user first(ex. security.anonymousLogin()).'));
  }

  return NotAuthenticatedException;
}(_Exception2.Exception);

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 3/2/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SourceNotAvailableException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let SourceNotAvailableException = exports.SourceNotAvailableException = function (_Exception) {
  _inherits(SourceNotAvailableException, _Exception);

  /**
   * @param {String} type
   * @param {Action|*} action
   */
  function SourceNotAvailableException(type, action) {
    _classCallCheck(this, SourceNotAvailableException);

    return _possibleConstructorReturn(this, (SourceNotAvailableException.__proto__ || Object.getPrototypeOf(SourceNotAvailableException)).call(this, `The ${type} source is not available for the resource '${action.fullName}'`));
  }

  return SourceNotAvailableException;
}(_Exception2.Exception);

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnknownMethodException = undefined;

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when requested method is missing from allowed vector
 */
let UnknownMethodException = exports.UnknownMethodException = function (_Exception) {
  _inherits(UnknownMethodException, _Exception);

  /**
   * @param {String} requestedMethod
   * @param {Array} availableMethods
   */
  function UnknownMethodException(requestedMethod, availableMethods) {
    _classCallCheck(this, UnknownMethodException);

    let availableList = availableMethods.join(', ');

    return _possibleConstructorReturn(this, (UnknownMethodException.__proto__ || Object.getPrototypeOf(UnknownMethodException)).call(this, `Requested method ${requestedMethod} must be one of ${availableList}`));
  }

  return UnknownMethodException;
}(_Exception2.Exception);

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 1/25/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationError = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Exception2 = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let ValidationError = exports.ValidationError = function (_Exception) {
  _inherits(ValidationError, _Exception);

  /**
   * @param {String} annotation
   * @param {{message:*,path:*,type:*,context:*}[]} validationErrors
   */
  function ValidationError(annotation, validationErrors) {
    _classCallCheck(this, ValidationError);

    var _this = _possibleConstructorReturn(this, (ValidationError.__proto__ || Object.getPrototypeOf(ValidationError)).call(this, `Payload validation failed: ${annotation}`));

    _this._validationErrors = validationErrors;
    return _this;
  }

  /**
   * @returns {{message:*,path:*,type:*,context:*}[]}
   */


  _createClass(ValidationError, [{
    key: 'validationErrors',
    get: function get() {
      return this._validationErrors;
    }
  }]);

  return ValidationError;
}(_Exception2.Exception);

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Instance = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MissingActionException = __webpack_require__(327);

var _Action = __webpack_require__(70);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Resource instance
 */
let Instance = exports.Instance = function () {
  /**
   * @param {String} name
   * @param {Object} microservice
   */
  function Instance(name, microservice) {
    _classCallCheck(this, Instance);

    this._name = name;
    this._microservice = microservice;
    this._rawActions = microservice.rawResources[name];
    this._actions = null;
    this._localBackend = false;
    this._isBackend = false;
    this._cache = null;
    this._security = null;
    this._validation = null;
    this._contextProvider = null;
    this._log = null;
    this._baseUrl = null;

    this._fillActions();
  }

  /**
   * @param {String} url
   */


  _createClass(Instance, [{
    key: '_fillActions',


    /**
     * @private
     */
    value: function _fillActions() {
      this._actions = {};

      for (let actionName in this._rawActions) {
        if (!this._rawActions.hasOwnProperty(actionName)) {
          continue;
        }

        let actionMetadata = this._rawActions[actionName];

        let actionInstance = new _Action.Action(this, actionName, actionMetadata.type, actionMetadata.methods, actionMetadata.source, actionMetadata.region, actionMetadata.forceUserIdentity, actionMetadata.apiCache, actionMetadata.scope, actionMetadata.api);

        if (actionMetadata.validationSchema) {
          actionInstance.validationSchemaName = actionMetadata.validationSchema;
        }

        actionInstance.baseUrl = this._baseUrl;

        this._actions[actionName] = actionInstance;
      }
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'has',


    /**
     * @param {String} actionName
     * @returns {boolean}
     */
    value: function has(actionName) {
      return this.actions.hasOwnProperty(actionName);
    }

    /**
     * @param {String} actionName
     * @returns {Action}
     */

  }, {
    key: 'action',
    value: function action(actionName) {
      if (!this.has(actionName)) {
        throw new _MissingActionException.MissingActionException(this.name, actionName);
      }

      var action = this.actions[actionName];

      action.baseUrl = this._baseUrl;

      return action;
    }

    /**
     * @param {String} actionName
     * @param {*} args
     * @returns {Action}
     */

  }, {
    key: 'request',
    value: function request(actionName) {
      var _action;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return (_action = this.action(actionName)).request.apply(_action, args);
    }
  }, {
    key: 'baseUrl',
    set: function set(url) {
      this._baseUrl = url;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'actionsConfig',
    get: function get() {
      let config = {};

      for (let actionName in this.actions) {
        if (!this.actions.hasOwnProperty(actionName)) {
          continue;
        }

        let action = this.actions[actionName];

        config[action.sourceId] = {
          resource: this._name,
          name: action.name,
          type: action.type,
          methods: action.methods,
          source: action.source,
          region: action.region,
          forceUserIdentity: action.forceUserIdentity,
          validationSchema: action.validationSchemaName
        };
      }

      return config;
    }
  }, {
    key: 'microservice',
    get: function get() {
      return this._microservice;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'validation',
    get: function get() {
      return this._validation;
    }

    /**
     * @param {Object} validation
     */
    ,
    set: function set(validation) {
      this._validation = validation;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'security',
    get: function get() {
      return this._security;
    }

    /**
     * @param {Object} security
     */
    ,
    set: function set(security) {
      this._security = security;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'name',
    get: function get() {
      return this._name;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'cache',
    get: function get() {
      return this._cache;
    }

    /**
     * @param {Object} cache
     */
    ,
    set: function set(cache) {
      this._cache = cache;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'log',
    get: function get() {
      return this._log;
    }

    /**
     * @param {Object} log
     */
    ,
    set: function set(log) {
      this._log = log;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'localBackend',
    get: function get() {
      return this._localBackend;
    }

    /**
     * @param {Boolean} state
     */
    ,
    set: function set(state) {
      this._localBackend = state;
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'isBackend',
    get: function get() {
      return this._isBackend;
    }

    /**
     * @param {Boolean} state
     */
    ,
    set: function set(state) {
      this._isBackend = state;
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'actions',
    get: function get() {
      return this._actions;
    }

    /**
     * @param {ContextProvider} contextProvider
     */

  }, {
    key: 'contextProvider',
    set: function set(contextProvider) {
      this._contextProvider = contextProvider;
    }

    /**
     * @returns {ContextProvider}
     */
    ,
    get: function get() {
      return this._contextProvider;
    }
  }]);

  return Instance;
}();

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * Created by AlexanderC on 6/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalRequest = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _SuperagentResponse = __webpack_require__(130);

var _LambdaResponse = __webpack_require__(71);

var _Request2 = __webpack_require__(129);

var _Action = __webpack_require__(70);

var _superagent = __webpack_require__(164);

var _superagent2 = _interopRequireDefault(_superagent);

var _MissingLocalLambdaExecWrapperException = __webpack_require__(330);

var _MissingLambdaLocalPathException = __webpack_require__(329);

var _urlParse = __webpack_require__(93);

var _urlParse2 = _interopRequireDefault(_urlParse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Resource request instance
 */
let LocalRequest = exports.LocalRequest = function (_Request) {
  _inherits(LocalRequest, _Request);

  function LocalRequest() {
    var _ref;

    _classCallCheck(this, LocalRequest);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = LocalRequest.__proto__ || Object.getPrototypeOf(LocalRequest)).call.apply(_ref, [this].concat(args)));
  }

  /**
   * @returns {String}
   * @private
   */


  _createClass(LocalRequest, [{
    key: '_buildEndpointUrl',
    value: function _buildEndpointUrl() {
      let endpoint = this._async ? LocalRequest.LOCAL_LAMBDA_ASYNC_ENDPOINT : LocalRequest.LOCAL_LAMBDA_ENDPOINT;

      if (this.baseUrl) {
        let urlParts = (0, _urlParse2.default)(this.baseUrl);
        let protocol = urlParts.protocol || 'http:';
        let baseUrl = `${protocol}//${urlParts.host}`;

        endpoint = baseUrl + endpoint;
      }

      return endpoint;
    }

    /**
     * @param {Function} callback
     * @returns {LocalRequest|*}
     */

  }, {
    key: '_send',
    value: function _send() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};

      let actionType = this._action.type;
      let securityService = this._action.resource.security;

      if (actionType === _Action.Action.LAMBDA) {
        let data = {
          lambda: this._action.source.original,
          payload: this.payload,
          method: this._method,
          context: {
            identity: {
              cognitoIdentityPoolId: securityService.token ? securityService.token.identityPoolId : null,
              cognitoIdentityId: securityService.token ? securityService.token.identityId : null,
              isAnonymous: securityService.token ? securityService.token.isAnonymous : true
            }
          }
        };

        if (typeof window === 'undefined') {
          if (!global.hasOwnProperty(LocalRequest.LAMBDA_EXEC_WRAPPER_KEY)) {
            throw new _MissingLocalLambdaExecWrapperException.MissingLocalLambdaExecWrapperException(LocalRequest.LAMBDA_EXEC_WRAPPER_KEY);
          }

          let localPath = this._action.source._localPath;

          if (!localPath) {
            throw new _MissingLambdaLocalPathException.MissingLambdaLocalPathException(data.lambda);
          }

          let execWrapper = global[LocalRequest.LAMBDA_EXEC_WRAPPER_KEY];

          execWrapper[this._async ? 'invokeAsync' : 'invoke'](localPath, data, (error, result) => {
            let resultData = {};

            if (this._async) {
              resultData.Status = 202;
            } else {
              resultData.Payload = result;
            }

            callback(new _LambdaResponse.LambdaResponse(this, error ? null : resultData, error));
          });
        } else {
          _superagent2.default.post(this._buildEndpointUrl()).send(data).end((error, response) => {
            callback(new _SuperagentResponse.SuperagentResponse(this, response, error));
          });
        }
      } else {
        var _constructor$useNativ;

        return (_constructor$useNativ = this.constructor.useNative())._send.apply(_constructor$useNativ, arguments);
      }

      return this;
    }

    /**
     * @returns {String}
     */

  }], [{
    key: 'LOCAL_LAMBDA_ENDPOINT',
    get: function get() {
      return '/_/lambda';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'LOCAL_LAMBDA_ASYNC_ENDPOINT',
    get: function get() {
      return '/_/lambda-async';
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'LAMBDA_EXEC_WRAPPER_KEY',
    get: function get() {
      return '_deep_lambda_exec_';
    }
  }]);

  return LocalRequest;
}(_Request2.Request);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 11/14/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RetryManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _StrategyFactory = __webpack_require__(75);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let RetryManager = exports.RetryManager = function () {
  /**
   * @param {String[]|Function[]} strategies
   */
  function RetryManager(strategies) {
    _classCallCheck(this, RetryManager);

    this._strategies = strategies.map(_StrategyFactory.StrategyFactory.create);
    this._count = 0;
  }

  /**
   * @param {String|Function} strategy
   * @param {Object[]} args
   * @returns {RetryManager}
   */


  _createClass(RetryManager, [{
    key: 'addStrategy',
    value: function addStrategy(strategy) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      this._strategies.push(_StrategyFactory.StrategyFactory.create.apply(_StrategyFactory.StrategyFactory, [strategy].concat(args)));
      return this;
    }

    /**
     * @param {Response} response
     * @returns {Boolean}
     */

  }, {
    key: 'isRetryable',
    value: function isRetryable(response) {
      return this._strategies.reduce((decideBool, strategy) => {
        return decideBool || strategy.decide(response);
      }, false) && --this._count > 0;
    }

    /**
     * @param {Number} count
     */

  }, {
    key: 'count',
    set: function set(count) {
      this._count = count;
    }

    /**
     * @returns {Number}
     */
    ,
    get: function get() {
      return this._count;
    }
  }]);

  return RetryManager;
}();

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./AbstractStrategy": 49,
	"./AbstractStrategy.js": 49,
	"./CustomStrategy": 73,
	"./CustomStrategy.js": 73,
	"./InternalErrorStrategy": 74,
	"./InternalErrorStrategy.js": 74,
	"./StrategyFactory": 75,
	"./StrategyFactory.js": 75
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 339;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/22/15.
 *
 * Bootstrap file loaded by npm as main
 */



var _Resource = __webpack_require__(322);

module.exports = _Resource.Resource;

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 11/21/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CredentialsManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TokenManager = __webpack_require__(133);

var _awsSdk = __webpack_require__(15);

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _IdentityProviderTokenExpiredException = __webpack_require__(76);

var _AuthException = __webpack_require__(342);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let CredentialsManager = exports.CredentialsManager = function () {
  /**
   * @param {Token} token
   */
  function CredentialsManager(token) {
    _classCallCheck(this, CredentialsManager);

    this._token = token;
    this._systemCredentials = null;
    this._rolesCredentials = {};
  }

  /**
   * @returns {Token}
   */


  _createClass(CredentialsManager, [{
    key: 'validCredentials',


    /**
     * @param {Object} credentials
     * @returns {boolean}
     */
    value: function validCredentials(credentials) {
      return credentials && this.getCredentialsExpireDateTime(credentials) > new Date();
    }

    /**
     * @param {Object} credentials
     * @returns {Date}
     */

  }, {
    key: 'getCredentialsExpireDateTime',
    value: function getCredentialsExpireDateTime(credentials) {
      let dateTime = null;

      if (credentials && credentials.hasOwnProperty('expireTime')) {
        dateTime = credentials.expireTime instanceof Date ? credentials.expireTime : new Date(credentials.expireTime);
      }

      return dateTime;
    }

    /**
     * @param {Object|null} role
     * @param {Boolean} refreshOnExpired
     * @returns {Promise}
     */

  }, {
    key: 'getCredentials',
    value: function getCredentials() {
      let role = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      let refreshOnExpired = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      let credentials = role ? this._rolesCredentials[this.roleSessionKey(role)] : this._systemCredentials;
      credentials = credentials || this._createCognitoIdentityCredentials(role);

      if (!this.validCredentials(credentials) && refreshOnExpired) {
        return this.refreshIdentityProviderIfNeeded().then(() => {
          credentials = this._createCognitoIdentityCredentials(role);

          if (role) {
            this._rolesCredentials[this.roleSessionKey(role)] = credentials;
          } else {
            this.systemCredentials = credentials;
          }

          return this._refreshCredentials(credentials);
        });
      }

      return Promise.resolve(credentials);
    }

    /**
     * @returns {Promise}
     */

  }, {
    key: 'refreshIdentityProviderIfNeeded',
    value: function refreshIdentityProviderIfNeeded() {
      return this.identityProvider && !this.identityProvider.isTokenValid() ? this.identityProvider.refresh() : Promise.resolve();
    }

    /**
     * @param {AWS.CognitoIdentityCredentials} credentials
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_refreshCredentials',
    value: function _refreshCredentials(credentials) {
      if (!(credentials instanceof _awsSdk2.default.CognitoIdentityCredentials || credentials instanceof _awsSdk2.default.Credentials)) {
        let error = new _AuthException.AuthException('Invalid credentials instance. Passed credentials must be an instance of AWS.CognitoIdentityCredentials.');

        return Promise.reject(error);
      }

      if (this.identityProvider && !this.identityProvider.isTokenValid()) {
        let error = new _IdentityProviderTokenExpiredException.IdentityProviderTokenExpiredException(this.identityProvider.domain, this.identityProvider.tokenExpirationTime);

        return Promise.reject(error);
      }

      return new Promise((resolve, reject) => {
        credentials.refresh(error => {
          if (error) {
            return reject(new _AuthException.AuthException(error));
          }

          return resolve(credentials);
        });
      });
    }

    /**
     * @param {Object|null} role
     * @returns {*}
     */

  }, {
    key: 'roleSessionKey',
    value: function roleSessionKey(role) {
      let suffix = role ? role.Id : 'default';

      return `${_TokenManager.TokenManager.RECORD_NAME}-${suffix}`;
    }

    /**
     * @param {Object} role
     * @returns {AWS.CognitoIdentityCredentials|*}
     * @private
     */

  }, {
    key: '_createCognitoIdentityCredentials',
    value: function _createCognitoIdentityCredentials() {
      let role = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      let cognitoParams = {
        IdentityPoolId: this.identityPoolId
      };

      if (this.identityProvider) {
        cognitoParams.Logins = {};
        cognitoParams.Logins[this.identityProvider.domain] = this.identityProvider.userToken;
        cognitoParams.LoginId = this.identityProvider.userId;

        if (role) {
          cognitoParams.RoleArn = role.IamRole.Arn;
          cognitoParams.RoleSessionName = this.roleSessionKey(role);
        }
      }

      let credentials = new _awsSdk2.default.CognitoIdentityCredentials(cognitoParams);

      // do not replace with arrow function, `this` context should not be overwritten
      credentials.toJSON = function () {
        return {
          expired: this.expired,
          expireTime: this.expireTime,
          accessKeyId: this.accessKeyId,
          secretAccessKey: this.secretAccessKey,
          sessionToken: this.sessionToken
        };
      };

      return credentials;
    }

    /**
     * @returns {CredentialsManager}
     */

  }, {
    key: 'clearCache',
    value: function clearCache() {
      if (!(this._systemCredentials instanceof _awsSdk2.default.CognitoIdentityCredentials)) {
        // cognitoSyncManager failes to wipe data if credentials are a instanceof AWS.Credentials
        this.systemCredentials = this._createCognitoIdentityCredentials();
      }

      this._systemCredentials.clearCachedId();

      for (let key in this._rolesCredentials) {
        if (this._rolesCredentials.hasOwnProperty(key) && this._rolesCredentials[key] instanceof _awsSdk2.default.CognitoIdentityCredentials) {
          this._rolesCredentials[key].clearCachedId();
        }
      }

      return this;
    }

    /**
     * @param {AWS.CognitoIdentityCredentials|AWS.Credentials|*} systemCredentials
     */

  }, {
    key: 'overwriteAWSCredentials',


    /**
     * @param {AWS.CognitoIdentityCredentials|AWS.Credentials|*} credentials
     * @returns {CredentialsManager}
     */
    value: function overwriteAWSCredentials(credentials) {
      _awsSdk2.default.config.credentials = credentials;

      // tokenManager will create a new instance of CognitoSyncClient
      if (this._token) {
        this._token._sts.credentials = credentials;

        if (this._token._tokenManager) {
          this._token._tokenManager._cognitoSyncClient = null;
        }
      }

      return this;
    }
  }, {
    key: 'token',
    get: function get() {
      return this._token;
    }

    /**
     * @returns {Number}
     */

  }, {
    key: 'identityPoolId',
    get: function get() {
      return this.token._identityPoolId;
    }

    /**
     * @returns {IdentityProvider}
     */

  }, {
    key: 'identityProvider',
    get: function get() {
      return this.token.identityProvider;
    }

    /**
     * @returns {Array}
     */

  }, {
    key: 'rolesCredentials',
    get: function get() {
      return this._rolesCredentials;
    }

    /**
     * @param {Array} rolesCredentials
     */
    ,
    set: function set(rolesCredentials) {
      this._rolesCredentials = rolesCredentials;
    }
  }, {
    key: 'systemCredentials',
    set: function set(systemCredentials) {
      this._systemCredentials = systemCredentials;

      if (!this.token.lambdaContext) {
        this.overwriteAWSCredentials(systemCredentials);
      }
    }

    /**
     * @returns {AWS.CognitoIdentityCredentials|AWS.Credentials|*}
     */
    ,
    get: function get() {
      return this._systemCredentials;
    }
  }]);

  return CredentialsManager;
}();

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 6/30/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when auth error occurs
 */
let AuthException = exports.AuthException = function (_Exception) {
  _inherits(AuthException, _Exception);

  /**
   * @param {Object} error
   */
  function AuthException(error) {
    _classCallCheck(this, AuthException);

    return _possibleConstructorReturn(this, (AuthException.__proto__ || Object.getPrototypeOf(AuthException)).call(this, `Error on authentication. ${error}`));
  }

  return AuthException;
}(_Exception2.Exception);

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/09/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreateCognitoDatasetException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when open or create a CognitoSync dataset
 */
let CreateCognitoDatasetException = exports.CreateCognitoDatasetException = function (_Exception) {
  _inherits(CreateCognitoDatasetException, _Exception);

  /**
   * @param {String} dataset
   * @param {Object} error
   */
  function CreateCognitoDatasetException(dataset, error) {
    _classCallCheck(this, CreateCognitoDatasetException);

    return _possibleConstructorReturn(this, (CreateCognitoDatasetException.__proto__ || Object.getPrototypeOf(CreateCognitoDatasetException)).call(this, `Error on opening or creating "${dataset}" Cognito dataset. ${error}`));
  }

  return CreateCognitoDatasetException;
}(_Exception2.Exception);

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/23/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DescribeIdentityException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when describe cognito identity failed
 */
let DescribeIdentityException = exports.DescribeIdentityException = function (_Exception) {
  _inherits(DescribeIdentityException, _Exception);

  /**
   * @param {String} identityId
   * @param {Object} error
   */
  function DescribeIdentityException(identityId, error) {
    _classCallCheck(this, DescribeIdentityException);

    return _possibleConstructorReturn(this, (DescribeIdentityException.__proto__ || Object.getPrototypeOf(DescribeIdentityException)).call(this, `Error on describing cognito identity ${identityId}. ${error}`));
  }

  return DescribeIdentityException;
}(_Exception2.Exception);

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 12/22/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdentityProviderMismatchException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when passed identity provider name does not match provider name from identityMetadata
 */
let IdentityProviderMismatchException = exports.IdentityProviderMismatchException = function (_Exception) {
  _inherits(IdentityProviderMismatchException, _Exception);

  /**
   * @param {String} providerName
   * @param {String} identityMetadataProvider
   */
  function IdentityProviderMismatchException(providerName, identityMetadataProvider) {
    _classCallCheck(this, IdentityProviderMismatchException);

    return _possibleConstructorReturn(this, (IdentityProviderMismatchException.__proto__ || Object.getPrototypeOf(IdentityProviderMismatchException)).call(this, `Provider "${providerName}" does not match with identityMetadataProvider "${identityMetadataProvider}".`));
  }

  return IdentityProviderMismatchException;
}(_Exception2.Exception);

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 12/22/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidProviderIdentityException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when provider identity metadata does not contain required fields (access_token and token expiration time)
 */
let InvalidProviderIdentityException = exports.InvalidProviderIdentityException = function (_Exception) {
  _inherits(InvalidProviderIdentityException, _Exception);

  /**
   * @param {String} providerName
   */
  function InvalidProviderIdentityException(providerName) {
    _classCallCheck(this, InvalidProviderIdentityException);

    return _possibleConstructorReturn(this, (InvalidProviderIdentityException.__proto__ || Object.getPrototypeOf(InvalidProviderIdentityException)).call(this, `Passed "${providerName}" identity does not contain mandatory access_token or tokenExpirationTime fields.`));
  }

  return InvalidProviderIdentityException;
}(_Exception2.Exception);

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 7/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadUserException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when load user form db failed
 */
let LoadUserException = exports.LoadUserException = function (_Exception) {
  _inherits(LoadUserException, _Exception);

  /**
   * @param {String} identityId
   * @param {Object} error
   */
  function LoadUserException(identityId, error) {
    _classCallCheck(this, LoadUserException);

    return _possibleConstructorReturn(this, (LoadUserException.__proto__ || Object.getPrototypeOf(LoadUserException)).call(this, `Error on loading user ${identityId} from db. ${error}`));
  }

  return LoadUserException;
}(_Exception2.Exception);

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 4/04/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingIdentityImplementationException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let MissingIdentityImplementationException = exports.MissingIdentityImplementationException = function (_Exception) {
  _inherits(MissingIdentityImplementationException, _Exception);

  /**
   * @param {String} providerName
   */
  function MissingIdentityImplementationException(providerName) {
    _classCallCheck(this, MissingIdentityImplementationException);

    return _possibleConstructorReturn(this, (MissingIdentityImplementationException.__proto__ || Object.getPrototypeOf(MissingIdentityImplementationException)).call(this, `Missing identity implementation for "${providerName}"`));
  }

  return MissingIdentityImplementationException;
}(_Exception2.Exception);

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 6/23/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingLoginProviderException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when requested login provider is missing
 */
let MissingLoginProviderException = exports.MissingLoginProviderException = function (_Exception) {
  _inherits(MissingLoginProviderException, _Exception);

  /**
   * @param {String} providerName
   */
  function MissingLoginProviderException(providerName) {
    _classCallCheck(this, MissingLoginProviderException);

    return _possibleConstructorReturn(this, (MissingLoginProviderException.__proto__ || Object.getPrototypeOf(MissingLoginProviderException)).call(this, `Missing login provider "${providerName}" in deep-security.`));
  }

  return MissingLoginProviderException;
}(_Exception2.Exception);

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 3/4/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingRefreshTokenException = undefined;

var _IdentityProviderTokenExpiredException = __webpack_require__(76);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let MissingRefreshTokenException = exports.MissingRefreshTokenException = function (_IdentityProviderToke) {
  _inherits(MissingRefreshTokenException, _IdentityProviderToke);

  function MissingRefreshTokenException() {
    _classCallCheck(this, MissingRefreshTokenException);

    return _possibleConstructorReturn(this, (MissingRefreshTokenException.__proto__ || Object.getPrototypeOf(MissingRefreshTokenException)).call(this, 'Missing refresh token'));
  }

  return MissingRefreshTokenException;
}(_IdentityProviderTokenExpiredException.IdentityProviderTokenExpiredException);

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/09/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PutCognitoRecordException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when put a new record to a CognitoSync dataset failed
 */
let PutCognitoRecordException = exports.PutCognitoRecordException = function (_Exception) {
  _inherits(PutCognitoRecordException, _Exception);

  /**
   * @param {String} dataset
   * @param {String} record
   * @param {Object} error
   */
  function PutCognitoRecordException(dataset, record, error) {
    _classCallCheck(this, PutCognitoRecordException);

    return _possibleConstructorReturn(this, (PutCognitoRecordException.__proto__ || Object.getPrototypeOf(PutCognitoRecordException)).call(this, `Error on putting "${record}" record into "${dataset}" dataset. ${error}`));
  }

  return PutCognitoRecordException;
}(_Exception2.Exception);

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 11/10/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SynchronizeCognitoDatasetException = undefined;

var _Exception2 = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when failed to sync a CognitoSync dataset
 */
let SynchronizeCognitoDatasetException = exports.SynchronizeCognitoDatasetException = function (_Exception) {
  _inherits(SynchronizeCognitoDatasetException, _Exception);

  /**
   * @param {String} dataset
   * @param {Object} error
   */
  function SynchronizeCognitoDatasetException(dataset, error) {
    _classCallCheck(this, SynchronizeCognitoDatasetException);

    return _possibleConstructorReturn(this, (SynchronizeCognitoDatasetException.__proto__ || Object.getPrototypeOf(SynchronizeCognitoDatasetException)).call(this, `Error on synchronizing "${dataset}" Cognito dataset. ${error}`));
  }

  return SynchronizeCognitoDatasetException;
}(_Exception2.Exception);

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 4/4/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractImplementation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let AbstractImplementation = exports.AbstractImplementation = function (_Core$OOP$Interface) {
  _inherits(AbstractImplementation, _Core$OOP$Interface);

  /**
   * @param {IdentityProvider} identityProvider
   */
  function AbstractImplementation(identityProvider) {
    _classCallCheck(this, AbstractImplementation);

    // @todo: add other methods such as `normalizeMetadata`

    var _this = _possibleConstructorReturn(this, (AbstractImplementation.__proto__ || Object.getPrototypeOf(AbstractImplementation)).call(this, ['refreshIdentity']));

    _this._identityProvider = identityProvider;
    return _this;
  }

  /**
   * @returns {String}
   */


  _createClass(AbstractImplementation, [{
    key: 'refreshToken',
    get: function get() {
      return this._identityProvider.refreshToken;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'clientName',
    get: function get() {
      return this._identityProvider.clientName;
    }

    /**
     * @returns {IdentityProvider|*}
     */

  }, {
    key: 'identityProvider',
    get: function get() {
      return this._identityProvider;
    }
  }]);

  return AbstractImplementation;
}(_deepCore2.default.OOP.Interface);

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 4/4/17.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserPoolImplementation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _awsSdk = __webpack_require__(15);

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _AbstractImplementation = __webpack_require__(353);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let UserPoolImplementation = exports.UserPoolImplementation = function (_AbstractImplementati) {
  _inherits(UserPoolImplementation, _AbstractImplementati);

  /**
   * @param {Object[]|*} args
   */
  function UserPoolImplementation() {
    var _ref;

    _classCallCheck(this, UserPoolImplementation);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = UserPoolImplementation.__proto__ || Object.getPrototypeOf(UserPoolImplementation)).call.apply(_ref, [this].concat(args)));
  }

  /**
   * @returns {Promise}
   */


  _createClass(UserPoolImplementation, [{
    key: 'refreshIdentity',
    value: function refreshIdentity() {
      let payload = {
        AuthFlow: 'REFRESH_TOKEN_AUTH',
        AuthParameters: {
          REFRESH_TOKEN: this.refreshToken,
          ClientId: this.clientName
        }
      };

      return this.cognitoIdentityServiceProvider.makeUnauthenticatedRequest('initiateAuth', payload).promise().then(response => {
        let authResult = response.AuthenticationResult;

        this.identityProvider.tokenExpirationTime = Date.now() + authResult.ExpiresIn * 1000;
        this.identityProvider.userToken = authResult.IdToken;
      });
    }

    /**
     * @returns {AWS.CognitoIdentityServiceProvider}
     */

  }, {
    key: 'cognitoIdentityServiceProvider',
    get: function get() {
      if (_awsSdk2.default.hasOwnProperty('CognitoIdentityServiceProvider')) {
        // token refresh doesn't need any AWS credentials passed to service config
        return new _awsSdk2.default.CognitoIdentityServiceProvider();
      }

      throw new Error(`Missing CognitoIdentityServiceProvider in aws-sdk@${_awsSdk2.default.VERSION}`);
    }
  }]);

  return UserPoolImplementation;
}(_AbstractImplementation.AbstractImplementation);

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 27/04/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalIdentityProvider = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _IdentityProvider2 = __webpack_require__(77);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let LocalIdentityProvider = exports.LocalIdentityProvider = function (_IdentityProvider) {
  _inherits(LocalIdentityProvider, _IdentityProvider);

  /**
   * @param {Array} args
   */
  function LocalIdentityProvider() {
    var _ref;

    _classCallCheck(this, LocalIdentityProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = LocalIdentityProvider.__proto__ || Object.getPrototypeOf(LocalIdentityProvider)).call.apply(_ref, [this].concat(args)));
  }

  /**
   * @param {String} providerName
   * @param {Object} providers
   * @returns {*}
   */


  _createClass(LocalIdentityProvider, [{
    key: 'getProviderDomain',
    value: function getProviderDomain(providerName, providers) {
      return _get(LocalIdentityProvider.prototype.__proto__ || Object.getPrototypeOf(LocalIdentityProvider.prototype), 'getProviderDomain', this).call(this, providerName, providers) || providerName;
    }
  }]);

  return LocalIdentityProvider;
}(_IdentityProvider2.IdentityProvider);

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by mgoria on 09/01/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalToken = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Token2 = __webpack_require__(132);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Security token holds details about logged user
 */
let LocalToken = exports.LocalToken = function (_Token) {
  _inherits(LocalToken, _Token);

  /**
   * @param {Array} args
   */
  function LocalToken() {
    var _ref;

    _classCallCheck(this, LocalToken);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = LocalToken.__proto__ || Object.getPrototypeOf(LocalToken)).call.apply(_ref, [this].concat(args)));
  }

  /**
   * @param {Function} callback
   */


  _createClass(LocalToken, [{
    key: 'loadCredentials',
    value: function loadCredentials() {
      let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};


      // fake local credentials
      this._credentialsManager.systemCredentials = {
        expireTime: Date.now() + 86400000,
        // use provider user id or a fake userId instead of cognito identity id for local backend
        identityId: this.identityProvider && this.identityProvider.userId ? this.identityProvider.userId : 'us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
      };

      callback(null, this._credentials);
    }

    /**
     * @returns {Boolean}
     */

  }, {
    key: 'getUser',


    /**
     * @param {Function} callback
     */
    value: function getUser(callback) {
      // @todo: backward compatibility hook, remove on next major release
      let argsHandler = (error, user) => {
        if (callback.length === 1) {
          if (error) {
            throw error;
          }

          return callback(user);
        }

        callback(error, user);
      };

      this._loadUser(argsHandler);
    }

    /**
     * 'Reset' credentials
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this._credentials = null;
      this._credsManager = null;
    }
  }, {
    key: 'isAnonymous',
    get: function get() {
      if (this.lambdaContext) {
        return this.lambdaContext.identity.isAnonymous;
      } else {
        return !this.identityProvider;
      }
    }
  }]);

  return LocalToken;
}(_Token2.Token);

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 7/15/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let RoleProvider = exports.RoleProvider = function () {
  /**
   * @param {Object} deepResourceService
   * @param {String} retrieveRoleResource
   */
  function RoleProvider(deepResourceService) {
    let retrieveRoleResource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, RoleProvider);

    this._retrieveRoleResource = retrieveRoleResource;
    this._deepResource = deepResourceService;
    this._getRolesPromise = null;
  }

  /**
   * @returns {Promise}
   */


  _createClass(RoleProvider, [{
    key: 'getRoles',
    value: function getRoles() {
      if (!this._retrieveRoleResource) {
        return Promise.resolve([]);
      }

      if (!this._getRolesPromise) {
        this._getRolesPromise = new Promise((resolve, reject) => {
          let retrieveRolesRequest = this._deepResource.get(this._retrieveRoleResource);
          // authScope(null) forces deep-resource to use cognito default credentials
          retrieveRolesRequest.request({}).authScope(null).disableCache().send(response => {
            if (response.error) {
              return reject(response.error);
            }

            resolve(response.data);
          });
        });
      }

      return this._getRolesPromise;
    }

    /**
     * @returns {RoleProvider}
     */

  }, {
    key: 'invalidateCache',
    value: function invalidateCache() {
      this._getRolesPromise = null;
      return this;
    }
  }]);

  return RoleProvider;
}();

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 7/15/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoleResolver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _RoleVoter = __webpack_require__(361);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let RoleResolver = exports.RoleResolver = function () {
  /**
   * @param {RoleProvider} roleProvider
   */
  function RoleResolver(roleProvider) {
    _classCallCheck(this, RoleResolver);

    this._roleProvider = roleProvider;
  }

  /**
   * @param {String} context
   * @returns {Object}
   */


  _createClass(RoleResolver, [{
    key: 'resolve',
    value: function resolve(context) {
      return this.getContextVoters().then(voters => {
        for (let voter of voters) {
          if (voter.vote(context)) {
            return voter.role;
          }
        }

        return null;
      });
    }

    /**
     * @returns {Promise}
     */

  }, {
    key: 'getContextVoters',
    value: function getContextVoters() {
      return this._roleProvider.getRoles().then(roles => roles.map(r => new _RoleVoter.RoleVoter(r)));
    }
  }]);

  return RoleResolver;
}();

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserProvider = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _LoadUserException = __webpack_require__(347);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Loads user from db
 */
let UserProvider = exports.UserProvider = function () {
  /**
   * @param {String} retrieveUserResource
   * @param {Object} deepResourceService
   */
  function UserProvider(retrieveUserResource, deepResourceService) {
    _classCallCheck(this, UserProvider);

    this._retrieveUserResource = retrieveUserResource;
    this._deepResource = deepResourceService;
  }

  /**
   * @param {String} id
   * @param {Function} callback
   */


  _createClass(UserProvider, [{
    key: 'loadUserByIdentityId',
    value: function loadUserByIdentityId(id, callback) {
      if (!this._retrieveUserResource) {
        callback(null, null);
        return;
      }

      let retrieveUserResource = this._deepResource.get(this._retrieveUserResource);

      // authScope(null) forces deep-resource to use cognito default credentials
      retrieveUserResource.request({ Id: id }).authScope(null).retry(3).disableCache().send(response => {
        if (response.error) {
          callback(new _LoadUserException.LoadUserException(id, response.error), null);
          return;
        }

        return callback(null, response.data);
      });
    }
  }]);

  return UserProvider;
}();

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 7/15/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseVoter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

var _VoterInterface2 = __webpack_require__(134);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let BaseVoter = exports.BaseVoter = function (_VoterInterface) {
  _inherits(BaseVoter, _VoterInterface);

  /**
   * @param {String|RegExp|Function|VoterInterface} validateExpression
   */
  function BaseVoter(validateExpression) {
    _classCallCheck(this, BaseVoter);

    var _this = _possibleConstructorReturn(this, (BaseVoter.__proto__ || Object.getPrototypeOf(BaseVoter)).call(this));

    _this._validateExpression = validateExpression;
    return _this;
  }

  /**
   * @param {String} context
   * @returns {*}
   */


  _createClass(BaseVoter, [{
    key: 'vote',
    value: function vote(context) {
      if (typeof this._validateExpression === 'string') {
        return this._validateExpression === context;
      } else if (this._validateExpression instanceof RegExp) {
        return this._validateExpression.test(context);
      } else if (this._validateExpression instanceof Function) {
        return this._validateExpression(context);
      } else if (this._validateExpression instanceof _VoterInterface2.VoterInterface) {
        return this._validateExpression.vote(context);
      }

      throw new _deepCore2.default.Exception.InvalidArgumentException(this._validateExpression, 'String, Number, Function, BaseVoter');
    }

    /**
     * @param {String} actionIdentifier
     * @returns {BaseVoter}
     */

  }], [{
    key: 'createFromAction',
    value: function createFromAction(actionIdentifier) {
      let actionsParts = actionIdentifier.split(':');
      let escapePart = part => part && part !== '*' ? part.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') : '[a-zA-Z\\d+\\-_\\.]+';

      let microservice = escapePart(actionsParts[0]);
      let resource = escapePart(actionsParts[1]);
      let action = escapePart(actionsParts[2]);
      let regExp = new RegExp(`^\\s*${microservice}:${resource}:${action}\\s*$`);

      return new BaseVoter(regExp);
    }
  }]);

  return BaseVoter;
}(_VoterInterface2.VoterInterface);

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by CCristi on 7/15/16.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoleVoter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _VoterInterface2 = __webpack_require__(134);

var _BaseVoter = __webpack_require__(360);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let RoleVoter = exports.RoleVoter = function (_VoterInterface) {
  _inherits(RoleVoter, _VoterInterface);

  /**
   * @param {Object} role
   */
  function RoleVoter(role) {
    _classCallCheck(this, RoleVoter);

    var _this = _possibleConstructorReturn(this, (RoleVoter.__proto__ || Object.getPrototypeOf(RoleVoter)).call(this));

    _this._role = role;
    return _this;
  }

  /**
   * @param {String} context
   * @returns {Boolean}
   */


  _createClass(RoleVoter, [{
    key: 'vote',
    value: function vote(context) {
      for (let voter of this._negativeVoters) {
        if (voter.vote(context)) {
          return false;
        }
      }

      for (let voter of this._positiveVoters) {
        if (voter.vote(context)) {
          return true;
        }
      }

      return false;
    }

    /**
     * @returns {String}
     */

  }, {
    key: '_positiveVoters',
    get: function get() {
      let statements = this._role.Policy.Statement;

      return statements.filter(s => s.Effect === _VoterInterface2.VoterInterface.ALLOW).reduce((voters, statement) => {
        return voters.concat(statement.Action.map(_BaseVoter.BaseVoter.createFromAction));
      }, []);
    }

    /**
     * @returns {String}
     */

  }, {
    key: '_negativeVoters',
    get: function get() {
      let statements = this._role.Policy.Statement;

      return statements.filter(s => s.Effect === _VoterInterface2.VoterInterface.DENY).reduce((voters, statement) => {
        return voters.concat(statement.Action.map(_BaseVoter.BaseVoter.createFromAction));
      }, []);
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'role',
    get: function get() {
      return this._role;
    }
  }]);

  return RoleVoter;
}(_VoterInterface2.VoterInterface);

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/22/15.
 *
 * Bootstrap file loaded by npm as main
 */



var _Security = __webpack_require__(131);

module.exports = _Security.Security;

/***/ }),
/* 363 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 363;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/20/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidJoiSchemaException = undefined;

var _Exception2 = __webpack_require__(50);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let InvalidJoiSchemaException = exports.InvalidJoiSchemaException = function (_Exception) {
  _inherits(InvalidJoiSchemaException, _Exception);

  /**
   * @param {String} schemaName
   */
  function InvalidJoiSchemaException(schemaName) {
    _classCallCheck(this, InvalidJoiSchemaException);

    return _possibleConstructorReturn(this, (InvalidJoiSchemaException.__proto__ || Object.getPrototypeOf(InvalidJoiSchemaException)).call(this, `Invalid validation schema ${schemaName}. Object must be a Joi instance!`));
  }

  return InvalidJoiSchemaException;
}(_Exception2.Exception);

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/20/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidSchemaException = undefined;

var _Exception2 = __webpack_require__(50);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when DB model validation schema is missing or broken
 */
let InvalidSchemaException = exports.InvalidSchemaException = function (_Exception) {
  _inherits(InvalidSchemaException, _Exception);

  /**
   * @param {Object} model
   * @param {String} errorString
   */
  function InvalidSchemaException(model, errorString) {
    _classCallCheck(this, InvalidSchemaException);

    return _possibleConstructorReturn(this, (InvalidSchemaException.__proto__ || Object.getPrototypeOf(InvalidSchemaException)).call(this, `deep-db model ${JSON.stringify(model)} validation schema fails: ${errorString}`));
  }

  return InvalidSchemaException;
}(_Exception2.Exception);

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/22/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectValidationFailedException = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Exception2 = __webpack_require__(50);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Thrown when object validation fails on a joi schema/model
 */
let ObjectValidationFailedException = exports.ObjectValidationFailedException = function (_Exception) {
  _inherits(ObjectValidationFailedException, _Exception);

  /**
   * @param {String} schemaName
   * @param {String} error
   */
  function ObjectValidationFailedException(schemaName, error) {
    _classCallCheck(this, ObjectValidationFailedException);

    var _this = _possibleConstructorReturn(this, (ObjectValidationFailedException.__proto__ || Object.getPrototypeOf(ObjectValidationFailedException)).call(this, `Object validation failed on schema ${schemaName}: ${error}`));

    _this._originalError = error;
    return _this;
  }

  /**
   * @returns {Error}
   */


  _createClass(ObjectValidationFailedException, [{
    key: 'originalError',
    get: function get() {
      return this._originalError;
    }
  }]);

  return ObjectValidationFailedException;
}(_Exception2.Exception);

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/15/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationSchemaNotFoundException = undefined;

var _Exception2 = __webpack_require__(50);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

let ValidationSchemaNotFoundException = exports.ValidationSchemaNotFoundException = function (_Exception) {
  _inherits(ValidationSchemaNotFoundException, _Exception);

  /**
   * @param {String} schemaName
   */
  function ValidationSchemaNotFoundException(schemaName) {
    _classCallCheck(this, ValidationSchemaNotFoundException);

    return _possibleConstructorReturn(this, (ValidationSchemaNotFoundException.__proto__ || Object.getPrototypeOf(ValidationSchemaNotFoundException)).call(this, `Missing validation schema '${schemaName}'`));
  }

  return ValidationSchemaNotFoundException;
}(_Exception2.Exception);

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/25/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Joi = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _joi = __webpack_require__(21);

var _joi2 = _interopRequireDefault(_joi);

var _vogelsPolyfill = __webpack_require__(371);

var _vogelsPolyfill2 = _interopRequireDefault(_vogelsPolyfill);

var _uriRegexp = __webpack_require__(370);

var _uriRegexp2 = _interopRequireDefault(_uriRegexp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Abstraction on Joi validation expressions
 */
let Joi = exports.Joi = function () {
  function Joi() {
    _classCallCheck(this, Joi);
  }

  _createClass(Joi, null, [{
    key: 'uuid',

    /**
     * @returns {Object}
     */
    get: function get() {
      return _vogelsPolyfill2.default.types.uuid();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'timeUUID',
    get: function get() {
      return _vogelsPolyfill2.default.types.timeUUID();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'stringSet',
    get: function get() {
      return _vogelsPolyfill2.default.types.stringSet();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'numberSet',
    get: function get() {
      return _vogelsPolyfill2.default.types.numberSet();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'binarySet',
    get: function get() {
      return _vogelsPolyfill2.default.types.binarySet();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'binary',
    get: function get() {
      return _joi2.default.binary();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'number',
    get: function get() {
      return _joi2.default.number();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'string',
    get: function get() {
      return _joi2.default.string();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'boolean',
    get: function get() {
      return _joi2.default.boolean();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'email',
    get: function get() {
      return _joi2.default.string().email();
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'website',
    get: function get() {
      let strJoiObj = _joi2.default.string();

      // Fix for Joi v5.x.x
      return strJoiObj.hasOwnProperty('uri') ? strJoiObj.uri() : strJoiObj.regex(_uriRegexp2.default.createUriRegex());
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'map',
    get: function get() {
      return _joi2.default.object();
    }

    /**
     * @returns {*}
     */

  }, {
    key: 'mapSet',
    get: function get() {
      let array = _joi2.default.array();
      if (array.includes) {
        return array.includes(_joi2.default.object());
      }

      return array.items(_joi2.default.object());
    }
  }]);

  return Joi;
}();

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 12/8/15.
 */

/*eslint no-useless-concat: 0 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
let internals = {
  rfc3986: {}
};

internals.generate = function () {

  /**
   * elements separated by forward slash ("/") are alternatives.
   */
  const or = '|';

  /**
   * DIGIT = %x30-39 ; 0-9
   */
  const digit = '0-9';
  const digitOnly = '[' + digit + ']';

  /**
   * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z
   */
  const alpha = 'a-zA-Z';
  const alphaOnly = '[' + alpha + ']';

  /**
   * cidr       = DIGIT                ; 0-9
   *            / %x31-32 DIGIT         ; 10-29
   *            / "3" %x30-32           ; 30-32
   */
  internals.rfc3986.cidr = digitOnly + or + '[1-2]' + digitOnly + or + '3' + '[0-2]';

  /**
   * HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
   */
  const hexDigit = digit + 'A-Fa-f';
  const hexDigitOnly = '[' + hexDigit + ']';

  /**
   * unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
   */
  const unreserved = alpha + digit + '-\\._~';

  /**
   * sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
   */
  const subDelims = '!\\$&\'\\(\\)\\*\\+,;=';

  /**
   * pct-encoded = "%" HEXDIG HEXDIG
   */
  const pctEncoded = '%' + hexDigit;

  /**
   * pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
   */
  const pchar = unreserved + pctEncoded + subDelims + ':@';
  const pcharOnly = '[' + pchar + ']';

  /**
   * Rule to support zero-padded addresses.
   */
  const zeroPad = '0?';

  /**
   * dec-octet   = DIGIT                 ; 0-9
   *            / %x31-39 DIGIT         ; 10-99
   *            / "1" 2DIGIT            ; 100-199
   *            / "2" %x30-34 DIGIT     ; 200-249
   *            / "25" %x30-35          ; 250-255
   */
  const decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';

  /**
   * IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
   */
  internals.rfc3986.IPv4address = '(?:' + decOctect + '\\.){3}' + decOctect;

  /**
   * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal
   * ls32 = ( h16 ":" h16 ) / IPv4address ; least-significant 32 bits of address
   * IPv6address =                            6( h16 ":" ) ls32
   *             /                       "::" 5( h16 ":" ) ls32
   *             / [               h16 ] "::" 4( h16 ":" ) ls32
   *             / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
   *             / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
   *             / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
   *             / [ *4( h16 ":" ) h16 ] "::"              ls32
   *             / [ *5( h16 ":" ) h16 ] "::"              h16
   *             / [ *6( h16 ":" ) h16 ] "::"
   */
  const h16 = hexDigitOnly + '{1,4}';
  const ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';
  const IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;
  const IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;
  const IPv6FourHex = h16 + '::(?:' + h16 + ':){4}' + ls32;
  const IPv6ThreeHex = '(?:' + h16 + ':){0,1}' + h16 + '::(?:' + h16 + ':){3}' + ls32;
  const IPv6TwoHex = '(?:' + h16 + ':){0,2}' + h16 + '::(?:' + h16 + ':){2}' + ls32;
  const IPv6OneHex = '(?:' + h16 + ':){0,3}' + h16 + '::' + h16 + ':' + ls32;
  const IPv6NoneHex = '(?:' + h16 + ':){0,4}' + h16 + '::' + ls32;
  const IPv6NoneHex2 = '(?:' + h16 + ':){0,5}' + h16 + '::' + h16;
  const IPv6NoneHex3 = '(?:' + h16 + ':){0,6}' + h16 + '::';
  internals.rfc3986.IPv6address = '(?:' + IPv6SixHex + or + IPv6FiveHex + or + IPv6FourHex + or + IPv6ThreeHex + or + IPv6TwoHex + or + IPv6OneHex + or + IPv6NoneHex + or + IPv6NoneHex2 + or + IPv6NoneHex3 + ')';

  /**
   * IPvFuture = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
   */
  internals.rfc3986.IPvFuture = 'v' + hexDigitOnly + '+\\.[' + unreserved + subDelims + ':]+';

  /**
   * scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
   */
  internals.rfc3986.scheme = alphaOnly + '[' + alpha + digit + '+-\\.]*';

  /**
   * userinfo = *( unreserved / pct-encoded / sub-delims / ":" )
   */
  const userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';

  /**
   * IP-literal = "[" ( IPv6address / IPvFuture  ) "]"
   */
  const IPLiteral = '\\[(?:' + internals.rfc3986.IPv6address + or + internals.rfc3986.IPvFuture + ')\\]';

  /**
   * reg-name = *( unreserved / pct-encoded / sub-delims )
   */
  const regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';

  /**
   * host = IP-literal / IPv4address / reg-name
   */
  const host = '(?:' + IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';

  /**
   * port = *DIGIT
   */
  const port = digitOnly + '*';

  /**
   * authority   = [ userinfo "@" ] host [ ":" port ]
   */
  const authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';

  /**
   * segment       = *pchar
   * segment-nz    = 1*pchar
   * path          = path-abempty    ; begins with "/" or is empty
   *               / path-absolute   ; begins with "/" but not "//"
   *               / path-noscheme   ; begins with a non-colon segment
   *               / path-rootless   ; begins with a segment
   *               / path-empty      ; zero characters
   * path-abempty  = *( "/" segment )
   * path-absolute = "/" [ segment-nz *( "/" segment ) ]
   * path-rootless = segment-nz *( "/" segment )
   */
  const segment = pcharOnly + '*';
  const segmentNz = pcharOnly + '+';
  const pathAbEmpty = '(?:\\/' + segment + ')*';
  const pathAbsolute = '\\/(?:' + segmentNz + pathAbEmpty + ')?';
  const pathRootless = segmentNz + pathAbEmpty;

  /**
   * hier-part = "//" authority path
   */
  internals.rfc3986.hierPart = '(?:\\/\\/' + authority + pathAbEmpty + or + pathAbsolute + or + pathRootless + ')';

  /**
   * query = *( pchar / "/" / "?" )
   */
  internals.rfc3986.query = '[' + pchar + '\\/\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.

  /**
   * fragment = *( pchar / "/" / "?" )
   */
  internals.rfc3986.fragment = '[' + pchar + '\\/\\?]*';
};

internals.generate();

exports.default = internals.rfc3986;
module.exports = exports['default'];

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 12/8/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _rfc = __webpack_require__(369);

var _rfc2 = _interopRequireDefault(_rfc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  createUriRegex: optionalScheme => {
    let scheme = _rfc2.default.scheme;

    // If we were passed a scheme, use it instead of the generic one
    if (optionalScheme) {

      // Have to put this in a non-capturing group to handle the OR statements
      scheme = '(?:' + optionalScheme + ')';
    }

    /**
     * URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
     */
    return new RegExp(`^${scheme}:${_rfc2.default.hierPart}(?:\\?${_rfc2.default.query})?(?:#${_rfc2.default.fragment})?$`);
  }
};
module.exports = exports['default'];

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/25/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _joi = __webpack_require__(21);

var _joi2 = _interopRequireDefault(_joi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let UUID_REGEXP = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;

/**
 * Fixes weird joi exception!
 *
 * @param {Object} proto
 * @returns {Object}
 * @private
 */
function _joiVector(proto) {
  let arr = _joi2.default.array();

  if (arr.includes) {
    return arr.includes(proto);
  }

  return arr.items(proto);
}

exports.default = typeof window !== 'undefined' ? {
  types: {
    uuid: function uuid() {
      return _joi2.default.string().regex(UUID_REGEXP);
    },

    timeUUID: function timeUUID() {
      return _joi2.default.string().regex(UUID_REGEXP);
    },

    stringSet: function stringSet() {
      return _joiVector(_joi2.default.string());
    },

    numberSet: function numberSet() {
      return _joiVector(_joi2.default.number());
    },

    binarySet: function binarySet() {
      return _joiVector(_joi2.default.string());
    }
  }
} : __webpack_require__(531);
module.exports = exports['default'];

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 6/15/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectToJoi = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Joi = __webpack_require__(368);

var _joi = __webpack_require__(21);

var _joi2 = _interopRequireDefault(_joi);

var _InvalidSchemaException = __webpack_require__(365);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Exporting simple object to joi
 */
let ObjectToJoi = exports.ObjectToJoi = function () {
  /**
   * @param {Object} baseObject
   */
  function ObjectToJoi(baseObject) {
    _classCallCheck(this, ObjectToJoi);

    this._baseObject = baseObject;
  }

  /**
   * @returns {Object}
   */


  _createClass(ObjectToJoi, [{
    key: 'transform',


    /**
     * @returns {Object}
     */
    value: function transform() {
      try {
        return ObjectToJoi._transform(this._baseObject);
      } catch (e) {
        throw new _InvalidSchemaException.InvalidSchemaException(this._baseObject, e);
      }
    }

    /**
     * @param {Object} obj
     * @returns {Object}
     * @private
     */

  }, {
    key: 'baseObject',
    get: function get() {
      return this._baseObject;
    }
  }], [{
    key: '_transform',
    value: function _transform(obj) {
      let transObj = {};

      for (let property in obj) {
        if (!obj.hasOwnProperty(property)) {
          continue;
        }

        let value = obj[property];

        if (typeof value === 'object') {
          transObj[property] = ObjectToJoi._transform(value);
        } else {
          let validationSchema = _Joi.Joi[value];

          if (typeof validationSchema === 'undefined') {
            throw new _InvalidSchemaException.InvalidSchemaException(obj, `Unknown field type ${value}`);
          }

          transObj[property] = validationSchema;
        }
      }

      return _joi2.default.object().keys(transObj);
    }
  }]);

  return ObjectToJoi;
}();

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Created by AlexanderC on 6/15/15.
 */



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Validation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepKernel = __webpack_require__(18);

var _deepKernel2 = _interopRequireDefault(_deepKernel);

var _ObjectToJoi = __webpack_require__(372);

var _ValidationSchemaNotFoundException = __webpack_require__(367);

var _InvalidJoiSchemaException = __webpack_require__(364);

var _joi = __webpack_require__(21);

var _joi2 = _interopRequireDefault(_joi);

var _ObjectValidationFailedException = __webpack_require__(366);

var _path = __webpack_require__(33);

var _path2 = _interopRequireDefault(_path);

var _deepCore = __webpack_require__(1);

var _deepCore2 = _interopRequireDefault(_deepCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Validation engine
 */
let Validation = exports.Validation = function (_Kernel$ContainerAwar) {
  _inherits(Validation, _Kernel$ContainerAwar);

  /**
   * @param {Array} models
   * @param {Boolean} forcePartitionField
   * @param {String[]} nonPartitionedModels
   */
  function Validation() {
    let models = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let forcePartitionField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let nonPartitionedModels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    _classCallCheck(this, Validation);

    var _this = _possibleConstructorReturn(this, (Validation.__proto__ || Object.getPrototypeOf(Validation)).call(this));

    _this._forcePartitionField = forcePartitionField;
    _this._nonPartitionedModels = nonPartitionedModels || [];

    _this._schemas = _this._rawModelsToSchemas(models);
    return _this;
  }

  /**
   * @param {Runtime} lambdaRuntime
   * @param {String} schemaName
   * @param {Function} cb
   * @returns {Validation}
   */


  _createClass(Validation, [{
    key: 'validateRuntimeInput',
    value: function validateRuntimeInput(lambdaRuntime, schemaName, cb) {
      if (!this.hasSchema(schemaName)) {
        lambdaRuntime.createError(new _ValidationSchemaNotFoundException.ValidationSchemaNotFoundException(schemaName)).send();
        return this;
      }

      let validationResult = this.validate(schemaName, lambdaRuntime.request.data, true);

      if (!validationResult.error) {
        cb(validationResult.value);
        return this;
      }

      lambdaRuntime.createError(validationResult.error).send();

      return this;
    }

    /**
     * @param {String} schemaName
     * @param {*} valueObject
     * @param {Boolean} returnRaw
     * @returns {*}
     */

  }, {
    key: 'validate',
    value: function validate(schemaName, valueObject) {
      let returnRaw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      let validationSchema = this.getSchema(schemaName);

      let result = _joi2.default.validate(valueObject, validationSchema, {
        stripUnknown: true,
        convert: true,
        abortEarly: false
      });

      if (returnRaw) {
        return result;
      }

      if (result.error) {
        throw new _ObjectValidationFailedException.ObjectValidationFailedException(schemaName, result.error);
      }

      return result.value;
    }

    /**
     * @todo: find a better way to inject libraries...
     *
     * @param {Function} cb
     * @returns {Object}
     */

  }, {
    key: 'schemaFromValidationCb',
    value: function schemaFromValidationCb(cb) {
      return cb(_joi2.default);
    }

    /**
     * @returns {Object[]}
     */

  }, {
    key: 'setSchemaRaw',


    /**
     * @param {String} schemaName
     * @param {Object} schema
     * @returns {Validation}
     */
    value: function setSchemaRaw(schemaName, schema) {
      this._schemas[schemaName] = Validation.normalizeSchema(schema);

      return this;
    }

    /**
     * @param {String} schemaName
     * @param {Object} schema
     * @returns {Validation}
     */

  }, {
    key: 'setSchema',
    value: function setSchema(schemaName, schema) {
      if (!schema.isJoi) {
        throw new _InvalidJoiSchemaException.InvalidJoiSchemaException(schemaName);
      }

      this._schemas[schemaName] = schema;

      return this;
    }

    /**
     * @param {String} schemaName
     * @param {Object} schema
     * @returns {Validation}
     */

  }, {
    key: 'setGuessSchema',
    value: function setGuessSchema(schemaName, schema) {
      if (typeof schema === 'function') {
        schema = this.schemaFromValidationCb(schema);
      }

      let setSchemaMethod = schema.isJoi ? 'setSchema' : 'setSchemaRaw';

      return this[setSchemaMethod](schemaName, schema);
    }

    /**
     * @param {String} schemaName
     * @returns {Boolean}
     */

  }, {
    key: 'hasSchema',
    value: function hasSchema(schemaName) {
      return typeof this._schemas[schemaName] !== 'undefined';
    }

    /**
     * @param {String} schemaName
     * @returns {Object}
     */

  }, {
    key: 'getSchema',
    value: function getSchema(schemaName) {
      if (!this.hasSchema(schemaName)) {
        throw new _ValidationSchemaNotFoundException.ValidationSchemaNotFoundException(schemaName);
      }

      let schema = this._schemas[schemaName];

      // Let's assume it's an path while lazy loading in backend context
      if (typeof schema === 'string') {
        return this.setGuessSchema(schemaName, !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).getSchema(schemaName);
      }

      return schema;
    }

    /**
     * Booting a certain service
     *
     * @param {Kernel} kernel
     * @param {Function} callback
     */

  }, {
    key: 'boot',
    value: function boot(kernel, callback) {
      this._nonPartitionedModels = kernel.config.nonPartitionedModels || [];
      this._schemas = this._rawModelsToSchemas(kernel.config.models);

      let universalRequire = new _deepCore2.default.Generic.UniversalRequire();
      let remainingSchemas = kernel.config.validationSchemas.length;

      // Load custom schemas
      kernel.config.validationSchemas.forEach(schemaName => {
        let relativeSchemaPath = _path2.default.join(_deepCore2.default.AWS.Lambda.Runtime.VALIDATION_SCHEMAS_DIR, `${schemaName}.js`);

        if (kernel.isBackend) {
          this._schemas[schemaName] = _path2.default.join(process.cwd(), relativeSchemaPath);

          remainingSchemas--;
        } else {
          let schemaUrl = _path2.default.join(_path2.default.sep, relativeSchemaPath);

          universalRequire.require(schemaUrl, (error, schemaObj) => {

            // @todo: abstract it somehow?
            if (error) {
              console.error(`Error while loading schema ${schemaName}: ${error}`);
            } else {
              this.setGuessSchema(schemaName, schemaObj);
            }

            remainingSchemas--;
          });
        }
      });

      let checkRemainingSchemas = onFail => {
        if (remainingSchemas <= 0) {
          callback();
        } else {
          setTimeout(() => {
            onFail(onFail);
          }, 50);
        }
      };

      checkRemainingSchemas(checkRemainingSchemas);
    }

    /**
     * @param {Array} rawModels
     * @returns {Object}
     * @private
     */

  }, {
    key: '_rawModelsToSchemas',
    value: function _rawModelsToSchemas(rawModels) {
      let modelsSchema = {};

      for (let modelKey in rawModels) {
        if (!rawModels.hasOwnProperty(modelKey)) {
          continue;
        }

        let backendModels = rawModels[modelKey];

        for (let schemaName in backendModels) {
          if (!backendModels.hasOwnProperty(schemaName)) {
            continue;
          }

          let schema = backendModels[schemaName];

          // @todo: move this sh*t into DB somehow...
          schema.Id = schema.Id || 'timeUUID';

          modelsSchema[schemaName] = Validation.normalizeSchema(schema);

          if (!schema.AccountId && this._usePartitionField && this.isPartitionedModel(schemaName)) {
            modelsSchema[schemaName] = modelsSchema[schemaName].keys({
              AccountId: _joi2.default.string().default('anonymous')
            });
          }
        }
      }

      return modelsSchema;
    }

    /**
     * @returns {Boolean}
     * @private
     */

  }, {
    key: 'isPartitionedModel',


    /**
     * @param {String} modelName
     * @returns {Boolean}
     */
    value: function isPartitionedModel(modelName) {
      return this._nonPartitionedModels.indexOf(modelName) === -1;
    }

    /**
     * @param {Object} rawSchema
     * @returns {Object}
     */

  }, {
    key: 'schemas',
    get: function get() {
      return this._schemas;
    }

    /**
     * @returns {String[]}
     */

  }, {
    key: 'schemasNames',
    get: function get() {
      return Object.keys(this._schemas);
    }
  }, {
    key: '_usePartitionField',
    get: function get() {
      return this._forcePartitionField || this.kernel && this.kernel.accountMicroservice;
    }
  }], [{
    key: 'normalizeSchema',
    value: function normalizeSchema(rawSchema) {
      return new _ObjectToJoi.ObjectToJoi(rawSchema).transform();
    }
  }]);

  return Validation;
}(_deepKernel2.default.ContainerAware);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by AlexanderC on 5/22/15.
 *
 * Bootstrap file loaded by npm as main
 */



var _Validation = __webpack_require__(373);

module.exports = _Validation.Validation;

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

var net = __webpack_require__(110);
var Step = __webpack_require__(496);
var retry = __webpack_require__(493);

var Ecad = function(options) {
    options.timeout = options.timeout || 3000;
    options.minTimeout = options.minTimeout || 1000;
    options.maxTimeout = options.maxTimeout || 2000;
    options.retries = options.retries || 0;
    options.endpoints = Array.isArray(options.endpoints) ? options.endpoints :
      [options.endpoints];
    this.config = options;
    return this;
};

Ecad.prototype.fetch = function(fn) {
    var that = this;
    var opts = this.config;
    var list = [];

    var attempt = function(endpoint, cb) {
        var operation = retry.operation({
            retries: opts.retries,
            minTimout: opts.minTimeout,
            maxTimeout: opts.maxTimeout
        });
        operation.attempt(function(attempts) {
            that._fetch(endpoint, function(err, result) {
                if (operation.retry(err)) {
                    return;
                }
                if (err) return cb(operation.mainError(), attempts);
                else return cb(null, result);
            });
        });
    };

    Step(function() {
        var group = this.group();
        opts.endpoints.forEach(function(endpoint) {
            attempt(endpoint, group());
        });
    }, function(err, res) {
        // In case of err, res will be number of attempts
        if (err) return fn(err, res);
        list = list.concat.apply(list, res);
        fn(null, list);
    });
};

Ecad.prototype._fetch = function(endpoint, fn) {
    var that = this;
    var opts = this.config;
    var res = [];
    var hosts = [];

    if (!~endpoint.indexOf(':'))
        return fn(new Error('Not a valid Elasticache endpoint. Endpoint: ' + endpoint));

    var parts = endpoint.split(':');
    var client = net.connect({host: parts[0], port: parts[1]}, function() {
        client.write('config get cluster\r\n');
    });

    client.setTimeout(opts.timeout);
    client.setEncoding('utf8');

    client.on('data', function(chunk) {
        res.push(chunk);
        if (~chunk.indexOf('END'))
            client.end();
    });

    client.on('end', function() {
        var result = that._parse(res);
        if (result instanceof Error)
            return fn(new Error(result.message + ' Endpoint: ' + endpoint));
        else return fn(null, result);
    });

    client.on('timeout', function() {
        client.removeAllListeners();
        client.end();
        client.destroy();
        return fn(new Error('Elasticache auto-discovery request timed out. ' +
            'Endpoint: ' + endpoint));
    });

    client.on('error', function(err) {
        return fn(new Error('Elasticache auto-discovery request error: ' + err +
            ' Endpoint: ' + endpoint));
    });
};

Ecad.prototype._parse = function(res) {
    var hosts = [];
    var payload = res.join('');
    var lines = payload.split('\n');
    if (!lines[2])
        return new Error('Bad response from Elasticache.');
    var list = lines[2].split(' ');
    if (!list.length)
        return new Error('No Elasticache hosts found.');
    list.forEach(function(item) {
        var parts = item.split('|');
        if (parts.length < 2)
            return new Error('Malformed host list from Elasticache.');
        hosts.push(parts[0] + ':' + parts[2]);
    });
    return hosts;
};

module.exports = Ecad;


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Declare internals

var internals = {};


exports.escapeJavaScript = function (input) {

    if (!input) {
        return '';
    }

    var escaped = '';

    for (var i = 0, il = input.length; i < il; ++i) {

        var charCode = input.charCodeAt(i);

        if (internals.isSafe(charCode)) {
            escaped += input[i];
        }
        else {
            escaped += internals.escapeJavaScriptChar(charCode);
        }
    }

    return escaped;
};


exports.escapeHtml = function (input) {

    if (!input) {
        return '';
    }

    var escaped = '';

    for (var i = 0, il = input.length; i < il; ++i) {

        var charCode = input.charCodeAt(i);

        if (internals.isSafe(charCode)) {
            escaped += input[i];
        }
        else {
            escaped += internals.escapeHtmlChar(charCode);
        }
    }

    return escaped;
};


internals.escapeJavaScriptChar = function (charCode) {

    if (charCode >= 256) {
        return '\\u' + internals.padLeft('' + charCode, 4);
    }

    var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
    return '\\x' + internals.padLeft(hexValue, 2);
};


internals.escapeHtmlChar = function (charCode) {

    var namedEscape = internals.namedHtml[charCode];
    if (typeof namedEscape !== 'undefined') {
        return namedEscape;
    }

    if (charCode >= 256) {
        return '&#' + charCode + ';';
    }

    var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
    return '&#x' + internals.padLeft(hexValue, 2) + ';';
};


internals.padLeft = function (str, len) {

    while (str.length < len) {
        str = '0' + str;
    }

    return str;
};


internals.isSafe = function (charCode) {

    return (typeof internals.safeCharCodes[charCode] !== 'undefined');
};


internals.namedHtml = {
    '38': '&amp;',
    '60': '&lt;',
    '62': '&gt;',
    '34': '&quot;',
    '160': '&nbsp;',
    '162': '&cent;',
    '163': '&pound;',
    '164': '&curren;',
    '169': '&copy;',
    '174': '&reg;'
};


internals.safeCharCodes = (function () {

    var safe = {};

    for (var i = 32; i < 123; ++i) {

        if ((i >= 97) ||                    // a-z
            (i >= 65 && i <= 90) ||         // A-Z
            (i >= 48 && i <= 57) ||         // 0-9
            i === 32 ||                     // space
            i === 46 ||                     // .
            i === 44 ||                     // ,
            i === 45 ||                     // -
            i === 58 ||                     // :
            i === 95) {                     // _

            safe[i] = null;
        }
    }

    return safe;
}());

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer))

/***/ }),
/* 377 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 378 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 379 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(381);


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * To validate an email address according to RFCs 5321, 5322 and others
 *
 * Copyright © 2008-2011, Dominic Sayers
 * Test schema documentation Copyright © 2011, Daniel Marschall
 * Port for Node.js Copyright © 2013-2014, GlobeSherpa
 *              and Copyright © 2014-2015, Eli Skeggs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   - Neither the name of Dominic Sayers nor the names of its contributors may
 *     be used to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @author      Dominic Sayers <dominic@sayers.cc>
 * @author      Eli Skeggs <skeggse@gmail.com>
 * @copyright   2008-2011 Dominic Sayers
 * @copyright   2013-2014 GlobeSherpa
 * @copyright   2014-2015 Eli Skeggs
 * @license     http://www.opensource.org/licenses/bsd-license.php BSD License
 * @link        http://www.dominicsayers.com/isemail
 * @link        https://github.com/hapijs/isemail
 * @version     1.2.0 Drop Node 0.8, fix style, switch to lab/code
 */

var Dns = __webpack_require__(218);

var internals = {
    defaultThreshold: 16,
    maxIPv6Groups: 8,
    categories: {
        valid: 1,
        dnsWarn: 7,
        rfc5321: 15,
        cfws: 31,
        deprecated: 63,
        rfc5322: 127,
        error: 255
    },

    diagnoses: {
        // Address is valid
        valid: 0,

        // Address is valid, but the DNS check failed
        dnsWarnNoMXRecord: 5,
        dnsWarnNoRecord: 6,

        // Address is valid for SMTP but has unusual elements
        rfc5321TLD: 9,
        rfc5321TLDNumeric: 10,
        rfc5321QuotedString: 11,
        rfc5321AddressLiteral: 12,

        // Address is valid for message, but must be modified for envelope
        cfwsComment: 17,
        cfwsFWS: 18,

        // Address contains deprecated elements, but may still be valid in some contexts
        deprecatedLocalPart: 33,
        deprecatedFWS: 34,
        deprecatedQTEXT: 35,
        deprecatedQP: 36,
        deprecatedComment: 37,
        deprecatedCTEXT: 38,
        deprecatedIPv6: 39,
        deprecatedCFWSNearAt: 49,

        // Address is only valid according to broad definition in RFC 5322, but is otherwise invalid
        rfc5322Domain: 65,
        rfc5322TooLong: 66,
        rfc5322LocalTooLong: 67,
        rfc5322DomainTooLong: 68,
        rfc5322LabelTooLong: 69,
        rfc5322DomainLiteral: 70,
        rfc5322DomainLiteralOBSDText: 71,
        rfc5322IPv6GroupCount: 72,
        rfc5322IPv62x2xColon: 73,
        rfc5322IPv6BadCharacter: 74,
        rfc5322IPv6MaxGroups: 75,
        rfc5322IPv6ColonStart: 76,
        rfc5322IPv6ColonEnd: 77,

        // Address is invalid for any purpose
        errExpectingDTEXT: 129,
        errNoLocalPart: 130,
        errNoDomain: 131,
        errConsecutiveDots: 132,
        errATEXTAfterCFWS: 133,
        errATEXTAfterQS: 134,
        errATEXTAfterDomainLiteral: 135,
        errExpectingQPair: 136,
        errExpectingATEXT: 137,
        errExpectingQTEXT: 138,
        errExpectingCTEXT: 139,
        errBackslashEnd: 140,
        errDotStart: 141,
        errDotEnd: 142,
        errDomainHyphenStart: 143,
        errDomainHyphenEnd: 144,
        errUnclosedQuotedString: 145,
        errUnclosedComment: 146,
        errUnclosedDomainLiteral: 147,
        errFWSCRLFx2: 148,
        errFWSCRLFEnd: 149,
        errCRNoLF: 150,
        errUnknownTLD: 160,
        errDomainTooShort: 161
    },

    components: {
        localpart: 0,
        domain: 1,
        literal: 2,
        contextComment: 3,
        contextFWS: 4,
        contextQuotedString: 5,
        contextQuotedPair: 6
    }
};

// $lab:coverage:off$
internals.defer = typeof process !== 'undefined' && process && typeof process.nextTick === 'function' ?
    process.nextTick.bind(process) :
    function (callback) {

        return setTimeout(callback, 0);
    };
// $lab:coverage:on$


// US-ASCII visible characters not valid for atext
// (http://tools.ietf.org/html/rfc5322#section-3.2.3)
var SPECIALS = '()<>[]:;@\\,."';

// A silly little optimized function generator
var optimizeLookup = function optimizeLookup (string) {

    var lookup = new Array(0x100);

    for (var i = 0xff; i >= 0; --i) {
        lookup[i] = false;
    }

    for (var il = string.length; i < il; ++i) {
        lookup[string.charCodeAt(i)] = true;
    }

    var body = 'return function (code) {\n';
    body += '  return lookup[code];\n';
    body += '}';
    return (new Function('lookup', body))(lookup);
};


var specialsLookup = optimizeLookup(SPECIALS);

// This matches valid IPv4 addresses from the end of a string
var IPv4_REGEX =
    /\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/;
var IPv6_REGEX = /^[a-fA-F\d]{0,4}$/;
var IPv6_REGEX_TEST = IPv6_REGEX.test.bind(IPv6_REGEX);

var hasOwn = Object.prototype.hasOwnProperty;

/**
 * Check that an email address conforms to RFCs 5321, 5322 and others
 *
 * We distinguish clearly between a Mailbox as defined by RFC 5321 and an
 * addr-spec as defined by RFC 5322. Depending on the context, either can be
 * regarded as a valid email address. The RFC 5321 Mailbox specification is
 * more restrictive (comments, white space and obsolete forms are not allowed).
 *
 * @param {string} email The email address to check.
 * @param {Object} options The (optional) options:
 *   {boolean} checkDNS If true then will check DNS for MX records. If
 *     true this call to isEmail _will_ be asynchronous.
 *   {*} errorLevel Determines the boundary between valid and invalid
 *     addresses. Status codes above this number will be returned as-is, status
 *     codes below will be returned as valid. Thus the calling program can
 *     simply look for diagnoses.valid if it is only interested in whether an
 *     address is valid or not. The errorLevel will determine how "picky"
 *     isEmail() is about the address. If omitted or passed as false then
 *     isEmail() will return true or false rather than an integer error or
 *     warning. NB Note the difference between errorLevel = false and
 *     errorLevel = 0.
 * @param {function(number|boolean)} callback The (optional) callback handler.
 * @return {*}
 */
var isEmail = function isEmail (email, options, callback) {

    if (typeof options === 'function') {
        callback = options;
        options = {};
    }

    if (!options) {
        options = {};
    }

    if (typeof callback !== 'function') {
        if (options.checkDNS) {
            throw new TypeError('expected callback function for checkDNS option');
        }

        callback = null;
    }

    var diagnose;
    var threshold;

    if (typeof options.errorLevel === 'number') {
        diagnose = true;
        threshold = options.errorLevel;
    }
    else {
        diagnose = !!options.errorLevel;
        threshold = internals.diagnoses.valid;
    }

    if (options.tldWhitelist) {
        if (typeof options.tldWhitelist === 'string') {
            options.tldWhitelist = [options.tldWhitelist];
        } else if (typeof options.tldWhitelist !== 'object') {
            throw new TypeError('expected array or object tldWhitelist');
        }
    }

    if (options.minDomainAtoms && (options.minDomainAtoms !== ((+options.minDomainAtoms) | 0) || options.minDomainAtoms < 0)) {
        throw new TypeError('expected positive integer minDomainAtoms');
    }

    var maxResult = internals.diagnoses.valid;

    var updateResult = function updateResult (value) {

        if (value > maxResult) {
            maxResult = value;
        }
    };

    var context = {
        now: internals.components.localpart,
        prev: internals.components.localpart,
        stack: [internals.components.localpart]
    };

    var token;
    var prevToken = '';
    var charCode = 0;

    var parseData = {
        local: '',
        domain: ''
    };
    var atomData = {
        locals: [''],
        domains: ['']
    };

    var elementCount = 0;
    var elementLength = 0;
    var crlfCount = 0;

    var hyphenFlag = false;
    var assertEnd = false;

    var emailLength = email.length;

    for (var i = 0, il = emailLength; i < il; ++i) {
        // Token is used outside the loop, must declare similarly
        token = email[i];

        switch (context.now) {
            // Local-part
            case internals.components.localpart:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   local-part      =   dot-atom / quoted-string / obs-local-part
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   quoted-string   =   [CFWS]
                //                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                       [CFWS]
                //
                //   obs-local-part  =   word *("." word)
                //
                //   word            =   atom / quoted-string
                //
                //   atom            =   [CFWS] 1*atext [CFWS]
                switch (token) {
                    // Comment
                    case '(':
                        if (elementLength === 0) {
                            // Comments are OK at the beginning of an element
                            updateResult(elementCount === 0 ? internals.diagnoses.cfwsComment : internals.diagnoses.deprecatedComment);
                        }
                        else {
                            updateResult(internals.diagnoses.cfwsComment);
                             // Cannot start a comment in an element, should be end
                            assertEnd = true;
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextComment;
                        break;

                    // Next dot-atom element
                    case '.':
                        if (elementLength === 0) {
                            // Another dot, already?
                            updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                        }
                        else {
                            // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                            if (assertEnd) {
                                updateResult(internals.diagnoses.deprecatedLocalPart);
                            }

                            // CFWS & quoted strings are OK again now we're at the beginning of an element (although they are obsolete forms)
                            assertEnd = false;
                            elementLength = 0;
                            ++elementCount;
                            parseData.local += token;
                            atomData.locals[elementCount] = '';
                        }

                        break;

                    // Quoted string
                    case '"':
                        if (elementLength === 0) {
                            // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                            updateResult(elementCount === 0 ? internals.diagnoses.rfc5321QuotedString : internals.diagnoses.deprecatedLocalPart);

                            parseData.local += token;
                            atomData.locals[elementCount] += token;
                            ++elementLength;

                            // Quoted string must be the entire element
                            assertEnd = true;
                            context.stack.push(context.now);
                            context.now = internals.components.contextQuotedString;
                        }
                        else {
                            updateResult(internals.diagnoses.errExpectingATEXT);
                        }

                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case ' ':
                    case '\t':
                        if (elementLength === 0) {
                            updateResult(elementCount === 0 ? internals.diagnoses.cfwsFWS : internals.diagnoses.deprecatedFWS);
                        }
                        else {
                            // We can't start FWS in the middle of an element, better be end
                            assertEnd = true;
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    case '@':
                        // At this point we should have a valid local-part
                        // $lab:coverage:off$
                        if (context.stack.length !== 1) {
                            throw new Error('unexpected item on context stack');
                        }
                        // $lab:coverage:on$

                        if (parseData.local.length === 0) {
                            // Fatal error
                            updateResult(internals.diagnoses.errNoLocalPart);
                        }
                        else if (elementLength === 0) {
                            // Fatal error
                            updateResult(internals.diagnoses.errDotEnd);
                        }
                        // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1 the maximum total length of a user name or other local-part is 64
                        //    octets
                        else if (parseData.local.length > 64) {
                            updateResult(internals.diagnoses.rfc5322LocalTooLong);
                        }
                        // http://tools.ietf.org/html/rfc5322#section-3.4.1 comments and folding white space SHOULD NOT be used around "@" in the
                        //    addr-spec
                        //
                        // http://tools.ietf.org/html/rfc2119
                        // 4. SHOULD NOT this phrase, or the phrase "NOT RECOMMENDED" mean that there may exist valid reasons in particular
                        //    circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood
                        //    and the case carefully weighed before implementing any behavior described with this label.
                        else if (context.prev === internals.components.contextComment || context.prev === internals.components.contextFWS) {
                            updateResult(internals.diagnoses.deprecatedCFWSNearAt);
                        }

                        // Clear everything down for the domain parsing
                        context.now = internals.components.domain;
                        context.stack[0] = internals.components.domain;
                        elementCount = 0;
                        elementLength = 0;
                        assertEnd = false; // CFWS can only appear at the end of the element
                        break;

                    // ATEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.2.3
                        //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                        //            "!" / "#" /     ;  characters not including
                        //            "$" / "%" /     ;  specials.  Used for atoms.
                        //            "&" / "'" /
                        //            "*" / "+" /
                        //            "-" / "/" /
                        //            "=" / "?" /
                        //            "^" / "_" /
                        //            "`" / "{" /
                        //            "|" / "}" /
                        //            "~"
                        if (assertEnd) {
                            // We have encountered atext where it is no longer valid
                            switch (context.prev) {
                                case internals.components.contextComment:
                                case internals.components.contextFWS:
                                    updateResult(internals.diagnoses.errATEXTAfterCFWS);
                                    break;

                                case internals.components.contextQuotedString:
                                    updateResult(internals.diagnoses.errATEXTAfterQS);
                                    break;

                                // $lab:coverage:off$
                                default:
                                    throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                                // $lab:coverage:on$
                            }
                        }
                        else {
                            context.prev = context.now;
                            charCode = token.charCodeAt(0);

                            // Especially if charCode == 10
                            if (charCode < 33 || charCode > 126 || specialsLookup(charCode)) {

                                // Fatal error
                                updateResult(internals.diagnoses.errExpectingATEXT);
                            }

                            parseData.local += token;
                            atomData.locals[elementCount] += token;
                            ++elementLength;
                        }
                }

                break;

            case internals.components.domain:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain          =   dot-atom / domain-literal / obs-domain
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-domain      =   atom *("." atom)
                //
                //   atom            =   [CFWS] 1*atext [CFWS]

                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   Mailbox        = Local-part "@" ( Domain / address-literal )
                //
                //   Domain         = sub-domain *("." sub-domain)
                //
                //   address-literal  = "[" ( IPv4-address-literal /
                //                    IPv6-address-literal /
                //                    General-address-literal ) "]"
                //                    ; See Section 4.1.3

                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //      Note: A liberal syntax for the domain portion of addr-spec is
                //      given here.  However, the domain portion contains addressing
                //      information specified by and used in other protocols (e.g.,
                //      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore
                //      incumbent upon implementations to conform to the syntax of
                //      addresses for the context in which they are used.
                //
                // is_email() author's note: it's not clear how to interpret this in
                // he context of a general email address validator. The conclusion I
                // have reached is this: "addressing information" must comply with
                // RFC 5321 (and in turn RFC 1035), anything that is "semantically
                // invisible" must comply only with RFC 5322.
                switch (token) {
                    // Comment
                    case '(':
                        if (elementLength === 0) {
                            // Comments at the start of the domain are deprecated in the text, comments at the start of a subdomain are obs-domain
                            // http://tools.ietf.org/html/rfc5322#section-3.4.1
                            updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedComment);
                        }
                        else {
                            // We can't start a comment mid-element, better be at the end
                            assertEnd = true;
                            updateResult(internals.diagnoses.cfwsComment);
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextComment;
                        break;

                    // Next dot-atom element
                    case '.':
                        if (elementLength === 0) {
                            // Another dot, already? Fatal error.
                            updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                        }
                        else if (hyphenFlag) {
                            // Previous subdomain ended in a hyphen. Fatal error.
                            updateResult(internals.diagnoses.errDomainHyphenEnd);
                        }
                        else if (elementLength > 63) {
                            // Nowhere in RFC 5321 does it say explicitly that the domain part of a Mailbox must be a valid domain according to the
                            // DNS standards set out in RFC 1035, but this *is* implied in several places. For instance, wherever the idea of host
                            // routing is discussed the RFC says that the domain must be looked up in the DNS. This would be nonsense unless the
                            // domain was designed to be a valid DNS domain. Hence we must conclude that the RFC 1035 restriction on label length
                            // also applies to RFC 5321 domains.
                            //
                            // http://tools.ietf.org/html/rfc1035#section-2.3.4
                            // labels          63 octets or less

                            updateResult(internals.diagnoses.rfc5322LabelTooLong);
                        }

                        // CFWS is OK again now we're at the beginning of an element (although
                        // it may be obsolete CFWS)
                        assertEnd = false;
                        elementLength = 0;
                        ++elementCount;
                        atomData.domains[elementCount] = '';
                        parseData.domain += token;

                        break;

                    // Domain literal
                    case '[':
                        if (parseData.domain.length === 0) {
                            // Domain literal must be the only component
                            assertEnd = true;
                            ++elementLength;
                            context.stack.push(context.now);
                            context.now = internals.components.literal;
                            parseData.domain += token;
                            atomData.domains[elementCount] += token;
                            parseData.literal = '';
                        }
                        else {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingATEXT);
                        }

                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case ' ':
                    case '\t':
                        if (elementLength === 0) {
                            updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedFWS);
                        }
                        else {
                            // We can't start FWS in the middle of an element, so this better be the end
                            updateResult(internals.diagnoses.cfwsFWS);
                            assertEnd = true;
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // This must be ATEXT
                    default:
                        // RFC 5322 allows any atext...
                        // http://tools.ietf.org/html/rfc5322#section-3.2.3
                        //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                        //            "!" / "#" /     ;  characters not including
                        //            "$" / "%" /     ;  specials.  Used for atoms.
                        //            "&" / "'" /
                        //            "*" / "+" /
                        //            "-" / "/" /
                        //            "=" / "?" /
                        //            "^" / "_" /
                        //            "`" / "{" /
                        //            "|" / "}" /
                        //            "~"

                        // But RFC 5321 only allows letter-digit-hyphen to comply with DNS rules
                        //   (RFCs 1034 & 1123)
                        // http://tools.ietf.org/html/rfc5321#section-4.1.2
                        //   sub-domain     = Let-dig [Ldh-str]
                        //
                        //   Let-dig        = ALPHA / DIGIT
                        //
                        //   Ldh-str        = *( ALPHA / DIGIT / "-" ) Let-dig
                        //
                        if (assertEnd) {
                            // We have encountered ATEXT where it is no longer valid
                            switch (context.prev) {
                                case internals.components.contextComment:
                                case internals.components.contextFWS:
                                    updateResult(internals.diagnoses.errATEXTAfterCFWS);
                                    break;

                                case internals.components.literal:
                                    updateResult(internals.diagnoses.errATEXTAfterDomainLiteral);
                                    break;

                                // $lab:coverage:off$
                                default:
                                    throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                                // $lab:coverage:on$
                            }
                        }

                        charCode = token.charCodeAt(0);
                        // Assume this token isn't a hyphen unless we discover it is
                        hyphenFlag = false;

                        if (charCode < 33 || charCode > 126 || specialsLookup(charCode)) {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingATEXT);
                        }
                        else if (token === '-') {
                            if (elementLength === 0) {
                                // Hyphens cannot be at the beginning of a subdomain, fatal error
                                updateResult(internals.diagnoses.errDomainHyphenStart);
                            }

                            hyphenFlag = true;
                        }
                        // Check if it's a neither a number nor a latin letter
                        else if (charCode < 48 || charCode > 122 || (charCode > 57 && charCode < 65) || (charCode > 90 && charCode < 97)) {
                            // This is not an RFC 5321 subdomain, but still OK by RFC 5322
                            updateResult(internals.diagnoses.rfc5322Domain);
                        }

                        parseData.domain += token;
                        atomData.domains[elementCount] += token;
                        ++elementLength;
                }

                break;

            // Domain literal
            case internals.components.literal:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-dtext       =   obs-NO-WS-CTL / quoted-pair
                switch (token) {
                    // End of domain literal
                    case ']':
                        if (maxResult < internals.categories.deprecated) {
                            // Could be a valid RFC 5321 address literal, so let's check

                            // http://tools.ietf.org/html/rfc5321#section-4.1.2
                            //   address-literal  = "[" ( IPv4-address-literal /
                            //                    IPv6-address-literal /
                            //                    General-address-literal ) "]"
                            //                    ; See Section 4.1.3
                            //
                            // http://tools.ietf.org/html/rfc5321#section-4.1.3
                            //   IPv4-address-literal  = Snum 3("."  Snum)
                            //
                            //   IPv6-address-literal  = "IPv6:" IPv6-addr
                            //
                            //   General-address-literal  = Standardized-tag ":" 1*dcontent
                            //
                            //   Standardized-tag  = Ldh-str
                            //                     ; Standardized-tag MUST be specified in a
                            //                     ; Standards-Track RFC and registered with IANA
                            //
                            //   dcontent      = %d33-90 / ; Printable US-ASCII
                            //                 %d94-126 ; excl. "[", "\", "]"
                            //
                            //   Snum          = 1*3DIGIT
                            //                 ; representing a decimal integer
                            //                 ; value in the range 0 through 255
                            //
                            //   IPv6-addr     = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp
                            //
                            //   IPv6-hex      = 1*4HEXDIG
                            //
                            //   IPv6-full     = IPv6-hex 7(":" IPv6-hex)
                            //
                            //   IPv6-comp     = [IPv6-hex *5(":" IPv6-hex)] "::"
                            //                 [IPv6-hex *5(":" IPv6-hex)]
                            //                 ; The "::" represents at least 2 16-bit groups of
                            //                 ; zeros.  No more than 6 groups in addition to the
                            //                 ; "::" may be present.
                            //
                            //   IPv6v4-full   = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal
                            //
                            //   IPv6v4-comp   = [IPv6-hex *3(":" IPv6-hex)] "::"
                            //                 [IPv6-hex *3(":" IPv6-hex) ":"]
                            //                 IPv4-address-literal
                            //                 ; The "::" represents at least 2 16-bit groups of
                            //                 ; zeros.  No more than 4 groups in addition to the
                            //                 ; "::" and IPv4-address-literal may be present.

                            var index = -1;
                            var addressLiteral = parseData.literal;
                            var matchesIP = IPv4_REGEX.exec(addressLiteral);

                            // Maybe extract IPv4 part from the end of the address-literal
                            if (matchesIP) {
                                index = matchesIP.index;
                                if (index !== 0) {
                                    // Convert IPv4 part to IPv6 format for futher testing
                                    addressLiteral = addressLiteral.slice(0, index) + '0:0';
                                }
                            }

                            if (index === 0) {
                                // Nothing there except a valid IPv4 address, so...
                                updateResult(internals.diagnoses.rfc5321AddressLiteral);
                            }
                            else if (addressLiteral.slice(0, 5).toLowerCase() !== 'ipv6:') {
                                updateResult(internals.diagnoses.rfc5322DomainLiteral);
                            }
                            else {
                                var match = addressLiteral.slice(5);
                                var maxGroups = internals.maxIPv6Groups;
                                var groups = match.split(':');
                                index = match.indexOf('::');

                                if (!~index) {
                                    // Need exactly the right number of groups
                                    if (groups.length !== maxGroups) {
                                        updateResult(internals.diagnoses.rfc5322IPv6GroupCount);
                                    }
                                }
                                else if (index !== match.lastIndexOf('::')) {
                                    updateResult(internals.diagnoses.rfc5322IPv62x2xColon);
                                }
                                else {
                                    if (index === 0 || index === match.length - 2) {
                                        // RFC 4291 allows :: at the start or end of an address with 7 other groups in addition
                                        ++maxGroups;
                                    }

                                    if (groups.length > maxGroups) {
                                        updateResult(internals.diagnoses.rfc5322IPv6MaxGroups);
                                    }
                                    else if (groups.length === maxGroups) {
                                        // Eliding a single "::"
                                        updateResult(internals.diagnoses.deprecatedIPv6);
                                    }
                                }

                                // IPv6 testing strategy
                                if (match[0] === ':' && match[1] !== ':') {
                                    updateResult(internals.diagnoses.rfc5322IPv6ColonStart);
                                }
                                else if (match[match.length - 1] === ':' && match[match.length - 2] !== ':') {
                                    updateResult(internals.diagnoses.rfc5322IPv6ColonEnd);
                                }
                                else if (groups.every(IPv6_REGEX_TEST)) {
                                    updateResult(internals.diagnoses.rfc5321AddressLiteral);
                                }
                                else {
                                    updateResult(internals.diagnoses.rfc5322IPv6BadCharacter);
                                }
                            }
                        }
                        else {
                            updateResult(internals.diagnoses.rfc5322DomainLiteral);
                        }

                        parseData.domain += token;
                        atomData.domains[elementCount] += token;
                        ++elementLength;
                        context.prev = context.now;
                        context.now = context.stack.pop();
                        break;

                    case '\\':
                        updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                        context.stack.push(context.now);
                        context.now = internals.components.contextQuotedPair;
                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case ' ':
                    case '\t':
                        updateResult(internals.diagnoses.cfwsFWS);

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // DTEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.4.1
                        //   dtext         =   %d33-90 /  ; Printable US-ASCII
                        //                     %d94-126 / ;  characters not including
                        //                     obs-dtext  ;  "[", "]", or "\"
                        //
                        //   obs-dtext     =   obs-NO-WS-CTL / quoted-pair
                        //
                        //   obs-NO-WS-CTL =   %d1-8 /    ; US-ASCII control
                        //                     %d11 /     ;  characters that do not
                        //                     %d12 /     ;  include the carriage
                        //                     %d14-31 /  ;  return, line feed, and
                        //                     %d127      ;  white space characters
                        charCode = token.charCodeAt(0);

                        // '\r', '\n', ' ', and '\t' have already been parsed above
                        if (charCode > 127 || charCode === 0 || token === '[') {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingDTEXT);
                            break;
                        }
                        else if (charCode < 33 || charCode === 127) {
                            updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                        }

                        parseData.literal += token;
                        parseData.domain += token;
                        atomData.domains[elementCount] += token;
                        ++elementLength;
                }

                break;

            // Quoted string
            case internals.components.contextQuotedString:
                // http://tools.ietf.org/html/rfc5322#section-3.2.4
                //   quoted-string = [CFWS]
                //                   DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                   [CFWS]
                //
                //   qcontent      = qtext / quoted-pair
                switch (token) {
                    // Quoted pair
                    case '\\':
                        context.stack.push(context.now);
                        context.now = internals.components.contextQuotedPair;
                        break;

                    // Folding white space. Spaces are allowed as regular characters inside a quoted string - it's only FWS if we include '\t' or '\r\n'
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case '\t':
                        // http://tools.ietf.org/html/rfc5322#section-3.2.2
                        //   Runs of FWS, comment, or CFWS that occur between lexical tokens in
                        //   a structured header field are semantically interpreted as a single
                        //   space character.

                        // http://tools.ietf.org/html/rfc5322#section-3.2.4
                        //   the CRLF in any FWS/CFWS that appears within the quoted-string [is]
                        //   semantically "invisible" and therefore not part of the
                        //   quoted-string

                        parseData.local += ' ';
                        atomData.locals[elementCount] += ' ';
                        ++elementLength;

                        updateResult(internals.diagnoses.cfwsFWS);
                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // End of quoted string
                    case '"':
                        parseData.local += token;
                        atomData.locals[elementCount] += token;
                        ++elementLength;
                        context.prev = context.now;
                        context.now = context.stack.pop();
                        break;

                    // QTEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.2.4
                        //   qtext          =   %d33 /             ; Printable US-ASCII
                        //                      %d35-91 /          ;  characters not including
                        //                      %d93-126 /         ;  "\" or the quote character
                        //                      obs-qtext
                        //
                        //   obs-qtext      =   obs-NO-WS-CTL
                        //
                        //   obs-NO-WS-CTL  =   %d1-8 /            ; US-ASCII control
                        //                      %d11 /             ;  characters that do not
                        //                      %d12 /             ;  include the carriage
                        //                      %d14-31 /          ;  return, line feed, and
                        //                      %d127              ;  white space characters
                        charCode = token.charCodeAt(0);

                        if (charCode > 127 || charCode === 0 || charCode === 10) {
                            updateResult(internals.diagnoses.errExpectingQTEXT);
                        }
                        else if (charCode < 32 || charCode === 127) {
                            updateResult(internals.diagnoses.deprecatedQTEXT);
                        }

                        parseData.local += token;
                        atomData.locals[elementCount] += token;
                        ++elementLength;
                }

                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   If the string can be represented as a dot-atom (that is, it contains
                //   no characters other than atext characters or "." surrounded by atext
                //   characters), then the dot-atom form SHOULD be used and the quoted-
                //   string form SHOULD NOT be used.

                break;
            // Quoted pair
            case internals.components.contextQuotedPair:
                // http://tools.ietf.org/html/rfc5322#section-3.2.1
                //   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp
                //
                //   VCHAR           =  %d33-126   ; visible (printing) characters
                //   WSP             =  SP / HTAB  ; white space
                //
                //   obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)
                //
                //   obs-NO-WS-CTL   =   %d1-8 /   ; US-ASCII control
                //                       %d11 /    ;  characters that do not
                //                       %d12 /    ;  include the carriage
                //                       %d14-31 / ;  return, line feed, and
                //                       %d127     ;  white space characters
                //
                // i.e. obs-qp       =  "\" (%d0-8, %d10-31 / %d127)
                charCode = token.charCodeAt(0);

                if (charCode > 127) {
                    // Fatal error
                    updateResult(internals.diagnoses.errExpectingQPair);
                }
                else if ((charCode < 31 && charCode !== 9) || charCode === 127) {
                    // ' ' and '\t' are allowed
                    updateResult(internals.diagnoses.deprecatedQP);
                }

                // At this point we know where this qpair occurred so we could check to see if the character actually needed to be quoted at all.
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   the sending system SHOULD transmit the form that uses the minimum quoting possible.

                context.prev = context.now;
                // End of qpair
                context.now = context.stack.pop();
                token = '\\' + token;

                switch (context.now) {
                    case internals.components.contextComment:
                        break;

                    case internals.components.contextQuotedString:
                        parseData.local += token;
                        atomData.locals[elementCount] += token;

                        // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
                        elementLength += 2;
                        break;

                    case internals.components.literal:
                        parseData.domain += token;
                        atomData.domains[elementCount] += token;

                        // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
                        elementLength += 2;
                        break;

                    // $lab:coverage:off$
                    default:
                        throw new Error('quoted pair logic invoked in an invalid context: ' + context.now);
                    // $lab:coverage:on$
                }
                break;

            // Comment
            case internals.components.contextComment:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   comment  = "(" *([FWS] ccontent) [FWS] ")"
                //
                //   ccontent = ctext / quoted-pair / comment
                switch (token) {
                    // Nested comment
                    case '(':
                        // Nested comments are ok
                        context.stack.push(context.now);
                        context.now = internals.components.contextComment;
                        break;

                    // End of comment
                    case ')':
                        context.prev = context.now;
                        context.now = context.stack.pop();
                        break;

                    // Quoted pair
                    case '\\':
                        context.stack.push(context.now);
                        context.now = internals.components.contextQuotedPair;
                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case ' ':
                    case '\t':
                        updateResult(internals.diagnoses.cfwsFWS);

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // CTEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.2.3
                        //   ctext         = %d33-39 /  ; Printable US-ASCII
                        //                   %d42-91 /  ;  characters not including
                        //                   %d93-126 / ;  "(", ")", or "\"
                        //                   obs-ctext
                        //
                        //   obs-ctext     = obs-NO-WS-CTL
                        //
                        //   obs-NO-WS-CTL = %d1-8 /    ; US-ASCII control
                        //                   %d11 /     ;  characters that do not
                        //                   %d12 /     ;  include the carriage
                        //                   %d14-31 /  ;  return, line feed, and
                        //                   %d127      ;  white space characters
                        charCode = token.charCodeAt(0);

                        if (charCode > 127 || charCode === 0 || charCode === 10) {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingCTEXT);
                            break;
                        }
                        else if (charCode < 32 || charCode === 127) {
                            updateResult(internals.diagnoses.deprecatedCTEXT);
                        }
                }

                break;

            // Folding white space
            case internals.components.contextFWS:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   FWS     =   ([*WSP CRLF] 1*WSP) /  obs-FWS
                //                                   ; Folding white space

                // But note the erratum:
                // http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908:
                //   In the obsolete syntax, any amount of folding white space MAY be
                //   inserted where the obs-FWS rule is allowed.  This creates the
                //   possibility of having two consecutive "folds" in a line, and
                //   therefore the possibility that a line which makes up a folded header
                //   field could be composed entirely of white space.
                //
                //   obs-FWS =   1*([CRLF] WSP)

                if (prevToken === '\r') {
                    if (token === '\r') {
                        // Fatal error
                        updateResult(internals.diagnoses.errFWSCRLFx2);
                        break;
                    }

                    if (++crlfCount > 1) {
                        // Multiple folds => obsolete FWS
                        updateResult(internals.diagnoses.deprecatedFWS);
                    }
                    else {
                        crlfCount = 1;
                    }
                }

                switch (token) {
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                        }

                        break;

                    case ' ':
                    case '\t':
                        break;

                    default:
                        if (prevToken === '\r') {
                            // Fatal error
                            updateResult(internals.diagnoses.errFWSCRLFEnd);
                        }

                        crlfCount = 0;

                        // End of FWS
                        context.prev = context.now;
                        context.now = context.stack.pop();

                        // Look at this token again in the parent context
                        --i;
                }

                prevToken = token;
                break;

            // Unexpected context
            // $lab:coverage:off$
            default:
                throw new Error('unknown context: ' + context.now);
            // $lab:coverage:on$
        } // Primary state machine

        if (maxResult > internals.categories.rfc5322) {
            // Fatal error, no point continuing
            break;
        }
    } // Token loop

    // Check for errors
    if (maxResult < internals.categories.rfc5322) {
        // Fatal errors
        if (context.now === internals.components.contextQuotedString) {
            updateResult(internals.diagnoses.errUnclosedQuotedString);
        }
        else if (context.now === internals.components.contextQuotedPair) {
            updateResult(internals.diagnoses.errBackslashEnd);
        }
        else if (context.now === internals.components.contextComment) {
            updateResult(internals.diagnoses.errUnclosedComment);
        }
        else if (context.now === internals.components.literal) {
            updateResult(internals.diagnoses.errUnclosedDomainLiteral);
        }
        else if (token === '\r') {
            updateResult(internals.diagnoses.errFWSCRLFEnd);
        }
        else if (parseData.domain.length === 0) {
            updateResult(internals.diagnoses.errNoDomain);
        }
        else if (elementLength === 0) {
            updateResult(internals.diagnoses.errDotEnd);
        }
        else if (hyphenFlag) {
            updateResult(internals.diagnoses.errDomainHyphenEnd);
        }

        // Other errors
        else if (parseData.domain.length > 255) {
            // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.2
            //   The maximum total length of a domain name or number is 255 octets.
            updateResult(internals.diagnoses.rfc5322DomainTooLong);
        }
        else if (parseData.local.length + parseData.domain.length + /* '@' */ 1 > 254) {
            // http://tools.ietf.org/html/rfc5321#section-4.1.2
            //   Forward-path   = Path
            //
            //   Path           = "<" [ A-d-l ":" ] Mailbox ">"
            //
            // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3
            //   The maximum total length of a reverse-path or forward-path is 256 octets (including the punctuation and element separators).
            //
            // Thus, even without (obsolete) routing information, the Mailbox can only be 254 characters long. This is confirmed by this verified
            // erratum to RFC 3696:
            //
            // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690
            //   However, there is a restriction in RFC 2821 on the length of an address in MAIL and RCPT commands of 254 characters.  Since
            //   addresses that do not fit in those fields are not normally useful, the upper limit on address lengths should normally be considered
            //   to be 254.
            updateResult(internals.diagnoses.rfc5322TooLong);
        }
        else if (elementLength > 63) {
            // http://tools.ietf.org/html/rfc1035#section-2.3.4
            // labels   63 octets or less
            updateResult(internals.diagnoses.rfc5322LabelTooLong);
        }
        else if (options.minDomainAtoms && atomData.domains.length < options.minDomainAtoms) {
            updateResult(internals.diagnoses.errDomainTooShort);
        }
        else if (options.tldWhitelist) {
            var tldAtom = atomData.domains[elementCount];
            if (Array.isArray(options.tldWhitelist)) {
                var tldValid = false;
                for (i = 0, il = options.tldWhitelist.length; i < il; ++i) {
                    if (tldAtom === options.tldWhitelist[i]) {
                        tldValid = true;
                        break;
                    }
                }

                if (!tldValid) {
                    updateResult(internals.diagnoses.errUnknownTLD);
                }
            }
            else if (!hasOwn.call(options.tldWhitelist, tldAtom)) {
                updateResult(internals.diagnoses.errUnknownTLD);
            }
        }
    } // Check for errors

    var dnsPositive = false;
    var finishImmediately = false;

    var finish = function finish () {

        if (!dnsPositive && maxResult < internals.categories.dnsWarn) {
            // Per RFC 5321, domain atoms are limited to letter-digit-hyphen, so we only need to check code <= 57 to check for a digit
            var code = atomData.domains[elementCount].charCodeAt(0);
            if (code <= 57) {
                updateResult(internals.diagnoses.rfc5321TLDNumeric);
            }
            else if (elementCount === 0) {
                updateResult(internals.diagnoses.rfc5321TLD);
            }
        }

        if (maxResult < threshold) {
            maxResult = internals.diagnoses.valid;
        }

        var finishResult = diagnose ? maxResult : maxResult < internals.defaultThreshold;

        if (callback) {
            if (finishImmediately) {
                callback(finishResult);
            } else {
                internals.defer(callback.bind(null, finishResult));
            }
        }

        return finishResult;
    }; // Finish

    if (options.checkDNS && maxResult < internals.categories.dnsWarn) {
        // http://tools.ietf.org/html/rfc5321#section-2.3.5
        //   Names that can be resolved to MX RRs or address (i.e., A or AAAA) RRs (as discussed in Section 5) are permitted, as are CNAME RRs whose
        //   targets can be resolved, in turn, to MX or address RRs.
        //
        // http://tools.ietf.org/html/rfc5321#section-5.1
        //   The lookup first attempts to locate an MX record associated with the name.  If a CNAME record is found, the resulting name is processed
        //   as if it were the initial name. ... If an empty list of MXs is returned, the address is treated as if it was associated with an implicit
        //   MX RR, with a preference of 0, pointing to that host.
        //
        // isEmail() author's note: We will regard the existence of a CNAME to be sufficient evidence of the domain's existence. For performance
        // reasons we will not repeat the DNS lookup for the CNAME's target, but we will raise a warning because we didn't immediately find an MX
        // record.
        if (elementCount === 0) {
            // Checking TLD DNS only works if you explicitly check from the root
            parseData.domain += '.';
        }

        var dnsDomain = parseData.domain;
        Dns.resolveMx(dnsDomain, function resolveDNS (err, mxRecords) {

            // If we have a fatal error, then we must assume that there are no records
            if (err && err.code !== Dns.NODATA) {
                updateResult(internals.diagnoses.dnsWarnNoRecord);
                return finish();
            }

            if (mxRecords && mxRecords.length) {
                dnsPositive = true;
                return finish();
            }

            var count = 3;
            var done = false;
            updateResult(internals.diagnoses.dnsWarnNoMXRecord);

            var handleRecords = function handleRecords (err, records) {

                if (done) {
                    return;
                }

                --count;

                if (records && records.length) {
                    done = true;
                    return finish();
                }

                if (count === 0) {
                    // No usable records for the domain can be found
                    updateResult(internals.diagnoses.dnsWarnNoRecord);
                    done = true;
                    finish();
                }
            };

            Dns.resolveCname(dnsDomain, handleRecords);
            Dns.resolve4(dnsDomain, handleRecords);
            Dns.resolve6(dnsDomain, handleRecords);
        });

        finishImmediately = true;
    }
    else {
        var result = finish();
        finishImmediately = true;
        return result;
    } // CheckDNS
};


isEmail.diagnoses = (function exportDiagnoses () {

    var diag = {};
    for (var key in internals.diagnoses) {
        diag[key] = internals.diagnoses[key];
    }
    return diag;
})();

module.exports = isEmail;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Any = __webpack_require__(10);
var Cast = __webpack_require__(38);
var Errors = __webpack_require__(12);
var Hoek = __webpack_require__(5);


// Declare internals

var internals = {};


internals.Array = function () {

    Any.call(this);
    this._type = 'array';
    this._inner.inclusions = [];
    this._inner.exclusions = [];
    this._flags.sparse = false;
};

Hoek.inherits(internals.Array, Any);


internals.Array.prototype._base = function (value, state, options) {

    var result = {
        value: value
    };

    if (typeof value === 'string' &&
        options.convert) {

        try {
            var converted = JSON.parse(value);
            if (Array.isArray(converted)) {
                result.value = converted;
            }
        }
        catch (e) { }
    }

    var isArray = Array.isArray(result.value);
    var wasArray = isArray;
    if (options.convert && this._flags.single && !isArray) {
        result.value = [result.value];
        isArray = true;
    }

    if (!isArray) {
        result.errors = Errors.create('array.base', null, state, options);
        return result;
    }

    if (this._inner.inclusions.length ||
        this._inner.exclusions.length ||
        !this._flags.sparse) {

        if (wasArray) {
            result.value = result.value.slice(0);
        }

        var check = function () {

            for (var v = 0, vl = result.value.length; v < vl; ++v) {
                var item = result.value[v];
                var isValid = false;
                var localState = { key: v, path: (state.path ? state.path + '.' : '') + v, parent: result.value, reference: state.reference };

                // Sparse

                if (!this._flags.sparse && item === undefined) {
                    result.errors = Errors.create('array.sparse', null, { key: state.key, path: localState.path }, options);
                    return result;
                }

                // Exclusions

                for (var i = 0, il = this._inner.exclusions.length; i < il; ++i) {
                    var res = this._inner.exclusions[i]._validate(item, localState, {});                // Not passing options to use defaults
                    if (!res.errors) {
                        result.errors = Errors.create(wasArray ? 'array.excludes' : 'array.excludesSingle', { pos: v }, { key: state.key, path: localState.path }, options);
                        return result;
                    }
                }

                // Inclusions

                for (i = 0, il = this._inner.inclusions.length; i < il; ++i) {
                    var res = this._inner.inclusions[i]._validate(item, localState, options);
                    if (!res.errors) {
                        result.value[v] = res.value;
                        isValid = true;
                        break;
                    }

                    // Return the actual error if only one inclusion defined

                    if (il === 1) {
                        result.errors = Errors.create(wasArray ? 'array.includesOne' : 'array.includesOneSingle', { pos: v, reason: res.errors }, { key: state.key, path: localState.path }, options);
                        return result;
                    }
                }

                if (this._inner.inclusions.length &&
                    !isValid) {

                    result.errors = Errors.create(wasArray ? 'array.includes' : 'array.includesSingle', { pos: v }, { key: state.key, path: localState.path }, options);
                    return result;
                }
            }

            return result;
        };

        if (check.call(this).errors && wasArray && options.convert && this._flags.single) {
            // Attempt a 2nd pass by putting the array inside one.
            var previousErrors = result.errors;
            delete result.errors;
            result.value = [result.value];
            if (check.call(this).errors) {
                // Restore previous errors and value since this didn't validate either.
                result.errors = previousErrors;
                result.value = result.value[0];
            }
        }
    }

    return result;
};


internals.Array.prototype.describe = function () {

    var description = Any.prototype.describe.call(this);

    if (this._inner.inclusions.length) {
        description.includes = [];

        for (var i = 0, il = this._inner.inclusions.length; i < il; ++i) {
            description.includes.push(this._inner.inclusions[i].describe());
        }
    }

    if (this._inner.exclusions.length) {
        description.excludes = [];

        for (var i = 0, il = this._inner.exclusions.length; i < il; ++i) {
            description.excludes.push(this._inner.exclusions[i].describe());
        }
    }

    return description;
};


internals.Array.prototype.includes = function () {

    var inclusions = Hoek.flatten(Array.prototype.slice.call(arguments)).map(function (type) {

        return Cast.schema(type);
    });

    var obj = this.clone();
    obj._inner.inclusions = obj._inner.inclusions.concat(inclusions);
    return obj;
};


internals.Array.prototype.excludes = function () {

    var exclusions = Hoek.flatten(Array.prototype.slice.call(arguments)).map(function (type) {

        return Cast.schema(type);
    });

    var obj = this.clone();
    obj._inner.exclusions = obj._inner.exclusions.concat(exclusions);
    return obj;
};


internals.Array.prototype.min = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('min', limit, function (value, state, options) {

        if (value.length >= limit) {
            return null;
        }

        return Errors.create('array.min', { limit: limit }, state, options);
    });
};


internals.Array.prototype.max = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('max', limit, function (value, state, options) {

        if (value.length <= limit) {
            return null;
        }

        return Errors.create('array.max', { limit: limit }, state, options);
    });
};


internals.Array.prototype.length = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('length', limit, function (value, state, options) {

        if (value.length === limit) {
            return null;
        }

        return Errors.create('array.length', { limit: limit }, state, options);
    });
};


internals.Array.prototype.unique = function () {

    return this._test('unique', undefined, function (value, state, options) {

        var found = {
            string: {},
            number: {},
            undefined: {},
            boolean: {},
            object: [],
            function: []
        };

        for (var i = 0, il = value.length; i < il; ++i) {
            var item = value[i];
            var type = typeof item;
            var records = found[type];

            // All available types are supported, so it's not possible to reach 100% coverage without ignoring this line.
            // I still want to keep the test for future js versions with new types (eg. Symbol).
            if (/* $lab:coverage:off$ */ records /* $lab:coverage:on$ */) {
                if (Array.isArray(records)) {
                    for (var r = 0, rl = records.length; r < rl; ++r) {
                        if (Hoek.deepEqual(records[r], item)) {
                            return Errors.create('array.unique', { pos: i }, state, options);
                        }
                    }

                    records.push(item);
                }
                else {
                    if (records[item]) {
                        return Errors.create('array.unique', { pos: i }, state, options);
                    }

                    records[item] = true;
                }
            }
        }
    });
};


internals.Array.prototype.sparse = function (enabled) {

    var obj = this.clone();
    obj._flags.sparse = enabled === undefined ? true : !!enabled;
    return obj;
};


internals.Array.prototype.single = function (enabled) {

    var obj = this.clone();
    obj._flags.single = enabled === undefined ? true : !!enabled;
    return obj;
}


module.exports = new internals.Array();


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Load modules

var Any = __webpack_require__(10);
var Errors = __webpack_require__(12);
var Hoek = __webpack_require__(5);


// Declare internals

var internals = {};


internals.Binary = function () {

    Any.call(this);
    this._type = 'binary';
};

Hoek.inherits(internals.Binary, Any);


internals.Binary.prototype._base = function (value, state, options) {

    var result = {
        value: value
    };

    if (typeof value === 'string' &&
        options.convert) {

        try {
            var converted = new Buffer(value, this._flags.encoding);
            result.value = converted;
        }
        catch (e) { }
    }

    result.errors = Buffer.isBuffer(result.value) ? null : Errors.create('binary.base', null, state, options);
    return result;
};


internals.Binary.prototype.encoding = function (encoding) {

    Hoek.assert(Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);

    var obj = this.clone();
    obj._flags.encoding = encoding;
    return obj;
};


internals.Binary.prototype.min = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('min', limit, function (value, state, options) {

        if (value.length >= limit) {
            return null;
        }

        return Errors.create('binary.min', { limit: limit }, state, options);
    });
};


internals.Binary.prototype.max = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('max', limit, function (value, state, options) {

        if (value.length <= limit) {
            return null;
        }

        return Errors.create('binary.max', { limit: limit }, state, options);
    });
};


internals.Binary.prototype.length = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('length', limit, function (value, state, options) {

        if (value.length === limit) {
            return null;
        }

        return Errors.create('binary.length', { limit: limit }, state, options);
    });
};


module.exports = new internals.Binary();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer))

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Any = __webpack_require__(10);
var Errors = __webpack_require__(12);
var Hoek = __webpack_require__(5);


// Declare internals

var internals = {};


internals.Function = function () {

    Any.call(this);
    this._type = 'func';
};

Hoek.inherits(internals.Function, Any);


internals.Function.prototype._base = function (value, state, options) {

    return {
        value: value,
        errors: (typeof value === 'function') ? null : Errors.create('function.base', null, state, options)
    };
};


module.exports = new internals.Function();

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Hoek = __webpack_require__(5);
var Any = __webpack_require__(10);
var Cast = __webpack_require__(38);
var Ref = __webpack_require__(39);


// Declare internals

var internals = {
    alternatives: __webpack_require__(79),
    array: __webpack_require__(382),
    boolean: __webpack_require__(135),
    binary: __webpack_require__(383),
    date: __webpack_require__(80),
    func: __webpack_require__(384),
    number: __webpack_require__(136),
    object: __webpack_require__(137),
    string: __webpack_require__(138)
};


internals.root = function () {

    var any = new Any();

    var root = any.clone();
    root.any = function () {

        return any;
    };

    root.alternatives = root.alt = function () {

        return arguments.length ? internals.alternatives.try.apply(internals.alternatives, arguments) : internals.alternatives;
    };

    root.array = function () {

        return internals.array;
    };

    root.boolean = root.bool = function () {

        return internals.boolean;
    };

    root.binary = function () {

        return internals.binary;
    };

    root.date = function () {

        return internals.date;
    };

    root.func = function () {

        return internals.func;
    };

    root.number = function () {

        return internals.number;
    };

    root.object = function () {

        return arguments.length ? internals.object.keys.apply(internals.object, arguments) : internals.object;
    };

    root.string = function () {

        return internals.string;
    };

    root.ref = function () {

        return Ref.create.apply(null, arguments);
    };

    root.isRef = function (ref) {

        return Ref.isRef(ref);
    };

    root.validate = function (value /*, [schema], [options], callback */) {

        var last = arguments[arguments.length - 1];
        var callback = typeof last === 'function' ? last : null;

        var count = arguments.length - (callback ? 1 : 0);
        if (count === 1) {
            return any.validate(value, callback);
        }

        var options = count === 3 ? arguments[2] : {};
        var schema = Cast.schema(arguments[1]);

        return schema._validateWithOptions(value, options, callback);
    };

    root.describe = function () {

        var schema = arguments.length ? Cast.schema(arguments[0]) : any;
        return schema.describe();
    };

    root.compile = function (schema) {

        return Cast.schema(schema);
    };

    root.assert = function (value, schema, message) {

        message = (message ? message + ' ' : '');
        var error = root.validate(value, schema).error;
        if (error) {
            throw new Error(message + error.annotate());
        }
    };

    return root;
};


module.exports = internals.root();


/***/ }),
/* 386 */
/***/ (function(module, exports) {

// Load modules


// Declare internals

var internals = {};


exports.errors = {
    root: 'value',
    any: {
        unknown: 'is not allowed',
        invalid: 'contains an invalid value',
        empty: 'is not allowed to be empty',
        required: 'is required',
        allowOnly: 'must be one of {{valids}}'
    },
    alternatives: {
        base: 'not matching any of the allowed alternatives'
    },
    array: {
        base: 'must be an array',
        includes: 'at position {{pos}} does not match any of the allowed types',
        includesSingle: 'single value of {{!key}} does not match any of the allowed types',
        includesOne: 'at position {{pos}} fails because {{reason}}',
        includesOneSingle: 'single value of {{!key}} fails because {{reason}}',
        excludes: 'at position {{pos}} contains an excluded value',
        excludesSingle: 'single value of {{!key}} contains an excluded value',
        min: 'must contain at least {{limit}} items',
        max: 'must contain less than or equal to {{limit}} items',
        length: 'must contain {{limit}} items',
        sparse: 'must not be a sparse array',
        unique: 'position {{pos}} contains a duplicate value'
    },
    boolean: {
        base: 'must be a boolean'
    },
    binary: {
        base: 'must be a buffer or a string',
        min: 'must be at least {{limit}} bytes',
        max: 'must be less than or equal to {{limit}} bytes',
        length: 'must be {{limit}} bytes'
    },
    date: {
        base: 'must be a number of milliseconds or valid date string',
        min: 'must be larger than or equal to {{limit}}',
        max: 'must be less than or equal to {{limit}}',
        isoDate: 'must be a valid ISO 8601 date',
        ref: 'references {{ref}} which is not a date'
    },
    function: {
        base: 'must be a Function'
    },
    object: {
        base: 'must be an object',
        min: 'must have at least {{limit}} children',
        max: 'must have less than or equal to {{limit}} children',
        length: 'must have {{limit}} children',
        allowUnknown: 'is not allowed',
        with: 'missing required peer {{peer}}',
        without: 'conflict with forbidden peer {{peer}}',
        missing: 'must contain at least one of {{peers}}',
        xor: 'contains a conflict between exclusive peers {{peers}}',
        or: 'must contain at least one of {{peers}}',
        and: 'contains {{present}} without its required peers {{missing}}',
        nand: '{{main}} must not exist simultaneously with {{peers}}',
        assert: 'validation failed because {{ref}} failed to {{message}}',
        rename: {
            multiple: 'cannot rename child {{from}} because multiple renames are disabled and another key was already renamed to {{to}}',
            override: 'cannot rename child {{from}} because override is disabled and target {{to}} exists'
        },
        type: 'must be an instance of {{type}}'
    },
    number: {
        base: 'must be a number',
        min: 'must be larger than or equal to {{limit}}',
        max: 'must be less than or equal to {{limit}}',
        less: 'must be less than {{limit}}',
        greater: 'must be greater than {{limit}}',
        float: 'must be a float or double',
        integer: 'must be an integer',
        negative: 'must be a negative number',
        positive: 'must be a positive number',
        precision: 'must have no more than {{limit}} decimal places'
    },
    string: {
        base: 'must be a string',
        min: 'length must be at least {{limit}} characters long',
        max: 'length must be less than or equal to {{limit}} characters long',
        length: 'length must be {{limit}} characters long',
        alphanum: 'must only contain alpha-numeric characters',
        token: 'must only contain alpha-numeric and underscore characters',
        regex: {
            base: 'fails to match the required pattern',
            name: 'fails to match the {{name}} pattern'
        },
        email: 'must be a valid email',
        isoDate: 'must be a valid ISO 8601 date',
        guid: 'must be a valid GUID',
        hostname: 'must be a valid hostname',
        lowercase: 'must only contain lowercase characters',
        uppercase: 'must only contain uppercase characters',
        trim: 'must not have leading or trailing whitespace',
        creditCard: 'must be a credit card'
    }
};


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(22),
    root = __webpack_require__(17);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(437),
    hashDelete = __webpack_require__(438),
    hashGet = __webpack_require__(439),
    hashHas = __webpack_require__(440),
    hashSet = __webpack_require__(441);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(22),
    root = __webpack_require__(17);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(22),
    root = __webpack_require__(17);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(82),
    setCacheAdd = __webpack_require__(461),
    setCacheHas = __webpack_require__(462);

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(17);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(22),
    root = __webpack_require__(17);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),
/* 394 */
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),
/* 395 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

module.exports = arrayEvery;


/***/ }),
/* 396 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(421),
    isArguments = __webpack_require__(87),
    isArray = __webpack_require__(13),
    isBuffer = __webpack_require__(88),
    isIndex = __webpack_require__(83),
    isTypedArray = __webpack_require__(91);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),
/* 398 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),
/* 399 */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),
/* 400 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(146),
    keys = __webpack_require__(43);

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(14);

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

var baseForOwn = __webpack_require__(406),
    createBaseEach = __webpack_require__(427);

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(403);

/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */
function baseEvery(collection, predicate) {
  var result = true;
  baseEach(collection, function(value, index, collection) {
    result = !!predicate(value, index, collection);
    return result;
  });
  return result;
}

module.exports = baseEvery;


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(428);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(405),
    keys = __webpack_require__(43);

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(399),
    isArray = __webpack_require__(13);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),
/* 408 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(40),
    isObjectLike = __webpack_require__(42);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(139),
    equalArrays = __webpack_require__(148),
    equalByTag = __webpack_require__(429),
    equalObjects = __webpack_require__(430),
    getTag = __webpack_require__(150),
    isArray = __webpack_require__(13),
    isBuffer = __webpack_require__(88),
    isTypedArray = __webpack_require__(91);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(139),
    baseIsEqual = __webpack_require__(143);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(58),
    isMasked = __webpack_require__(443),
    isObject = __webpack_require__(14),
    toSource = __webpack_require__(154);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(40),
    isLength = __webpack_require__(89),
    isObjectLike = __webpack_require__(42);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

var baseMatches = __webpack_require__(415),
    baseMatchesProperty = __webpack_require__(416),
    identity = __webpack_require__(86),
    isArray = __webpack_require__(13),
    property = __webpack_require__(479);

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(411),
    getMatchData = __webpack_require__(432),
    matchesStrictComparable = __webpack_require__(153);

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(143),
    get = __webpack_require__(475),
    hasIn = __webpack_require__(476),
    isKey = __webpack_require__(84),
    isStrictComparable = __webpack_require__(152),
    matchesStrictComparable = __webpack_require__(153),
    toKey = __webpack_require__(56);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),
/* 417 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(142);

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(86),
    overRest = __webpack_require__(460),
    setToString = __webpack_require__(464);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

var constant = __webpack_require__(473),
    defineProperty = __webpack_require__(147),
    identity = __webpack_require__(86);

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;


/***/ }),
/* 421 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(52),
    arrayMap = __webpack_require__(398),
    isArray = __webpack_require__(13),
    isSymbol = __webpack_require__(90);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),
/* 423 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),
/* 424 */
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(17);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

var baseRest = __webpack_require__(419),
    isIterateeCall = __webpack_require__(151);

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;


/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(41);

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;


/***/ }),
/* 428 */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(52),
    Uint8Array = __webpack_require__(392),
    eq = __webpack_require__(57),
    equalArrays = __webpack_require__(148),
    mapToArray = __webpack_require__(454),
    setToArray = __webpack_require__(463);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(431);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(407),
    getSymbols = __webpack_require__(434),
    keys = __webpack_require__(43);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(152),
    keys = __webpack_require__(43);

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(52);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(396),
    stubArray = __webpack_require__(480);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),
/* 435 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(145),
    isArguments = __webpack_require__(87),
    isArray = __webpack_require__(13),
    isIndex = __webpack_require__(83),
    isLength = __webpack_require__(89),
    toKey = __webpack_require__(56);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(55);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),
/* 438 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(55);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(55);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(55);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),
/* 442 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(425);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),
/* 444 */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(53);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(53);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(53);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(53);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(388),
    ListCache = __webpack_require__(51),
    Map = __webpack_require__(81);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(54);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(54);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(54);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(54);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),
/* 454 */
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(478);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(459);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(149);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)(module)))

/***/ }),
/* 458 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),
/* 459 */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(394);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),
/* 461 */
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),
/* 462 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),
/* 463 */
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

var baseSetToString = __webpack_require__(420),
    shortOut = __webpack_require__(465);

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;


/***/ }),
/* 465 */
/***/ (function(module, exports) {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(51);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),
/* 467 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),
/* 468 */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),
/* 469 */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(51),
    Map = __webpack_require__(81),
    MapCache = __webpack_require__(82);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(455);

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(140),
    copyObject = __webpack_require__(146),
    createAssigner = __webpack_require__(426),
    isArrayLike = __webpack_require__(41),
    isPrototype = __webpack_require__(85),
    keys = __webpack_require__(43);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function(object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;


/***/ }),
/* 473 */
/***/ (function(module, exports) {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

var arrayEvery = __webpack_require__(395),
    baseEvery = __webpack_require__(404),
    baseIteratee = __webpack_require__(414),
    isArray = __webpack_require__(13),
    isIterateeCall = __webpack_require__(151);

/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */
function every(collection, predicate, guard) {
  var func = isArray(collection) ? arrayEvery : baseEvery;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = every;


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(142);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(408),
    hasPath = __webpack_require__(436);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

var baseKeys = __webpack_require__(144),
    getTag = __webpack_require__(150),
    isArguments = __webpack_require__(87),
    isArray = __webpack_require__(13),
    isArrayLike = __webpack_require__(41),
    isBuffer = __webpack_require__(88),
    isPrototype = __webpack_require__(85),
    isTypedArray = __webpack_require__(91);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(82);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(417),
    basePropertyDeep = __webpack_require__(418),
    isKey = __webpack_require__(84),
    toKey = __webpack_require__(56);

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),
/* 480 */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),
/* 481 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(422);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./en-au": 155,
	"./en-au.js": 155,
	"./en-ca": 156,
	"./en-ca.js": 156,
	"./en-gb": 157,
	"./en-gb.js": 157,
	"./en-ie": 158,
	"./en-ie.js": 158,
	"./en-nz": 159,
	"./en-nz.js": 159
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 483;

/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Utils = __webpack_require__(161);


// Declare internals

var internals = {
    delimiter: '&',
    depth: 5,
    arrayLimit: 20,
    parameterLimit: 1000,
    strictNullHandling: false,
    plainObjects: false,
    allowPrototypes: false,
    allowDots: false
};


internals.parseValues = function (str, options) {

    var obj = {};
    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

    for (var i = 0, il = parts.length; i < il; ++i) {
        var part = parts[i];
        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

        var key, val;
        if (pos === -1) {
            key = Utils.decode(part);
            val = options.strictNullHandling ? null : '';
        } else {
            key = Utils.decode(part.slice(0, pos));
            val = Utils.decode(part.slice(pos + 1));
        }
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            obj[key] = [].concat(obj[key]).concat(val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};


internals.parseObject = function (chain, val, options) {

    if (!chain.length) {
        return val;
    }

    var root = chain.shift();

    var obj;
    if (root === '[]') {
        obj = [];
        obj = obj.concat(internals.parseObject(chain, val, options));
    }
    else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
        var index = parseInt(cleanRoot, 10);
        var indexString = '' + index;
        if (!isNaN(index) &&
            root !== cleanRoot &&
            indexString === cleanRoot &&
            index >= 0 &&
            (options.parseArrays &&
             index <= options.arrayLimit)) {

            obj = [];
            obj[index] = internals.parseObject(chain, val, options);
        }
        else {
            obj[cleanRoot] = internals.parseObject(chain, val, options);
        }
    }

    return obj;
};


internals.parseKeys = function (key, val, options) {

    if (!key) {
        return;
    }

    // Transform dot notation to bracket notation

    if (options.allowDots) {
        key = key.replace(/\.([^\.\[]+)/g, '[$1]');
    }

    // The regex chunks

    var parent = /^([^\[\]]*)/;
    var child = /(\[[^\[\]]*\])/g;

    // Get the parent

    var segment = parent.exec(key);

    // Stash the parent if it exists

    var keys = [];
    if (segment[1]) {
        // If we aren't using plain objects, optionally prefix keys
        // that would overwrite object prototype properties
        if (!options.plainObjects &&
            Object.prototype.hasOwnProperty(segment[1])) {

            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(segment[1]);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {

        ++i;
        if (!options.plainObjects &&
            Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {

            if (!options.allowPrototypes) {
                continue;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return internals.parseObject(keys, val, options);
};


module.exports = function (str, options) {

    options = options || {};
    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : internals.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : internals.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : internals.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;

    if (str === '' ||
        str === null ||
        typeof str === 'undefined') {

        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        var newObj = internals.parseKeys(key, tempObj[key], options);
        obj = Utils.merge(obj, newObj, options);
    }

    return Utils.compact(obj);
};


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Utils = __webpack_require__(161);


// Declare internals

var internals = {
    delimiter: '&',
    arrayPrefixGenerators: {
        brackets: function (prefix, key) {

            return prefix + '[]';
        },
        indices: function (prefix, key) {

            return prefix + '[' + key + ']';
        },
        repeat: function (prefix, key) {

            return prefix;
        }
    },
    strictNullHandling: false,
    skipNulls: false,
    encode: true
};


internals.stringify = function (obj, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort) {

    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    }
    else if (Utils.isBuffer(obj)) {
        obj = obj.toString();
    }
    else if (obj instanceof Date) {
        obj = obj.toISOString();
    }
    else if (obj === null) {
        if (strictNullHandling) {
            return encode ? Utils.encode(prefix) : prefix;
        }

        obj = '';
    }

    if (typeof obj === 'string' ||
        typeof obj === 'number' ||
        typeof obj === 'boolean') {

        if (encode) {
            return [Utils.encode(prefix) + '=' + Utils.encode(obj)];
        }
        return [prefix + '=' + obj];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (Array.isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];

        if (skipNulls &&
            obj[key] === null) {

            continue;
        }

        if (Array.isArray(obj)) {
            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encode, filter));
        }
        else {
            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix, strictNullHandling, skipNulls, encode, filter));
        }
    }

    return values;
};


module.exports = function (obj, options) {

    options = options || {};
    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : internals.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : internals.encode;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var objKeys;
    var filter;
    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    }
    else if (Array.isArray(options.filter)) {
        objKeys = filter = options.filter;
    }

    var keys = [];

    if (typeof obj !== 'object' ||
        obj === null) {

        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in internals.arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    }
    else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    }
    else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];

        if (skipNulls &&
            obj[key] === null) {

            continue;
        }

        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort));
    }

    return keys.join(delimiter);
};


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty;

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g
    , result = {}
    , part;

  //
  // Little nifty parsing hack, leverage the fact that RegExp.exec increments
  // the lastIndex property so we can continue executing this loop until we've
  // parsed all results.
  //
  for (;
    part = parser.exec(query);
    result[decodeURIComponent(part[1])] = decodeURIComponent(part[2])
  );

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = [];

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (var key in obj) {
    if (has.call(obj, key)) {
      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function RavenConfigError(message) {
    this.name = 'RavenConfigError';
    this.message = message;
}
RavenConfigError.prototype = new Error();
RavenConfigError.prototype.constructor = RavenConfigError;

module.exports = RavenConfigError;


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var wrapMethod = function(console, level, callback) {
    var originalConsoleLevel = console[level];
    var originalConsole = console;

    if (!(level in console)) {
        return;
    }

    var sentryLevel = level === 'warn'
        ? 'warning'
        : level;

    console[level] = function () {
        var args = [].slice.call(arguments);

        var msg = '' + args.join(' ');
        var data = {level: sentryLevel, logger: 'console', extra: {'arguments': args}};
        callback && callback(msg, data);

        // this fails for some browsers. :(
        if (originalConsoleLevel) {
            // IE9 doesn't allow calling apply on console functions directly
            // See: https://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function#answer-5473193
            Function.prototype.apply.call(
                originalConsoleLevel,
                originalConsole,
                args
            );
        }
    };
};

module.exports = {
    wrapMethod: wrapMethod
};


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*global XDomainRequest:false, __DEV__:false*/


var TraceKit = __webpack_require__(490);
var stringify = __webpack_require__(491);
var RavenConfigError = __webpack_require__(487);
var utils = __webpack_require__(163);

var isError = utils.isError,
    isObject = utils.isObject;

var wrapConsoleMethod = __webpack_require__(488).wrapMethod;

var dsnKeys = 'source protocol user pass host port path'.split(' '),
    dsnPattern = /^(?:(\w+):)?\/\/(?:(\w+)(:\w+)?@)?([\w\.-]+)(?::(\d+))?(\/.*)/;

function now() {
    return +new Date();
}

// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)
var _window = typeof window !== 'undefined' ? window
            : typeof global !== 'undefined' ? global
            : typeof self !== 'undefined' ? self
            : {};
var _document = _window.document;
var _navigator = _window.navigator;

// First, check for JSON support
// If there is no JSON, we no-op the core features of Raven
// since JSON is required to encode the payload
function Raven() {
    this._hasJSON = !!(typeof JSON === 'object' && JSON.stringify);
    // Raven can run in contexts where there's no document (react-native)
    this._hasDocument = !isUndefined(_document);
    this._hasNavigator = !isUndefined(_navigator);
    this._lastCapturedException = null;
    this._lastData = null;
    this._lastEventId = null;
    this._globalServer = null;
    this._globalKey = null;
    this._globalProject = null;
    this._globalContext = {};
    this._globalOptions = {
        logger: 'javascript',
        ignoreErrors: [],
        ignoreUrls: [],
        whitelistUrls: [],
        includePaths: [],
        crossOrigin: 'anonymous',
        collectWindowErrors: true,
        maxMessageLength: 0,

        // By default, truncates URL values to 250 chars
        maxUrlLength: 250,
        stackTraceLimit: 50,
        autoBreadcrumbs: true,
        sampleRate: 1
    };
    this._ignoreOnError = 0;
    this._isRavenInstalled = false;
    this._originalErrorStackTraceLimit = Error.stackTraceLimit;
    // capture references to window.console *and* all its methods first
    // before the console plugin has a chance to monkey patch
    this._originalConsole = _window.console || {};
    this._originalConsoleMethods = {};
    this._plugins = [];
    this._startTime = now();
    this._wrappedBuiltIns = [];
    this._breadcrumbs = [];
    this._lastCapturedEvent = null;
    this._keypressTimeout;
    this._location = _window.location;
    this._lastHref = this._location && this._location.href;
    this._resetBackoff();

    for (var method in this._originalConsole) {  // eslint-disable-line guard-for-in
      this._originalConsoleMethods[method] = this._originalConsole[method];
    }
}

/*
 * The core Raven singleton
 *
 * @this {Raven}
 */

Raven.prototype = {
    // Hardcode version string so that raven source can be loaded directly via
    // webpack (using a build step causes webpack #1617). Grunt verifies that
    // this value matches package.json during build.
    //   See: https://github.com/getsentry/raven-js/issues/465
    VERSION: '3.14.2',

    debug: false,

    TraceKit: TraceKit, // alias to TraceKit

    /*
     * Configure Raven with a DSN and extra options
     *
     * @param {string} dsn The public Sentry DSN
     * @param {object} options Optional set of of global options [optional]
     * @return {Raven}
     */
    config: function(dsn, options) {
        var self = this;

        if (self._globalServer) {
                this._logDebug('error', 'Error: Raven has already been configured');
            return self;
        }
        if (!dsn) return self;

        var globalOptions = self._globalOptions;

        // merge in options
        if (options) {
            each(options, function(key, value){
                // tags and extra are special and need to be put into context
                if (key === 'tags' || key === 'extra' || key === 'user') {
                    self._globalContext[key] = value;
                } else {
                    globalOptions[key] = value;
                }
            });
        }

        self.setDSN(dsn);

        // "Script error." is hard coded into browsers for errors that it can't read.
        // this is the result of a script being pulled in from an external domain and CORS.
        globalOptions.ignoreErrors.push(/^Script error\.?$/);
        globalOptions.ignoreErrors.push(/^Javascript error: Script error\.? on line 0$/);

        // join regexp rules into one big rule
        globalOptions.ignoreErrors = joinRegExp(globalOptions.ignoreErrors);
        globalOptions.ignoreUrls = globalOptions.ignoreUrls.length ? joinRegExp(globalOptions.ignoreUrls) : false;
        globalOptions.whitelistUrls = globalOptions.whitelistUrls.length ? joinRegExp(globalOptions.whitelistUrls) : false;
        globalOptions.includePaths = joinRegExp(globalOptions.includePaths);
        globalOptions.maxBreadcrumbs = Math.max(0, Math.min(globalOptions.maxBreadcrumbs || 100, 100)); // default and hard limit is 100

        var autoBreadcrumbDefaults = {
            xhr: true,
            console: true,
            dom: true,
            location: true
        };

        var autoBreadcrumbs = globalOptions.autoBreadcrumbs;
        if ({}.toString.call(autoBreadcrumbs) === '[object Object]') {
            autoBreadcrumbs = objectMerge(autoBreadcrumbDefaults, autoBreadcrumbs);
        } else if (autoBreadcrumbs !== false) {
            autoBreadcrumbs = autoBreadcrumbDefaults;
        }
        globalOptions.autoBreadcrumbs = autoBreadcrumbs;

        TraceKit.collectWindowErrors = !!globalOptions.collectWindowErrors;

        // return for chaining
        return self;
    },

    /*
     * Installs a global window.onerror error handler
     * to capture and report uncaught exceptions.
     * At this point, install() is required to be called due
     * to the way TraceKit is set up.
     *
     * @return {Raven}
     */
    install: function() {
        var self = this;
        if (self.isSetup() && !self._isRavenInstalled) {
            TraceKit.report.subscribe(function () {
                self._handleOnErrorStackInfo.apply(self, arguments);
            });
            self._instrumentTryCatch();
            if (self._globalOptions.autoBreadcrumbs)
                self._instrumentBreadcrumbs();

            // Install all of the plugins
            self._drainPlugins();

            self._isRavenInstalled = true;
        }

        Error.stackTraceLimit = self._globalOptions.stackTraceLimit;
        return this;
    },

    /*
     * Set the DSN (can be called multiple time unlike config)
     *
     * @param {string} dsn The public Sentry DSN
     */
    setDSN: function(dsn) {
        var self = this,
            uri = self._parseDSN(dsn),
          lastSlash = uri.path.lastIndexOf('/'),
          path = uri.path.substr(1, lastSlash);

        self._dsn = dsn;
        self._globalKey = uri.user;
        self._globalSecret = uri.pass && uri.pass.substr(1);
        self._globalProject = uri.path.substr(lastSlash + 1);

        self._globalServer = self._getGlobalServer(uri);

        self._globalEndpoint = self._globalServer +
            '/' + path + 'api/' + self._globalProject + '/store/';

        // Reset backoff state since we may be pointing at a
        // new project/server
        this._resetBackoff();
    },

    /*
     * Wrap code within a context so Raven can capture errors
     * reliably across domains that is executed immediately.
     *
     * @param {object} options A specific set of options for this context [optional]
     * @param {function} func The callback to be immediately executed within the context
     * @param {array} args An array of arguments to be called with the callback [optional]
     */
    context: function(options, func, args) {
        if (isFunction(options)) {
            args = func || [];
            func = options;
            options = undefined;
        }

        return this.wrap(options, func).apply(this, args);
    },

    /*
     * Wrap code within a context and returns back a new function to be executed
     *
     * @param {object} options A specific set of options for this context [optional]
     * @param {function} func The function to be wrapped in a new context
     * @param {function} func A function to call before the try/catch wrapper [optional, private]
     * @return {function} The newly wrapped functions with a context
     */
    wrap: function(options, func, _before) {
        var self = this;
        // 1 argument has been passed, and it's not a function
        // so just return it
        if (isUndefined(func) && !isFunction(options)) {
            return options;
        }

        // options is optional
        if (isFunction(options)) {
            func = options;
            options = undefined;
        }

        // At this point, we've passed along 2 arguments, and the second one
        // is not a function either, so we'll just return the second argument.
        if (!isFunction(func)) {
            return func;
        }

        // We don't wanna wrap it twice!
        try {
            if (func.__raven__) {
                return func;
            }

            // If this has already been wrapped in the past, return that
            if (func.__raven_wrapper__ ){
                return func.__raven_wrapper__ ;
            }
        } catch (e) {
            // Just accessing custom props in some Selenium environments
            // can cause a "Permission denied" exception (see raven-js#495).
            // Bail on wrapping and return the function as-is (defers to window.onerror).
            return func;
        }

        function wrapped() {
            var args = [], i = arguments.length,
                deep = !options || options && options.deep !== false;

            if (_before && isFunction(_before)) {
                _before.apply(this, arguments);
            }

            // Recursively wrap all of a function's arguments that are
            // functions themselves.
            while(i--) args[i] = deep ? self.wrap(options, arguments[i]) : arguments[i];

            try {
                // Attempt to invoke user-land function
                // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
                //       means Raven caught an error invoking your application code. This is
                //       expected behavior and NOT indicative of a bug with Raven.js.
                return func.apply(this, args);
            } catch(e) {
                self._ignoreNextOnError();
                self.captureException(e, options);
                throw e;
            }
        }

        // copy over properties of the old function
        for (var property in func) {
            if (hasKey(func, property)) {
                wrapped[property] = func[property];
            }
        }
        wrapped.prototype = func.prototype;

        func.__raven_wrapper__ = wrapped;
        // Signal that this function has been wrapped already
        // for both debugging and to prevent it to being wrapped twice
        wrapped.__raven__ = true;
        wrapped.__inner__ = func;

        return wrapped;
    },

    /*
     * Uninstalls the global error handler.
     *
     * @return {Raven}
     */
    uninstall: function() {
        TraceKit.report.uninstall();

        this._restoreBuiltIns();

        Error.stackTraceLimit = this._originalErrorStackTraceLimit;
        this._isRavenInstalled = false;

        return this;
    },

    /*
     * Manually capture an exception and send it over to Sentry
     *
     * @param {error} ex An exception to be logged
     * @param {object} options A specific set of options for this error [optional]
     * @return {Raven}
     */
    captureException: function(ex, options) {
        // If not an Error is passed through, recall as a message instead
        if (!isError(ex)) {
            return this.captureMessage(ex, objectMerge({
                trimHeadFrames: 1,
                stacktrace: true // if we fall back to captureMessage, default to attempting a new trace
            }, options));
        }

        // Store the raw exception object for potential debugging and introspection
        this._lastCapturedException = ex;

        // TraceKit.report will re-raise any exception passed to it,
        // which means you have to wrap it in try/catch. Instead, we
        // can wrap it here and only re-raise if TraceKit.report
        // raises an exception different from the one we asked to
        // report on.
        try {
            var stack = TraceKit.computeStackTrace(ex);
            this._handleStackInfo(stack, options);
        } catch(ex1) {
            if(ex !== ex1) {
                throw ex1;
            }
        }

        return this;
    },

    /*
     * Manually send a message to Sentry
     *
     * @param {string} msg A plain message to be captured in Sentry
     * @param {object} options A specific set of options for this message [optional]
     * @return {Raven}
     */
    captureMessage: function(msg, options) {
        // config() automagically converts ignoreErrors from a list to a RegExp so we need to test for an
        // early call; we'll error on the side of logging anything called before configuration since it's
        // probably something you should see:
        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(msg)) {
            return;
        }

        options = options || {};

        var data = objectMerge({
            message: msg + ''  // Make sure it's actually a string
        }, options);

        if (this._globalOptions.stacktrace || (options && options.stacktrace)) {
            var ex;
            // Generate a "synthetic" stack trace from this point.
            // NOTE: If you are a Sentry user, and you are seeing this stack frame, it is NOT indicative
            //       of a bug with Raven.js. Sentry generates synthetic traces either by configuration,
            //       or if it catches a thrown object without a "stack" property.
            try {
                throw new Error(msg);
            } catch (ex1) {
                ex = ex1;
            }

            // null exception name so `Error` isn't prefixed to msg
            ex.name = null;

            options = objectMerge({
                // fingerprint on msg, not stack trace (legacy behavior, could be
                // revisited)
                fingerprint: msg,
                // since we know this is a synthetic trace, the top N-most frames
                // MUST be from Raven.js, so mark them as in_app later by setting
                // trimHeadFrames
                trimHeadFrames: (options.trimHeadFrames || 0) + 1
            }, options);

            var stack = TraceKit.computeStackTrace(ex);
            var frames = this._prepareFrames(stack, options);
            data.stacktrace = {
                // Sentry expects frames oldest to newest
                frames: frames.reverse()
            }
        }

        // Fire away!
        this._send(data);

        return this;
    },

    captureBreadcrumb: function (obj) {
        var crumb = objectMerge({
            timestamp: now() / 1000
        }, obj);

        if (isFunction(this._globalOptions.breadcrumbCallback)) {
            var result = this._globalOptions.breadcrumbCallback(crumb);

            if (isObject(result) && !isEmptyObject(result)) {
                crumb = result;
            } else if (result === false) {
                return this;
            }
        }

        this._breadcrumbs.push(crumb);
        if (this._breadcrumbs.length > this._globalOptions.maxBreadcrumbs) {
            this._breadcrumbs.shift();
        }
        return this;
    },

    addPlugin: function(plugin /*arg1, arg2, ... argN*/) {
        var pluginArgs = [].slice.call(arguments, 1);

        this._plugins.push([plugin, pluginArgs]);
        if (this._isRavenInstalled) {
            this._drainPlugins();
        }

        return this;
    },

    /*
     * Set/clear a user to be sent along with the payload.
     *
     * @param {object} user An object representing user data [optional]
     * @return {Raven}
     */
    setUserContext: function(user) {
        // Intentionally do not merge here since that's an unexpected behavior.
        this._globalContext.user = user;

        return this;
    },

    /*
     * Merge extra attributes to be sent along with the payload.
     *
     * @param {object} extra An object representing extra data [optional]
     * @return {Raven}
     */
    setExtraContext: function(extra) {
        this._mergeContext('extra', extra);

        return this;
    },

    /*
     * Merge tags to be sent along with the payload.
     *
     * @param {object} tags An object representing tags [optional]
     * @return {Raven}
     */
    setTagsContext: function(tags) {
        this._mergeContext('tags', tags);

        return this;
    },

    /*
     * Clear all of the context.
     *
     * @return {Raven}
     */
    clearContext: function() {
        this._globalContext = {};

        return this;
    },

    /*
     * Get a copy of the current context. This cannot be mutated.
     *
     * @return {object} copy of context
     */
    getContext: function() {
        // lol javascript
        return JSON.parse(stringify(this._globalContext));
    },


    /*
     * Set environment of application
     *
     * @param {string} environment Typically something like 'production'.
     * @return {Raven}
     */
    setEnvironment: function(environment) {
        this._globalOptions.environment = environment;

        return this;
    },

    /*
     * Set release version of application
     *
     * @param {string} release Typically something like a git SHA to identify version
     * @return {Raven}
     */
    setRelease: function(release) {
        this._globalOptions.release = release;

        return this;
    },

    /*
     * Set the dataCallback option
     *
     * @param {function} callback The callback to run which allows the
     *                            data blob to be mutated before sending
     * @return {Raven}
     */
    setDataCallback: function(callback) {
        var original = this._globalOptions.dataCallback;
        this._globalOptions.dataCallback = isFunction(callback)
          ? function (data) { return callback(data, original); }
          : callback;

        return this;
    },

    /*
     * Set the breadcrumbCallback option
     *
     * @param {function} callback The callback to run which allows filtering
     *                            or mutating breadcrumbs
     * @return {Raven}
     */
    setBreadcrumbCallback: function(callback) {
        var original = this._globalOptions.breadcrumbCallback;
        this._globalOptions.breadcrumbCallback = isFunction(callback)
          ? function (data) { return callback(data, original); }
          : callback;

        return this;
    },

    /*
     * Set the shouldSendCallback option
     *
     * @param {function} callback The callback to run which allows
     *                            introspecting the blob before sending
     * @return {Raven}
     */
    setShouldSendCallback: function(callback) {
        var original = this._globalOptions.shouldSendCallback;
        this._globalOptions.shouldSendCallback = isFunction(callback)
            ? function (data) { return callback(data, original); }
            : callback;

        return this;
    },

    /**
     * Override the default HTTP transport mechanism that transmits data
     * to the Sentry server.
     *
     * @param {function} transport Function invoked instead of the default
     *                             `makeRequest` handler.
     *
     * @return {Raven}
     */
    setTransport: function(transport) {
        this._globalOptions.transport = transport;

        return this;
    },

    /*
     * Get the latest raw exception that was captured by Raven.
     *
     * @return {error}
     */
    lastException: function() {
        return this._lastCapturedException;
    },

    /*
     * Get the last event id
     *
     * @return {string}
     */
    lastEventId: function() {
        return this._lastEventId;
    },

    /*
     * Determine if Raven is setup and ready to go.
     *
     * @return {boolean}
     */
    isSetup: function() {
        if (!this._hasJSON) return false;  // needs JSON support
        if (!this._globalServer) {
            if (!this.ravenNotConfiguredError) {
              this.ravenNotConfiguredError = true;
              this._logDebug('error', 'Error: Raven has not been configured.');
            }
            return false;
        }
        return true;
    },

    afterLoad: function () {
        // TODO: remove window dependence?

        // Attempt to initialize Raven on load
        var RavenConfig = _window.RavenConfig;
        if (RavenConfig) {
            this.config(RavenConfig.dsn, RavenConfig.config).install();
        }
    },

    showReportDialog: function (options) {
        if (!_document) // doesn't work without a document (React native)
            return;

        options = options || {};

        var lastEventId = options.eventId || this.lastEventId();
        if (!lastEventId) {
            throw new RavenConfigError('Missing eventId');
        }

        var dsn = options.dsn || this._dsn;
        if (!dsn) {
            throw new RavenConfigError('Missing DSN');
        }

        var encode = encodeURIComponent;
        var qs = '';
        qs += '?eventId=' + encode(lastEventId);
        qs += '&dsn=' + encode(dsn);

        var user = options.user || this._globalContext.user;
        if (user) {
            if (user.name)  qs += '&name=' + encode(user.name);
            if (user.email) qs += '&email=' + encode(user.email);
        }

        var globalServer = this._getGlobalServer(this._parseDSN(dsn));

        var script = _document.createElement('script');
        script.async = true;
        script.src = globalServer + '/api/embed/error-page/' + qs;
        (_document.head || _document.body).appendChild(script);
    },

    /**** Private functions ****/
    _ignoreNextOnError: function () {
        var self = this;
        this._ignoreOnError += 1;
        setTimeout(function () {
            // onerror should trigger before setTimeout
            self._ignoreOnError -= 1;
        });
    },

    _triggerEvent: function(eventType, options) {
        // NOTE: `event` is a native browser thing, so let's avoid conflicting wiht it
        var evt, key;

        if (!this._hasDocument)
            return;

        options = options || {};

        eventType = 'raven' + eventType.substr(0,1).toUpperCase() + eventType.substr(1);

        if (_document.createEvent) {
            evt = _document.createEvent('HTMLEvents');
            evt.initEvent(eventType, true, true);
        } else {
            evt = _document.createEventObject();
            evt.eventType = eventType;
        }

        for (key in options) if (hasKey(options, key)) {
            evt[key] = options[key];
        }

        if (_document.createEvent) {
            // IE9 if standards
            _document.dispatchEvent(evt);
        } else {
            // IE8 regardless of Quirks or Standards
            // IE9 if quirks
            try {
                _document.fireEvent('on' + evt.eventType.toLowerCase(), evt);
            } catch(e) {
                // Do nothing
            }
        }
    },

    /**
     * Wraps addEventListener to capture UI breadcrumbs
     * @param evtName the event name (e.g. "click")
     * @returns {Function}
     * @private
     */
    _breadcrumbEventHandler: function(evtName) {
        var self = this;
        return function (evt) {
            // reset keypress timeout; e.g. triggering a 'click' after
            // a 'keypress' will reset the keypress debounce so that a new
            // set of keypresses can be recorded
            self._keypressTimeout = null;

            // It's possible this handler might trigger multiple times for the same
            // event (e.g. event propagation through node ancestors). Ignore if we've
            // already captured the event.
            if (self._lastCapturedEvent === evt)
                return;

            self._lastCapturedEvent = evt;

            // try/catch both:
            // - accessing evt.target (see getsentry/raven-js#838, #768)
            // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
            //   can throw an exception in some circumstances.
            var target;
            try {
                target = htmlTreeAsString(evt.target);
            } catch (e) {
                target = '<unknown>';
            }

            self.captureBreadcrumb({
                category: 'ui.' + evtName, // e.g. ui.click, ui.input
                message: target
            });
        };
    },

    /**
     * Wraps addEventListener to capture keypress UI events
     * @returns {Function}
     * @private
     */
    _keypressEventHandler: function() {
        var self = this,
            debounceDuration = 1000; // milliseconds

        // TODO: if somehow user switches keypress target before
        //       debounce timeout is triggered, we will only capture
        //       a single breadcrumb from the FIRST target (acceptable?)
        return function (evt) {
            var target;
            try {
                target = evt.target;
            } catch (e) {
                // just accessing event properties can throw an exception in some rare circumstances
                // see: https://github.com/getsentry/raven-js/issues/838
                return;
            }
            var tagName = target && target.tagName;

            // only consider keypress events on actual input elements
            // this will disregard keypresses targeting body (e.g. tabbing
            // through elements, hotkeys, etc)
            if (!tagName || tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !target.isContentEditable)
                return;

            // record first keypress in a series, but ignore subsequent
            // keypresses until debounce clears
            var timeout = self._keypressTimeout;
            if (!timeout) {
                self._breadcrumbEventHandler('input')(evt);
            }
            clearTimeout(timeout);
            self._keypressTimeout = setTimeout(function () {
                self._keypressTimeout = null;
            }, debounceDuration);
        };
    },

    /**
     * Captures a breadcrumb of type "navigation", normalizing input URLs
     * @param to the originating URL
     * @param from the target URL
     * @private
     */
    _captureUrlChange: function(from, to) {
        var parsedLoc = parseUrl(this._location.href);
        var parsedTo = parseUrl(to);
        var parsedFrom = parseUrl(from);

        // because onpopstate only tells you the "new" (to) value of location.href, and
        // not the previous (from) value, we need to track the value of the current URL
        // state ourselves
        this._lastHref = to;

        // Use only the path component of the URL if the URL matches the current
        // document (almost all the time when using pushState)
        if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host)
            to = parsedTo.relative;
        if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host)
            from = parsedFrom.relative;

        this.captureBreadcrumb({
            category: 'navigation',
            data: {
                to: to,
                from: from
            }
        });
    },

    /**
     * Install any queued plugins
     */
    _instrumentTryCatch: function() {
        var self = this;

        var wrappedBuiltIns = self._wrappedBuiltIns;

        function wrapTimeFn(orig) {
            return function (fn, t) { // preserve arity
                // Make a copy of the arguments to prevent deoptimization
                // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
                var args = new Array(arguments.length);
                for(var i = 0; i < args.length; ++i) {
                    args[i] = arguments[i];
                }
                var originalCallback = args[0];
                if (isFunction(originalCallback)) {
                    args[0] = self.wrap(originalCallback);
                }

                // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it
                // also supports only two arguments and doesn't care what this is, so we
                // can just call the original function directly.
                if (orig.apply) {
                    return orig.apply(this, args);
                } else {
                    return orig(args[0], args[1]);
                }
            };
        }

        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;

        function wrapEventTarget(global) {
            var proto = _window[global] && _window[global].prototype;
            if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {
                fill(proto, 'addEventListener', function(orig) {
                    return function (evtName, fn, capture, secure) { // preserve arity
                        try {
                            if (fn && fn.handleEvent) {
                                fn.handleEvent = self.wrap(fn.handleEvent);
                            }
                        } catch (err) {
                            // can sometimes get 'Permission denied to access property "handle Event'
                        }

                        // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`
                        // so that we don't have more than one wrapper function
                        var before,
                            clickHandler,
                            keypressHandler;

                        if (autoBreadcrumbs && autoBreadcrumbs.dom && (global === 'EventTarget' || global === 'Node')) {
                            // NOTE: generating multiple handlers per addEventListener invocation, should
                            //       revisit and verify we can just use one (almost certainly)
                            clickHandler = self._breadcrumbEventHandler('click');
                            keypressHandler = self._keypressEventHandler();
                            before = function (evt) {
                                // need to intercept every DOM event in `before` argument, in case that
                                // same wrapped method is re-used for different events (e.g. mousemove THEN click)
                                // see #724
                                if (!evt) return;

                                var eventType;
                                try {
                                    eventType = evt.type
                                } catch (e) {
                                    // just accessing event properties can throw an exception in some rare circumstances
                                    // see: https://github.com/getsentry/raven-js/issues/838
                                    return;
                                }
                                if (eventType === 'click')
                                    return clickHandler(evt);
                                else if (eventType === 'keypress')
                                    return keypressHandler(evt);
                            };
                        }
                        return orig.call(this, evtName, self.wrap(fn, undefined, before), capture, secure);
                    };
                }, wrappedBuiltIns);
                fill(proto, 'removeEventListener', function (orig) {
                    return function (evt, fn, capture, secure) {
                        try {
                            fn = fn && (fn.__raven_wrapper__ ? fn.__raven_wrapper__  : fn);
                        } catch (e) {
                            // ignore, accessing __raven_wrapper__ will throw in some Selenium environments
                        }
                        return orig.call(this, evt, fn, capture, secure);
                    };
                }, wrappedBuiltIns);
            }
        }

        fill(_window, 'setTimeout', wrapTimeFn, wrappedBuiltIns);
        fill(_window, 'setInterval', wrapTimeFn, wrappedBuiltIns);
        if (_window.requestAnimationFrame) {
            fill(_window, 'requestAnimationFrame', function (orig) {
                return function (cb) {
                    return orig(self.wrap(cb));
                };
            }, wrappedBuiltIns);
        }

        // event targets borrowed from bugsnag-js:
        // https://github.com/bugsnag/bugsnag-js/blob/master/src/bugsnag.js#L666
        var eventTargets = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];
        for (var i = 0; i < eventTargets.length; i++) {
            wrapEventTarget(eventTargets[i]);
        }
    },


    /**
     * Instrument browser built-ins w/ breadcrumb capturing
     *  - XMLHttpRequests
     *  - DOM interactions (click/typing)
     *  - window.location changes
     *  - console
     *
     * Can be disabled or individually configured via the `autoBreadcrumbs` config option
     */
    _instrumentBreadcrumbs: function () {
        var self = this;
        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;

        var wrappedBuiltIns = self._wrappedBuiltIns;

        function wrapProp(prop, xhr) {
            if (prop in xhr && isFunction(xhr[prop])) {
                fill(xhr, prop, function (orig) {
                    return self.wrap(orig);
                }); // intentionally don't track filled methods on XHR instances
            }
        }

        if (autoBreadcrumbs.xhr && 'XMLHttpRequest' in _window) {
            var xhrproto = XMLHttpRequest.prototype;
            fill(xhrproto, 'open', function(origOpen) {
                return function (method, url) { // preserve arity

                    // if Sentry key appears in URL, don't capture
                    if (isString(url) && url.indexOf(self._globalKey) === -1) {
                        this.__raven_xhr = {
                            method: method,
                            url: url,
                            status_code: null
                        };
                    }

                    return origOpen.apply(this, arguments);
                };
            }, wrappedBuiltIns);

            fill(xhrproto, 'send', function(origSend) {
                return function (data) { // preserve arity
                    var xhr = this;

                    function onreadystatechangeHandler() {
                        if (xhr.__raven_xhr && (xhr.readyState === 1 || xhr.readyState === 4)) {
                            try {
                                // touching statusCode in some platforms throws
                                // an exception
                                xhr.__raven_xhr.status_code = xhr.status;
                            } catch (e) { /* do nothing */ }
                            self.captureBreadcrumb({
                                type: 'http',
                                category: 'xhr',
                                data: xhr.__raven_xhr
                            });
                        }
                    }

                    var props = ['onload', 'onerror', 'onprogress'];
                    for (var j = 0; j < props.length; j++) {
                        wrapProp(props[j], xhr);
                    }

                    if ('onreadystatechange' in xhr && isFunction(xhr.onreadystatechange)) {
                        fill(xhr, 'onreadystatechange', function (orig) {
                            return self.wrap(orig, undefined, onreadystatechangeHandler);
                        } /* intentionally don't track this instrumentation */);
                    } else {
                        // if onreadystatechange wasn't actually set by the page on this xhr, we
                        // are free to set our own and capture the breadcrumb
                        xhr.onreadystatechange = onreadystatechangeHandler;
                    }

                    return origSend.apply(this, arguments);
                };
            }, wrappedBuiltIns);
        }

        if (autoBreadcrumbs.xhr && 'fetch' in _window) {
            fill(_window, 'fetch', function(origFetch) {
                return function (fn, t) { // preserve arity
                    // Make a copy of the arguments to prevent deoptimization
                    // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
                    var args = new Array(arguments.length);
                    for (var i = 0; i < args.length; ++i) {
                        args[i] = arguments[i];
                    }

                    var fetchInput = args[0];
                    var method = 'GET';
                    var url;

                    if (typeof fetchInput === 'string') {
                        url = fetchInput;
                    } else {
                        url = fetchInput.url;
                        if (fetchInput.method) {
                            method = fetchInput.method;
                        }
                    }

                    if (args[1] && args[1].method) {
                        method = args[1].method;
                    }

                    var fetchData = {
                        method: method,
                        url: url,
                        status_code: null
                    };

                    self.captureBreadcrumb({
                        type: 'http',
                        category: 'fetch',
                        data: fetchData
                    });

                    return origFetch.apply(this, args).then(function (response) {
                        fetchData.status_code = response.status;

                        return response;
                    });
                };
            }, wrappedBuiltIns);
        }

        // Capture breadcrumbs from any click that is unhandled / bubbled up all the way
        // to the document. Do this before we instrument addEventListener.
        if (autoBreadcrumbs.dom && this._hasDocument) {
            if (_document.addEventListener) {
                _document.addEventListener('click', self._breadcrumbEventHandler('click'), false);
                _document.addEventListener('keypress', self._keypressEventHandler(), false);
            }
            else {
                // IE8 Compatibility
                _document.attachEvent('onclick', self._breadcrumbEventHandler('click'));
                _document.attachEvent('onkeypress', self._keypressEventHandler());
            }
        }

        // record navigation (URL) changes
        // NOTE: in Chrome App environment, touching history.pushState, *even inside
        //       a try/catch block*, will cause Chrome to output an error to console.error
        // borrowed from: https://github.com/angular/angular.js/pull/13945/files
        var chrome = _window.chrome;
        var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;
        var hasPushState = !isChromePackagedApp && _window.history && history.pushState;
        if (autoBreadcrumbs.location && hasPushState) {
            // TODO: remove onpopstate handler on uninstall()
            var oldOnPopState = _window.onpopstate;
            _window.onpopstate = function () {
                var currentHref = self._location.href;
                self._captureUrlChange(self._lastHref, currentHref);

                if (oldOnPopState) {
                    return oldOnPopState.apply(this, arguments);
                }
            };

            fill(history, 'pushState', function (origPushState) {
                // note history.pushState.length is 0; intentionally not declaring
                // params to preserve 0 arity
                return function (/* state, title, url */) {
                    var url = arguments.length > 2 ? arguments[2] : undefined;

                    // url argument is optional
                    if (url) {
                        // coerce to string (this is what pushState does)
                        self._captureUrlChange(self._lastHref, url + '');
                    }

                    return origPushState.apply(this, arguments);
                };
            }, wrappedBuiltIns);
        }

        if (autoBreadcrumbs.console && 'console' in _window && console.log) {
            // console
            var consoleMethodCallback = function (msg, data) {
                self.captureBreadcrumb({
                    message: msg,
                    level: data.level,
                    category: 'console'
                });
            };

            each(['debug', 'info', 'warn', 'error', 'log'], function (_, level) {
                wrapConsoleMethod(console, level, consoleMethodCallback);
            });
        }

    },

    _restoreBuiltIns: function () {
        // restore any wrapped builtins
        var builtin;
        while (this._wrappedBuiltIns.length) {
            builtin = this._wrappedBuiltIns.shift();

            var obj = builtin[0],
              name = builtin[1],
              orig = builtin[2];

            obj[name] = orig;
        }
    },

    _drainPlugins: function() {
        var self = this;

        // FIX ME TODO
        each(this._plugins, function(_, plugin) {
            var installer = plugin[0];
            var args = plugin[1];
            installer.apply(self, [self].concat(args));
        });
    },

    _parseDSN: function(str) {
        var m = dsnPattern.exec(str),
            dsn = {},
            i = 7;

        try {
            while (i--) dsn[dsnKeys[i]] = m[i] || '';
        } catch(e) {
            throw new RavenConfigError('Invalid DSN: ' + str);
        }

        if (dsn.pass && !this._globalOptions.allowSecretKey) {
            throw new RavenConfigError('Do not specify your secret key in the DSN. See: http://bit.ly/raven-secret-key');
        }

        return dsn;
    },

    _getGlobalServer: function(uri) {
        // assemble the endpoint from the uri pieces
        var globalServer = '//' + uri.host +
            (uri.port ? ':' + uri.port : '');

        if (uri.protocol) {
            globalServer = uri.protocol + ':' + globalServer;
        }
        return globalServer;
    },

    _handleOnErrorStackInfo: function() {
        // if we are intentionally ignoring errors via onerror, bail out
        if (!this._ignoreOnError) {
            this._handleStackInfo.apply(this, arguments);
        }
    },

    _handleStackInfo: function(stackInfo, options) {
        var frames = this._prepareFrames(stackInfo, options);

        this._triggerEvent('handle', {
            stackInfo: stackInfo,
            options: options
        });

        this._processException(
            stackInfo.name,
            stackInfo.message,
            stackInfo.url,
            stackInfo.lineno,
            frames,
            options
        );
    },

    _prepareFrames: function(stackInfo, options) {
        var self = this;
        var frames = [];
        if (stackInfo.stack && stackInfo.stack.length) {
            each(stackInfo.stack, function(i, stack) {
                var frame = self._normalizeFrame(stack);
                if (frame) {
                    frames.push(frame);
                }
            });

            // e.g. frames captured via captureMessage throw
            if (options && options.trimHeadFrames) {
                for (var j = 0; j < options.trimHeadFrames && j < frames.length; j++) {
                    frames[j].in_app = false;
                }
            }
        }
        frames = frames.slice(0, this._globalOptions.stackTraceLimit);
        return frames;
    },


    _normalizeFrame: function(frame) {
        if (!frame.url) return;

        // normalize the frames data
        var normalized = {
            filename:   frame.url,
            lineno:     frame.line,
            colno:      frame.column,
            'function': frame.func || '?'
        };

        normalized.in_app = !( // determine if an exception came from outside of our app
            // first we check the global includePaths list.
            !!this._globalOptions.includePaths.test && !this._globalOptions.includePaths.test(normalized.filename) ||
            // Now we check for fun, if the function name is Raven or TraceKit
            /(Raven|TraceKit)\./.test(normalized['function']) ||
            // finally, we do a last ditch effort and check for raven.min.js
            /raven\.(min\.)?js$/.test(normalized.filename)
        );

        return normalized;
    },

    _processException: function(type, message, fileurl, lineno, frames, options) {
        var stacktrace;
        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(message)) return;

        message += '';

        if (frames && frames.length) {
            fileurl = frames[0].filename || fileurl;
            // Sentry expects frames oldest to newest
            // and JS sends them as newest to oldest
            frames.reverse();
            stacktrace = {frames: frames};
        } else if (fileurl) {
            stacktrace = {
                frames: [{
                    filename: fileurl,
                    lineno: lineno,
                    in_app: true
                }]
            };
        }

        if (!!this._globalOptions.ignoreUrls.test && this._globalOptions.ignoreUrls.test(fileurl)) return;
        if (!!this._globalOptions.whitelistUrls.test && !this._globalOptions.whitelistUrls.test(fileurl)) return;

        var data = objectMerge({
            // sentry.interfaces.Exception
            exception: {
                values: [{
                    type: type,
                    value: message,
                    stacktrace: stacktrace
                }]
            },
            culprit: fileurl
        }, options);

        // Fire away!
        this._send(data);
    },

    _trimPacket: function(data) {
        // For now, we only want to truncate the two different messages
        // but this could/should be expanded to just trim everything
        var max = this._globalOptions.maxMessageLength;
        if (data.message) {
            data.message = truncate(data.message, max);
        }
        if (data.exception) {
            var exception = data.exception.values[0];
            exception.value = truncate(exception.value, max);
        }

        var request = data.request;
        if (request) {
            if (request.url) {
                request.url = truncate(request.url, this._globalOptions.maxUrlLength);
            }
            if (request.Referer) {
                request.Referer = truncate(request.Referer, this._globalOptions.maxUrlLength);
            }
        }

        if (data.breadcrumbs && data.breadcrumbs.values)
            this._trimBreadcrumbs(data.breadcrumbs);

        return data;
    },

    /**
     * Truncate breadcrumb values (right now just URLs)
     */
    _trimBreadcrumbs: function (breadcrumbs) {
        // known breadcrumb properties with urls
        // TODO: also consider arbitrary prop values that start with (https?)?://
        var urlProps = ['to', 'from', 'url'],
            urlProp,
            crumb,
            data;

        for (var i = 0; i < breadcrumbs.values.length; ++i) {
            crumb = breadcrumbs.values[i];
            if (!crumb.hasOwnProperty('data') || !isObject(crumb.data))
                continue;

            data = crumb.data;
            for (var j = 0; j < urlProps.length; ++j) {
                urlProp = urlProps[j];
                if (data.hasOwnProperty(urlProp)) {
                    data[urlProp] = truncate(data[urlProp], this._globalOptions.maxUrlLength);
                }
            }
        }
    },

    _getHttpData: function() {
        if (!this._hasNavigator && !this._hasDocument) return;
        var httpData = {};

        if (this._hasNavigator && _navigator.userAgent) {
            httpData.headers = {
              'User-Agent': navigator.userAgent
            };
        }

        if (this._hasDocument) {
            if (_document.location && _document.location.href) {
                httpData.url = _document.location.href;
            }
            if (_document.referrer) {
                if (!httpData.headers) httpData.headers = {};
                httpData.headers.Referer = _document.referrer;
            }
        }

        return httpData;
    },

    _resetBackoff: function() {
        this._backoffDuration = 0;
        this._backoffStart = null;
    },

    _shouldBackoff: function() {
        return this._backoffDuration && now() - this._backoffStart < this._backoffDuration;
    },

    /**
     * Returns true if the in-process data payload matches the signature
     * of the previously-sent data
     *
     * NOTE: This has to be done at this level because TraceKit can generate
     *       data from window.onerror WITHOUT an exception object (IE8, IE9,
     *       other old browsers). This can take the form of an "exception"
     *       data object with a single frame (derived from the onerror args).
     */
    _isRepeatData: function (current) {
        var last = this._lastData;

        if (!last ||
            current.message !== last.message || // defined for captureMessage
            current.culprit !== last.culprit)   // defined for captureException/onerror
            return false;

        // Stacktrace interface (i.e. from captureMessage)
        if (current.stacktrace || last.stacktrace) {
            return isSameStacktrace(current.stacktrace, last.stacktrace);
        }
        // Exception interface (i.e. from captureException/onerror)
        else if (current.exception || last.exception) {
            return isSameException(current.exception, last.exception);
        }

        return true;
    },

    _setBackoffState: function(request) {
        // If we are already in a backoff state, don't change anything
        if (this._shouldBackoff()) {
            return;
        }

        var status = request.status;

        // 400 - project_id doesn't exist or some other fatal
        // 401 - invalid/revoked dsn
        // 429 - too many requests
        if (!(status === 400 || status === 401 || status === 429))
            return;

        var retry;
        try {
            // If Retry-After is not in Access-Control-Expose-Headers, most
            // browsers will throw an exception trying to access it
            retry = request.getResponseHeader('Retry-After');
            retry = parseInt(retry, 10) * 1000; // Retry-After is returned in seconds
        } catch (e) {
            /* eslint no-empty:0 */
        }


        this._backoffDuration = retry
            // If Sentry server returned a Retry-After value, use it
            ? retry
            // Otherwise, double the last backoff duration (starts at 1 sec)
            : this._backoffDuration * 2 || 1000;

        this._backoffStart = now();
    },

    _send: function(data) {
        var globalOptions = this._globalOptions;

        var baseData = {
            project: this._globalProject,
            logger: globalOptions.logger,
            platform: 'javascript'
        }, httpData = this._getHttpData();

        if (httpData) {
            baseData.request = httpData;
        }

        // HACK: delete `trimHeadFrames` to prevent from appearing in outbound payload
        if (data.trimHeadFrames) delete data.trimHeadFrames;

        data = objectMerge(baseData, data);

        // Merge in the tags and extra separately since objectMerge doesn't handle a deep merge
        data.tags = objectMerge(objectMerge({}, this._globalContext.tags), data.tags);
        data.extra = objectMerge(objectMerge({}, this._globalContext.extra), data.extra);

        // Send along our own collected metadata with extra
        data.extra['session:duration'] = now() - this._startTime;

        if (this._breadcrumbs && this._breadcrumbs.length > 0) {
            // intentionally make shallow copy so that additions
            // to breadcrumbs aren't accidentally sent in this request
            data.breadcrumbs = {
                values: [].slice.call(this._breadcrumbs, 0)
            };
        }

        // If there are no tags/extra, strip the key from the payload alltogther.
        if (isEmptyObject(data.tags)) delete data.tags;

        if (this._globalContext.user) {
            // sentry.interfaces.User
            data.user = this._globalContext.user;
        }

        // Include the environment if it's defined in globalOptions
        if (globalOptions.environment) data.environment = globalOptions.environment;

        // Include the release if it's defined in globalOptions
        if (globalOptions.release) data.release = globalOptions.release;

        // Include server_name if it's defined in globalOptions
        if (globalOptions.serverName) data.server_name = globalOptions.serverName;

        if (isFunction(globalOptions.dataCallback)) {
            data = globalOptions.dataCallback(data) || data;
        }

        // Why??????????
        if (!data || isEmptyObject(data)) {
            return;
        }

        // Check if the request should be filtered or not
        if (isFunction(globalOptions.shouldSendCallback) && !globalOptions.shouldSendCallback(data)) {
            return;
        }

        // Backoff state: Sentry server previously responded w/ an error (e.g. 429 - too many requests),
        // so drop requests until "cool-off" period has elapsed.
        if (this._shouldBackoff()) {
            this._logDebug('warn', 'Raven dropped error due to backoff: ', data);
            return;
        }

        if (typeof globalOptions.sampleRate === 'number') {
            if (Math.random() < globalOptions.sampleRate) {
                this._sendProcessedPayload(data);
            }
        } else {
            this._sendProcessedPayload(data);
        }
    },

    _getUuid: function () {
      return uuid4();
    },

    _sendProcessedPayload: function(data, callback) {
        var self = this;
        var globalOptions = this._globalOptions;

        if (!this.isSetup()) return;

        // Send along an event_id if not explicitly passed.
        // This event_id can be used to reference the error within Sentry itself.
        // Set lastEventId after we know the error should actually be sent
        this._lastEventId = data.event_id || (data.event_id = this._getUuid());

        // Try and clean up the packet before sending by truncating long values
        data = this._trimPacket(data);

        // ideally duplicate error testing should occur *before* dataCallback/shouldSendCallback,
        // but this would require copying an un-truncated copy of the data packet, which can be
        // arbitrarily deep (extra_data) -- could be worthwhile? will revisit
        if (!this._globalOptions.allowDuplicates && this._isRepeatData(data)) {
            this._logDebug('warn', 'Raven dropped repeat event: ', data);
            return;
        }

        // Store outbound payload after trim
        this._lastData = data;

        this._logDebug('debug', 'Raven about to send:', data);

        var auth = {
            sentry_version: '7',
            sentry_client: 'raven-js/' + this.VERSION,
            sentry_key: this._globalKey
        };
        if (this._globalSecret) {
            auth.sentry_secret = this._globalSecret;
        }

        var exception = data.exception && data.exception.values[0];
        this.captureBreadcrumb({
            category: 'sentry',
            message: exception
                ? (exception.type ? exception.type + ': ' : '') + exception.value
                : data.message,
            event_id: data.event_id,
            level: data.level || 'error' // presume error unless specified
        });

        var url = this._globalEndpoint;
        (globalOptions.transport || this._makeRequest).call(this, {
            url: url,
            auth: auth,
            data: data,
            options: globalOptions,
            onSuccess: function success() {
                self._resetBackoff();

                self._triggerEvent('success', {
                    data: data,
                    src: url
                });
                callback && callback();
            },
            onError: function failure(error) {
                self._logDebug('error', 'Raven transport failed to send: ', error);

                if (error.request) {
                    self._setBackoffState(error.request);
                }

                self._triggerEvent('failure', {
                    data: data,
                    src: url
                });
                error = error || new Error('Raven send failed (no additional details provided)');
                callback && callback(error);
            }
        });
    },

    _makeRequest: function(opts) {
        var request = new XMLHttpRequest();

        // if browser doesn't support CORS (e.g. IE7), we are out of luck
        var hasCORS =
            'withCredentials' in request ||
            typeof XDomainRequest !== 'undefined';

        if (!hasCORS) return;

        var url = opts.url;

        if ('withCredentials' in request) {
            request.onreadystatechange = function () {
                if (request.readyState !== 4) {
                    return;
                } else if (request.status === 200) {
                    opts.onSuccess && opts.onSuccess();
                } else if (opts.onError) {
                    var err = new Error('Sentry error code: ' + request.status);
                    err.request = request;
                    opts.onError(err);
                }
            };
        } else {
            request = new XDomainRequest();
            // xdomainrequest cannot go http -> https (or vice versa),
            // so always use protocol relative
            url = url.replace(/^https?:/, '');

            // onreadystatechange not supported by XDomainRequest
            if (opts.onSuccess) {
                request.onload = opts.onSuccess;
            }
            if (opts.onError) {
                request.onerror = function () {
                    var err = new Error('Sentry error code: XDomainRequest');
                    err.request = request;
                    opts.onError(err);
                }
            }
        }

        // NOTE: auth is intentionally sent as part of query string (NOT as custom
        //       HTTP header) so as to avoid preflight CORS requests
        request.open('POST', url + '?' + urlencode(opts.auth));
        request.send(stringify(opts.data));
    },

    _logDebug: function(level) {
        if (this._originalConsoleMethods[level] && this.debug) {
            // In IE<10 console methods do not have their own 'apply' method
            Function.prototype.apply.call(
                this._originalConsoleMethods[level],
                this._originalConsole,
                [].slice.call(arguments, 1)
            );
        }
    },

    _mergeContext: function(key, context) {
        if (isUndefined(context)) {
            delete this._globalContext[key];
        } else {
            this._globalContext[key] = objectMerge(this._globalContext[key] || {}, context);
        }
    }
};

/*------------------------------------------------
 * utils
 *
 * conditionally exported for test via Raven.utils
 =================================================
 */
var objectPrototype = Object.prototype;

function isUndefined(what) {
    return what === void 0;
}

function isFunction(what) {
    return typeof what === 'function';
}

function isString(what) {
    return objectPrototype.toString.call(what) === '[object String]';
}


function isEmptyObject(what) {
    for (var _ in what) return false;  // eslint-disable-line guard-for-in, no-unused-vars
    return true;
}

function each(obj, callback) {
    var i, j;

    if (isUndefined(obj.length)) {
        for (i in obj) {
            if (hasKey(obj, i)) {
                callback.call(null, i, obj[i]);
            }
        }
    } else {
        j = obj.length;
        if (j) {
            for (i = 0; i < j; i++) {
                callback.call(null, i, obj[i]);
            }
        }
    }
}

function objectMerge(obj1, obj2) {
    if (!obj2) {
        return obj1;
    }
    each(obj2, function(key, value){
        obj1[key] = value;
    });
    return obj1;
}

function truncate(str, max) {
    return !max || str.length <= max ? str : str.substr(0, max) + '\u2026';
}

/**
 * hasKey, a better form of hasOwnProperty
 * Example: hasKey(MainHostObject, property) === true/false
 *
 * @param {Object} host object to check property
 * @param {string} key to check
 */
function hasKey(object, key) {
    return objectPrototype.hasOwnProperty.call(object, key);
}

function joinRegExp(patterns) {
    // Combine an array of regular expressions and strings into one large regexp
    // Be mad.
    var sources = [],
        i = 0, len = patterns.length,
        pattern;

    for (; i < len; i++) {
        pattern = patterns[i];
        if (isString(pattern)) {
            // If it's a string, we need to escape it
            // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
            sources.push(pattern.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1'));
        } else if (pattern && pattern.source) {
            // If it's a regexp already, we want to extract the source
            sources.push(pattern.source);
        }
        // Intentionally skip other cases
    }
    return new RegExp(sources.join('|'), 'i');
}

function urlencode(o) {
    var pairs = [];
    each(o, function(key, value) {
        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    });
    return pairs.join('&');
}

// borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
// intentionally using regex and not <a/> href parsing trick because React Native and other
// environments where DOM might not be available
function parseUrl(url) {
    var match = url.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
    if (!match) return {};

    // coerce to undefined values to empty string so we don't get 'undefined'
    var query = match[6] || '';
    var fragment = match[8] || '';
    return {
        protocol: match[2],
        host: match[4],
        path: match[5],
        relative: match[5] + query + fragment // everything minus origin
    };
}
function uuid4() {
    var crypto = _window.crypto || _window.msCrypto;

    if (!isUndefined(crypto) && crypto.getRandomValues) {
        // Use window.crypto API if available
        var arr = new Uint16Array(8);
        crypto.getRandomValues(arr);

        // set 4 in byte 7
        arr[3] = arr[3] & 0xFFF | 0x4000;
        // set 2 most significant bits of byte 9 to '10'
        arr[4] = arr[4] & 0x3FFF | 0x8000;

        var pad = function(num) {
            var v = num.toString(16);
            while (v.length < 4) {
                v = '0' + v;
            }
            return v;
        };

        return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) +
        pad(arr[5]) + pad(arr[6]) + pad(arr[7]);
    } else {
        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random()*16|0,
                v = c === 'x' ? r : r&0x3|0x8;
            return v.toString(16);
        });
    }
}

/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @param elem
 * @returns {string}
 */
function htmlTreeAsString(elem) {
    /* eslint no-extra-parens:0*/
    var MAX_TRAVERSE_HEIGHT = 5,
        MAX_OUTPUT_LEN = 80,
        out = [],
        height = 0,
        len = 0,
        separator = ' > ',
        sepLength = separator.length,
        nextStr;

    while (elem && height++ < MAX_TRAVERSE_HEIGHT) {

        nextStr = htmlElementAsString(elem);
        // bail out if
        // - nextStr is the 'html' element
        // - the length of the string that would be created exceeds MAX_OUTPUT_LEN
        //   (ignore this limit if we are on the first iteration)
        if (nextStr === 'html' || height > 1 && len + (out.length * sepLength) + nextStr.length >= MAX_OUTPUT_LEN) {
            break;
        }

        out.push(nextStr);

        len += nextStr.length;
        elem = elem.parentNode;
    }

    return out.reverse().join(separator);
}

/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @param HTMLElement
 * @returns {string}
 */
function htmlElementAsString(elem) {
    var out = [],
        className,
        classes,
        key,
        attr,
        i;

    if (!elem || !elem.tagName) {
        return '';
    }

    out.push(elem.tagName.toLowerCase());
    if (elem.id) {
        out.push('#' + elem.id);
    }

    className = elem.className;
    if (className && isString(className)) {
        classes = className.split(/\s+/);
        for (i = 0; i < classes.length; i++) {
            out.push('.' + classes[i]);
        }
    }
    var attrWhitelist = ['type', 'name', 'title', 'alt'];
    for (i = 0; i < attrWhitelist.length; i++) {
        key = attrWhitelist[i];
        attr = elem.getAttribute(key);
        if (attr) {
            out.push('[' + key + '="' + attr + '"]');
        }
    }
    return out.join('');
}

/**
 * Returns true if either a OR b is truthy, but not both
 */
function isOnlyOneTruthy(a, b) {
    return !!(!!a ^ !!b);
}

/**
 * Returns true if the two input exception interfaces have the same content
 */
function isSameException(ex1, ex2) {
    if (isOnlyOneTruthy(ex1, ex2))
        return false;

    ex1 = ex1.values[0];
    ex2 = ex2.values[0];

    if (ex1.type !== ex2.type ||
        ex1.value !== ex2.value)
        return false;

    return isSameStacktrace(ex1.stacktrace, ex2.stacktrace);
}

/**
 * Returns true if the two input stack trace interfaces have the same content
 */
function isSameStacktrace(stack1, stack2) {
    if (isOnlyOneTruthy(stack1, stack2))
        return false;

    var frames1 = stack1.frames;
    var frames2 = stack2.frames;

    // Exit early if frame count differs
    if (frames1.length !== frames2.length)
        return false;

    // Iterate through every frame; bail out if anything differs
    var a, b;
    for (var i = 0; i < frames1.length; i++) {
        a = frames1[i];
        b = frames2[i];
        if (a.filename !== b.filename ||
            a.lineno !== b.lineno ||
            a.colno !== b.colno ||
            a['function'] !== b['function'])
            return false;
    }
    return true;
}

/**
 * Polyfill a method
 * @param obj object e.g. `document`
 * @param name method name present on object e.g. `addEventListener`
 * @param replacement replacement function
 * @param track {optional} record instrumentation to an array
 */
function fill(obj, name, replacement, track) {
    var orig = obj[name];
    obj[name] = replacement(orig);
    if (track) {
        track.push([obj, name, orig]);
    }
}

if (typeof __DEV__ !== 'undefined' && __DEV__) {
    Raven.utils = {
        isUndefined: isUndefined,
        isFunction: isFunction,
        isString: isString,
        isObject: isObject,
        isEmptyObject: isEmptyObject,
        isError: isError,
        each: each,
        objectMerge: objectMerge,
        truncate: truncate,
        hasKey: hasKey,
        joinRegExp: joinRegExp,
        urlencode: urlencode,
        uuid4: uuid4,
        htmlTreeAsString: htmlTreeAsString,
        htmlElementAsString: htmlElementAsString,
        parseUrl: parseUrl,
        fill: fill
    };
};

// Deprecations
Raven.prototype.setUser = Raven.prototype.setUserContext;
Raven.prototype.setReleaseContext = Raven.prototype.setRelease;

module.exports = Raven;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var utils = __webpack_require__(163);

/*
 TraceKit - Cross brower stack traces

 This was originally forked from github.com/occ/TraceKit, but has since been
 largely re-written and is now maintained as part of raven-js.  Tests for
 this are in test/vendor.

 MIT license
*/

var TraceKit = {
    collectWindowErrors: true,
    debug: false
};

// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)
var _window = typeof window !== 'undefined' ? window
            : typeof global !== 'undefined' ? global
            : typeof self !== 'undefined' ? self
            : {};

// global reference to slice
var _slice = [].slice;
var UNKNOWN_FUNCTION = '?';

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types
var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;

function getLocationHref() {
    if (typeof document === 'undefined' || typeof document.location === 'undefined')
        return '';

    return document.location.href;
}


/**
 * TraceKit.report: cross-browser processing of unhandled exceptions
 *
 * Syntax:
 *   TraceKit.report.subscribe(function(stackInfo) { ... })
 *   TraceKit.report.unsubscribe(function(stackInfo) { ... })
 *   TraceKit.report(exception)
 *   try { ...code... } catch(ex) { TraceKit.report(ex); }
 *
 * Supports:
 *   - Firefox: full stack trace with line numbers, plus column number
 *              on top frame; column number is not guaranteed
 *   - Opera:   full stack trace with line and column numbers
 *   - Chrome:  full stack trace with line and column numbers
 *   - Safari:  line and column number for the top frame only; some frames
 *              may be missing, and column number is not guaranteed
 *   - IE:      line and column number for the top frame only; some frames
 *              may be missing, and column number is not guaranteed
 *
 * In theory, TraceKit should work on all of the following versions:
 *   - IE5.5+ (only 8.0 tested)
 *   - Firefox 0.9+ (only 3.5+ tested)
 *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require
 *     Exceptions Have Stacktrace to be enabled in opera:config)
 *   - Safari 3+ (only 4+ tested)
 *   - Chrome 1+ (only 5+ tested)
 *   - Konqueror 3.5+ (untested)
 *
 * Requires TraceKit.computeStackTrace.
 *
 * Tries to catch all unhandled exceptions and report them to the
 * subscribed handlers. Please note that TraceKit.report will rethrow the
 * exception. This is REQUIRED in order to get a useful stack trace in IE.
 * If the exception does not reach the top of the browser, you will only
 * get a stack trace from the point where TraceKit.report was called.
 *
 * Handlers receive a stackInfo object as described in the
 * TraceKit.computeStackTrace docs.
 */
TraceKit.report = (function reportModuleWrapper() {
    var handlers = [],
        lastArgs = null,
        lastException = null,
        lastExceptionStack = null;

    /**
     * Add a crash handler.
     * @param {Function} handler
     */
    function subscribe(handler) {
        installGlobalHandler();
        handlers.push(handler);
    }

    /**
     * Remove a crash handler.
     * @param {Function} handler
     */
    function unsubscribe(handler) {
        for (var i = handlers.length - 1; i >= 0; --i) {
            if (handlers[i] === handler) {
                handlers.splice(i, 1);
            }
        }
    }

    /**
     * Remove all crash handlers.
     */
    function unsubscribeAll() {
        uninstallGlobalHandler();
        handlers = [];
    }

    /**
     * Dispatch stack information to all handlers.
     * @param {Object.<string, *>} stack
     */
    function notifyHandlers(stack, isWindowError) {
        var exception = null;
        if (isWindowError && !TraceKit.collectWindowErrors) {
          return;
        }
        for (var i in handlers) {
            if (handlers.hasOwnProperty(i)) {
                try {
                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));
                } catch (inner) {
                    exception = inner;
                }
            }
        }

        if (exception) {
            throw exception;
        }
    }

    var _oldOnerrorHandler, _onErrorHandlerInstalled;

    /**
     * Ensures all global unhandled exceptions are recorded.
     * Supported by Gecko and IE.
     * @param {string} message Error message.
     * @param {string} url URL of script that generated the exception.
     * @param {(number|string)} lineNo The line number at which the error
     * occurred.
     * @param {?(number|string)} colNo The column number at which the error
     * occurred.
     * @param {?Error} ex The actual Error object.
     */
    function traceKitWindowOnError(message, url, lineNo, colNo, ex) {
        var stack = null;

        if (lastExceptionStack) {
            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);
            processLastException();
        } else if (ex && utils.isError(ex)) {
            // non-string `ex` arg; attempt to extract stack trace

            // New chrome and blink send along a real error object
            // Let's just report that like a normal error.
            // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror
            stack = TraceKit.computeStackTrace(ex);
            notifyHandlers(stack, true);
        } else {
            var location = {
                'url': url,
                'line': lineNo,
                'column': colNo
            };

            var name = undefined;
            var msg = message; // must be new var or will modify original `arguments`
            var groups;
            if ({}.toString.call(message) === '[object String]') {
                var groups = message.match(ERROR_TYPES_RE);
                if (groups) {
                    name = groups[1];
                    msg = groups[2];
                }
            }

            location.func = UNKNOWN_FUNCTION;

            stack = {
                'name': name,
                'message': msg,
                'url': getLocationHref(),
                'stack': [location]
            };
            notifyHandlers(stack, true);
        }

        if (_oldOnerrorHandler) {
            return _oldOnerrorHandler.apply(this, arguments);
        }

        return false;
    }

    function installGlobalHandler ()
    {
        if (_onErrorHandlerInstalled) {
            return;
        }
        _oldOnerrorHandler = _window.onerror;
        _window.onerror = traceKitWindowOnError;
        _onErrorHandlerInstalled = true;
    }

    function uninstallGlobalHandler ()
    {
        if (!_onErrorHandlerInstalled) {
            return;
        }
        _window.onerror = _oldOnerrorHandler;
        _onErrorHandlerInstalled = false;
        _oldOnerrorHandler = undefined;
    }

    function processLastException() {
        var _lastExceptionStack = lastExceptionStack,
            _lastArgs = lastArgs;
        lastArgs = null;
        lastExceptionStack = null;
        lastException = null;
        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));
    }

    /**
     * Reports an unhandled Error to TraceKit.
     * @param {Error} ex
     * @param {?boolean} rethrow If false, do not re-throw the exception.
     * Only used for window.onerror to not cause an infinite loop of
     * rethrowing.
     */
    function report(ex, rethrow) {
        var args = _slice.call(arguments, 1);
        if (lastExceptionStack) {
            if (lastException === ex) {
                return; // already caught by an inner catch block, ignore
            } else {
              processLastException();
            }
        }

        var stack = TraceKit.computeStackTrace(ex);
        lastExceptionStack = stack;
        lastException = ex;
        lastArgs = args;

        // If the stack trace is incomplete, wait for 2 seconds for
        // slow slow IE to see if onerror occurs or not before reporting
        // this exception; otherwise, we will end up with an incomplete
        // stack trace
        setTimeout(function () {
            if (lastException === ex) {
                processLastException();
            }
        }, (stack.incomplete ? 2000 : 0));

        if (rethrow !== false) {
            throw ex; // re-throw to propagate to the top level (and cause window.onerror)
        }
    }

    report.subscribe = subscribe;
    report.unsubscribe = unsubscribe;
    report.uninstall = unsubscribeAll;
    return report;
}());

/**
 * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript
 *
 * Syntax:
 *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)
 * Returns:
 *   s.name              - exception name
 *   s.message           - exception message
 *   s.stack[i].url      - JavaScript or HTML file URL
 *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)
 *   s.stack[i].args     - arguments passed to the function, if known
 *   s.stack[i].line     - line number, if known
 *   s.stack[i].column   - column number, if known
 *
 * Supports:
 *   - Firefox:  full stack trace with line numbers and unreliable column
 *               number on top frame
 *   - Opera 10: full stack trace with line and column numbers
 *   - Opera 9-: full stack trace with line numbers
 *   - Chrome:   full stack trace with line and column numbers
 *   - Safari:   line and column number for the topmost stacktrace element
 *               only
 *   - IE:       no line numbers whatsoever
 *
 * Tries to guess names of anonymous functions by looking for assignments
 * in the source code. In IE and Safari, we have to guess source file names
 * by searching for function bodies inside all page scripts. This will not
 * work for scripts that are loaded cross-domain.
 * Here be dragons: some function names may be guessed incorrectly, and
 * duplicate functions may be mismatched.
 *
 * TraceKit.computeStackTrace should only be used for tracing purposes.
 * Logging of unhandled exceptions should be done with TraceKit.report,
 * which builds on top of TraceKit.computeStackTrace and provides better
 * IE support by utilizing the window.onerror event to retrieve information
 * about the top of the stack.
 *
 * Note: In IE and Safari, no stack trace is recorded on the Error object,
 * so computeStackTrace instead walks its *own* chain of callers.
 * This means that:
 *  * in Safari, some methods may be missing from the stack trace;
 *  * in IE, the topmost function in the stack trace will always be the
 *    caller of computeStackTrace.
 *
 * This is okay for tracing (because you are likely to be calling
 * computeStackTrace from the function you want to be the topmost element
 * of the stack trace anyway), but not okay for logging unhandled
 * exceptions (because your catch block will likely be far away from the
 * inner function that actually caused the exception).
 *
 */
TraceKit.computeStackTrace = (function computeStackTraceWrapper() {
    // Contents of Exception in various browsers.
    //
    // SAFARI:
    // ex.message = Can't find variable: qq
    // ex.line = 59
    // ex.sourceId = 580238192
    // ex.sourceURL = http://...
    // ex.expressionBeginOffset = 96
    // ex.expressionCaretOffset = 98
    // ex.expressionEndOffset = 98
    // ex.name = ReferenceError
    //
    // FIREFOX:
    // ex.message = qq is not defined
    // ex.fileName = http://...
    // ex.lineNumber = 59
    // ex.columnNumber = 69
    // ex.stack = ...stack trace... (see the example below)
    // ex.name = ReferenceError
    //
    // CHROME:
    // ex.message = qq is not defined
    // ex.name = ReferenceError
    // ex.type = not_defined
    // ex.arguments = ['aa']
    // ex.stack = ...stack trace...
    //
    // INTERNET EXPLORER:
    // ex.message = ...
    // ex.name = ReferenceError
    //
    // OPERA:
    // ex.message = ...message... (see the example below)
    // ex.name = ReferenceError
    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)
    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'

    /**
     * Computes stack trace information from the stack property.
     * Chrome and Gecko use this property.
     * @param {Error} ex
     * @return {?Object.<string, *>} Stack trace information.
     */
    function computeStackTraceFromStackProp(ex) {
        if (typeof ex.stack === 'undefined' || !ex.stack) return;

        var chrome = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,
            gecko = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?)(?::(\d+))?(?::(\d+))?\s*$/i,
            winjs = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,

            // Used to additionally parse URL/line/column from eval frames
            geckoEval = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i,
            chromeEval = /\((\S*)(?::(\d+))(?::(\d+))\)/,

            lines = ex.stack.split('\n'),
            stack = [],
            submatch,
            parts,
            element,
            reference = /^(.*) is undefined$/.exec(ex.message);

        for (var i = 0, j = lines.length; i < j; ++i) {
            if ((parts = chrome.exec(lines[i]))) {
                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line
                var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line
                if (isEval && (submatch = chromeEval.exec(parts[2]))) {
                    // throw out eval line/column and use top-most line/column number
                    parts[2] = submatch[1]; // url
                    parts[3] = submatch[2]; // line
                    parts[4] = submatch[3]; // column
                }
                element = {
                    'url': !isNative ? parts[2] : null,
                    'func': parts[1] || UNKNOWN_FUNCTION,
                    'args': isNative ? [parts[2]] : [],
                    'line': parts[3] ? +parts[3] : null,
                    'column': parts[4] ? +parts[4] : null
                };
            } else if ( parts = winjs.exec(lines[i]) ) {
                element = {
                    'url': parts[2],
                    'func': parts[1] || UNKNOWN_FUNCTION,
                    'args': [],
                    'line': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else if ((parts = gecko.exec(lines[i]))) {
                var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
                if (isEval && (submatch = geckoEval.exec(parts[3]))) {
                    // throw out eval line/column and use top-most line number
                    parts[3] = submatch[1];
                    parts[4] = submatch[2];
                    parts[5] = null; // no column when eval
                } else if (i === 0 && !parts[5] && typeof ex.columnNumber !== 'undefined') {
                    // FireFox uses this awesome columnNumber property for its top frame
                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,
                    // so adding 1
                    // NOTE: this hack doesn't work if top-most frame is eval
                    stack[0].column = ex.columnNumber + 1;
                }
                element = {
                    'url': parts[3],
                    'func': parts[1] || UNKNOWN_FUNCTION,
                    'args': parts[2] ? parts[2].split(',') : [],
                    'line': parts[4] ? +parts[4] : null,
                    'column': parts[5] ? +parts[5] : null
                };
            } else {
                continue;
            }

            if (!element.func && element.line) {
                element.func = UNKNOWN_FUNCTION;
            }

            stack.push(element);
        }

        if (!stack.length) {
            return null;
        }

        return {
            'name': ex.name,
            'message': ex.message,
            'url': getLocationHref(),
            'stack': stack
        };
    }

    /**
     * Adds information about the first frame to incomplete stack traces.
     * Safari and IE require this to get complete data on the first frame.
     * @param {Object.<string, *>} stackInfo Stack trace information from
     * one of the compute* methods.
     * @param {string} url The URL of the script that caused an error.
     * @param {(number|string)} lineNo The line number of the script that
     * caused an error.
     * @param {string=} message The error generated by the browser, which
     * hopefully contains the name of the object that caused the error.
     * @return {boolean} Whether or not the stack information was
     * augmented.
     */
    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {
        var initial = {
            'url': url,
            'line': lineNo
        };

        if (initial.url && initial.line) {
            stackInfo.incomplete = false;

            if (!initial.func) {
                initial.func = UNKNOWN_FUNCTION;
            }

            if (stackInfo.stack.length > 0) {
                if (stackInfo.stack[0].url === initial.url) {
                    if (stackInfo.stack[0].line === initial.line) {
                        return false; // already in stack trace
                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {
                        stackInfo.stack[0].line = initial.line;
                        return false;
                    }
                }
            }

            stackInfo.stack.unshift(initial);
            stackInfo.partial = true;
            return true;
        } else {
            stackInfo.incomplete = true;
        }

        return false;
    }

    /**
     * Computes stack trace information by walking the arguments.caller
     * chain at the time the exception occurred. This will cause earlier
     * frames to be missed but is the only way to get any stack trace in
     * Safari and IE. The top frame is restored by
     * {@link augmentStackTraceWithInitialElement}.
     * @param {Error} ex
     * @return {?Object.<string, *>} Stack trace information.
     */
    function computeStackTraceByWalkingCallerChain(ex, depth) {
        var functionName = /function\s+([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?\s*\(/i,
            stack = [],
            funcs = {},
            recursion = false,
            parts,
            item,
            source;

        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {
            if (curr === computeStackTrace || curr === TraceKit.report) {
                // console.log('skipping internal function');
                continue;
            }

            item = {
                'url': null,
                'func': UNKNOWN_FUNCTION,
                'line': null,
                'column': null
            };

            if (curr.name) {
                item.func = curr.name;
            } else if ((parts = functionName.exec(curr.toString()))) {
                item.func = parts[1];
            }

            if (typeof item.func === 'undefined') {
              try {
                item.func = parts.input.substring(0, parts.input.indexOf('{'));
              } catch (e) { }
            }

            if (funcs['' + curr]) {
                recursion = true;
            }else{
                funcs['' + curr] = true;
            }

            stack.push(item);
        }

        if (depth) {
            // console.log('depth is ' + depth);
            // console.log('stack is ' + stack.length);
            stack.splice(0, depth);
        }

        var result = {
            'name': ex.name,
            'message': ex.message,
            'url': getLocationHref(),
            'stack': stack
        };
        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);
        return result;
    }

    /**
     * Computes a stack trace for an exception.
     * @param {Error} ex
     * @param {(string|number)=} depth
     */
    function computeStackTrace(ex, depth) {
        var stack = null;
        depth = (depth == null ? 0 : +depth);

        try {
            stack = computeStackTraceFromStackProp(ex);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (TraceKit.debug) {
                throw e;
            }
        }

        try {
            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (TraceKit.debug) {
                throw e;
            }
        }
        return {
            'name': ex.name,
            'message': ex.message,
            'url': getLocationHref()
        };
    }

    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;
    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;

    return computeStackTrace;
}());

module.exports = TraceKit;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 json-stringify-safe
 Like JSON.stringify, but doesn't throw on circular references.

 Originally forked from https://github.com/isaacs/json-stringify-safe
 version 5.0.1 on 3/8/2017 and modified for IE8 compatibility.
 Tests for this are in test/vendor.

 ISC license: https://github.com/isaacs/json-stringify-safe/blob/master/LICENSE
*/

exports = module.exports = stringify
exports.getSerialize = serializer

function indexOf(haystack, needle) {
  for (var i = 0; i < haystack.length; ++i) {
    if (haystack[i] === needle) return i;
  }
  return -1;
}

function stringify(obj, replacer, spaces, cycleReplacer) {
  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)
}

function serializer(replacer, cycleReplacer) {
  var stack = [], keys = []

  if (cycleReplacer == null) cycleReplacer = function(key, value) {
    if (stack[0] === value) return '[Circular ~]'
    return '[Circular ~.' + keys.slice(0, indexOf(stack, value)).join('.') + ']'
  }

  return function(key, value) {
    if (stack.length > 0) {
      var thisPos = indexOf(stack, this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)
      if (~indexOf(stack, value)) value = cycleReplacer.call(this, key, value)
    }
    else stack.push(value)

    return replacer == null ? value : replacer.call(this, key, value)
  }
}


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(494);

/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

var RetryOperation = __webpack_require__(495);

exports.operation = function(options) {
  var timeouts = exports.timeouts(options);
  return new RetryOperation(timeouts);
};

exports.timeouts = function(options) {
  if (options instanceof Array) {
    return [].concat(options);
  }

  var opts = {
    retries: 10,
    factor: 2,
    minTimeout: 1 * 1000,
    maxTimeout: Infinity,
    randomize: false
  };
  for (var key in options) {
    opts[key] = options[key];
  }

  if (opts.minTimeout > opts.maxTimeout) {
    throw new Error('minTimeout is greater than maxTimeout');
  }

  var timeouts = [];
  for (var i = 0; i < opts.retries; i++) {
    timeouts.push(this._createTimeout(i, opts));
  }

  // sort the array numerically ascending
  timeouts.sort(function(a,b) {
    return a - b;
  });

  return timeouts;
};

exports._createTimeout = function(attempt, opts) {
  var random = (opts.randomize)
    ? (Math.random() + 1)
    : 1;

  var timeout = Math.round(random * opts.minTimeout * Math.pow(opts.factor, attempt));
  timeout = Math.min(timeout, opts.maxTimeout);

  return timeout;
};

/***/ }),
/* 495 */
/***/ (function(module, exports) {

function RetryOperation(timeouts) {
  this._timeouts = timeouts;
  this._fn = null;
  this._errors = [];
  this._attempts = 1;
  this._operationTimeout = null;
  this._operationTimeoutCb = null;
  this._timeout = null;
}
module.exports = RetryOperation;

RetryOperation.prototype.retry = function(err) {
  if (this._timeout) {
    clearTimeout(this._timeout);
  }

  if (!err) {
    return false;
  }

  this._errors.push(err);

  var timeout = this._timeouts.shift();
  if (timeout === undefined) {
    return false;
  }

  this._attempts++;

  var self = this;
  setTimeout(function() {
    self._fn(self._attempts);

    if (self._operationTimeoutCb) {
      self._timeout = setTimeout(function() {
        self._operationTimeoutCb(self._attempts);
      }, self._operationTimeout);
    }
  }, timeout);

  return true;
};

RetryOperation.prototype.attempt = function(fn, timeoutOps) {
  this._fn = fn;

  if (timeoutOps) {
    if (timeoutOps.timeout) {
      this._operationTimeout = timeoutOps.timeout;
    }
    if (timeoutOps.cb) {
      this._operationTimeoutCb = timeoutOps.cb;
    }
  }

  this._fn(this._attempts);

  var self = this;
  if (this._operationTimeoutCb) {
    this._timeout = setTimeout(function() {
      self._operationTimeoutCb();
    }, self._operationTimeout);
  }
};

RetryOperation.prototype.try = function(fn) {
  console.log('Using RetryOperation.try() is deprecated');
  this.attempt(fn);
};

RetryOperation.prototype.start = function(fn) {
  console.log('Using RetryOperation.start() is deprecated');
  this.attempt(fn);
};

RetryOperation.prototype.start = RetryOperation.prototype.try;

RetryOperation.prototype.errors = function() {
  return this._errors;
};

RetryOperation.prototype.attempts = function() {
  return this._attempts;
};

RetryOperation.prototype.mainError = function() {
  if (this._errors.length === 0) {
    return null;
  }

  var counts = {};
  var mainError = null;
  var mainErrorCount = 0;

  for (var i = 0; i < this._errors.length; i++) {
    var error = this._errors[i];
    var message = error.message;
    var count = (counts[message] || 0) + 1;

    counts[message] = count;

    if (count >= mainErrorCount) {
      mainError = error;
      mainErrorCount = count;
    }
  }

  return mainError;
};

/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, module) {/*
Copyright (c) 2011 Tim Caswell <tim@creationix.com>

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// Inspired by http://github.com/willconant/flow-js, but reimplemented and
// modified to fit my taste and the node.JS error handling system.
function Step() {
  var steps = Array.prototype.slice.call(arguments),
      pending, counter, results, lock;

  // Define the main callback that's given as `this` to the steps.
  function next() {
    counter = pending = 0;

    // Check if there are no steps left
    if (steps.length === 0) {
      // Throw uncaught errors
      if (arguments[0]) {
        throw arguments[0];
      }
      return;
    }

    // Get the next step to execute
    var fn = steps.shift();
    results = [];

    // Run the step in a try..catch block so exceptions don't get out of hand.
    try {
      lock = true;
      var result = fn.apply(next, arguments);
    } catch (e) {
      // Pass any exceptions on through the next callback
      next(e);
    }

    if (counter > 0 && pending == 0) {
      // If parallel() was called, and all parallel branches executed
      // syncronously, go on to the next step immediately.
      next.apply(null, results);
    } else if (result !== undefined) {
      // If a syncronous return is used, pass it to the callback
      next(undefined, result);
    }
    lock = false;
  }

  // Add a special callback generator `this.parallel()` that groups stuff.
  next.parallel = function () {
    var index = 1 + counter++;
    pending++;

    return function () {
      pending--;
      // Compress the error from any result to the first argument
      if (arguments[0]) {
        results[0] = arguments[0];
      }
      // Send the other results as arguments
      results[index] = arguments[1];
      if (!lock && pending === 0) {
        // When all parallel branches done, call the callback
        next.apply(null, results);
      }
    };
  };

  // Generates a callback generator for grouped results
  next.group = function () {
    var localCallback = next.parallel();
    var counter = 0;
    var pending = 0;
    var result = [];
    var error = undefined;

    function check() {
      if (pending === 0) {
        // When group is done, call the callback
        localCallback(error, result);
      }
    }
    process.nextTick(check); // Ensures that check is called at least once

    // Generates a callback for the group
    return function () {
      var index = counter++;
      pending++;
      return function () {
        pending--;
        // Compress the error from any result to the first argument
        if (arguments[0]) {
          error = arguments[0];
        }
        // Send the other results as arguments
        result[index] = arguments[1];
        if (!lock) { check(); }
      };
    };
  };

  // Start the engine an pass nothing to the first step.
  next();
}

// Tack on leading and tailing steps for input and output and return
// the whole thing as a function.  Basically turns step calls into function
// factories.
Step.fn = function StepFn() {
  var steps = Array.prototype.slice.call(arguments);
  return function () {
    var args = Array.prototype.slice.call(arguments);

    // Insert a first step that primes the data stream
    var toRun = [function () {
      this.apply(null, args);
    }].concat(steps);

    // If the last arg is a function add it as a last step
    if (typeof args[args.length-1] === 'function') {
      toRun.push(args.pop());
    }


    Step.apply(null, toRun);
  }
}


// Hook into commonJS module systems
if (typeof module !== 'undefined' && "exports" in module) {
  module.exports = Step;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), __webpack_require__(26)(module)))

/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

var engine = __webpack_require__(500)

var storages = __webpack_require__(501)
var plugins = [__webpack_require__(498)]

module.exports = engine.createStore(storages, plugins)


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = json2Plugin

function json2Plugin() {
	__webpack_require__(499)
	return {}
}


/***/ }),
/* 499 */
/***/ (function(module, exports) {

//  json2.js
//  2016-10-28
//  Public Domain.
//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
//  See http://www.JSON.org/js.html
//  This code should be minified before deployment.
//  See http://javascript.crockford.com/jsmin.html

//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
//  NOT CONTROL.

//  This file creates a global JSON object containing two methods: stringify
//  and parse. This file provides the ES5 JSON capability to ES3 systems.
//  If a project might run on IE8 or earlier, then this file should be included.
//  This file does nothing on ES5 systems.

//      JSON.stringify(value, replacer, space)
//          value       any JavaScript value, usually an object or array.
//          replacer    an optional parameter that determines how object
//                      values are stringified for objects. It can be a
//                      function or an array of strings.
//          space       an optional parameter that specifies the indentation
//                      of nested structures. If it is omitted, the text will
//                      be packed without extra whitespace. If it is a number,
//                      it will specify the number of spaces to indent at each
//                      level. If it is a string (such as "\t" or "&nbsp;"),
//                      it contains the characters used to indent at each level.
//          This method produces a JSON text from a JavaScript value.
//          When an object value is found, if the object contains a toJSON
//          method, its toJSON method will be called and the result will be
//          stringified. A toJSON method does not serialize: it returns the
//          value represented by the name/value pair that should be serialized,
//          or undefined if nothing should be serialized. The toJSON method
//          will be passed the key associated with the value, and this will be
//          bound to the value.

//          For example, this would serialize Dates as ISO strings.

//              Date.prototype.toJSON = function (key) {
//                  function f(n) {
//                      // Format integers to have at least two digits.
//                      return (n < 10)
//                          ? "0" + n
//                          : n;
//                  }
//                  return this.getUTCFullYear()   + "-" +
//                       f(this.getUTCMonth() + 1) + "-" +
//                       f(this.getUTCDate())      + "T" +
//                       f(this.getUTCHours())     + ":" +
//                       f(this.getUTCMinutes())   + ":" +
//                       f(this.getUTCSeconds())   + "Z";
//              };

//          You can provide an optional replacer method. It will be passed the
//          key and value of each member, with this bound to the containing
//          object. The value that is returned from your method will be
//          serialized. If your method returns undefined, then the member will
//          be excluded from the serialization.

//          If the replacer parameter is an array of strings, then it will be
//          used to select the members to be serialized. It filters the results
//          such that only members with keys listed in the replacer array are
//          stringified.

//          Values that do not have JSON representations, such as undefined or
//          functions, will not be serialized. Such values in objects will be
//          dropped; in arrays they will be replaced with null. You can use
//          a replacer function to replace those with JSON values.

//          JSON.stringify(undefined) returns undefined.

//          The optional space parameter produces a stringification of the
//          value that is filled with line breaks and indentation to make it
//          easier to read.

//          If the space parameter is a non-empty string, then that string will
//          be used for indentation. If the space parameter is a number, then
//          the indentation will be that many spaces.

//          Example:

//          text = JSON.stringify(["e", {pluribus: "unum"}]);
//          // text is '["e",{"pluribus":"unum"}]'

//          text = JSON.stringify(["e", {pluribus: "unum"}], null, "\t");
//          // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

//          text = JSON.stringify([new Date()], function (key, value) {
//              return this[key] instanceof Date
//                  ? "Date(" + this[key] + ")"
//                  : value;
//          });
//          // text is '["Date(---current time---)"]'

//      JSON.parse(text, reviver)
//          This method parses a JSON text to produce an object or array.
//          It can throw a SyntaxError exception.

//          The optional reviver parameter is a function that can filter and
//          transform the results. It receives each of the keys and values,
//          and its return value is used instead of the original value.
//          If it returns what it received, then the structure is not modified.
//          If it returns undefined then the member is deleted.

//          Example:

//          // Parse the text. Values that look like ISO date strings will
//          // be converted to Date objects.

//          myData = JSON.parse(text, function (key, value) {
//              var a;
//              if (typeof value === "string") {
//                  a =
//   /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
//                  if (a) {
//                      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
//                          +a[5], +a[6]));
//                  }
//              }
//              return value;
//          });

//          myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
//              var d;
//              if (typeof value === "string" &&
//                      value.slice(0, 5) === "Date(" &&
//                      value.slice(-1) === ")") {
//                  d = new Date(value.slice(5, -1));
//                  if (d) {
//                      return d;
//                  }
//              }
//              return value;
//          });

//  This is a reference implementation. You are free to copy, modify, or
//  redistribute.

/*jslint
    eval, for, this
*/

/*property
    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== "object") {
    JSON = {};
}

(function () {
    "use strict";

    var rx_one = /^[\],:{}\s]*$/;
    var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
    var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10
            ? "0" + n
            : n;
    }

    function this_value() {
        return this.valueOf();
    }

    if (typeof Date.prototype.toJSON !== "function") {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear() + "-" +
                        f(this.getUTCMonth() + 1) + "-" +
                        f(this.getUTCDate()) + "T" +
                        f(this.getUTCHours()) + ":" +
                        f(this.getUTCMinutes()) + ":" +
                        f(this.getUTCSeconds()) + "Z"
                : null;
        };

        Boolean.prototype.toJSON = this_value;
        Number.prototype.toJSON = this_value;
        String.prototype.toJSON = this_value;
    }

    var gap;
    var indent;
    var meta;
    var rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        rx_escapable.lastIndex = 0;
        return rx_escapable.test(string)
            ? "\"" + string.replace(rx_escapable, function (a) {
                var c = meta[a];
                return typeof c === "string"
                    ? c
                    : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
            }) + "\""
            : "\"" + string + "\"";
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i;          // The loop counter.
        var k;          // The member key.
        var v;          // The member value.
        var length;
        var mind = gap;
        var partial;
        var value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === "object" &&
                typeof value.toJSON === "function") {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === "function") {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case "string":
            return quote(value);

        case "number":

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value)
                ? String(value)
                : "null";

        case "boolean":
        case "null":

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce "null". The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is "object", we might be dealing with an object or an array or
// null.

        case "object":

// Due to a specification blunder in ECMAScript, typeof null is "object",
// so watch out for that case.

            if (!value) {
                return "null";
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === "[object Array]") {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || "null";
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? "[]"
                    : gap
                        ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
                        : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === "string") {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                gap
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                gap
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? "{}"
                : gap
                    ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                    : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== "function") {
        meta = {    // table of character substitutions
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\"": "\\\"",
            "\\": "\\\\"
        };
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = "";
            indent = "";

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " ";
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === "string") {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== "function" &&
                    (typeof replacer !== "object" ||
                    typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify");
            }

// Make a fake root object containing our value under the key of "".
// Return the result of stringifying the value.

            return str("", {"": value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k;
                var v;
                var value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            rx_dangerous.lastIndex = 0;
            if (rx_dangerous.test(text)) {
                text = text.replace(rx_dangerous, function (a) {
                    return "\\u" +
                            ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with "()" and "new"
// because they can cause invocation, and "=" because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with "@" (a non-JSON character). Second, we
// replace all simple value tokens with "]" characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or "]" or
// "," or ":" or "{" or "}". If that is so, then the text is safe for eval.

            if (
                rx_one.test(
                    text
                        .replace(rx_two, "@")
                        .replace(rx_three, "]")
                        .replace(rx_four, "")
                )
            ) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The "{" operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval("(" + text + ")");

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return (typeof reviver === "function")
                    ? walk({"": j}, "")
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError("JSON.parse");
        };
    }
}());

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(30)
var slice = util.slice
var pluck = util.pluck
var each = util.each
var create = util.create
var isList = util.isList
var isFunction = util.isFunction
var isObject = util.isObject

module.exports = {
	createStore: createStore,
}

var storeAPI = {
	version: '2.0.4',
	enabled: false,
	storage: null,

	// addStorage adds another storage to this store. The store
	// will use the first storage it receives that is enabled, so
	// call addStorage in the order of preferred storage.
	addStorage: function(storage) {
		if (this.enabled) { return }
		if (this._testStorage(storage)) {
			this._storage.resolved = storage
			this.enabled = true
			this.storage = storage.name
		}
	},

	// addPlugin will add a plugin to this store.
	addPlugin: function(plugin) {
		var self = this

		// If the plugin is an array, then add all plugins in the array.
		// This allows for a plugin to depend on other plugins.
		if (isList(plugin)) {
			each(plugin, function(plugin) {
				self.addPlugin(plugin)
			})
			return
		}

		// Keep track of all plugins we've seen so far, so that we
		// don't add any of them twice.
		var seenPlugin = pluck(this._seenPlugins, function(seenPlugin) { return (plugin === seenPlugin) })
		if (seenPlugin) {
			return
		}
		this._seenPlugins.push(plugin)

		// Check that the plugin is properly formed
		if (!isFunction(plugin)) {
			throw new Error('Plugins must be function values that return objects')
		}

		var pluginProperties = plugin.call(this)
		if (!isObject(pluginProperties)) {
			throw new Error('Plugins must return an object of function properties')
		}

		// Add the plugin function properties to this store instance.
		each(pluginProperties, function(pluginFnProp, propName) {
			if (!isFunction(pluginFnProp)) {
				throw new Error('Bad plugin property: '+propName+' from plugin '+plugin.name+'. Plugins should only return functions.')
			}
			self._assignPluginFnProp(pluginFnProp, propName)
		})
	},

	// get returns the value of the given key. If that value
	// is undefined, it returns optionalDefaultValue instead.
	get: function(key, optionalDefaultValue) {
		var data = this._storage().read(this._namespacePrefix + key)
		return this._deserialize(data, optionalDefaultValue)
	},

	// set will store the given value at key and returns value.
	// Calling set with value === undefined is equivalent to calling remove.
	set: function(key, value) {
		if (value === undefined) {
			return this.remove(key)
		}
		this._storage().write(this._namespacePrefix + key, this._serialize(value))
		return value
	},

	// remove deletes the key and value stored at the given key.
	remove: function(key) {
		this._storage().remove(this._namespacePrefix + key)
	},

	// each will call the given callback once for each key-value pair
	// in this store.
	each: function(callback) {
		var self = this
		this._storage().each(function(val, namespacedKey) {
			callback(self._deserialize(val), namespacedKey.replace(self._namespaceRegexp, ''))
		})
	},

	// clearAll will remove all the stored key-value pairs in this store.
	clearAll: function() {
		this._storage().clearAll()
	},

	// additional functionality that can't live in plugins
	// ---------------------------------------------------

	// hasNamespace returns true if this store instance has the given namespace.
	hasNamespace: function(namespace) {
		return (this._namespacePrefix == '__storejs_'+namespace+'_')
	},

	// namespace clones the current store and assigns it the given namespace
	namespace: function(namespace) {
		if (!this._legalNamespace.test(namespace)) {
			throw new Error('store.js namespaces can only have alhpanumerics + underscores and dashes')
		}
		// create a prefix that is very unlikely to collide with un-namespaced keys
		var namespacePrefix = '__storejs_'+namespace+'_'
		return create(this, {
			_namespacePrefix: namespacePrefix,
			_namespaceRegexp: namespacePrefix ? new RegExp('^'+namespacePrefix) : null
		})
	},

	// createStore creates a store.js instance with the first
	// functioning storage in the list of storage candidates,
	// and applies the the given mixins to the instance.
	createStore: function(storages, plugins) {
		return createStore(storages, plugins)
	},
}

function createStore(storages, plugins) {
	var _privateStoreProps = {
		_seenPlugins: [],
		_namespacePrefix: '',
		_namespaceRegexp: null,
		_legalNamespace: /^[a-zA-Z0-9_\-]+$/, // alpha-numeric + underscore and dash

		_storage: function() {
			if (!this.enabled) {
				throw new Error("store.js: No supported storage has been added! "+
					"Add one (e.g store.addStorage(require('store/storages/cookieStorage')) "+
					"or use a build with more built-in storages (e.g "+
					"https://github.com/marcuswestin/store.js/tree/master/dist/store.legacy.min.js)")
			}
			return this._storage.resolved
		},

		_testStorage: function(storage) {
			try {
				var testStr = '__storejs__test__'
				storage.write(testStr, testStr)
				var ok = (storage.read(testStr) === testStr)
				storage.remove(testStr)
				return ok
			} catch(e) {
				return false
			}
		},

		_assignPluginFnProp: function(pluginFnProp, propName) {
			var oldFn = this[propName]
			this[propName] = function pluginFn() {
				var args = slice(arguments, 0)
				var self = this

				// super_fn calls the old function which was overwritten by
				// this mixin.
				function super_fn() {
					if (!oldFn) { return }
					each(arguments, function(arg, i) {
						args[i] = arg
					})
					return oldFn.apply(self, args)
				}

				// Give mixing function access to super_fn by prefixing all mixin function
				// arguments with super_fn.
				var newFnArgs = [super_fn].concat(args)

				return pluginFnProp.apply(self, newFnArgs)
			}
		},

		_serialize: function(obj) {
			return JSON.stringify(obj)
		},

		_deserialize: function(strVal, defaultVal) {
			if (!strVal) { return defaultVal }
			// It is possible that a raw string value has been previously stored
			// in a storage without using store.js, meaning it will be a raw
			// string value instead of a JSON serialized string. By defaulting
			// to the raw string value in case of a JSON parse error, we allow
			// for past stored values to be forwards-compatible with store.js
			var val = ''
			try { val = JSON.parse(strVal) }
			catch(e) { val = strVal }

			return (val !== undefined ? val : defaultVal)
		},
	}

	var store = create(_privateStoreProps, storeAPI)
	each(storages, function(storage) {
		store.addStorage(storage)
	})
	each(plugins, function(plugin) {
		store.addPlugin(plugin)
	})
	return store
}


/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
	// Listed in order of usage preference
	'localStorage': __webpack_require__(503),
	'oldFF-globalStorage': __webpack_require__(505),
	'oldIE-userDataStorage': __webpack_require__(506),
	'cookieStorage': __webpack_require__(502),
	'sessionStorage': __webpack_require__(507),
	'memoryStorage': __webpack_require__(504),
}


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

// cookieStorage is useful Safari private browser mode, where localStorage
// doesn't work but cookies do. This implementation is adopted from
// https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage

var util = __webpack_require__(30)
var Global = util.Global
var trim = util.trim

module.exports = {
	name: 'cookieStorage',
	read: read,
	write: write,
	each: each,
	remove: remove,
	clearAll: clearAll,
}

var doc = Global.document

function read(key) {
	if (!key || !_has(key)) { return null }
	var regexpStr = "(?:^|.*;\\s*)" +
		escape(key).replace(/[\-\.\+\*]/g, "\\$&") +
		"\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*"
	return unescape(doc.cookie.replace(new RegExp(regexpStr), "$1"))
}

function each(callback) {
	var cookies = doc.cookie.split(/; ?/g)
	for (var i = cookies.length - 1; i >= 0; i--) {
		if (!trim(cookies[i])) {
			continue
		}
		var kvp = cookies[i].split('=')
		var key = unescape(kvp[0])
		var val = unescape(kvp[1])
		callback(val, key)
	}
}

function write(key, data) {
	if(!key) { return }
	doc.cookie = escape(key) + "=" + escape(data) + "; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/"
}

function remove(key) {
	if (!key || !_has(key)) {
		return
	}
	doc.cookie = escape(key) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/"
}

function clearAll() {
	each(function(_, key) {
		remove(key)
	})
}

function _has(key) {
	return (new RegExp("(?:^|;\\s*)" + escape(key).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(doc.cookie)
}


/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(30)
var Global = util.Global

module.exports = {
	name: 'localStorage',
	read: read,
	write: write,
	each: each,
	remove: remove,
	clearAll: clearAll,
}

function localStorage() {
	return Global.localStorage
}

function read(key) {
	return localStorage().getItem(key)
}

function write(key, data) {
	return localStorage().setItem(key, data)
}

function each(fn) {
	for (var i = localStorage().length - 1; i >= 0; i--) {
		var key = localStorage().key(i)
		fn(read(key), key)
	}
}

function remove(key) {
	return localStorage().removeItem(key)
}

function clearAll() {
	return localStorage().clear()
}


/***/ }),
/* 504 */
/***/ (function(module, exports) {

// memoryStorage is a useful last fallback to ensure that the store
// is functions (meaning store.get(), store.set(), etc will all function).
// However, stored values will not persist when the browser navigates to
// a new page or reloads the current page.

module.exports = {
	name: 'memoryStorage',
	read: read,
	write: write,
	each: each,
	remove: remove,
	clearAll: clearAll,
}

var memoryStorage = {}

function read(key) {
	return memoryStorage[key]
}

function write(key, data) {
	memoryStorage[key] = data
}

function each(callback) {
	for (var key in memoryStorage) {
		if (memoryStorage.hasOwnProperty(key)) {
			callback(memoryStorage[key], key)
		}
	}
}

function remove(key) {
	delete memoryStorage[key]
}

function clearAll(key) {
	memoryStorage = {}
}


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

// oldFF-globalStorage provides storage for Firefox
// versions 6 and 7, where no localStorage, etc
// is available.

var util = __webpack_require__(30)
var Global = util.Global

module.exports = {
	name: 'oldFF-globalStorage',
	read: read,
	write: write,
	each: each,
	remove: remove,
	clearAll: clearAll,
}

var globalStorage = Global.globalStorage

function read(key) {
	return globalStorage[key]
}

function write(key, data) {
	globalStorage[key] = data
}

function each(fn) {
	for (var i = globalStorage.length - 1; i >= 0; i--) {
		var key = globalStorage.key(i)
		fn(globalStorage[key], key)
	}
}

function remove(key) {
	return globalStorage.removeItem(key)
}

function clearAll() {
	each(function(key, _) {
		delete globalStorage[key]
	})
}


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

// oldIE-userDataStorage provides storage for Internet Explorer
// versions 6 and 7, where no localStorage, sessionStorage, etc
// is available.

var util = __webpack_require__(30)
var Global = util.Global

module.exports = {
	name: 'oldIE-userDataStorage',
	write: write,
	read: read,
	each: each,
	remove: remove,
	clearAll: clearAll,
}

var storageName = 'storejs'
var doc = Global.document
var _withStorageEl = _makeIEStorageElFunction()
var disable = (Global.navigator ? Global.navigator.userAgent : '').match(/ (MSIE 8|MSIE 9|MSIE 10)\./) // MSIE 9.x, MSIE 10.x

function write(unfixedKey, data) {
	if (disable) { return }
	var fixedKey = fixKey(unfixedKey)
	_withStorageEl(function(storageEl) {
		storageEl.setAttribute(fixedKey, data)
		storageEl.save(storageName)
	})
}

function read(unfixedKey) {
	if (disable) { return }
	var fixedKey = fixKey(unfixedKey)
	var res = null
	_withStorageEl(function(storageEl) {
		res = storageEl.getAttribute(fixedKey)
	})
	return res
}

function each(callback) {
	_withStorageEl(function(storageEl) {
		var attributes = storageEl.XMLDocument.documentElement.attributes
		for (var i=attributes.length-1; i>=0; i--) {
			var attr = attributes[i]
			callback(storageEl.getAttribute(attr.name), attr.name)
		}
	})
}

function remove(unfixedKey) {
	var fixedKey = fixKey(unfixedKey)
	_withStorageEl(function(storageEl) {
		storageEl.removeAttribute(fixedKey)
		storageEl.save(storageName)
	})
}

function clearAll() {
	_withStorageEl(function(storageEl) {
		var attributes = storageEl.XMLDocument.documentElement.attributes
		storageEl.load(storageName)
		for (var i=attributes.length-1; i>=0; i--) {
			storageEl.removeAttribute(attributes[i].name)
		}
		storageEl.save(storageName)
	})
}

// Helpers
//////////

// In IE7, keys cannot start with a digit or contain certain chars.
// See https://github.com/marcuswestin/store.js/issues/40
// See https://github.com/marcuswestin/store.js/issues/83
var forbiddenCharsRegex = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", "g")
function fixKey(key) {
	return key.replace(/^\d/, '___$&').replace(forbiddenCharsRegex, '___')
}

function _makeIEStorageElFunction() {
	if (!doc || !doc.documentElement || !doc.documentElement.addBehavior) {
		return null
	}
	var scriptTag = 'script',
		storageOwner,
		storageContainer,
		storageEl

	// Since #userData storage applies only to specific paths, we need to
	// somehow link our data to a specific path.  We choose /favicon.ico
	// as a pretty safe option, since all browsers already make a request to
	// this URL anyway and being a 404 will not hurt us here.  We wrap an
	// iframe pointing to the favicon in an ActiveXObject(htmlfile) object
	// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
	// since the iframe access rules appear to allow direct access and
	// manipulation of the document element, even for a 404 page.  This
	// document can be used instead of the current document (which would
	// have been limited to the current path) to perform #userData storage.
	try {
		/* global ActiveXObject */
		storageContainer = new ActiveXObject('htmlfile')
		storageContainer.open()
		storageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src="/favicon.ico"></iframe>')
		storageContainer.close()
		storageOwner = storageContainer.w.frames[0].document
		storageEl = storageOwner.createElement('div')
	} catch(e) {
		// somehow ActiveXObject instantiation failed (perhaps some special
		// security settings or otherwse), fall back to per-path storage
		storageEl = doc.createElement('div')
		storageOwner = doc.body
	}

	return function(storeFunction) {
		var args = [].slice.call(arguments, 0)
		args.unshift(storageEl)
		// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
		// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
		storageOwner.appendChild(storageEl)
		storageEl.addBehavior('#default#userData')
		storageEl.load(storageName)
		storeFunction.apply(this, args)
		storageOwner.removeChild(storageEl)
		return
	}
}


/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(30)
var Global = util.Global

module.exports = {
	name: 'sessionStorage',
	read: read,
	write: write,
	each: each,
	remove: remove,
	clearAll: clearAll,
}

function sessionStorage() {
	return Global.sessionStorage
}

function read(key) {
	return sessionStorage().getItem(key)
}

function write(key, data) {
	return sessionStorage().setItem(key, data)
}

function each(fn) {
	for (var i = sessionStorage().length - 1; i >= 0; i--) {
		var key = sessionStorage().key(i)
		fn(read(key), key)
	}
}

function remove(key) {
	return sessionStorage().removeItem(key)
}

function clearAll() {
	return sessionStorage().clear()
}


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Check if `fn` is a function.
 *
 * @param {Function} fn
 * @return {Boolean}
 * @api private
 */
var isObject = __webpack_require__(92);

function isFunction(fn) {
  var tag = isObject(fn) ? Object.prototype.toString.call(fn) : '';
  return tag === '[object Function]';
}

module.exports = isFunction;


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = __webpack_require__(92);

/**
 * Expose `RequestBase`.
 */

module.exports = RequestBase;

/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }
  return obj;
}

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.clearTimeout = function _clearTimeout(){
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, read, deadline}
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.timeout = function timeout(options){
  if (!options || 'object' !== typeof options) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for(var option in options) {
    switch(option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;
      case 'response':
        this._responseTimeout = options.response;
        break;
      default:
        console.warn("Unknown timeout option", option);
    }
  }
  return this;
};

/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.retry = function retry(count){
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  return this;
};

/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

RequestBase.prototype._retry = function() {
  this.clearTimeout();

  // node
  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;

  return this._end();
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
      self.end(function(err, res){
        if (err) innerReject(err); else innerResolve(res);
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
}

RequestBase.prototype.catch = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
}

RequestBase.prototype.ok = function(cb) {
  if ('function' !== typeof cb) throw Error("Callback required");
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function(res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};


/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

RequestBase.prototype.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

RequestBase.prototype.getHeader = RequestBase.prototype.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
RequestBase.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
RequestBase.prototype.field = function(name, val) {

  // name should be either a string or an object.
  if (null === name ||  undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  if ('boolean' === typeof val) {
    val = '' + val;
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
RequestBase.prototype.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

RequestBase.prototype.withCredentials = function(on){
  // This is browser-only functionality. Node side is no-op.
  if(on==undefined) on = true;
  this._withCredentials = on;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

RequestBase.prototype.toJSON = function(){
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header
  };
};


/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.send = function(data){
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  }

  // merge
  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  }

  // default to json
  if (!type) this.type('json');
  return this;
};


/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.sortQuery = function(sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

RequestBase.prototype._timeoutError = function(reason, timeout, errno){
  if (this._aborted) {
    return;
  }
  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function() {
  var self = this;

  // deadline
  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  }
  // response timeout
  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function(){
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
}


/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var utils = __webpack_require__(512);

/**
 * Expose `ResponseBase`.
 */

module.exports = ResponseBase;

/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }
  return obj;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

ResponseBase.prototype.get = function(field){
    return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

ResponseBase.prototype._setHeaderProperties = function(header){
    // TODO: moar!
    // TODO: make this a util

    // content-type
    var ct = header['content-type'] || '';
    this.type = utils.type(ct);

    // params
    var params = utils.params(ct);
    for (var key in params) this[key] = params[key];

    this.links = {};

    // links
    try {
        if (header.link) {
            this.links = utils.parseLinks(header.link);
        }
    } catch (err) {
        // ignore
    }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

ResponseBase.prototype._setStatusProperties = function(status){
    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.redirect = 3 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
        ? this.toError()
        : false;

    // sugar
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.forbidden = 403 == status;
    this.notFound = 404 == status;
};


/***/ }),
/* 511 */
/***/ (function(module, exports) {

var ERROR_CODES = [
  'ECONNRESET',
  'ETIMEDOUT',
  'EADDRINFO',
  'ESOCKETTIMEDOUT'
];

/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
module.exports = function shouldRetry(err, res) {
  if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;
  if (res && res.status && res.status >= 500) return true;
  // Superagent timeout
  if (err && 'timeout' in err && err.code == 'ECONNABORTED') return true;
  if (err && 'crossDomain' in err) return true;
  return false;
};


/***/ }),
/* 512 */
/***/ (function(module, exports) {


/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, shouldStripCookie){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  if (shouldStripCookie) {
    delete header['cookie'];
  }
  return header;
};

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

// Load modules

var Hoek = __webpack_require__(5);


// Declare internals

var internals = {};


exports = module.exports = internals.Topo = function () {

    this._items = [];
    this.nodes = [];
};


internals.Topo.prototype.add = function (nodes, options) {

    var self = this;

    options = options || {};

    // Validate rules

    var before = [].concat(options.before || []);
    var after = [].concat(options.after || []);
    var group = options.group || '?';
    var sort = options.sort || 0;                   // Used for merging only

    Hoek.assert(before.indexOf(group) === -1, 'Item cannot come before itself:', group);
    Hoek.assert(before.indexOf('?') === -1, 'Item cannot come before unassociated items');
    Hoek.assert(after.indexOf(group) === -1, 'Item cannot come after itself:', group);
    Hoek.assert(after.indexOf('?') === -1, 'Item cannot come after unassociated items');

    ([].concat(nodes)).forEach(function (node, i) {

        var item = {
            seq: self._items.length,
            sort: sort,
            before: before,
            after: after,
            group: group,
            node: node
        };

        self._items.push(item);
    });

    // Insert event

    var error = this._sort();
    Hoek.assert(!error, 'item', (group !== '?' ? 'added into group ' + group : ''), 'created a dependencies error');

    return this.nodes;
};


internals.Topo.prototype.merge = function (others) {

    others = [].concat(others);
    for (var o = 0, ol = others.length; o < ol; ++o) {
        var other = others[o];
        if (other) {
            for (var i = 0, il = other._items.length; i < il; ++i) {
                var item = Hoek.shallow(other._items[i]);
                this._items.push(item);
            }
        }
    }

    // Sort items

    this._items.sort(internals.mergeSort);
    for (i = 0, il = this._items.length; i < il; ++i) {
        this._items[i].seq = i;
    }

    var error = this._sort();
    Hoek.assert(!error, 'merge created a dependencies error');

    return this.nodes;
};


internals.mergeSort = function (a, b) {

    return a.sort === b.sort ? 0 : (a.sort < b.sort ? -1 : 1);
};


internals.Topo.prototype._sort = function () {

    // Construct graph

    var groups = {};
    var graph = {};
    var graphAfters = {};

    for (var i = 0, il = this._items.length; i < il; ++i) {
        var item = this._items[i];
        var seq = item.seq;                         // Unique across all items
        var group = item.group;

        // Determine Groups

        groups[group] = groups[group] || [];
        groups[group].push(seq);

        // Build intermediary graph using 'before'

        graph[seq] = item.before;

        // Build second intermediary graph with 'after'

        var after = item.after;
        for (var j = 0, jl = after.length; j < jl; ++j) {
            graphAfters[after[j]] = (graphAfters[after[j]] || []).concat(seq);
        }
    }

    // Expand intermediary graph

    var graphNodes = Object.keys(graph);
    for (i = 0, il = graphNodes.length; i < il; ++i) {
        var node = graphNodes[i];
        var expandedGroups = [];

        var graphNodeItems = Object.keys(graph[node]);
        for (j = 0, jl = graphNodeItems.length; j < jl; ++j) {
            group = graph[node][graphNodeItems[j]];
            groups[group] = groups[group] || [];

            for (var k = 0, kl = groups[group].length; k < kl; ++k) {

                expandedGroups.push(groups[group][k]);
            }
        }
        graph[node] = expandedGroups;
    }

    // Merge intermediary graph using graphAfters into final graph

    var afterNodes = Object.keys(graphAfters);
    for (i = 0, il = afterNodes.length; i < il; ++i) {
        group = afterNodes[i];

        if (groups[group]) {
            for (j = 0, jl = groups[group].length; j < jl; ++j) {
                node = groups[group][j];
                graph[node] = graph[node].concat(graphAfters[group]);
            }
        }
    }

    // Compile ancestors

    var children;
    var ancestors = {};
    graphNodes = Object.keys(graph);
    for (i = 0, il = graphNodes.length; i < il; ++i) {
        node = graphNodes[i];
        children = graph[node];

        for (j = 0, jl = children.length; j < jl; ++j) {
            ancestors[children[j]] = (ancestors[children[j]] || []).concat(node);
        }
    }

    // Topo sort

    var visited = {};
    var sorted = [];

    for (i = 0, il = this._items.length; i < il; ++i) {
        var next = i;

        if (ancestors[i]) {
            next = null;
            for (j = 0, jl = this._items.length; j < jl; ++j) {
                if (visited[j] === true) {
                    continue;
                }

                if (!ancestors[j]) {
                    ancestors[j] = [];
                }

                var shouldSeeCount = ancestors[j].length;
                var seenCount = 0;
                for (var l = 0, ll = shouldSeeCount; l < ll; ++l) {
                    if (sorted.indexOf(ancestors[j][l]) >= 0) {
                        ++seenCount;
                    }
                }

                if (seenCount === shouldSeeCount) {
                    next = j;
                    break;
                }
            }
        }

        if (next !== null) {
            next = next.toString();         // Normalize to string TODO: replace with seq
            visited[next] = true;
            sorted.push(next);
        }
    }

    if (sorted.length !== this._items.length) {
        return new Error('Invalid dependencies');
    }

    var seqIndex = {};
    for (i = 0, il = this._items.length; i < il; ++i) {

        item = this._items[i];
        seqIndex[item.seq] = item;
    }

    var sortedNodes = [];
    this._items = sorted.map(function (value) {

        var sortedItem = seqIndex[value];
        sortedNodes.push(sortedItem.node);
        return sortedItem;
    });

    this.nodes = sortedNodes;
};


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 }
  , URL;

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @api public
 */
module.exports = function lolcation(loc) {
  loc = loc || global.location || {};
  URL = URL || __webpack_require__(93);

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new URL(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new URL(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

var v1 = __webpack_require__(516);
var v4 = __webpack_require__(517);

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;


/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

// Unique ID creation requires a high quality random # generator.  We feature
// detect to determine the best RNG source, normalizing to a function that
// returns 128-bits of randomness, since that's what's usually required
var rng = __webpack_require__(166);
var bytesToUuid = __webpack_require__(165);

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

// random #'s we need to init node and clockseq
var _seedBytes = rng();

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
var _nodeId = [
  _seedBytes[0] | 0x01,
  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
];

// Per 4.2.2, randomize (14 bit) clockseq
var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

// Previous uuid creation time
var _lastMSecs = 0, _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  var node = options.node || _nodeId;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(166);
var bytesToUuid = __webpack_require__(165);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {module.exports = exports = function waitUntil(interval, times, condition, cb) {
    if (typeof interval == 'undefined') {
        return new WaitUntil();
    } else {
        return new WaitUntil()
            .interval(interval)
            .times(times)
            .condition(condition)
            .done(cb);
    }
};

function WaitUntil() {
    var self = this;
}

WaitUntil.prototype.interval = function(_interval) {
    var self = this;

    self._interval = _interval;
    return self;
};

WaitUntil.prototype.times = function(_times) {
    var self = this;

    self._times = _times;
    return self;
};

WaitUntil.prototype.condition = function(_condition, cb) {
    var self = this;

    self._condition = _condition;
    if (cb) {
        return self.done(cb);
    } else {
        return self;
    }
};

WaitUntil.prototype.done = function(cb) {
    var self = this;

    if (!self._times) {
        throw new Error('waitUntil.times() not called yet');
    }
    if (!self._interval) {
        throw new Error('waitUntil.interval() not called yet');
    }
    if (!self._condition) {
        throw new Error('waitUntil.condition() not called yet');
    }

    (function runCheck(i, prevResult) {
        if (i == self._times) {
            cb(prevResult);
        } else {
            setTimeout(function() {
                function gotConditionResult(result) {
                    if (result) {
                        cb(result);
                    } else {
                        runCheck(i + 1, result);
                    }
                }

                if (self._condition.length) {
                    self._condition(gotConditionResult);
                } else {
                    // don't release Zalgo
                    process.nextTick(function() {
                        gotConditionResult(self._condition());
                    });
                }
            }, self._interval);
        }
    })(0);

    return self;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, create;

  create = __webpack_require__(7);

  module.exports = XMLAttribute = (function() {
    function XMLAttribute(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing attribute name of element " + parent.name);
      }
      if (value == null) {
        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
      }
      this.name = this.stringify.attName(name);
      this.value = this.stringify.attValue(value);
    }

    XMLAttribute.prototype.clone = function() {
      return create(XMLAttribute.prototype, this);
    };

    XMLAttribute.prototype.toString = function(options, level) {
      return ' ' + this.name + '="' + this.value + '"';
    };

    return XMLAttribute;

  })();

}).call(this);


/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;

  XMLStringifier = __webpack_require__(526);

  XMLDeclaration = __webpack_require__(169);

  XMLDocType = __webpack_require__(170);

  XMLElement = __webpack_require__(171);

  module.exports = XMLBuilder = (function() {
    function XMLBuilder(name, options) {
      var root, temp;
      if (name == null) {
        throw new Error("Root element needs a name");
      }
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.stringify = new XMLStringifier(options);
      temp = new XMLElement(this, 'doc');
      root = temp.element(name);
      root.isRoot = true;
      root.documentObject = this;
      this.rootObject = root;
      if (!options.headless) {
        root.declaration(options);
        if ((options.pubID != null) || (options.sysID != null)) {
          root.doctype(options);
        }
      }
    }

    XMLBuilder.prototype.root = function() {
      return this.rootObject;
    };

    XMLBuilder.prototype.end = function(options) {
      return this.toString(options);
    };

    XMLBuilder.prototype.toString = function(options) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      r = '';
      if (this.xmldec != null) {
        r += this.xmldec.toString(options);
      }
      if (this.doctype != null) {
        r += this.doctype.toString(options);
      }
      r += this.rootObject.toString(options);
      if (pretty && r.slice(-newline.length) === newline) {
        r = r.slice(0, -newline.length);
      }
      return r;
    };

    return XMLBuilder;

  })();

}).call(this);


/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDAttList, create;

  create = __webpack_require__(7);

  module.exports = XMLDTDAttList = (function() {
    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      this.stringify = parent.stringify;
      if (elementName == null) {
        throw new Error("Missing DTD element name");
      }
      if (attributeName == null) {
        throw new Error("Missing DTD attribute name");
      }
      if (!attributeType) {
        throw new Error("Missing DTD attribute type");
      }
      if (!defaultValueType) {
        throw new Error("Missing DTD attribute default");
      }
      if (defaultValueType.indexOf('#') !== 0) {
        defaultValueType = '#' + defaultValueType;
      }
      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
      }
      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
        throw new Error("Default value only applies to #FIXED or #DEFAULT");
      }
      this.elementName = this.stringify.eleName(elementName);
      this.attributeName = this.stringify.attName(attributeName);
      this.attributeType = this.stringify.dtdAttType(attributeType);
      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
      this.defaultValueType = defaultValueType;
    }

    XMLDTDAttList.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;
      if (this.defaultValueType !== '#DEFAULT') {
        r += ' ' + this.defaultValueType;
      }
      if (this.defaultValue) {
        r += ' "' + this.defaultValue + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDAttList;

  })();

}).call(this);


/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDElement, create;

  create = __webpack_require__(7);

  module.exports = XMLDTDElement = (function() {
    function XMLDTDElement(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing DTD element name");
      }
      if (!value) {
        value = '(#PCDATA)';
      }
      if (Array.isArray(value)) {
        value = '(' + value.join(',') + ')';
      }
      this.name = this.stringify.eleName(name);
      this.value = this.stringify.dtdElementValue(value);
    }

    XMLDTDElement.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDElement;

  })();

}).call(this);


/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDEntity, create, isObject;

  create = __webpack_require__(7);

  isObject = __webpack_require__(14);

  module.exports = XMLDTDEntity = (function() {
    function XMLDTDEntity(parent, pe, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing entity name");
      }
      if (value == null) {
        throw new Error("Missing entity value");
      }
      this.pe = !!pe;
      this.name = this.stringify.eleName(name);
      if (!isObject(value)) {
        this.value = this.stringify.dtdEntityValue(value);
      } else {
        if (!value.pubID && !value.sysID) {
          throw new Error("Public and/or system identifiers are required for an external entity");
        }
        if (value.pubID && !value.sysID) {
          throw new Error("System identifier is required for a public external entity");
        }
        if (value.pubID != null) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID != null) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
        if (value.nData != null) {
          this.nData = this.stringify.dtdNData(value.nData);
        }
        if (this.pe && this.nData) {
          throw new Error("Notation declaration is not allowed in a parameter entity");
        }
      }
    }

    XMLDTDEntity.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ENTITY';
      if (this.pe) {
        r += ' %';
      }
      r += ' ' + this.name;
      if (this.value) {
        r += ' "' + this.value + '"';
      } else {
        if (this.pubID && this.sysID) {
          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
        } else if (this.sysID) {
          r += ' SYSTEM "' + this.sysID + '"';
        }
        if (this.nData) {
          r += ' NDATA ' + this.nData;
        }
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDEntity;

  })();

}).call(this);


/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDNotation, create;

  create = __webpack_require__(7);

  module.exports = XMLDTDNotation = (function() {
    function XMLDTDNotation(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing notation name");
      }
      if (!value.pubID && !value.sysID) {
        throw new Error("Public or system identifiers are required for an external entity");
      }
      this.name = this.stringify.eleName(name);
      if (value.pubID != null) {
        this.pubID = this.stringify.dtdPubID(value.pubID);
      }
      if (value.sysID != null) {
        this.sysID = this.stringify.dtdSysID(value.sysID);
      }
    }

    XMLDTDNotation.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!NOTATION ' + this.name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.pubID) {
        r += ' PUBLIC "' + this.pubID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDNotation;

  })();

}).call(this);


/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLRaw, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(7);

  XMLNode = __webpack_require__(31);

  module.exports = XMLRaw = (function(superClass) {
    extend(XMLRaw, superClass);

    function XMLRaw(parent, text) {
      XMLRaw.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing raw text");
      }
      this.value = this.stringify.raw(text);
    }

    XMLRaw.prototype.clone = function() {
      return create(XMLRaw.prototype, this);
    };

    XMLRaw.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLRaw;

  })(XMLNode);

}).call(this);


/***/ }),
/* 526 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLStringifier,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  module.exports = XMLStringifier = (function() {
    function XMLStringifier(options) {
      this.assertLegalChar = bind(this.assertLegalChar, this);
      var key, ref, value;
      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
      this.noDoubleEncoding = options != null ? options.noDoubleEncoding : void 0;
      ref = (options != null ? options.stringify : void 0) || {};
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this[key] = value;
      }
    }

    XMLStringifier.prototype.eleName = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.eleText = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(this.elEscape(val));
    };

    XMLStringifier.prototype.cdata = function(val) {
      val = '' + val || '';
      if (val.match(/]]>/)) {
        throw new Error("Invalid CDATA text: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.comment = function(val) {
      val = '' + val || '';
      if (val.match(/--/)) {
        throw new Error("Comment text cannot contain double-hypen: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.raw = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attName = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attValue = function(val) {
      val = '' + val || '';
      return this.attEscape(val);
    };

    XMLStringifier.prototype.insTarget = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.insValue = function(val) {
      val = '' + val || '';
      if (val.match(/\?>/)) {
        throw new Error("Invalid processing instruction value: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlVersion = function(val) {
      val = '' + val || '';
      if (!val.match(/1\.[0-9]+/)) {
        throw new Error("Invalid version number: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlEncoding = function(val) {
      val = '' + val || '';
      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
        throw new Error("Invalid encoding: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlStandalone = function(val) {
      if (val) {
        return "yes";
      } else {
        return "no";
      }
    };

    XMLStringifier.prototype.dtdPubID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdSysID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdElementValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttType = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttDefault = function(val) {
      if (val != null) {
        return '' + val || '';
      } else {
        return val;
      }
    };

    XMLStringifier.prototype.dtdEntityValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdNData = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.convertAttKey = '@';

    XMLStringifier.prototype.convertPIKey = '?';

    XMLStringifier.prototype.convertTextKey = '#text';

    XMLStringifier.prototype.convertCDataKey = '#cdata';

    XMLStringifier.prototype.convertCommentKey = '#comment';

    XMLStringifier.prototype.convertRawKey = '#raw';

    XMLStringifier.prototype.assertLegalChar = function(str) {
      var chars, chr;
      if (this.allowSurrogateChars) {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
      } else {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
      }
      chr = str.match(chars);
      if (chr) {
        throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
      }
      return str;
    };

    XMLStringifier.prototype.elEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
    };

    XMLStringifier.prototype.attEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
    };

    return XMLStringifier;

  })();

}).call(this);


/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLText, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(7);

  XMLNode = __webpack_require__(31);

  module.exports = XMLText = (function(superClass) {
    extend(XMLText, superClass);

    function XMLText(parent, text) {
      XMLText.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing element text");
      }
      this.value = this.stringify.eleText(text);
    }

    XMLText.prototype.clone = function() {
      return create(XMLText.prototype, this);
    };

    XMLText.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLText;

  })(XMLNode);

}).call(this);


/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, assign;

  assign = __webpack_require__(472);

  XMLBuilder = __webpack_require__(520);

  module.exports.create = function(name, xmldec, doctype, options) {
    options = assign({}, xmldec, doctype, options);
    return new XMLBuilder(name, options).root();
  };

}).call(this);


/***/ }),
/* 529 */
/***/ (function(module, exports) {

module.exports = {
	"name": "deep-framework",
	"version": "1.12.18",
	"description": "DEEP Framework",
	"keywords": [
		"digital enterprise end-to-end platform",
		"amazon web services",
		"platform-as-a-service",
		"deep",
		"aws",
		"paas",
		"cloud",
		"computing",
		"microservices",
		"architecture",
		"serverless",
		"abstracted",
		"core",
		"library",
		"framework",
		"Framework"
	],
	"homepage": "https://github.com/MitocGroup/deep-framework",
	"bugs": {
		"url": "https://github.com/MitocGroup/deep-framework/issues"
	},
	"license": "MIT",
	"author": {
		"name": "Mitoc Group",
		"email": "hello@mitocgroup.com",
		"url": "http://www.mitocgroup.com"
	},
	"contributors": [
		{
			"name": "AlexanderC",
			"email": "alexanderc@mitocgroup.com"
		},
		{
			"name": "Marcel Goria",
			"email": "mgoria@mitocgroup.com"
		},
		{
			"name": "Veaceslav Cotruta",
			"email": "vcotruta@mitocgroup.com"
		},
		{
			"name": "Max Ponomariov",
			"email": "mponomariov@mitocgroup.com"
		},
		{
			"name": "Alexandru Scripnic",
			"email": "ascripnic@mitocgroup.com"
		},
		{
			"name": "Stefan Hariton",
			"email": "shariton@mitocgroup.com"
		},
		{
			"name": "Dragos Palade",
			"email": "dpalade@mitocgroup.com"
		}
	],
	"main": "lib.compiled/bootstrap.js",
	"repository": {
		"type": "git",
		"url": "https://github.com/MitocGroup/deep-framework.git"
	},
	"scripts": {
		"test": "bash node-bin/test.sh",
		"compile": "bash node-bin/compile.sh",
		"prepublish": "npm run compile && npm run browser-build",
		"browser-build": "bash node-bin/browser_build.sh",
		"pretest": "npm link deep-log deep-core deep-asset deep-cache deep-db deep-validation deep-di deep-event deep-fs deep-kernel deep-resource deep-security deep-notification babel-preset-es2015",
		"prepare-production": "bash hooks/prepare_production.sh",
		"final-prepare-production": "bash hooks/final_prepare_production.sh"
	},
	"dependencies": {
		"deep-asset": "^1.x.x",
		"deep-cache": "^1.x.x",
		"deep-core": "^1.x.x",
		"deep-db": "^1.x.x",
		"deep-di": "^1.x.x",
		"deep-event": "^1.x.x",
		"deep-fs": "^1.x.x",
		"deep-kernel": "^1.x.x",
		"deep-log": "^1.x.x",
		"deep-notification": "^1.x.x",
		"deep-resource": "^1.x.x",
		"deep-search": "^0.x.x",
		"deep-security": "^1.x.x",
		"deep-validation": "^1.x.x",
		"inherits": "^2.0.x"
	},
	"devDependencies": {
		"chai": "^3.5.x",
		"sinon": "^1.17.x",
		"sinon-chai": "^2.8.x"
	},
	"engines": {
		"node": ">=0.12",
		"npm": ">=2.10"
	},
	"preferGlobal": false,
	"analyze": true,
	"jspm": {
		"main": "browser/framework.js"
	}
};

/***/ }),
/* 530 */
/***/ (function(module, exports) {

module.exports = null;


/***/ }),
/* 531 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })
/******/ ]);